{"version":3,"file":"allianzSND-setting.js.map","sources":["ng://@allianzSND/setting/lib/service/setting-service.service.ts","ng://@allianzSND/setting/lib/injection-token.ts","ng://@allianzSND/setting/lib/components/setting/setting.component.ts","ng://@allianzSND/setting/lib/setting.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { APIDispatch, APIFactory, UpdateTimeListAPI, UnbindDeviceAPI, DeviceService } from '@allianzSND/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SettingComponentService {\n\n  constructor(private dispatcher: APIDispatch,\n    private APIFactory: APIFactory,\n    private deviceService: DeviceService\n  ) { }\n\n  getUpdateTimeList(): Observable<any> {\n\n    console.debug('getUpdateTimeList');\n\n    let updateTimeListAPI: UpdateTimeListAPI = <UpdateTimeListAPI>this.APIFactory.getAPI('getUpdateTimeList');\n    return Observable.create((observer) => {\n      this.dispatcher.dispatch(updateTimeListAPI).subscribe((data) => {\n        if (data['Header'].status) {\n\n          let returnData: Array<any> = [];\n          let orders = [\"Homepage\", \"Goal_Setting\", \"Customer\", \"Calendar\", \"Progress\"];\n          orders.forEach(x => {\n            returnData.push({\n              MainFunc: data['Body'].filter(y => y.MainFunc == x)[0].MainFunc,\n              BackendTime: data['Body'].filter(y => y.MainFunc == x)[0].BackendTime\n            })\n          });\n          observer.next(returnData);\n          observer.complete();\n        } else {\n          observer.next([]);\n          observer.complete();\n        }\n      });\n    });\n  }\n\n  public async unbindDevice(): Promise<any> {\n    let unbindDeviceAPI = <UnbindDeviceAPI>this.APIFactory.getAPI('unbindDevice');\n    unbindDeviceAPI.setDeviceID(this.deviceService.getDeviceUUID());\n    console.warn(\"this._getDeviceUUID(): \", this.deviceService.getDeviceUUID());\n    return this.dispatcher.dispatch(unbindDeviceAPI).toPromise();\n  }\n}\n","import { InjectionToken } from \"@angular/core\";\nimport { MetaController } from \"@allianzSND/core\";\n\nexport const settingMetaControllerToken = new InjectionToken<MetaController>(\"customerContactDetailMetaController\");\n","import { Component, OnInit, ChangeDetectorRef, Optional, Inject, ChangeDetectionStrategy } from '@angular/core';\nimport { changeFontSize, IFontSizeAccess, changeFontSizeToken, FontSizeAccessToken, ProfileCodeService, ProfileCode, Language, LanguageCode, DeviceService, TranslateService, SelectOption, MetaService, SettingService, FormMetaComponent, DefaultMetaParser, APIExecutor, MetaController, MetaColumn, ConfigToken, DaoFactory, SQLCommand, APPError } from '@allianzSND/core';\nimport { SettingComponentService } from '../../service/setting-service.service';\nimport { animationCollapse } from '@allianzSND/ui';\nimport { settingMetaControllerToken } from '../../injection-token';\nimport { NotificationUtils } from '@allianzSND/notification';\n// import * as XLSX from 'xlsx';\ndeclare var cordova;\n\n@Component({\n  selector: 'app-setting',\n  templateUrl: './setting.component.html',\n  styleUrls: ['./setting.component.scss'],\n  animations: [\n    animationCollapse\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SettingComponent extends FormMetaComponent implements OnInit {\n\n  constructor(\n    private translateService: TranslateService,\n    private deviceService: DeviceService,\n    private settingService: SettingService,\n    private settingComponentService: SettingComponentService,\n    private changeDetector: ChangeDetectorRef,\n    protected profileCodeService: ProfileCodeService,\n    metaParser: DefaultMetaParser,\n    metaExecutor: APIExecutor,\n    protected metaService: MetaService,\n    private daoFactory: DaoFactory,\n    private notificationUtils: NotificationUtils,\n    @Optional() @Inject(settingMetaControllerToken) private metaController: MetaController,\n    @Optional() @Inject(FontSizeAccessToken) private fontSizeAccess: IFontSizeAccess,\n    @Optional() @Inject(changeFontSizeToken) private changeFontSize: changeFontSize,\n    @Inject(ConfigToken) private APP_CONFIG: any,\n  ) {\n\n    super(metaService, profileCodeService, metaParser, metaExecutor);\n  }\n\n  //popup show \n  public isPopupSeeDetailOpen = false;\n  public isPopupOpenChangeLang = false;\n  public isPopupOpenChangeFontSize = false;\n  //collapse open or not\n  private isCollapseShow = false;\n  //style of collapse area\n  public styleCollapse: string;\n  // lang default option\n  private optionLangDefault = 'English';\n  public language: Language = new Language();\n  public appVersion: string;\n  public updateTimeList = [];\n  public languageAlert: string = '';\n  public fontSizeAlert: string = '';\n  public isDebug: boolean = false;\n  private optionFontSizeDefault: string = '1';\n  private fontSizeSetting: string = 'sm';\n\n  get rowConfig(): MetaColumn[][] {\n    return this.metaConfig.Rows;\n  }\n\n  get data() {\n    return this._data;\n  }\n\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.settingService.getDebugMode().subscribe(debug => {\n      this.isDebug = debug;\n    })\n\n    this.styleCollapse = this.isCollapseShow ? 'open' : 'closed';\n\n    this.deviceService.getAppVersion().then((version) => {\n      this.appVersion = version;\n    });\n\n    this.translateService.getUpdateSubject().subscribe(() => {\n      //update translate\n      this.getUpdateTimeList();\n      this.changeDetector.detectChanges();\n    });\n\n  }\n\n  btnClick(type: string, id: string) {\n    if (id === 'LastUpdatedTime')\n      this.onclickUpdateTime();\n\n    if (this.metaController)\n      this.metaController.btnClick(type, id, this._data);\n  }\n\n  onDataUpdated() {\n    super.onDataUpdated();\n    this._data[\"LanguageOption\"] = this.getLanguageList();\n    this.fontSizeAccess.getFontSizeCode().toPromise().then((resp) => {\n      this._data[\"FontSize\"] = resp;\n      this.optionFontSizeDefault = resp;\n      this.changeDetector.detectChanges();\n    })\n    console.log(\"setting Data updated:\", this._data);\n    this.optionLangDefault = this._data[\"Language\"];\n    if (this.metaController)\n      this.metaController.onDataUpdated(this._data);\n    this.changeDetector.detectChanges();\n  }\n\n  getMetaID() {\n    return \"setting\";\n  }\n\n  getMetaParams() {\n    return null;\n  }\n\n  onValidateAll() {\n    return true;\n  }\n\n  onValueChange(column: string, value: any, groupId: string, index: number) {\n    console.log(\"Setting ValueChange:\", column, value, this._data);\n    if (column === 'Language') {\n      this.onChangeLang(value);\n    }\n    else if (column === 'FontSize') {\n      this.onChangeFontSize(value);\n    }\n    if (this.metaController)\n      this.metaController.onValueChange(column, value, groupId, index, this._data, this.validationResult);\n  }\n\n\n  getLanguageList() {\n    // get languageType in SQLite and set default language\n    return this.translateService.getCodeArray().map(x => new SelectOption(x.getLanguageID, x.getName));\n  }\n\n  onclickUpdateTime() {\n    console.log('in on click update time');\n    this.isPopupSeeDetailOpen = !this.isPopupSeeDetailOpen;\n  }\n\n  //click collpase card\n  toggleCollapse() {\n    this.isCollapseShow = !this.isCollapseShow;\n    this.styleCollapse = this.isCollapseShow ? 'open' : 'closed';\n  }\n\n  //click to send email\n  onMailToClick(emailAddress: string) {\n    window.open('mailto:' + emailAddress + '?subject=å®è¯æ¸¬è©¦', '_system');\n  }\n\n  //click to open pdf\n  onPdfClick(pdfUrl: string) {\n    // cordova.plugins.SitewaertsDocumentViewer.viewDocument(cordova.file.applicationDirectory + pdfUrl, 'application/pdf', {})\n    if (this.deviceService.getDevicePlatform() == 'iOS') {\n      cordova.plugins.fileOpener2.open(\n        (cordova.file.applicationDirectory + pdfUrl),\n        'application/pdf',\n        {\n          error: function (e) {\n            console.log('Error status: ' + e.status + ' - Error message: ' + e.message);\n          },\n          success: function () {\n            console.log('file opened successfully');\n          }\n        }\n      );\n    } else {\n      (<any>window).resolveLocalFileSystemURL(cordova.file.applicationDirectory + pdfUrl, function (fileEntry) {\n\n        (<any>window).resolveLocalFileSystemURL(cordova.file.externalDataDirectory, function (dirEntry) {\n\n          fileEntry.copyTo(dirEntry, 'date.pdf', function (newFileEntry) {\n\n            cordova.plugins.fileOpener2.open(newFileEntry.nativeURL, 'application/pdf', {\n              error: function (e) {\n                console.log('Error status: ' + e.status + ' - Error message: ' + e.message);\n              },\n              success: function () {\n                console.log('file opened successfully');\n              }\n            });\n          });\n        });\n      });\n    }\n  }\n\n  //check if select language which different from default language\n  onChangeLang(option) {\n    if (option != this.optionLangDefault) {\n      this.languageAlert = this.translateService.translate('Language_Alert');\n      // if (option == 'en')\n      //   this.languageAlert = this.translateService.translate('English_Alert');\n      // if (option == 'zh_TW')\n      //   this.languageAlert = this.translateService.translate('Mandarin_Alert');\n      this.isPopupOpenChangeLang = true;\n    }\n  }\n\n  onChangeFontSize(option) {\n    if (option != this.optionFontSizeDefault) {\n      switch (option) {\n        case '1':\n          // this.fontSizeAlert = this.translateService.translate('Small_Alert');\n          this.fontSizeSetting = 'sm';\n          break;\n        case '2':\n          // this.fontSizeAlert = this.translateService.translate('Medium_Alert');\n          this.fontSizeSetting = 'md';\n          break;\n        case '3':\n          // this.fontSizeAlert = this.translateService.translate('Large_Alert');\n          this.fontSizeSetting = 'lg';\n          break;\n      }\n      this.fontSizeAlert = this.translateService.translate('Font_Size_Alert');\n      this.isPopupOpenChangeFontSize = true;\n    }\n  }\n\n  // lang change popup\n  onLanguageAlertCancel() {\n    this._data[\"Language\"] = this.optionLangDefault;\n  }\n\n\n  // confirm to change language\n  onLanguageAlertConfirm() {\n    this.updateLanguage(this._data[\"Language\"]);\n    this.optionLangDefault = this._data[\"Language\"];\n  }\n\n  // lang change popup\n  onFontSizeAlertCancel() {\n    this._data[\"FontSize\"] = this.optionFontSizeDefault;\n  }\n\n  // confirm to change language\n  onFontSizeAlertConfirm() {\n    this.updateFontSize();\n    this.optionFontSizeDefault = this._data[\"FontSize\"];\n  }\n\n  // update language\n  updateLanguage(option) {\n    this.translateService.updateLanguage(option).subscribe(data => {\n\n      if (data['Header'].status) {\n        this.profileCodeService._fetchCodeData().subscribe(data => {\n          this.updateFontSizeOption();\n        });\n        // this.deviceService.restartApp();\n      }\n    });\n  }\n\n  updateFontSize() {\n    if (this.changeFontSize) {\n      return this.changeFontSize.updateFontSize(this.fontSizeSetting);\n    }\n  }\n\n  // load updateTime\n  getUpdateTimeList() {\n    this.settingComponentService.getUpdateTimeList().subscribe(data => {\n      console.warn('getUpdateTimeList', data);\n      this.updateTimeList = data.map(x => {\n        return {\n          FuncID: this.translateService.translate(x.MainFunc),\n          BackendTime: new Date(x.BackendTime)\n        }\n      });\n    });\n  }\n\n  updateFontSizeOption() {\n    this._data[\"FontSizeOption\"] = this.profileCodeService.getCodeArray(\"Font_Size\")\n      .map(x => new SelectOption(x.getCode(), x.displayText));\n    this.changeDetector.detectChanges();\n  }\n\n  changeDebugMode(val) {\n    console.log(\"changeDebugMode:\", val);\n    this.settingService.setDebugMode(val);\n  }\n\n  async onClickCleanDeviceBtn() {\n    let confirmResult = confirm(\"Are you sure you want to unbind device (can NOT undo) ? \");\n    if (confirmResult) {\n      try {\n        if (this.notificationUtils.checkNetworkBeforeAction()) {\n          // online \n          console.warn(\"do deviceService.unbindDevice\");\n          let resp = await this.settingComponentService.unbindDevice();\n          console.warn(\"unbindDevice resp: \", resp);\n          if (resp.success) {\n            await this._clearDeviceData();\n            this.deviceService.restartApp();\n          }\n        }\n      } catch (error) {\n        throw new APPError(\"F00901\", \"unbindDeviceAPI fail: \" + error);\n      }\n    }\n  }\n\n  private async _clearDeviceData(): Promise<any> {\n    try {\n      this._initLocalStorage();\n      let env = this.APP_CONFIG.ENV;\n      if (env !== 'DEV') {\n        await this._clearDatabase();\n      };\n    } catch (error) {\n      throw new APPError('F00902', 'clearSqliteDB fail: ' + error);\n    }\n\n  }\n\n  private async _clearDatabase(): Promise<any> {\n\n    let env = this.APP_CONFIG.ENV;\n    let db_config = this.APP_CONFIG[env].DATABASE;\n    let db_names = Object.keys(db_config);\n    for (var name of db_names) {\n      // console.log('db_names be delete:', name);\n      let dao = this.daoFactory.getDao(name);\n\n      let returnMap = await dao.getSchema().toPromise();\n\n      let SqlCommandArray = [];\n\n      returnMap.forEach(value => {\n\n        let command: string = value.tableName.includes('TW_LH_SD_VW_') ? 'DROP VIEW IF EXISTS ' : 'DROP TABLE IF EXISTS ';\n        SqlCommandArray.push(new SQLCommand(command + value.tableName, []));\n      });\n\n      await dao.excuteSqlCommand(SqlCommandArray).toPromise();\n\n    }\n\n  }\n\n  private _initLocalStorage() {\n    let MainDBKey = window.localStorage.getItem('Main');\n    let ProfileDBKey = window.localStorage.getItem('Profile');\n    window.localStorage.clear();\n    window.localStorage.setItem('Main', MainDBKey);\n    window.localStorage.setItem('Profile', ProfileDBKey);\n  }\n\n\n  // start of upload language\n  // private readonly storageKeyName: string = 'LanguageJSON';\n  // private jsonText: string = '';\n  // public file: File = null;;\n  // public incomingfile(event) {\n  //   this.file = event.target.files[0];\n  // }\n  // public uploadLanguage() {\n  //   if (this.file) {\n  //     this.uploadFile();\n  //   }\n  //   else {\n  //     alert('Empty File.');\n  //   }\n  // }\n  // public resetLanguage() {\n  //   window.localStorage.removeItem(this.storageKeyName);\n  //   this.translateService.loadJson().then(() => {\n  //     this.onLanguageAlertConfirm();\n  //     alert('reset success');\n  //   });\n  // }\n\n  // uploadFile(): Promise<any> {\n\n  //   return new Promise((res, rej) => {\n  //     let workBook = null;\n  //     let jsonData: Array<any> = [];\n  //     const reader = new FileReader();\n  //     // const file = ev.target.files[0];\n  //     reader.onload = (event) => {\n  //       const data = reader.result;\n  //       try {\n  //         workBook = XLSX.read(data, { type: 'binary' });\n  //         // console.warn('workBook.SheetNames: ',workBook.SheetNames);\n\n  //         (<Array<string>>workBook.SheetNames).forEach(sheetName => {\n  //           let targetSheet = workBook.Sheets[sheetName];\n  //           // console.warn(sheetName, ' ', XLSX.utils.sheet_to_json(targetSheet, { header: 1 }))\n  //           jsonData = [...jsonData, XLSX.utils.sheet_to_json(targetSheet, { header: 1 })];\n  //         })\n  //         // let targetSheet = workBook.Sheets[workBook.SheetNames[0]];\n\n  //         // jsonData = XLSX.utils.sheet_to_json(targetSheet, { header: 1 });\n  //         jsonData = [].concat.apply([], jsonData)\n  //         console.warn(\"json data: \", jsonData);\n  //         this.jsonText = this._parseSheetJsonToLanguage(jsonData);\n  //         window.localStorage.setItem(this.storageKeyName, this.jsonText);\n  //         this.translateService.loadJson().then(() => {\n  //           // this.changeDetector.detectChanges();\n  //           this.onLanguageAlertConfirm();\n  //           alert('Upload Success.');\n  //           res();\n  //         });\n  //       }\n  //       catch (error) {\n  //         console.error(error);\n  //         alert('Upload Fail.');\n  //         rej();\n  //       }\n\n  //     }\n  //     reader.readAsBinaryString(this.file);\n  //   })\n\n  // }\n\n\n  // private _parseSheetJsonToLanguage(json: Array<any>): string {\n  //   let targetLanguage: Array<string> = ['zh_TW', 'TH', 'en'];\n  //   let languageObj = {};\n\n  //   (<Array<any>>json).forEach(col => {\n  //     let languageType: string = col[0];\n  //     if (languageType && targetLanguage.reduce((total, each) => total || each === languageType, false)) {\n  //       let mappingID: string = col[1];\n  //       let value: string = col[2] ? col[2] : '';\n  //       if (!languageObj[languageType]) {\n  //         languageObj[languageType] = {};\n  //       }\n  //       languageObj[languageType][mappingID] = value;\n  //     }\n  //   });\n\n  //   // console.warn(languageObj)\n  //   return JSON.stringify(languageObj, null, \"\\t\");\n\n  // }\n  // end of upload language\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CoreModule } from '@allianzSND/core';\nimport { UIModule } from '@allianzSND/ui';\nimport { SettingComponent } from './components/setting/setting.component';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CoreModule,\n    UIModule\n  ],\n  declarations: [SettingComponent],\n  exports: [SettingComponent]\n})\nexport class SettingModule { }\n"],"names":["APIFactory"],"mappings":"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"}
