import { APIFactory, APIDispatch, ProfileCodeService, ContactItem, PageInfo, ValidationResult, DateUtils } from '@allianzSND/core';
import { Observable } from 'rxjs';
import { CustomerDetail } from './model/CustomerDetail';
import { CustomerContactNote } from './model/CustomerContactNote';
import { CustomerItem } from './model/CustomerItem';
import { CustomerAlertItem } from './model/CustomerAlertItem';
import { CustomerTel } from './model/CustomerTel';
import { CustomerFilterCriteria } from '../components/bean/customer-filter-criteria';
import { CustomerFilterPreset } from '../components/bean/customer-filter-preset';
import { CustomerDetailResult } from '../components/bean/customer-detail-result';
import { CustomerBirthday } from './model/CustomerBirthday';
export declare class CustomerService {
    private dispatcher;
    private dateUtils;
    private APIFactory;
    private profileCodeService;
    private _isFirstTime;
    private _profileResult;
    constructor(dispatcher: APIDispatch, dateUtils: DateUtils, APIFactory: APIFactory, profileCodeService: ProfileCodeService);
    isFirstTime(): boolean;
    profileResult: CustomerDetailResult;
    updateMessageToRead(messageType: string, messageDataCategory: string): Observable<any>;
    getOverTimeCustomerList(clientID: any): Observable<Array<CustomerAlertItem>>;
    getAutoDeleteCustomerList(clientID: any): Observable<Array<CustomerAlertItem>>;
    updateCustomerFollowStatus(clientID: any, isFollow: any): Observable<any>;
    getFilterCriteriaPreset(): Observable<CustomerFilterPreset>;
    saveFilterCriteria(filterCriteria: CustomerFilterCriteria): Observable<any>;
    checkInFilterCriteria(clientID: string, filterCriteria: CustomerFilterCriteria): Observable<boolean>;
    getCustomerList(filterCriteria: CustomerFilterCriteria, _pageInfo: PageInfo): Observable<Array<CustomerItem>>;
    getCustomerBirthdayList(targetDate: any, subN: any, addN: any): Observable<Array<CustomerBirthday>>;
    convertCustomerDetailDisplayMode(customer: CustomerDetail): void;
    getCustomerDetail(clientID: string): Observable<CustomerDetail>;
    importContact(items: Array<ContactItem>): Observable<string>;
    validProfile(customerDetail: CustomerDetail): ValidationResult;
    private isEmailFormat;
    saveCustomerDetail(customerDetail: CustomerDetail): Observable<any>;
    deleteCustomerProfile(clientID: string): Observable<any>;
    getCustomerContactNote(clientID: string, pageInfo: PageInfo): Observable<Array<CustomerContactNote>>;
    addCustomerContact(clientID: string, customerClientID: string, note: string, noteTime: Date): Observable<any>;
    editCustomerContact(contactClientID: string, note: string, noteTime: Date): Observable<string>;
    deleteCustomerContact(contactClientID: string): Observable<any>;
    getCustomerContactTel(clientID: string): Observable<Array<CustomerTel>>;
}
