import { OnInit, ChangeDetectorRef, TemplateRef, EventEmitter, OnDestroy } from '@angular/core';
import { ExtensionService, Language, DateUtils, PageInfo, DeviceService, ProfileCode, ProfileCodeService, TranslateService, ContactItem } from '@allianzSND/core';
import { CalendarService, CalendarEventDetail } from '@allianzSND/calendar';
import { CustomerService } from '../../service/customer-service.service';
import { CustomerTel } from '../../service/model/CustomerTel';
import { CustomerFilterCriteria } from '../bean/customer-filter-criteria';
import { CustomerAlertItem } from '../../service/model/CustomerAlertItem';
import { CustomerDetail } from '../../service/model/CustomerDetail';
import { CustomerItem } from '../../service/model/CustomerItem';
import { CustomerContactNote } from '../../service/model/CustomerContactNote';
import { CustomerImportGroup } from '../bean/customer-import-group';
import { syncCustomer } from '../../interface';
import { storeCustomer } from '../../interface/storeCustomer.interface';
import { customerAction } from '../../interface/customerAction.interface';
import { CustomerUtils } from '../../utils/customer-utils';
import { Subject } from 'rxjs';
export declare class CustomersComponent implements OnInit, OnDestroy {
    private customerService;
    private calendarService;
    private translateService;
    private changeDetector;
    private deviceService;
    private dateUtils;
    private profileCodeService;
    private extensionService;
    private customerUtils;
    private customerStore;
    private customerSync;
    private customerAction;
    calendarEditComponent: any;
    viewTypeIndex: number;
    viewType: string;
    viewDate: Date;
    weekStartsOn: number;
    isShow: boolean;
    isExpandDetail: boolean;
    isRefreshDetail: boolean;
    isSaveClick: boolean;
    language: Language;
    isOpen: boolean;
    classSearch: string;
    isDisplayImportSavePopup: boolean;
    isDisplaySavePopup: boolean;
    isDisplayDelCustomerPopup: boolean;
    isDisplayConfirmAlertPopup: boolean;
    isDisplayInfoAlertPopup: boolean;
    isDisplayUpdateRemind: boolean;
    isDisplayDeleteRemind: boolean;
    isPopupImport: boolean;
    isPopupFilter: boolean;
    isExpandEdit: boolean;
    isPopupCallPhone: boolean;
    isPopupNoteDetail: boolean;
    isPopupEditNote: boolean;
    isPopupDeleteNote: boolean;
    isPopupConfirmDisable: boolean;
    isDisplayDeletePopup: boolean;
    alertOverTimeList: CustomerAlertItem[];
    alertAutoDeleteCustomer: CustomerAlertItem[];
    private _confirmAction;
    isLoadingFinishContent: boolean;
    isLazyLoading: boolean;
    callPhoneTelArray: Array<CustomerTel>;
    customerContactDetail: CustomerContactNote;
    customerContactList: Array<CustomerContactNote>;
    contactListPageInfo: PageInfo;
    calendarEventDetail: CalendarEventDetail;
    viewDateCalendarEventList: Array<CalendarEventDetail>;
    customerList: CustomerItem[];
    clickItem: CustomerItem;
    customerListPageInfo: PageInfo;
    filterCriteria: CustomerFilterCriteria;
    filterType: string;
    optionMap: Map<string, Array<ProfileCode>>;
    translateMap: Map<string, string>;
    private dayTypesList;
    private noSchedule;
    activityTypeList: Array<ProfileCode>;
    alertTypeList: Array<ProfileCode>;
    importContractMap: Map<string, CustomerImportGroup>;
    mobileResultSize: number;
    importData: boolean;
    importContactList: Array<ContactItem>;
    isLoadCriteria: boolean;
    isClearCriteria: boolean;
    _onImportResult: boolean;
    private noteEditClientID;
    noteCurrentTime: Date;
    noteMessage: string;
    private noteClientID;
    isRefreshContactList: boolean;
    loadContactList: boolean;
    classBarMove: string;
    private _reloadData;
    customerDetail: CustomerDetail;
    private currentCustomer;
    private customerState;
    private pre_criteria;
    private pre_customerList;
    private criteriaChanges;
    private customerDetailChanges;
    private stateChanges;
    private customerListChanges;
    clearSubject: Subject<{}>;
    saveFilterSubject: Subject<{}>;
    detailPreTemplate: TemplateRef<any>;
    detailPostTemplate: TemplateRef<any>;
    detailModel: EventEmitter<CustomerDetail>;
    constructor(customerService: CustomerService, calendarService: CalendarService, translateService: TranslateService, changeDetector: ChangeDetectorRef, deviceService: DeviceService, dateUtils: DateUtils, profileCodeService: ProfileCodeService, extensionService: ExtensionService, customerUtils: CustomerUtils, customerStore: storeCustomer, customerSync: syncCustomer, customerAction: customerAction);
    ngOnDestroy(): void;
    ngOnInit(): void;
    refreshCustomerList(isAppend: boolean): void;
    refreshContactNote(isAppend: boolean): void;
    onGetCustomerContactListByID(clientID: any): void;
    _checkIsInfoAlertTime(timerObj: any): void;
    onGetCustomerDetailByID(clientID: any): void;
    toggleSearch(): void;
    searchCustomerName(name: any): void;
    trackByFn(index: any, item: any): any;
    onChangeCustomer(customerItem: CustomerItem): void;
    onCustomerLoad(): void;
    onCustomerRefresh(): void;
    deleteCustomer(customerClientID: string): void;
    doDeleteCustomer(): void;
    addAppointment(customerClientID: string): void;
    onClickAppointmentSave(): void;
    onToggleAppointmentModal(val: any): void;
    onSaveCalendarEvent(calendarEventDetail: CalendarEventDetail): void;
    addCustomer(): void;
    editCustomer(customerClientID: string): void;
    detailChange(customerDetail: CustomerDetail): void;
    followChange(obj: any): void;
    addNote(): void;
    editNote(note: CustomerContactNote): void;
    displayNote(note: CustomerContactNote): void;
    deleteNote(note: CustomerContactNote): void;
    doDeleteContact(): void;
    onSaveNote(event: any): void;
    showConfirmPopup(action: any, optionArray: any): void;
    confirmPopup(): void;
    detectScroll(isBtm: any): void;
    import(): void;
    displayImportPopup(isShow: boolean): void;
    refreshImport(keyword: any): void;
    doImport(): void;
    onImportCustomer(importItems: any): void;
    callCustomer(customerClientID: string): void;
    cancelCallPhone(): void;
    callPhone(telNumber: string): void;
    filter(): void;
    clearFilter(): void;
    doFilter(): void;
    doneCriteria(criteria: CustomerFilterCriteria): void;
    loadPresetCriteria(): Promise<{}>;
    cancelDelete(): void;
    refreshContent(): void;
    loadContent(event: any): void;
    contactRefreshDone(val: any): void;
    isShowChange(val: any): void;
    toNoteTime(time: Date): string;
}
