{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@allianzSND/customer/lib/service/model/CustomerDetail.ts","ng://@allianzSND/customer/lib/service/model/CustomerContactNote.ts","ng://@allianzSND/customer/lib/service/model/CustomerItem.ts","ng://@allianzSND/customer/lib/service/model/CustomerAlertItem.ts","ng://@allianzSND/customer/lib/service/model/CustomerAddress.ts","ng://@allianzSND/customer/lib/service/model/CustomerEmail.ts","ng://@allianzSND/customer/lib/service/model/CustomerTel.ts","ng://@allianzSND/customer/lib/service/model/CustomerBirthday.ts","ng://@allianzSND/customer/lib/service/customer-service.service.ts","ng://@allianzSND/customer/lib/components/bean/customer-filter-preset.ts","ng://@allianzSND/customer/lib/components/bean/customer-filter-criteria.ts","ng://@allianzSND/customer/lib/components/bean/customer-confirm-action.ts","ng://@allianzSND/customer/lib/components/bean/customer-import-group.ts","ng://@allianzSND/customer/lib/injectionToken/injection-token.ts","ng://@allianzSND/customer/lib/interface/storeCustomer.interface.ts","ng://@allianzSND/customer/lib/utils/customer-utils.ts","ng://@allianzSND/customer/lib/components/customers/customers.component.ts","ng://@allianzSND/customer/lib/components/bean/customer-detail-result.ts","ng://@allianzSND/customer/lib/components/customer-edit/customer-edit.component.ts","ng://@allianzSND/customer/lib/components/customer-list/customer-list.component.ts","ng://@allianzSND/customer/lib/components/customer-detail/customer-detail.component.ts","ng://@allianzSND/customer/lib/components/customer-contact-list/customer-contact-list.component.ts","ng://@allianzSND/customer/lib/components/customer-filter/customer-filter.component.ts","ng://@allianzSND/customer/lib/components/customer-import/customer-import.component.ts","ng://@allianzSND/customer/lib/customers.module.ts","ng://@allianzSND/customer/lib/service/model/CustomerList.ts","ng://@allianzSND/customer/lib/service/model/MobileCustomerItem.ts","ng://@allianzSND/customer/lib/service/model/MobileCustomerList.ts","ng://@allianzSND/customer/lib/api/CustomerAddContactNote.ts","ng://@allianzSND/customer/lib/api/CustomerAutoDeleteAPI.ts","ng://@allianzSND/customer/lib/api/CustomerContactNoteAPI.ts","ng://@allianzSND/customer/lib/api/CustomerDeleteAPI.ts","ng://@allianzSND/customer/lib/api/CustomerDeleteContactNote.ts","ng://@allianzSND/customer/lib/api/CustomerDetailAPI.ts","ng://@allianzSND/customer/lib/api/CustomerEditContactNote.ts","ng://@allianzSND/customer/lib/api/CustomerEditOvertimeAPI.ts","ng://@allianzSND/customer/lib/api/CustomerGetePresetAPI.ts","ng://@allianzSND/customer/lib/api/CustomerListAPI.ts","ng://@allianzSND/customer/lib/api/CustomerSaveDetailAPI.ts","ng://@allianzSND/customer/lib/api/CustomerSavePresetAPI.ts","ng://@allianzSND/customer/lib/api/CustomerTelAPI.ts","ng://@allianzSND/customer/lib/api/CustomerUpdateFollowAPI.ts","ng://@allianzSND/customer/lib/api/ImportContactAPI.ts","ng://@allianzSND/customer/lib/api/CustomerBirthdayListAPI.ts","ng://@allianzSND/customer/lib/api/DashboardUpdateToReadAPI.ts"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","this","n","v","op","TypeError","call","pop","length","push","__values","o","m","i","__read","r","ar","error","__spread","arguments","concat","CustomerDetail","_emails","Array","_tels","_addresses","StringUtils","isEmpty","firstName","occupation","company","ageRange","undefined","gender","income","source","marriage","children","familiarity","recentStatus","manpa","contactFrequancy","_contactFrequancy","possibility","clientID","updateEmptyStatus","Object","defineProperty","prototype","_dataSource","dataSource","_clientID","_lastName","lastName","_firstName","tels","emails","addresses","_birthday","birthday","_ageRange","_gender","_occupation","_company","_income","_source","_marriage","_children","_familiarity","_recentStatus","_manpa","_possibility","_isFollow","isFollow","_isEmptyInfo","isEmptyInfo","updateFollowStatus","addEmail","email","addTel","tel","addAddress","address","deleteTel","index","splice","deleteEmail","deleteAddress","slice","notOPUSTelNumber","count","CustomerContactNote","date","noteMessage","getClientID","CustomerItem","complementPercent","isOtherSource","isOverTimeAlert","_tag","_complementPercent","_isOtherSource","_isHighlight","name","tag","isHighLight","_showName","showName","CustomerAlertItem","_name","CustomerAddress","addressType","country","city","area","zipcode","dataSorce","toFullAddress","array","isNotEmpty","join","CustomerEmail","_emailType","_email","emailType","CustomerTel","telType","CustomerBirthday","birthdayMonth","birthdayDate","CustomerService","dispatcher","dateUtils","APIFactory","profileCodeService","_isFirstTime","isFirstTime","_profileResult","updateMessageToRead","messageType","messageDataCategory","_this","dashboardUpdateToReadAPI","getAPI","setMessageType","setMessageDataCategory","Observable","create","observer","dispatch","subscribe","data","console","debug","complete","getOverTimeCustomerList","customerOverTimeAPI","setClientID","returnList","messages","message","customerList","JSON","parse","j","event_1","id","getAutoDeleteCustomerList","customerDeleteAPI","log","event_2","updateCustomerFollowStatus","setClient","setIsFollow","getFilterCriteriaPreset","getFilterCriteria","preset","settingArray","SettingVal","saveFilterCriteria","filterCriteria","setFilterCriteria","checkInFilterCriteria","customerListAPI","getCustomerList","_pageInfo","pageInfo","json","isOtherSystem","DataSource","IsFollow","completeness","Completeness","IsOverTimeAlert","event_3","ClientID","FirstName","LastName","Possibility","getCustomerBirthdayList","targetDate","subN","addN","customerBirthdayListAPI","birthdayList","event_4","convertCustomerDetailDisplayMode","customer","convertCode2Text","forEach","getCustomerDetail","customerDetailAPI_1","AgeRange","Gender","Income","Source","Marriage","Children","Familiarity","RecentStatus","MANPA","ContactFrequancy","BirthdayYear","BirthdayMonth","BirthdayDate","Date","Number","customerDetail","Occupation","Company","map","TelType","Tel","element","EmailType","Email","AddressType","Country","City","Area","Zipcode","Address","importContact","items","importContactAPI","setItems","validProfile","validationResult","ValidationResult","setErrorMap","isEmailFormat","RegExp","test","saveCustomerDetail","saveCustomerDetailAPI","setDetail","subject","deleteCustomerProfile","deleteAPI","getCustomerContactNote","customerContactNoteAPI","setPageInfo","returnCustomerContactNote","customerContactNoteList","user","NoteTime","Note","addCustomerContact","customerClientID","note","noteTime","addCustomerContactAPI","setCustomerClientID","setNote","setNoteTime","editCustomerContact","contactClientID","editCustomerContactAPI","setContactClientID","deleteCustomerContact","deleteCustomerContactAPI","getCustomerContactTel","customerTelAPI","returnCustomerTel","Injectable","args","providedIn","APIDispatch","DateUtils","ProfileCodeService","CustomerFilterPreset","addValues","column","values","CustomerFilterCriteria","keyword","filterMap","savePreset","Map","_savePreset","_keyword","addCriteria","filterCol","get","includes","set","addCriteriaCols","hasCriteria","size","isSave","getFilterMap","toPresetJSON","CustomerConfirmAction","_action","action","_optionObj","option","CustomerImportGroup","groupName","_isShow","_items","_groupName","addItem","item","isShow","syncCustomerToken","InjectionToken","storeCustomerToken","customerActionToken","showCustomerRuleToken","DISPLAY","EDIT","ADD_SAVED","EDIT_SAVED","FIRST","CustomerUtils","setCode2Option","codeArray","options","codeArray_1","tslib_1.__values","codeArray_1_1","code","SelectOption","getCode","displayText","countCompletenessByProfile","countColumnName","Math","round","countCompleteness","customerObj","telArraySize","emailArraySize","addressAddressSize","countColumnName_1","countColumnName_1_1","columnName","getValue","setValue","setCustomerDefaultValue","dataObject","age","countAge","countAgeRange","rangeResult","getCodeArray","profileCode","getArguments","obj","start","end","dates","calCEIntervalDays","floor","calRocIntervalDays","sDate","eDate","leftPad","begDateStr","substring","endDateStr","begDate","interval","getTime","msecPerHour","differenceInCalendarDays","val","padLen","padVal","toString","CustomersComponent","customerService","calendarService","translateService","changeDetector","deviceService","extensionService","customerUtils","customerStore","customerSync","customerAction","viewTypeIndex","viewDate","weekStartsOn","isExpandDetail","isRefreshDetail","isSaveClick","language","Language","isOpen","classSearch","isDisplayImportSavePopup","isDisplaySavePopup","isDisplayDelCustomerPopup","isDisplayConfirmAlertPopup","isDisplayInfoAlertPopup","isDisplayUpdateRemind","isDisplayDeleteRemind","isPopupImport","isPopupFilter","isExpandEdit","isPopupCallPhone","isPopupNoteDetail","isPopupEditNote","isPopupDeleteNote","isPopupConfirmDisable","isDisplayDeletePopup","alertOverTimeList","alertAutoDeleteCustomer","_confirmAction","isLoadingFinishContent","isLazyLoading","customerContactList","contactListPageInfo","PageInfo","viewDateCalendarEventList","customerListPageInfo","filterType","optionMap","translateMap","dayTypesList","noSchedule","activityTypeList","alertTypeList","importContractMap","mobileResultSize","importData","importContactList","isLoadCriteria","isClearCriteria","_onImportResult","noteCurrentTime","noteClientID","isRefreshContactList","loadContactList","classBarMove","_reloadData","currentCustomer","customerState","CUSTOMER_STATE","pre_criteria","clearSubject","Subject","saveFilterSubject","detailModel","EventEmitter","ngOnDestroy","criteriaChanges","unsubscribe","customerDetailChanges","stateChanges","customerListChanges","ngOnInit","_this_1","dayType","translate","getCriteria","criteria","getCurrentCustomerDetail","detail","list","pre_customerList","getState","state","setCustomerList","onGetCustomerDetailByID","refreshContactNote","refreshCustomerList","loadPresetCriteria","setState","timerObj","getConfigValue","_checkIsInfoAlertTime","isAppend","resetPage","onGetCustomerContactListByID","infoAlertDateRange","DateRange","infoAlertTimeRange","TimeRange","now","getMonth","getDate","getHours","month","parseInt","toggleSearch","setCriteria","searchCustomerName","trackByFn","onChangeCustomer","customerItem","clickItem","onCustomerLoad","nextPage","onCustomerRefresh","sync","resp","deleteCustomer","doDeleteCustomer","filter","x","status","addAppointment","currentTime","getYear","getMinutes","addMinutes","addHours","calendarEventDetail","CalendarEventDetail","queryDate","getCalendarEventList","subMinutes","addDays","onToggleAppointmentModal","onClickAppointmentSave","onSaveCalendarEvent","addCalendarEvent","addCustomer","setCurrentCustomerDetail","afterCustomerEdit","editCustomer","detailChange","emit","followChange","addNote","editNote","noteEditClientID","displayNote","customerContactDetail","deleteNote","doDeleteContact","onSaveNote","event","alert","showConfirmPopup","optionArray","confirmPopup","import","detectScroll","isBtm","searchContactsByName","importList","clear","lastname","firstname","firstWord","toLowerCase","group","displayImportPopup","refreshImport","getItems","indexOf","doImport","stringify","onImportCustomer","importItems","callCustomer","callPhoneTelArray","callPhone","cancelCallPhone","telNumber","window","open","setTimeout","fun","clearFilter","doFilter","doneCriteria","res","cancelDelete","refreshContent","loadContent","contactRefreshDone","isShowChange","toNoteTime","time","toDateString","Component","selector","template","animations","trigger","style","width","opacity","transition","animate","CalendarService","TranslateService","ChangeDetectorRef","DeviceService","ExtensionService","Optional","type","Inject","ViewChild","CalendarEditComponent","Input","Output","CustomerDetailResult","_detailSaveSuccess","isSuccess","_editDetail","CustomerEditComponent","customCustomerAction","sendContentHeight","editModel","pageTitle","optionTel","optionAddress","optionEmail","optionAge","optionGender","optionIncome","optionSource","optionMarriage","optionChildren","optionFamiliarity","optionRecentStatus","optionManpa","optionContactFrequancyPerYear","disableAge","btnSaveDisable","_telLimit","_emailLimit","_addressLimit","edit_type","telCodeArray","emailCodeArray","addressCodeArray","ageCodeArray","genderCodeArray","incomeCodeArray","sourceCodeArray","marriageCodeArray","childrenCodeArray","familiarityCodeArray","recentStatusCodeArray","manpaCodeArray","contactFrequancyCodeArray","detectChanges","validationForm","scrollToError","saveProfile","isTrue","tmpTelArray_1","tmpEmailArray_1","tmpAddressArray_1","detailSaveSuccess","editDetail","profileResult","afterCustomerEditSave","ngAfterViewInit","contentHeight","content","nativeElement","offsetHeight","getTelLimit","getEmailLimit","getAddressLimit","onAddTelGroup","onAddMailGroup","onAddAddressGroup","onRemoveTelGroup","onRemoveEmailGroup","onRemoveAddressGroup","errorBlock","document","getElementsByClassName","parentElement","scrollIntoView","behavior","block","CustomerListComponent","changeDetecor","elementRef","showCustomerRule","isDefaultData","showSearchNoData","loadingFinish","customerClick","customerLoad","customerRefresh","_customerList","convertNameToShow","_filterType","trackByClientID","closeSlidingItems","querySelector","close","_a","closeOpened","onClickCustomer","onClickCustomerID","loadCustomer","refreshCustomer","convertName","ElementRef","CustomerDetailComponent","changeDetctor","onEditDetail","onCallPhone","onDeleteDetail","onAddAppointment","_customerDetail","isEmptyAppointment","isEmptyEdit","isEmptyDel","isEmptyDetailInfo","isEmptyContactNote","isCollapseBtnShow","isHasAgeRange","isHasContactFrequancy","inputCustomerDetail","convertEmptyValToDisplayText","checkInfoIsEmpty","changeCollateButton","toBirthday","edit","delete","isFollowChange","CustomerContactListComponent","onAddNote","onDisplayNote","onEditNote","onDeleteNote","contactListRefresh","_contactList","contactList","decorators","CustomerFilterComponent","isAsPresent","filterColumnMap","_criteria","refreshFilterMap","customerType","customerDataSource","contactFrequency","clearCriteria","save","saveCriteria","onClick","_resetFilter","array_1","array_1_1","isCheck","_addDefaultChecked","defaultArray","array_2","array_2_1","_addCriteria","criteriaColumn","array_3","array_3_1","_addFilterMap","has","CustomerImportComponent","importCustomer","CustomersModule","NgModule","imports","CommonModule","NxFormfieldModule","NxDropdownModule","NxRadioModule","NxInputModule","NxMessageModule","NxDatefieldModule","NxNativeDateModule","NxProgressbarModule","NxModalModule","NxAccordionModule","NxGridModule","FormsModule","ReactiveFormsModule","CoreModule","CalendarModule","UIModule","declarations","providers","DatePipe","exports","CustomerList","addCustomerItem","customerEvent","MobileCustomerItem","phoneNumber","MobileCustomerList","mobileCustomerList","CustomerAddContactNoteAPI","daoFactory","getAPIName","getMockPath","executeSQL","contactObj","getDefaultTable","dao","getDefaultDao","ClientCustomDao","addRestriction","EqualRestriction","updateByTable","insertByTable","CustomerAutoDeleteAPI","messageObj","queryByTable","CustomerContactNoteAPI","OrderByRestriction","order","LimitRestriction","pageSize","OffsetRestriction","page","CustomerDeleteAPI","deleteByTable","CustomerDeleteContactNoteAPI","CustomerDetailAPI","_id","defaultDao","of","dao_1","from","toPromise","customerTelObj","telList","customerEmailObj","customerAddrObj","CustomerEditContactNoteAPI","CustomerEditOvertimeAPI","CustomerGetPresetAPI","setting","CustomerListAPI","_queryClientID","_filterCriteria","compoundRestriction","ORCompoundRestriction","LikeRestriction","key","birthdayRestriction","monthArray","today","startNum","endNum","String","AndCompoundRestriction","InRestriction","NotEqualRestriction","completenessOption","completenessRestriction_1","GreaterOrEqualRestriction","LessOrEqualRestriction","CustomerSaveDetailAPI","getFullYear","transactionInsert","transactionUpdate","transactionSqlCommand","SQLCommand","_d","_e","phone","phoneInsertObj","_f","_g","emailInsertObj","_h","_j","addressInsertObj","runTransaction","CustomerSavePresetAPI","CustomerTelAPI","telObj","CustomerUpdateFollowAPI","ImportContactAPI","phones","number","importEmailCount","CustomerBirthdayListAPI","DaoFactory","_DaoFactory","_targetDate","setYear","_subNDayTimeStamp","subDays","_subN","_addNDayTimeStamp","_addN","isRangeCrossYear","warn","DashboardUpdateToReadAPI","_messageType","dataCategory","_messageDataCategory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { StringUtils } from '@allianzSND/core';\nimport { CustomerAddress } from './CustomerAddress';\nimport { CustomerEmail } from './CustomerEmail';\nimport { CustomerTel } from './CustomerTel';\nexport class CustomerDetail{\n    private _clientID  : string;\n    private _lastName : string;\n    private _firstName : string;\n    private _occupation : string;\n    private _company : string;\n    private _birthday : Date;\n    private _ageRange : string;\n    private _gender : string;\n    private _income : string;\n    private _source : string;\n    private _marriage : string;\n    private _children : string;\n    private _familiarity : string;\n    private _recentStatus : string;\n    private _manpa : string;\n    private _contactFrequancy : string;\n    private _possibility : string;\n    private _isFollow : boolean;\n    private _dataSource : string;\n    private _isEmptyInfo : boolean;\n\n    private _emails : Array<CustomerEmail> = new Array<CustomerEmail>();\n    private _tels : Array<CustomerTel> = new Array<CustomerTel>();\n    private _addresses : Array<CustomerAddress> = new Array<CustomerAddress>();\n\n    constructor() {\n\n            if(StringUtils.isEmpty(this.firstName)) this.firstName = '';\n            if(StringUtils.isEmpty(this.occupation)) this.occupation = '';\n            if(StringUtils.isEmpty(this.company)) this.company = '';\n            if(StringUtils.isEmpty(this.ageRange)) this.ageRange = undefined;\n            if(StringUtils.isEmpty(this.gender)) this.gender = undefined;\n            if(StringUtils.isEmpty(this.income)) this.income = undefined;\n            if(StringUtils.isEmpty(this.source)) this.source = undefined;\n            if(StringUtils.isEmpty(this.marriage)) this.marriage = undefined;\n            if(StringUtils.isEmpty(this.children)) this.children = undefined;\n            if(StringUtils.isEmpty(this.familiarity)) this.familiarity = undefined;\n            if(StringUtils.isEmpty(this.recentStatus)) this.recentStatus = undefined;\n            if(StringUtils.isEmpty(this.manpa)) this.manpa = undefined;\n            if(StringUtils.isEmpty(this.contactFrequancy)) this._contactFrequancy = undefined;\n            if(StringUtils.isEmpty(this.possibility)) this.possibility = '';\n            if(StringUtils.isEmpty(this.clientID)) this.clientID = '';\n\n            this.updateEmptyStatus();\n    }\n\n    get dataSource() {\n        return this._dataSource;\n    }\n\n    get clientID() {\n        return this._clientID;\n    }    \n\n    get lastName(){\n        return this._lastName;\n    }\n\n    get firstName(){\n        return this._firstName;\n    }\n\n    get tels(){\n        return this._tels;\n    }\n\n    get emails(){\n        return this._emails;\n    }\n\n    get addresses(){\n        return this._addresses;\n    }\n\n    get birthday(){\n        return this._birthday;\n    }\n\n    get ageRange(){\n        return this._ageRange;\n    }\n\n    get gender(){\n        return this._gender;\n    }\n\n    get occupation(){\n        return this._occupation;\n    }\n\n    get company(){\n        return this._company;\n    }\n\n    get income(){\n        return this._income;\n    }\n\n    get source(){\n        return this._source;\n    }\n\n    get marriage(){\n        return this._marriage;\n    }\n\n    get children(){\n        return this._children;\n    }\n\n    get familiarity(){\n        return this._familiarity;\n    }\n\n    get recentStatus(){\n        return this._recentStatus;\n    }\n\n    get manpa(){\n        return this._manpa;\n    }\n\n    get contactFrequancy(){\n        return this._contactFrequancy;\n    }\n\n    get possibility(){\n        return this._possibility;\n    }\n\n    get isFollow() {\n        return this._isFollow;\n    }\n\n    get isEmptyInfo() {\n        return this._isEmptyInfo;\n    }\n\n\n    set dataSource(dataSource : string) {\n        this._dataSource = dataSource;\n    }\n    \n    set clientID(clientID : string) {\n        this._clientID = clientID;\n    }\n\n    set lastName(lastName : string){\n        this._lastName = lastName;\n    }\n\n    set firstName(firstName : string){\n        this._firstName = firstName;\n    }\n\n    set tels(tels : Array<CustomerTel>){\n        this._tels  = tels;\n    }\n\n    set emails(emails : Array<CustomerEmail>){\n        this._emails = emails;\n    }\n\n    set addresses(addresses : Array<CustomerAddress>){\n        this._addresses = addresses;\n    }\n\n    set birthday(birthday : Date){\n        this._birthday = birthday;\n       \n    }\n\n    set ageRange(ageRange : string){\n        this._ageRange = ageRange;\n    }\n\n    set gender(gender : string){\n        this._gender = gender;\n    }\n\n\n    set occupation(occupation : string){\n        this._occupation = occupation;\n    }\n\n    set company(company : string){\n        this._company = company;\n    }\n\n    set income(income : string){\n        this._income = income;\n    }\n\n    set source(source : string){\n        this._source = source;\n    }\n\n    set marriage(marriage : string){\n        this._marriage = marriage;\n    }\n\n    set children(children : string){\n        this._children = children;\n    }\n\n    set familiarity(familiarity : string){\n        this._familiarity = familiarity;\n    }\n\n    set recentStatus(recentStatus : string){\n        this._recentStatus = recentStatus;\n    }\n\n    set manpa(manpa : string){\n        this._manpa = manpa;\n    }\n\n    set contactFrequancy(contactFrequancy : string){\n        this._contactFrequancy = contactFrequancy;\n    }\n\n    set possibility(possibility : string){\n        this._possibility = possibility;   \n    }\n\n    set isFollow(isFollow : boolean) {\n        this._isFollow = isFollow;\n    }\n\n    set isEmptyInfo(isEmptyInfo : boolean) {\n        this._isEmptyInfo = isEmptyInfo;\n    }\n\n\n    updateEmptyStatus() {\n        if(this.birthday == null && StringUtils.isEmpty(this.gender) && StringUtils.isEmpty(this.occupation)\n          && StringUtils.isEmpty(this.company) && StringUtils.isEmpty(this.income)\n          && StringUtils.isEmpty(this.source) && StringUtils.isEmpty(this.marriage)\n          && StringUtils.isEmpty(this.children) && StringUtils.isEmpty(this.familiarity)\n          && StringUtils.isEmpty(this.manpa) && StringUtils.isEmpty(this.recentStatus)) {\n            this.isEmptyInfo = true;\n          }\n          else {\n              this.isEmptyInfo = false;\n          }\n    }\n\n    updateFollowStatus(isFollow : boolean) {\n        this.isFollow = isFollow;\n    }\n\n    addEmail(email : CustomerEmail) {\n        this.emails.push(email);\n    }\n\n    addTel(tel : CustomerTel) {\n        this.tels.push(tel);\n    }\n\n    addAddress(address : CustomerAddress) {\n        this.addresses.push(address);\n    }\n\n    deleteTel(tel:CustomerTel,index:number){\n        this.tels.splice(index,1);\n    }\n    \n    deleteEmail(email:string,index:number){\n        this.emails.splice(index,1);\n    }\n    deleteAddress(addresses : CustomerAddress,index:number){\n        this.addresses.slice(index,1);\n    }\n\n    notOPUSTelNumber() : number{\n        let count = 0;\n\n        for(let i = 0 ; i < this.tels.length ; i++) {\n            if(this.tels[i].dataSource != 'OPUS') count++;\n        }\n\n        return count;\n    }\n}","export class CustomerContactNote{\n\n    private clientID : string;\n    public name : string;\n    public date : Date;\n    public noteMessage : string;\n\n    constructor(clientID:string,date : Date , noteMessage : string) {\n        this.clientID = clientID;\n        this.date = date;\n        this.noteMessage = noteMessage;\n    }\n\n    public getClientID() : string {\n        return this.clientID;\n    }\n\n}","import { StringUtils } from \"@allianzSND/core\";\n\nexport class CustomerItem{\n    \n    private _clientID : string;\n    private _firstName : string;\n    private _lastName : string;\n    private _showName: string;\n    private _tag : string;\n    private _complementPercent : number;\n    private _isFollow : boolean;\n    private _isOtherSource : boolean;\n    private _isHighlight : boolean;\n\n    constructor(clientID : string,firstName : string ,lastName : string, possibility : string ,\n         complementPercent : number,isFollow : boolean , isOtherSource : boolean , isOverTimeAlert : string) {\n\n        this._clientID = clientID;\n        this._firstName = firstName;\n        this._lastName = lastName;\n        this._tag = possibility;\n        this._complementPercent = complementPercent;\n        this._isFollow = isFollow;\n        this._isOtherSource = isOtherSource;\n        \n        if(isOverTimeAlert == 'Y') {\n            this._isHighlight = true;\n        }\n\n        if(StringUtils.isEmpty(this._firstName)) this._firstName = '';\n    }\n\n\n    get isOtherSource() {\n        return this._isOtherSource;\n    }\n\n    get isFollow() {\n        return this._isFollow;\n    }\n\n    get clientID(){\n        return this._clientID;\n    }\n\n    get firstName(){\n        return this._firstName;\n    }\n\n    get lastName(){\n        return this._lastName;\n    }\n\n    get tag(){\n        return this._tag;\n    }\n\n    get complementPercent(){\n        return this._complementPercent;\n    }\n\n    set clientID(clientID : string){\n        this._clientID = clientID;\n    }    \n\n    set firstName(name : string){\n        this._firstName = name;\n    }\n\n    set lastName(name : string){\n        this._lastName = name;\n    }\n\n    set tag(tag : string){\n        this._tag = tag;\n    }\n\n    set complementPercent(complementPercent : number){\n        this._complementPercent = complementPercent;\n    }\n\n    set isFollow(isFollow : boolean) {\n        this._isFollow = isFollow;\n    }\n\n    set isOtherSource(isOtherSource : boolean) {\n        this._isOtherSource = isOtherSource;\n    }\n\n    get isHighlight() {\n        return this._isHighlight;\n    }\n\n    set isHighLight(isHighLight : boolean) {\n        this._isHighlight = isHighLight;\n    }\n\n    get showName() {\n        return this._showName;\n    }\n    \n    set showName(showName: string) {\n        this._showName = showName;\n    }\n}","export class CustomerAlertItem {\n    private _clientID : string;\n    private _name : string;\n\n    constructor(clientID : string, name : string) {\n       this._clientID = clientID;\n       this._name = name;  \n    }\n\n   get clientID() {\n       return this._clientID;\n   }\n\n   get name(){\n    return this._name;\n    }\n\n}","import { StringUtils } from \"@allianzSND/core\";\n\nexport class CustomerAddress{\n\n    public clientID : string;\n    public addressType : string;\n    public country : string;\n    public city : string;\n    public area : string;\n    public zipcode : string;\n    public address : string;\n    public dataSource : string;\n    \n\n    constructor(clientID:string,addressType : string,country : string,city : string,area : string,zipcode : string,address : string,dataSorce : string){\n        this.clientID = clientID;\n        this.addressType = addressType;\n        this.country = country;\n        this.city = city;\n        this.area = area;\n        this.zipcode = zipcode;\n        this.address = address;\n        this.dataSource = dataSorce;\n\n    }\n\n    toFullAddress() {        \n        \n        let array = [];\n        if(StringUtils.isNotEmpty(this.country)) array.push(this.country);\n        if(StringUtils.isNotEmpty(this.city)) array.push(this.city);\n        if(StringUtils.isNotEmpty(this.area)) array.push(this.area);\n        if(StringUtils.isNotEmpty(this.zipcode)) array.push(this.zipcode);\n        if(StringUtils.isNotEmpty(this.address)) array.push(this.address);\n\n        return array.join(', ');\n    }\n\n    public isEmpty() {\n        return StringUtils.isEmpty(this.country) \n        && StringUtils.isEmpty(this.city) && StringUtils.isEmpty(this.area)\n        && StringUtils.isEmpty(this.zipcode) && StringUtils.isEmpty(this.address);\n    }\n}\n","import { StringUtils } from \"@allianzSND/core\";\n\nexport class CustomerEmail {\n\n    public clientID : string;\n    public emailType :string;\n    public email : string;\n    public dataSource : string;\n\n    constructor(_clientID : string , _emailType : string , _email : string , _dataSource : string){\n        this.clientID = _clientID;\n        this.emailType = _emailType;\n        this.email = _email;\n        this.dataSource = _dataSource;\n    }\n\n    public isEmpty() {\n        return StringUtils.isEmpty(this.email);\n    }\n\n}","import { StringUtils } from \"@allianzSND/core\";\n\nexport class CustomerTel{\n\n    public clientID : string;\n    public telType : string;\n    public tel : string;\n    public dataSource : string;\n\n    constructor(clientID : string,  telType : string, tel : string, dataSource : string) {\n        this.clientID = clientID;\n        this.telType = telType;\n        this.tel = tel;\n        this.dataSource = dataSource;\n    }\n\n    public isEmpty() {\n        return StringUtils.isEmpty(this.tel);\n    }\n\n}","import { StringUtils } from \"@allianzSND/core\";\nimport { getMonth, getDate } from 'date-fns';\n\nexport class CustomerBirthday{\n    \n    private _clientID : string;\n    public lastName : string;\n    public firstName : string;\n    public birthdayMonth : string;\n    public birthdayDate : string;\n\n    constructor(clientID : string,firstName : string ,lastName : string, birthdayMonth: string , birthdayDate : string) {\n\n        this._clientID = clientID;\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.birthdayMonth = birthdayMonth;\n        this.birthdayDate =  birthdayDate;\n       \n\n         if(StringUtils.isEmpty(this.firstName)) this.firstName = '';\n\n    }\n\n\n   \n\n   \n}","import { APIFactory, APIDispatch, ProfileCodeService, ContactItem, PageInfo, ValidationResult, DateUtils, StringUtils} from '@allianzSND/core';\nimport { Injectable } from '@angular/core';\nimport { Observable, from } from 'rxjs';\nimport { CustomerDetail } from './model/CustomerDetail';\nimport { CustomerListAPI } from '../api/CustomerListAPI';\nimport { CustomerBirthdayListAPI } from '../api/CustomerBirthdayListAPI';\nimport { CustomerDetailAPI } from '../api/CustomerDetailAPI';\nimport { CustomerContactNote } from './model/CustomerContactNote';\nimport { CustomerContactNoteAPI } from '../api/CustomerContactNoteAPI';\nimport { CustomerItem } from './model/CustomerItem';\nimport { CustomerAlertItem } from './model/CustomerAlertItem';\nimport { CustomerAddress } from './model/CustomerAddress';\nimport { CustomerEmail } from './model/CustomerEmail';\nimport { CustomerTel } from './model/CustomerTel';\nimport { CustomerTelAPI } from '../api/CustomerTelAPI';\nimport { ImportContactAPI } from '../api/ImportContactAPI';\nimport { CustomerAddContactNoteAPI } from '../api/CustomerAddContactNote';\nimport { CustomerEditContactNoteAPI } from '../api/CustomerEditContactNote';\nimport { CustomerDeleteContactNoteAPI } from '../api/CustomerDeleteContactNote';\nimport { CustomerFilterCriteria } from '../components/bean/customer-filter-criteria';\nimport { CustomerDeleteAPI } from '../api/CustomerDeleteAPI';\nimport { CustomerEditOvertimeAPI } from '../api/CustomerEditOvertimeAPI';\nimport { CustomerAutoDeleteAPI } from '../api/CustomerAutoDeleteAPI';\nimport { CustomerSavePresetAPI } from '../api/CustomerSavePresetAPI';\nimport { CustomerGetPresetAPI } from '../api/CustomerGetePresetAPI';\nimport { CustomerUpdateFollowAPI } from '../api/CustomerUpdateFollowAPI';\nimport { CustomerFilterPreset } from '../components/bean/customer-filter-preset';\nimport { CustomerDetailResult } from '../components/bean/customer-detail-result';\nimport { CustomerSaveDetailAPI } from '../api/CustomerSaveDetailAPI';\nimport { CustomerBirthday } from './model/CustomerBirthday';\nimport { DashboardUpdateToReadAPI } from '../api/DashboardUpdateToReadAPI';\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomerService {\n\n  //is first time use customer function\n  private _isFirstTime = true;//TODO\n\n  //add/edit profile result\n  private _profileResult : CustomerDetailResult;\n  \n  constructor(private dispatcher: APIDispatch, private dateUtils : DateUtils, private APIFactory: APIFactory, private profileCodeService: ProfileCodeService) {\n    //register api\n  }\n  \n  isFirstTime() : boolean{\n    if(this._isFirstTime) {\n      this._isFirstTime = false;\n      return true;\n    }\n    else {\n      return this._isFirstTime;\n    }\n    \n  }\n\n  get profileResult() {return this._profileResult;}\n  set profileResult(result) {this._profileResult = result;}\n\n  updateMessageToRead(messageType: string, messageDataCategory: string): Observable<any> {\n    let dashboardUpdateToReadAPI : DashboardUpdateToReadAPI = <DashboardUpdateToReadAPI>this.APIFactory.getAPI('updateDashboardToRead');\n    dashboardUpdateToReadAPI.setMessageType(messageType);\n    dashboardUpdateToReadAPI.setMessageDataCategory(messageDataCategory);\n\n    return Observable.create((observer)=>{\n      this.dispatcher.dispatch(dashboardUpdateToReadAPI).subscribe((data) => {\n        \n        console.debug('dashboard-service-updateMessageToRead',data);\n\n        observer.next(data['Header']);\n        observer.complete();\n      })\n    })\n  }\n\n  getOverTimeCustomerList(clientID) : Observable<Array<CustomerAlertItem>>{\n    let customerOverTimeAPI: CustomerEditOvertimeAPI = <CustomerEditOvertimeAPI>this.APIFactory.getAPI('getCustomerOverTime');\n\n    customerOverTimeAPI.setClientID(clientID);\n\n    return Observable.create((observer)=>{\n      this.dispatcher.dispatch(customerOverTimeAPI).subscribe((data) => {\n        \n        console.debug('customer-service-getOverTimeList',data);\n\n        let returnList = new Array<CustomerAlertItem>();\n       \n        let messages = data['Body'];\n        //set body data\n        for (let i = 0; i < messages.length; i++) {\n          let message = messages[i];\n\n          let args = JSON.parse(message['Arguments']);\n          let customerList = args['customers'];\n\n          for(let j=0 ; j< customerList.length ; j++) {\n            let event = new CustomerAlertItem(customerList[j].id, customerList[j].name);\n            returnList.push(event);\n          }\n          \n        }\n        \n        observer.next(returnList);\n        observer.complete();\n      })\n    })\n  }\n\n  getAutoDeleteCustomerList(clientID) : Observable<Array<CustomerAlertItem>>{\n    let customerDeleteAPI: CustomerAutoDeleteAPI = <CustomerAutoDeleteAPI>this.APIFactory.getAPI('getCustomerAutoDelete');\n\n    customerDeleteAPI.setClientID(clientID);\n\n    return Observable.create((observer)=>{\n      this.dispatcher.dispatch(customerDeleteAPI).subscribe((data) => {\n        console.log('customer-service-getAutoDeleteCustomerList',data);\n\n        let returnList = new Array<CustomerAlertItem>();\n       \n        let messages = data['Body'];\n        //set body data\n        for (let i = 0; i < messages.length; i++) {\n          let message = messages[i];\n\n          let args = JSON.parse(message['Arguments']);\n          let customerList = args['customers'];\n\n          for(let j=0 ; j< customerList.length ; j++) {\n            let event = new CustomerAlertItem(customerList[j].id, customerList[j].name);\n            returnList.push(event);\n          }\n          \n        }\n        \n        observer.next(returnList);\n        observer.complete();\n      })\n    })\n  }\n\n  updateCustomerFollowStatus(clientID,isFollow) : Observable<any> {\n    let updateCustomerFollowStatus: CustomerUpdateFollowAPI = <CustomerUpdateFollowAPI>this.APIFactory.getAPI('updateCustomerFollowStatus');\n    updateCustomerFollowStatus.setClient(clientID);\n    updateCustomerFollowStatus.setIsFollow(isFollow);\n\n    return Observable.create((observer)=>{\n      this.dispatcher.dispatch(updateCustomerFollowStatus).subscribe((data) => {\n        \n        console.debug('customer-service-updateCustomerFollowStatus',data);\n\n        observer.next(data['Header']);\n        observer.complete();\n      })\n    })\n  }\n\n  getFilterCriteriaPreset(): Observable<CustomerFilterPreset> {\n    let getFilterCriteria: CustomerGetPresetAPI = <CustomerGetPresetAPI>this.APIFactory.getAPI('getCustomerFilterPreset');\n\n    return Observable.create((observer)=>{\n      this.dispatcher.dispatch(getFilterCriteria).subscribe((data) => {\n        \n        console.debug('customer-service-getFilterCriteria',data);\n\n        let settingArray = data['Body'];\n\n        let preset : CustomerFilterPreset;\n        if(settingArray.length =! 0) {\n          preset = JSON.parse(settingArray[0].SettingVal);\n        }\n        \n        console.debug('customer-service-getFilterCriteriaPreset',preset);\n\n        observer.next(preset);\n        observer.complete();\n      })\n    })\n  }\n\n  saveFilterCriteria(filterCriteria : CustomerFilterCriteria): Observable<any> {\n    let saveFilterCriteria: CustomerSavePresetAPI = <CustomerSavePresetAPI>this.APIFactory.getAPI('saveCustomerFilterPreset');\n\n    saveFilterCriteria.setFilterCriteria(filterCriteria);\n\n    return Observable.create((observer)=>{\n      this.dispatcher.dispatch(saveFilterCriteria).subscribe((data) => {\n        \n        console.debug('customer-service-saveFilterCriteria',data);\n\n        observer.next(data);\n        observer.complete();\n      })\n    })\n  }\n\n  checkInFilterCriteria(clientID : string,filterCriteria : CustomerFilterCriteria): Observable<boolean> {\n    let customerListAPI: CustomerListAPI = <CustomerListAPI>this.APIFactory.getAPI('getCustomerList');\n\n    customerListAPI.filterCriteria = filterCriteria;\n    customerListAPI.clientID = clientID;\n\n    return Observable.create((observer)=>{\n      this.dispatcher.dispatch(customerListAPI).subscribe((data) => {\n        \n        console.debug('customer-service-checkInFilterCriteria',data);\n\n        observer.next(data['Body'].length != 0);\n        observer.complete();\n      })\n    })\n  }\n\n  //get customer datas\n  getCustomerList(filterCriteria : CustomerFilterCriteria,_pageInfo : PageInfo): Observable<Array<CustomerItem>> {\n    let customerListAPI: CustomerListAPI = <CustomerListAPI>this.APIFactory.getAPI('getCustomerList');\n\n    console.debug('customer-service-getCustomerList',filterCriteria,_pageInfo);\n\n    customerListAPI.filterCriteria = filterCriteria;\n    customerListAPI.pageInfo = _pageInfo;\n\n    return Observable.create((observer)=>{\n      this.dispatcher.dispatch(customerListAPI).subscribe((data) => {\n        \n        console.debug('customer-service-getCustomerList',data);\n\n        let returnList = new Array<CustomerItem>();\n        let header = data['Header'];\n        let customerList = data['Body'];\n\n        //set header pageInfo\n        // _pageInfo.totalPage = header.PageInfo.totalPage;\n        // _pageInfo.totalRec = header.PageInfo.totalRec;\n\n        //set body data\n        for (let i = 0; i < customerList.length; i++) {\n          let json = customerList[i];\n          let isOtherSystem = json.DataSource != 'APP';\n          let isFollow = json.IsFollow == 'Y';\n          let completeness = json.Completeness;\n          let isOverTimeAlert = json.IsOverTimeAlert;\n    \n\n          let event = new CustomerItem(json.ClientID,json.FirstName,json.LastName,json.Possibility,completeness,isFollow,isOtherSystem,isOverTimeAlert);\n          returnList.push(event);\n        }\n        observer.next(returnList);\n        observer.complete();\n      })\n    })\n  }\n\n  getCustomerBirthdayList(targetDate, subN, addN): Observable<Array<CustomerBirthday>> {\n    let customerBirthdayListAPI: CustomerBirthdayListAPI = <CustomerBirthdayListAPI>this.APIFactory.getAPI('getCustomerBirthdayList');\n    customerBirthdayListAPI.subN = subN;\n    customerBirthdayListAPI.addN = addN;\n    customerBirthdayListAPI.targetDate = targetDate;\n  \n\n    return Observable.create((observer)=>{\n      this.dispatcher.dispatch(customerBirthdayListAPI).subscribe((data) => {\n        \n        console.debug('customer-service-getCustomerBirthdayList',data);\n\n        let returnList :Array<CustomerBirthday> = [];\n        // let header = data['Header'];\n        let birthdayList = data['Body'];\n\n\n        console.log(\"cusSer: \", birthdayList);\n\n        // //set body data\n        for (let i = 0; i < birthdayList.length; i++) {\n          let event = new CustomerBirthday(birthdayList[i]['ClientID'], birthdayList[i]['FirstName'], birthdayList[i]['LastName'], birthdayList[i]['BirthdayMonth'], birthdayList[i]['BirthdayDate']);\n          returnList.push(event);\n        }\n        observer.next(returnList);\n        observer.complete();\n      });\n\n      \n\n\n    });\n  }\n\n  convertCustomerDetailDisplayMode(customer : CustomerDetail) {\n    console.debug('convertCustomerDetailDisplayMode',customer);\n\n    customer.ageRange = this.profileCodeService.convertCode2Text('Customer_Age',customer.ageRange);\n    customer.gender = this.profileCodeService.convertCode2Text('Customer_Gender',customer.gender);\n    customer.income = this.profileCodeService.convertCode2Text('Customer_Income',customer.income);\n    customer.source = this.profileCodeService.convertCode2Text('Customer_Source',customer.source);\n    customer.marriage = this.profileCodeService.convertCode2Text('Customer_Marriage',customer.marriage);\n    customer.children = this.profileCodeService.convertCode2Text('Customer_Children',customer.children);\n    customer.familiarity = this.profileCodeService.convertCode2Text('Customer_Familiarity',customer.familiarity);\n    customer.recentStatus = this.profileCodeService.convertCode2Text('Customer_RecentStatus',customer.recentStatus);\n    customer.manpa = this.profileCodeService.convertCode2Text('Customer_Status',customer.manpa);\n    customer.contactFrequancy = this.profileCodeService.convertCode2Text('Customer_ContactFrequancy',customer.contactFrequancy);\n    customer.possibility = this.profileCodeService.convertCode2Text('Customer_Possibility',customer.possibility);\n        \n    customer.tels.forEach((tel) => {\n      tel.telType = this.profileCodeService.convertCode2Text('Customer_TelType',tel.telType);\n    });\n\n    customer.emails.forEach((email) => {\n      email.emailType = this.profileCodeService.convertCode2Text('Customer_EmailType',email.emailType);\n    });\n\n    customer.addresses.forEach((address) => {\n      address.addressType = this.profileCodeService.convertCode2Text('Customer_AddressType',address.addressType);\n    });\n\n  }\n\n  getCustomerDetail(clientID : string): Observable<CustomerDetail> {\n    if(StringUtils.isEmpty(clientID)) {\n      return Observable.create((observer) => {\n        observer.next(undefined);\n        observer.complete();\n      });\n    }\n    else {\n      let customerDetailAPI: CustomerDetailAPI = <CustomerDetailAPI>this.APIFactory.getAPI('getCustomerDetail');\n      customerDetailAPI.id = clientID;\n      \n      return Observable.create((observer)=>{\n        this.dispatcher.dispatch(customerDetailAPI).subscribe((data) => {\n          console.debug('customer-service-json',data);\n          let customer  = data['Body'][0];\n\n          console.debug('customer-service-getCustomerDetail',customer);\n\n          let ageRange : string = customer.AgeRange;\n          let gender : string = customer.Gender;\n          let income : string = customer.Income;\n          let source : string = customer.Source;\n          let marriage : string = customer.Marriage;\n          let children : string = customer.Children;\n          let familiarity : string = customer.Familiarity;\n          let recentStatus : string = customer.RecentStatus;\n          let manpa : string = customer.MANPA;\n          let contactFrequancy : string = customer.ContactFrequancy;\n          let possibility : string = customer.Possibility;\n          let isFollow : boolean = customer.IsFollow == 'Y';\n\n          let birthday : Date;\n\n          if(StringUtils.isNotEmpty(customer.BirthdayYear) && StringUtils.isNotEmpty(customer.BirthdayMonth) && StringUtils.isNotEmpty(customer.BirthdayDate)) {\n            birthday = new Date(Number(customer.BirthdayYear),Number(customer.BirthdayMonth) - 1,Number(customer.BirthdayDate));\n          }\n \n          \n          let customerDetail : CustomerDetail = new CustomerDetail();\n            customerDetail.clientID = customer.ClientID;\n            customerDetail.lastName = ( StringUtils.isNotEmpty(customer.LastName)? customer.LastName : '');\n            customerDetail.firstName = ( StringUtils.isNotEmpty(customer.FirstName)? customer.FirstName : '');\n            customerDetail.occupation = customer.Occupation;\n            customerDetail.company = customer.Company;\n            customerDetail.birthday = birthday;\n            customerDetail.ageRange = ageRange;\n            customerDetail.gender = gender;\n            customerDetail.income = income;\n            customerDetail.source = source;\n            customerDetail.marriage = marriage;\n            customerDetail.children = children;\n            customerDetail.familiarity = familiarity;\n            customerDetail.recentStatus = recentStatus;\n            customerDetail.manpa = manpa;\n            customerDetail.contactFrequancy = contactFrequancy;\n            customerDetail.possibility = possibility;\n            customerDetail.isFollow = isFollow;\n            customerDetail.dataSource = customer.DataSource;\n\n\n                  \n            \n            customer.tel.map(tel=> new CustomerTel(tel.ClientID,tel.TelType,tel.Tel,tel.DataSource)).forEach(element => {\n              customerDetail.addTel(element);\n            });\n\n            customer.email.map(email=> new CustomerEmail(email.ClientID,email.EmailType,email.Email,email.DataSource)).forEach(element => {\n              customerDetail.addEmail(element);\n            });\n\n            customer.address.map(address=> new CustomerAddress(address.ClientID,address.AddressType,address.Country,address.City,address.Area,address.Zipcode,address.Address,address.DataSource)).forEach(element => {\n              customerDetail.addAddress(element);\n            });\n\n            \n\n            console.debug('customer-service:',customerDetail);\n\n            \n            observer.next(customerDetail);\n            observer.complete();\n        })\n      })\n    }\n\n    \n  }\n\n  importContact(items : Array<ContactItem>) : Observable<string> {\n    let importContactAPI:  ImportContactAPI = <ImportContactAPI>this.APIFactory.getAPI('importContact');\n    \n    console.debug('customer-service-importContact',items);\n    importContactAPI.setItems(items);\n\n    return Observable.create((observer) => {\n      this.dispatcher.dispatch(importContactAPI).subscribe((data) => {\n        console.debug('customer-service-importContact',data);\n\n        observer.next(data['Header']);\n        observer.complete();\n      });\n    });\n  }\n\n\n\n  validProfile(customerDetail : CustomerDetail): ValidationResult {\n    let validationResult = new ValidationResult();\n\n    //valid required\n    if (StringUtils.isEmpty(customerDetail.lastName))\n      validationResult.setErrorMap('lastName', 'required');\n    // if (customerProfile.firstName == '')\n    //   validationResult.setErrorMap('firstName', 'required');\n    \n    //valid format      \n\n    //valid email\n    if(customerDetail.emails.length != 0 ) {\n      customerDetail.emails.forEach((email) => {\n        if(!email.isEmpty()) {\n          if(!this.isEmailFormat(email.email)) {\n            validationResult.setErrorMap('email','format');\n          }\n        }\n      });\n      \n    }\n\n    //valid date\n    // if(customerProfile.birthday == null) {\n    //   validationResult.setErrorMap('birthday', 'date');\n    // }\n\n    return validationResult;\n  }\n\n  private isEmailFormat(email) {\n    let regexp = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n\n    return regexp.test(email);\n  }\n\n  saveCustomerDetail(customerDetail : CustomerDetail):Observable<any> {\n    console.log(\"saveCustomerProfile\",customerDetail);\n\n    //check tel/email/address default type\n    customerDetail.tels.forEach((tel) => {\n      if(StringUtils.isEmpty(tel.telType)) tel.telType = 'TelHome';\n    });\n\n    customerDetail.emails.forEach((email) => {\n      if(StringUtils.isEmpty(email.emailType)) email.emailType = 'MailHome';\n    });\n\n    customerDetail.addresses.forEach((address) => {\n      if(StringUtils.isEmpty(address.addressType)) address.addressType = 'AddressTypeHome';\n    });\n\n    let saveCustomerDetailAPI : CustomerSaveDetailAPI = <CustomerSaveDetailAPI>this.APIFactory.getAPI('saveCustomerDetail'); \n  \n    saveCustomerDetailAPI.setDetail(customerDetail);\n\n    let subject = Observable.create((observer)=>{\n      this.dispatcher.dispatch(saveCustomerDetailAPI).subscribe((data)=>{\n\n        console.debug('customer-service-saveCustomerDetail',data);\n\n        observer.next(data['Header']);\n        observer.complete(); \n      })\n    })\n    console.log(\"subject: \", subject);\n    return subject;\n\n  }\n\n  deleteCustomerProfile(clientID : string) : Observable<any> {\n    console.log(\"deleteCustomerProfile\",clientID);\n    let deleteAPI : CustomerDeleteAPI = <CustomerDeleteAPI>this.APIFactory.getAPI('deleteCustomer'); \n    deleteAPI.clientID = clientID;\n\n    return Observable.create((observer)=>{\n      this.dispatcher.dispatch(deleteAPI).subscribe((data)=>{\n\n        console.debug('customer-service-deleteCustomerProfile',data);\n\n        observer.next(data['Header']);\n        observer.complete(); \n      })\n    })\n  }\n\n  getCustomerContactNote(clientID : string,pageInfo : PageInfo): Observable<Array<CustomerContactNote>>{\n    let customerContactNoteAPI : CustomerContactNoteAPI = <CustomerContactNoteAPI>this.APIFactory.getAPI('getCustomerContactNote');\n\n    customerContactNoteAPI.setClientID(clientID);\n    customerContactNoteAPI.setPageInfo(pageInfo);\n\n    console.debug('customer-service-getCustomerContactNote',customerContactNoteAPI);\n    return Observable.create((observer)=>{\n      this.dispatcher.dispatch(customerContactNoteAPI).subscribe((data) => {\n\n\n        console.debug('customer-service-getCustomerContactNote',data);\n\n        let returnCustomerContactNote: Array<CustomerContactNote> = new Array<CustomerContactNote>();\n        let customerContactNoteList = data['Body'];\n\n        for (let i = 0; i < customerContactNoteList.length; i++) {\n          let json = customerContactNoteList[i];\n          let user = new CustomerContactNote(json.ClientID,new Date(json.NoteTime),json.Note);          \n          returnCustomerContactNote.push(user);\n        }\n\n        observer.next(returnCustomerContactNote);\n        observer.complete();\n      })\n    })\n  }\n\n  addCustomerContact(clientID : string,customerClientID : string,note : string,noteTime : Date) : Observable<any> {\n    console.log(\"addCustomerContact\");\n    let addCustomerContactAPI : CustomerAddContactNoteAPI = <CustomerAddContactNoteAPI>this.APIFactory.getAPI('addCustomerContactNote'); \n    addCustomerContactAPI.setClientID(clientID);\n    addCustomerContactAPI.setCustomerClientID(customerClientID);\n    addCustomerContactAPI.setNote(note);\n    addCustomerContactAPI.setNoteTime(noteTime)\n\n    return Observable.create((observer) => {\n      this.dispatcher.dispatch(addCustomerContactAPI).subscribe((data) => {\n        console.debug('customer-service-addCustomerContact',data);\n\n        observer.next(data['Header']);\n        observer.complete();\n      });\n    });\n\n  }\n\n  editCustomerContact(contactClientID : string,note : string,noteTime : Date) : Observable<string> {\n    console.log(\"editCustomerContact\");\n    let editCustomerContactAPI : CustomerEditContactNoteAPI = <CustomerEditContactNoteAPI>this.APIFactory.getAPI('editCustomerContactNote'); \n    editCustomerContactAPI.setContactClientID(contactClientID);\n    editCustomerContactAPI.setNote(note);\n    editCustomerContactAPI.setNoteTime(noteTime)\n\n    return Observable.create((observer)=>{\n      this.dispatcher.dispatch(editCustomerContactAPI).subscribe((data)=>{\n\n        console.debug('customer-service-editCustomerContact',data);\n\n        observer.next(data['Header']);\n        observer.complete(); \n      })\n    })\n  }\n\n  deleteCustomerContact(contactClientID : string) : Observable<any> {\n    console.log(\"deleteCustomerContact\");\n    let deleteCustomerContactAPI : CustomerDeleteContactNoteAPI = <CustomerDeleteContactNoteAPI>this.APIFactory.getAPI('deleteCustomerContactNote'); \n    deleteCustomerContactAPI.setContactClientID(contactClientID);\n\n    return Observable.create((observer)=>{\n      this.dispatcher.dispatch(deleteCustomerContactAPI).subscribe((data)=>{\n\n        console.debug('customer-service-editCustomerContact',data);\n\n        observer.next(data['Header']);\n        observer.complete(); \n      })\n    })\n  }\n\n  getCustomerContactTel(clientID : string) : Observable<Array<CustomerTel>>{\n    let customerTelAPI : CustomerTelAPI = <CustomerTelAPI>this.APIFactory.getAPI('getCustomerTel');\n\n    customerTelAPI.setClientID(clientID);\n\n    console.debug('customer-service-getCustomerContactTel',customerTelAPI);\n    return Observable.create((observer)=>{\n      this.dispatcher.dispatch(customerTelAPI).subscribe((data) => {\n        console.debug('customer-service-getCustomerContactTel response',data);\n        let returnCustomerTel: Array<CustomerTel> = new Array<CustomerTel>();\n        let customerTelList = data['Body'];\n\n        customerTelList.map(tel=> new CustomerTel(tel.ClientID, this.profileCodeService.convertCode2Text('Customer_TelType',tel.TelType),tel.Tel,tel.DataSource)).forEach(element => {\n          returnCustomerTel.push(element);\n        });\n\n        observer.next(returnCustomerTel);\n        observer.complete();\n      })\n    })\n  }\n  \n}\n","export class CustomerFilterPreset{\n    \n    public addValues(column : string,values : Array<string>) {\n        this[column] = values;        \n        \n    }\n\n}","import { CustomerFilterPreset } from \"./customer-filter-preset\";\nimport { StringUtils } from \"@allianzSND/core\";\n\nexport class CustomerFilterCriteria {\n    private _keyword: string;\n    private filterMap: Map<string, Array<string>> = new Map<string, Array<string>>();\n    private _savePreset: boolean = false;\n\n    constructor(keyword = '', filterMap = new Map<string, Array<string>>(), savePreset = false) {\n        this._keyword = keyword;\n        this.filterMap = filterMap;\n        this._savePreset = savePreset;\n    }\n\n    addCriteria(filterCol: string, value: string) {\n        let values: Array<string> = this.filterMap.get(filterCol);\n        if (values == undefined) values = new Array<string>();\n\n        if (!values.includes(value)) {\n            values.push(value);\n\n            this.filterMap.set(filterCol, values);\n        }\n    }\n\n    addCriteriaCols(filterCol: string, values: string[]) {\n        this.filterMap.set(filterCol, values);\n    }\n\n    hasCriteria() {\n        return this.filterMap.size != 0 || StringUtils.isNotEmpty(this._keyword);\n    }\n\n    set keyword(keyword: string) { this._keyword = keyword }\n    get keyword() { return this._keyword }\n\n    set savePreset(isSave: boolean) {\n        this._savePreset = isSave;\n    }\n\n    get savePreset() { return this._savePreset }\n\n    getFilterMap() {\n        return this.filterMap;\n    }\n\n\n\n    toPresetJSON(): CustomerFilterPreset {\n        let preset = new CustomerFilterPreset();\n\n        this.filterMap.forEach((value: Array<string>, column: string) => {\n            preset.addValues(column, value);\n        });\n\n        console.debug('toPresetJSON', preset);\n\n        return preset;\n    }\n}","export class CustomerConfirmAction {\n    private _action : string;\n    private _optionObj : Array<string>;\n\n    constructor() {\n        \n    }\n\n    set action(action) {this._action = action}\n    set option(option) {this._optionObj = option}\n\n    get action() {return this._action}\n    get option() {return this._optionObj}\n}","import { ContactItem } from \"@allianzSND/core\";\n\nexport class CustomerImportGroup {\n    private _groupName : string;\n    private _isShow : boolean = true;\n    private _items : Array<ContactItem> = new Array<ContactItem>();\n\n    constructor(groupName : string) {\n        this._groupName = groupName;\n    }\n\n    public addItem(item : ContactItem) {\n        this._items.push(item);\n    }\n\n    public get getItems() {\n        return this._items;\n    }\n\n    public get groupName() {\n        return this._groupName;\n    }\n\n    public set groupName(groupName : string) {\n        this._groupName = groupName;\n    }\n\n    public get isShow() {\n        return this._isShow;\n    }\n\n    public set isShow(isShow : boolean) {\n        this._isShow = isShow;\n    }\n\n}","import { InjectionToken } from \"@angular/core\";\nimport { syncCustomer } from \"../interface/syncCustomer.interface\";\nimport { storeCustomer } from \"../interface/storeCustomer.interface\";\nimport { customerAction } from \"../interface/customerAction.interface\";\nimport { showCustomerRule } from \"../interface/showCustomerRule.interface\";\n\nexport const syncCustomerToken = new InjectionToken<syncCustomer>('syncCustomer');\nexport const storeCustomerToken = new InjectionToken<storeCustomer>(\"storeCustomer\");\nexport const customerActionToken = new InjectionToken<customerAction>(\"customerAction\");\nexport const showCustomerRuleToken = new InjectionToken<showCustomerRule>(\"showCustomerRule\");\n","import { Observable } from \"rxjs\";\nimport { CustomerDetail } from \"../service/model/CustomerDetail\";\nimport { CustomerItem } from '../service/model/CustomerItem';\nimport { CustomerFilterCriteria } from \"../components/bean/customer-filter-criteria\";\n\nexport interface storeCustomer {\n    setState(state: CUSTOMER_STATE): void;\n    getState(): Observable<CUSTOMER_STATE>;\n    setCurrentCustomerDetail(detail: CustomerDetail): void;\n    getCurrentCustomerDetail(): Observable<CustomerDetail>;\n    setCustomerList(list: Array<CustomerItem>): void;\n    getCustomerList(): Observable<Array<CustomerItem>>;\n    setCriteria(criteria: CustomerFilterCriteria): void;\n    getCriteria(): Observable<CustomerFilterCriteria>;\n}\n\nexport enum CUSTOMER_STATE {\n    DISPLAY = 'display',\n    EDIT = 'edit',\n    ADD_SAVED = 'add saved',\n    EDIT_SAVED = 'edit saved',\n    FIRST = 'first'\n}","import { ProfileCode, ProfileCodeService, SQLiteTable, StringUtils } from \"@allianzSND/core\";\nimport { SelectOption } from \"@allianzSND/ui\";\nimport { differenceInCalendarDays } from 'date-fns';\nimport { CustomerDetail } from \"../service/model/CustomerDetail\";\nimport { Injectable } from \"@angular/core\";\n\n@Injectable({providedIn:'root'})\nexport class CustomerUtils {\n\n    constructor(private profileCodeService: ProfileCodeService) { }\n\n    setCode2Option(codeArray: Array<ProfileCode>) {\n        let options: Array<SelectOption> = new Array();\n        if (codeArray != undefined) {\n            for (let code of codeArray) {\n                options.push(new SelectOption(code.getCode(), code.displayText));\n            }\n        }\n\n\n        return options;\n    }\n    \n    countCompletenessByProfile(customerDetail : CustomerDetail) {\n        console.debug('countCompletenessByDetail',customerDetail);\n\n        //count Completeness\n        let completeness: number = 0;\n        let countColumnName = ['FirstName', 'LastName', 'Occupation', 'Company', 'AgeRange', 'Gender',\n            'Income', 'Source', 'Marriage', 'Children', 'Familiarity', 'RecentStatus', 'MANPA',\n            'ContactFrequancy', 'Possibility'];\n\n            if(StringUtils.isNotEmpty(customerDetail.firstName)) completeness++;\n            if(StringUtils.isNotEmpty(customerDetail.lastName)) completeness++;\n            if(StringUtils.isNotEmpty(customerDetail.occupation)) completeness++;\n            if(StringUtils.isNotEmpty(customerDetail.company)) completeness++;\n            if(StringUtils.isNotEmpty(customerDetail.ageRange)) completeness++;\n            if(StringUtils.isNotEmpty(customerDetail.gender)) completeness++;\n            if(StringUtils.isNotEmpty(customerDetail.income)) completeness++;\n            if(StringUtils.isNotEmpty(customerDetail.source)) completeness++;\n            if(StringUtils.isNotEmpty(customerDetail.marriage)) completeness++;\n            if(StringUtils.isNotEmpty(customerDetail.children)) completeness++;\n            if(StringUtils.isNotEmpty(customerDetail.familiarity)) completeness++;\n            if(StringUtils.isNotEmpty(customerDetail.recentStatus)) completeness++;\n            if(StringUtils.isNotEmpty(customerDetail.manpa)) completeness++;\n            if(StringUtils.isNotEmpty(customerDetail.contactFrequancy)) completeness++;\n            if(StringUtils.isNotEmpty(customerDetail.possibility)) completeness++;\n\n      \n\n        //count birthday\n        if (customerDetail.birthday != undefined) completeness++;\n\n        //count phone/email/address\n        if (customerDetail.tels.length != 0) completeness++;\n        if (customerDetail.emails.length != 0) completeness++;\n        if (customerDetail.addresses.length != 0) completeness++;\n\n        console.debug('orginal completeness',completeness,(countColumnName.length + 4));\n\n        completeness = (completeness / (countColumnName.length + 4));\n\n        console.debug('before round completeness', completeness);\n        completeness = Math.round(completeness * 100) / 100;\n        console.debug('after round completeness', completeness);\n\n        return completeness;\n    }\n\n    countCompleteness(customerObj : SQLiteTable,telArraySize : number,emailArraySize : number,addressAddressSize : number) {\n        console.debug('countCompleteness',customerObj,telArraySize,emailArraySize,addressAddressSize);\n        \n        //count Completeness\n        let completeness: number = 0;\n        let countColumnName = ['FirstName', 'LastName', 'Occupation', 'Company', 'AgeRange', 'Gender',\n            'Income', 'Source', 'Marriage', 'Children', 'Familiarity', 'RecentStatus', 'MANPA',\n            'ContactFrequancy', 'Possibility'];\n\n        for (let columnName of countColumnName) {\n            if (StringUtils.isNotEmpty(customerObj.getValue(columnName))) {\n                console.debug('hasData',columnName + '=>' + customerObj.getValue(columnName));\n                completeness++;\n            }\n        }\n\n        //count birthday\n        if (StringUtils.isNotEmpty(customerObj.getValue('BirthdayYear')) &&\n        StringUtils.isNotEmpty(customerObj.getValue('BirthdayMonth')) &&\n        StringUtils.isNotEmpty(customerObj.getValue('BirthdayDate'))) completeness++;\n\n        //count phone/email/address\n        if (telArraySize != 0) completeness++;\n        if (emailArraySize != 0) completeness++;\n        if (addressAddressSize != 0) completeness++;\n\n        console.debug('orginal completeness',completeness,(countColumnName.length + 4));\n\n        completeness = (completeness / (countColumnName.length + 4));\n\n        console.debug('before round completeness', completeness);\n        completeness = Math.round(completeness * 100) / 100;\n        console.debug('after round completeness', completeness);\n\n        customerObj.setValue('Completeness', completeness);\n    }\n\n    setCustomerDefaultValue(dataObject: SQLiteTable) {\n        \n        //count age\n        if (StringUtils.isNotEmpty(dataObject.getValue('BirthdayYear')) && \n        StringUtils.isNotEmpty(dataObject.getValue('BirthdayMonth')) && \n        StringUtils.isNotEmpty(dataObject.getValue('BirthdayDate'))) {\n            let birthday = new Date(Number(dataObject.getValue('BirthdayYear')),\n                Number(dataObject.getValue('BirthdayMonth') - 1),\n                Number(dataObject.getValue('BirthdayDate')));\n\n            let age = this.countAge(birthday);\n            dataObject.setValue('age', age);\n\n            //check age range\n            if (StringUtils.isEmpty(dataObject.getValue('AgeRange'))) {\n                let ageRange = this.countAgeRange(age);\n                if(ageRange != undefined) {\n                    dataObject.setValue('AgeRange', ageRange);\n                }\n            }\n\n        }\n\n    }\n\n    countAgeRange(age : number) {\n        console.debug('countAgeRange',age);\n        let rangeResult;\n        let ageRange: Array<ProfileCode> = this.profileCodeService.getCodeArray('Customer_Age');\n        ageRange.forEach(profileCode => {\n            let args = profileCode.getArguments();\n            console.debug('customer-utils countAgeRange args',args);\n            \n            let obj = JSON.parse(args);\n            console.debug('customer-utils countAgeRange obj',obj);\n            if (age >= obj.start && age <= obj.end) {\n                console.debug('match age range',profileCode.getCode());\n                rangeResult = profileCode.getCode();\n            }\n        });\n\n        console.debug('rangeResult',rangeResult);\n\n        return rangeResult;\n    }\n\n    countAge(birthday : Date) : number{\n        let dates = this.calCEIntervalDays(birthday, new Date());\n        console.debug('dates', dates);\n        let age = Math.floor(dates / 365);\n        console.debug('age', age);\n\n        return age;\n    }\n\n    /**\n     * javascriptå³å¥èµ·å§æ¥èçµæ\n     * æ¥ææ ¼å¼çºæ°åå¹´ææ¥(EX.1060802)\n     * å³å¥ 1060702,1060802 æåå³31å¤©\n     * å³å¥ 1060901,1061001 æåå³30å¤©\n     * @param  sDate \n     * @param  eDate \n     * @return å¤©æ¸\n     */\n    calRocIntervalDays(sDate, eDate) {\n        var msecPerMinute = 1000 * 60;\n        var msecPerHour = msecPerMinute * 60;\n        var msecPerDay = msecPerHour * 24;\n        sDate = this.leftPad(sDate, 7, '0');\n        eDate = this.leftPad(eDate, 7, '0');\n        var begDateStr = \"\" + sDate.substring(3, 5) + \"/\" + sDate.substring(5) + \"/\" + (Number(sDate.substring(0, 3)) + Number(1911));\n        var endDateStr = \"\" + eDate.substring(3, 5) + \"/\" + eDate.substring(5) + \"/\" + (Number(eDate.substring(0, 3)) + Number(1911));\n        var begDate = new Date(begDateStr);\n        var endDate = new Date(endDateStr);\n        var interval = endDate.getTime() - begDate.getTime();\n        var days = Math.floor(interval / msecPerDay);\n        return days;\n    }\n    /**\n     * javascriptå³å¥èµ·å§æ¥èçµæ\n     * æ¥ææ ¼å¼çºè¥¿åå¹´ææ¥(EX.20170801)\n     * å³å¥ 20170702,20170802 æåå³31å¤©\n     * å³å¥ 20170901,20171001 æåå³30å¤©\n     * @param  sDate \n     * @param  eDate \n     * @return å¤©æ¸\n     */\n    calCEIntervalDays(sDate, eDate) {\n        // var msecPerMinute = 1000 * 60;\n        // var msecPerHour = msecPerMinute * 60;\n        // var msecPerDay = msecPerHour * 24;\n        // var begDateStr = \"\" + sDate.substring(4, 6) + \"/\" + sDate.substring(6) + \"/\" + sDate.substring(0, 4);\n        // var endDateStr = \"\" + eDate.substring(4, 6) + \"/\" + eDate.substring(6) + \"/\" + eDate.substring(0, 4);\n        // var begDate = new Date(begDateStr);\n        // var endDate = new Date(endDateStr);\n        // var interval = endDate.getTime() - begDate.getTime();\n        // var days = Math.floor(interval / msecPerDay);\n\n        // return days;\n        return differenceInCalendarDays(eDate, sDate);\n\n    }\n    /**\n     * åå·¦è£é¶\n     * Ex:leftPad(3,3,'0')->003\n     * @param  val    [åå¼]\n     * @param  padLen [è£è¶³é·åº¦]\n     * @param  padVal [è£è¶³å¼]\n     * @return        [description]\n     */\n    leftPad(val, padLen, padVal) {\n        if (val.toString().length < padLen) {\n            for (var i = 1; i < padLen; i++) {\n                val = padVal + val;\n                if (val.toString().length >= padLen) {\n                    break;\n                }\n            }\n        }\n        return val;\n    }\n}","import { Component, OnInit, ViewChild, ChangeDetectorRef, Input, TemplateRef, EventEmitter, Output, Optional, Inject, OnDestroy } from '@angular/core';\nimport { trigger, state, style, animate, transition, } from '@angular/animations';\nimport { ExtensionService, Language, StringUtils, DateUtils, PageInfo, DeviceService, ProfileCode, ProfileCodeService, TranslateService, ContactItem } from '@allianzSND/core';\nimport { CalendarService, CalendarEventDetail, CalendarEditComponent } from '@allianzSND/calendar';\nimport { CustomerService } from '../../service/customer-service.service';\nimport { CustomerTel } from '../../service/model/CustomerTel';\nimport { CustomerFilterCriteria } from '../bean/customer-filter-criteria';\nimport { CustomerAlertItem } from '../../service/model/CustomerAlertItem';\nimport { CustomerConfirmAction } from '../bean/customer-confirm-action';\nimport { CustomerDetail } from '../../service/model/CustomerDetail';\nimport { CustomerItem } from '../../service/model/CustomerItem';\nimport { CustomerContactNote } from '../../service/model/CustomerContactNote';\nimport { CustomerImportGroup } from '../bean/customer-import-group';\nimport { addDays, addHours, addMinutes, getDate, getHours, getMinutes, getMonth, getYear, subMinutes } from 'date-fns';\nimport { syncCustomerToken, storeCustomerToken, customerActionToken } from '../../injectionToken/injection-token';\nimport { syncCustomer } from '../../interface';\nimport { storeCustomer, CUSTOMER_STATE } from '../../interface/storeCustomer.interface';\nimport { customerAction } from '../../interface/customerAction.interface';\nimport { CustomerUtils } from '../../utils/customer-utils';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-customers',\n  templateUrl: './customers.component.html',\n  styleUrls: ['./customers.component.scss'],\n  animations: [\n    trigger('searchBlockAni', [\n      state('*', style({\n        width: '0',\n        opacity: 0\n      })),\n      state('open', style({\n        width: '100%',\n        opacity: 1\n      })),\n      state('closed', style({\n        width: '0',\n        opacity: 0\n      })),\n      transition('open => closed', animate('300ms ease-in')),\n      transition('closed => open', animate('300ms ease-in'))\n    ]),\n  ]\n})\nexport class CustomersComponent implements OnInit, OnDestroy {\n\n  //intergration Calendar Module\n  @ViewChild(CalendarEditComponent) calendarEditComponent;\n  public viewTypeIndex = 2; // 'month'\n  public viewType: string;\n  public viewDate = new Date();\n  public weekStartsOn = 1; // Monday \n\n\n\n  // control mobile show\n  public isShow = false;\n\n  // popup\n  public isExpandDetail = false;\n  public isRefreshDetail = false;\n  public isSaveClick = false;\n\n  public language: Language = new Language();\n\n  //å®¢æ¶æ¸å®çsearch block animate\n  public isOpen: boolean = false;\n  public classSearch: string = '';\n\n  //popup control\n  public isDisplayImportSavePopup = false; //import popup\n  public isDisplaySavePopup = false; //save popup\n  public isDisplayDelCustomerPopup = false; //delete customer popup\n  public isDisplayConfirmAlertPopup = false; //confirm alert popup\n  public isDisplayInfoAlertPopup = false; //info alert popup\n  public isDisplayUpdateRemind = false; //alert customer over 6 month popup\n  public isDisplayDeleteRemind = false; //alert customer over 6 month & 7day popup\n  public isPopupImport = false; //import popup\n  public isPopupFilter = false; //filter popup\n  public isExpandEdit = false; // appointment popup\n  public isPopupCallPhone = false; //call customer phone popup\n  public isPopupNoteDetail = false; //contact detail popup\n  public isPopupEditNote = false; //add/edit contact note popup\n  public isPopupDeleteNote = false; //delete contact note popup\n  public isPopupConfirmDisable = true; // confirmPopup btn is disable default\n  public isDisplayDeletePopup = false; //delete success popup\n\n  //control overtime customer list\n  public alertOverTimeList = new Array<CustomerAlertItem>();\n\n  //control auto delete customer list\n  public alertAutoDeleteCustomer = new Array<CustomerAlertItem>();\n\n  //cache confirm action\n  private _confirmAction: CustomerConfirmAction = new CustomerConfirmAction();\n\n  //control refresh  content\n  public isLoadingFinishContent: boolean = false;\n\n  //control\n  public isLazyLoading: boolean = true;\n\n  //intergration customer-detail used\n  //call phone obj\n  public callPhoneTelArray: Array<CustomerTel>;\n\n  //intergration customer-contact-list used\n  //customer contact detail obj\n  public customerContactDetail: CustomerContactNote;\n  public customerContactList: Array<CustomerContactNote> = [];\n  public contactListPageInfo = new PageInfo();\n\n  public calendarEventDetail: CalendarEventDetail;\n  public viewDateCalendarEventList: Array<CalendarEventDetail> = [];\n\n  //intergration customer-list\n  public customerList = new Array<CustomerItem>();\n  public clickItem: CustomerItem;\n  public customerListPageInfo = new PageInfo();\n  public filterCriteria = new CustomerFilterCriteria();\n  public filterType = '';\n\n  public optionMap: Map<string, Array<ProfileCode>> = new Map<string, Array<ProfileCode>>();\n  public translateMap: Map<string, string> = new Map<string, string>();\n\n  private dayTypesList: Array<string> = ['Cross_Day', 'All_Day'];\n  private noSchedule: string = 'No_Schedule';\n\n  public activityTypeList: Array<ProfileCode> = []; // DBä¸­ææactivityType\n  public alertTypeList: Array<ProfileCode> = [];\n\n\n  //intergration customer-import\n  public importContractMap = new Map<string, CustomerImportGroup>();\n  public mobileResultSize: number = 0;\n  public importData: boolean = false;\n  public importContactList: Array<ContactItem> = [];\n\n  //filter customer attribute\n  public isLoadCriteria: boolean = false;\n  public isClearCriteria: boolean = false;\n\n  //import result(success | fail);\n  public _onImportResult: boolean = false;\n\n\n  //intergration customer-edit used\n  //add/edit contact note attribute\n  private noteEditClientID: string;\n  public noteCurrentTime: Date = new Date();//add/edit Note current time\n  public noteMessage: string = '';//add/edit Note Message\n  private noteClientID: string = '';//edit/delete noteClientID\n  public isRefreshContactList: boolean = false;\n  public loadContactList: boolean = false;\n\n\n\n  // search animate in filter\n  public classBarMove: string = '';\n\n  //listener route back event\n  private _reloadData = false;\n\n  //intergration customer-detail used\n  public customerDetail: CustomerDetail = new CustomerDetail();\n\n  //current edit customer Id\n  private currentCustomer: CustomerDetail = null;\n\n  // current customer state\n  private customerState: CUSTOMER_STATE = CUSTOMER_STATE.FIRST;\n\n  //pre saved criteria\n  private pre_criteria: CustomerFilterCriteria = new CustomerFilterCriteria();\n\n  //pre saved customerlist\n  private pre_customerList: Array<CustomerItem>;\n\n  //subscribe of store\n  private criteriaChanges;\n  private customerDetailChanges;\n  private stateChanges;\n  private customerListChanges;\n\n  //subject of clear & save filter\n  public clearSubject = new Subject();\n  public saveFilterSubject = new Subject();\n\n\n  //for extension used\n  @Input() detailPreTemplate: TemplateRef<any>;\n  @Input() detailPostTemplate: TemplateRef<any>;\n  @Output() detailModel: EventEmitter<CustomerDetail> = new EventEmitter();\n\n  constructor(private customerService: CustomerService,\n    private calendarService: CalendarService,\n    private translateService: TranslateService,\n    private changeDetector: ChangeDetectorRef,\n    private deviceService: DeviceService,\n    private dateUtils: DateUtils,\n    private profileCodeService: ProfileCodeService,\n    private extensionService: ExtensionService,\n    private customerUtils: CustomerUtils,\n    @Optional() @Inject(storeCustomerToken) private customerStore: storeCustomer,\n    @Optional() @Inject(syncCustomerToken) private customerSync: syncCustomer,\n    @Optional() @Inject(customerActionToken) private customerAction: customerAction,\n\n\n  ) {\n\n  }\n\n  ngOnDestroy() {\n    if (this.customerStore) {\n      this.criteriaChanges.unsubscribe();\n      this.customerDetailChanges.unsubscribe();\n      this.stateChanges.unsubscribe();\n      this.customerListChanges.unsubscribe();\n    }\n  }\n\n\n  ngOnInit() {\n    this.activityTypeList = this.profileCodeService.getCodeArray('Calendar_Type');\n    this.alertTypeList = this.profileCodeService.getCodeArray('Calendar_RemindTime');\n    this.optionMap.set('Calendar_Type', this.activityTypeList);\n    this.optionMap.set('Calendar_RemindTime', this.alertTypeList);\n\n    this.dayTypesList.forEach((dayType) => {\n      this.translateMap.set(dayType, this.translateService.translate(dayType))\n    });\n    this.translateMap.set(this.noSchedule, this.translateService.translate(this.noSchedule));\n\n\n\n    if (this.customerStore) {\n      this.criteriaChanges = this.customerStore.getCriteria().subscribe((criteria) => {\n        this.pre_criteria = criteria;\n      })\n\n      this.customerDetailChanges = this.customerStore.getCurrentCustomerDetail().subscribe(detail => {\n        this.currentCustomer = detail;\n      });\n\n      this.customerListChanges = this.customerStore.getCustomerList().subscribe(list => {\n        this.pre_customerList = list;\n      })\n\n      this.stateChanges = this.customerStore.getState().subscribe((state) => {\n\n        console.log(\"main state: \", state);\n        //console.log(\"curreontCustomer: \", this.currentCustomer);\n        if (state == CUSTOMER_STATE.EDIT_SAVED && this.customerState != CUSTOMER_STATE.EDIT_SAVED) {\n\n          //after saved, check if current ID in criteria\n          console.log(\"state == CUSTOMER_STATE.EDIT_SAVED\");\n          console.log(\"currentCustomer: \", this.currentCustomer);\n          this.isDisplaySavePopup = true;\n          this.customerList = this.pre_customerList;\n          this.filterCriteria = this.pre_criteria;\n          if (this.pre_criteria.hasCriteria()) {\n            this.customerService.checkInFilterCriteria(this.currentCustomer.clientID, this.pre_criteria).subscribe(result => {\n              if (!result) {\n                this.customerList.forEach(item => {\n                  if (item.clientID == this.currentCustomer.clientID) {\n                    item.isHighLight = true;\n                  }\n                });\n                this.customerList = [...this.customerList];\n              }\n              else {\n                this.customerList.forEach(item => {\n                  if (item.clientID == this.currentCustomer.clientID) {\n                    console.debug('change isHighLight status');\n                    item.isHighLight = false;\n                  }\n                });\n              }\n              this.customerList.forEach(item => {\n                if (item.clientID == this.currentCustomer.clientID) {\n                  item.firstName = this.currentCustomer.firstName;\n                  item.lastName = this.currentCustomer.lastName;\n                  item.tag = this.currentCustomer.possibility;\n                  item.complementPercent = this.customerUtils.countCompletenessByProfile(this.currentCustomer);\n                }\n              });\n              this.customerList = [...this.customerList];\n\n              this.customerStore.setCustomerList(this.customerList);\n\n            })\n          }\n          else {\n            this.customerList.forEach((item) => {\n              if (item.clientID == this.currentCustomer.clientID) {\n                item.firstName = this.currentCustomer.firstName;\n                item.lastName = this.currentCustomer.lastName;\n                item.tag = this.currentCustomer.possibility;\n                item.complementPercent = this.customerUtils.countCompletenessByProfile(this.currentCustomer);\n              }\n            });\n            this.customerList = [...this.customerList];\n          }\n\n          this.onGetCustomerDetailByID(this.currentCustomer.clientID);\n          this.refreshContactNote(false);\n          // this.changeDetector.detectChanges();\n        }\n        else if (state == CUSTOMER_STATE.EDIT && this.customerState != CUSTOMER_STATE.EDIT && this.customerState == CUSTOMER_STATE.FIRST) {\n          // edit/click page click last page\n\n          this.customerList = this.pre_customerList;\n          this.filterCriteria = this.pre_criteria;\n          //this.onGetCustomerDetailByID(this.currentCustomer.clientID);\n          if (StringUtils.isEmpty(this.currentCustomer.clientID)) {\n            this.refreshCustomerList(false);\n          }\n          else {\n            this.onGetCustomerDetailByID(this.currentCustomer.clientID);\n            this.refreshContactNote(false);\n          }\n        }\n        else if (this.customerState == CUSTOMER_STATE.FIRST && state == CUSTOMER_STATE.DISPLAY) {\n          //firt in, fetch preset filter\n          console.log(\"this.customerState == CUSTOMER_STATE.FIRST && state == CUSTOMER_STATE.DISPLAY\");\n          this.loadPresetCriteria().then(() => {\n            this.refreshCustomerList(false);\n          });\n        }\n        else if (state == CUSTOMER_STATE.ADD_SAVED) {\n\n          //after add , get pre_criteria && refresh customerlist\n          console.log(\"state == CUSTOMER_STATE.ADD_SAVED\");\n          this.isDisplaySavePopup = true;\n          this.filterCriteria = this.pre_criteria;\n          this.refreshCustomerList(false);\n        }\n        this.customerState = state;\n      })\n      this.customerStore.setState(CUSTOMER_STATE.DISPLAY);\n\n    }\n    else {\n      this.refreshCustomerList(false);\n    }\n    this.refreshContactNote(false);\n\n\n\n    //check is first time open this function\n    if (this.customerService.isFirstTime()) {\n\n      console.log('customer is first time');\n\n      //check customer data over 6month\n\n      this.customerService.getOverTimeCustomerList(\"\").subscribe(data => {\n        this.alertOverTimeList = data;\n        if (this.alertOverTimeList.length != 0) {\n\n          this.customerService.updateMessageToRead('OverTime', 'Customer').subscribe(data => {\n            this.isDisplayUpdateRemind = true;\n          });\n\n        }\n      });\n\n\n\n\n      //check customer data over 6month & 7day\n      this.customerService.getAutoDeleteCustomerList(\"\").subscribe(data => {\n        console.log(\"customerAutoDelete: \", data);\n        this.alertAutoDeleteCustomer = data;\n        if (this.alertAutoDeleteCustomer.length != 0) {\n\n          this.customerService.updateMessageToRead('AutoDelete', 'Customer').subscribe(data => {\n            console.log(\"updateMessageToRead: \", data);\n            this.isDisplayDeleteRemind = true;\n          });\n\n\n        }\n      });\n\n\n      //check customer info alert\n      let timerObj = this.extensionService.getConfigValue('CustomerInfoAlertTimer');\n      console.debug('timerObj', timerObj);\n      this._checkIsInfoAlertTime(timerObj);\n\n\n\n    }\n  }\n\n\n  refreshCustomerList(isAppend: boolean) {\n    console.debug('refreshCustomerList append', isAppend);\n    console.debug(this.filterCriteria);\n    console.debug(this.customerListPageInfo);\n\n    //fetch customer-list data\n    if (!isAppend) this.customerListPageInfo.resetPage();\n\n    this.customerService.getCustomerList(this.filterCriteria, this.customerListPageInfo).subscribe(data => {\n      console.log(\"data in criteria: \", data);\n      if (!isAppend) this.customerList = [...data];\n      else this.customerList = [...this.customerList, ...data];\n\n      if ((!this.filterCriteria.hasCriteria())) {\n        this.filterType = 'NONE';\n      }\n      else {\n        this.filterType = StringUtils.isNotEmpty(this.filterCriteria.keyword) ? 'SEARCH' : 'FILTER';\n\n      }\n\n      if (this.customerStore) {\n        this.customerStore.setCustomerList(this.customerList);\n      }\n\n\n      if (this.customerList.length > 0) {\n        this.onGetCustomerDetailByID(this.customerList[0].clientID);\n      }\n      else {\n        this.customerDetail = new CustomerDetail();\n      }\n\n      // this.changeDetector.detectChanges();\n    });\n  }\n\n  /* integration contact-list */\n  refreshContactNote(isAppend: boolean) {\n\n\n    //if append data will next page\n    if (!isAppend) this.contactListPageInfo.resetPage();\n\n    this.customerService.getCustomerContactNote(this.customerDetail.clientID, this.contactListPageInfo).subscribe(data => {\n      if (isAppend) this.customerContactList = this.customerContactList.concat(data);\n      else this.customerContactList = data;\n\n      console.debug('refreshContactNote success isRefreshContactList status');\n\n    });\n\n  }\n\n  onGetCustomerContactListByID(clientID) {\n    this.customerService.getCustomerContactNote(clientID, this.contactListPageInfo).subscribe(data => {\n      this.customerContactList = data;\n    });\n  }\n\n  _checkIsInfoAlertTime(timerObj) {\n    let infoAlertDateRange: Array<Object> = timerObj.DateRange;\n    let infoAlertTimeRange: Object = timerObj.TimeRange;\n\n    let now = new Date();\n    console.debug('now', now);\n    console.debug('now month', now.getMonth() + 1);\n    console.debug('now date', now.getDate());\n    console.debug('now hours', now.getHours());\n    infoAlertDateRange.forEach(element => {\n      let month = element['month'];\n      let date = element['date'];\n\n      if ((now.getMonth() + 1 == Number.parseInt(month)) && now.getDate() == Number.parseInt(date)) {\n        if (now.getHours() >= Number.parseInt(infoAlertTimeRange['start'])\n          && now.getHours() <= Number.parseInt(infoAlertTimeRange['end'])) {\n          this.isDisplayInfoAlertPopup = true;\n          return;\n        }\n      }\n\n    });\n\n\n  }\n\n  onGetCustomerDetailByID(clientID) {\n    this.customerService.getCustomerDetail(clientID).subscribe(data => {\n      this.customerDetail = data;\n      this.customerService.convertCustomerDetailDisplayMode(this.customerDetail);\n\n    });\n\n\n  }\n\n  toggleSearch() {\n    this.isOpen = !this.isOpen;\n    this.classSearch = this.isOpen ? ' active' : ''\n    if (!this.isOpen) {\n      // this.filterCriteria = new CustomerFilterCriteria();\n      this.filterCriteria.keyword = '';\n      if (this.customerStore) {\n        this.customerStore.setCriteria(this.filterCriteria);\n      }\n      this.refreshCustomerList(false);\n    }\n\n  }\n\n  // search keypress\n  searchCustomerName(name) {\n    console.debug('searchCustomerName', name);\n\n    // this.filterCriteria = new CustomerFilterCriteria();\n    this.filterCriteria.keyword = name;\n    if (this.customerStore) {\n      this.customerStore.setCriteria(this.filterCriteria);\n    }\n    this.refreshCustomerList(false);\n\n  }\n\n  trackByFn(index, item) {\n    return item.name;\n  }\n\n\n  //when customer-list click get click Item\n  onChangeCustomer(customerItem: CustomerItem) {\n\n    this.clickItem = customerItem;\n\n\n\n    //get CustomerDetail\n    this.onGetCustomerDetailByID(customerItem.clientID);\n\n    //get CustomerNote\n    this.onGetCustomerContactListByID(customerItem.clientID);\n    this.isShow = true;\n\n  }\n\n  //when customer-list fetch next record\n  onCustomerLoad() {\n    this.customerListPageInfo.nextPage();\n\n    this.refreshCustomerList(true);\n  }\n\n  //when customer-list sync data to backend\n  onCustomerRefresh() {\n    //sync & reload list\n    this.customerSync.sync().subscribe((resp) => {\n      this.refreshCustomerList(false);\n    })\n  }\n\n  deleteCustomer(customerClientID: string) {\n    this.isDisplayDelCustomerPopup = true;\n  }\n\n  doDeleteCustomer() {\n\n    this.customerList = this.customerList.filter(x => x.clientID != this.customerDetail.clientID);\n    this.onGetCustomerDetailByID(this.customerList[0].clientID);\n\n    this.customerService.deleteCustomerProfile(this.customerDetail.clientID).subscribe((data) => {\n      console.log(\"customerService.doDeleteCustomer()\", data);\n\n      if (data.status) {\n\n        if (this.customerStore) {\n          this.customerStore.setCustomerList(this.customerList);\n        }\n\n\n\n\n        this.isShow = false;\n        this.isDisplayDeletePopup = true;\n        // this.changeDetector.detectChanges();\n      }\n    });\n  }\n\n  addAppointment(customerClientID: string) {\n    let currentTime; // adjust time to next interval\n    currentTime = new Date(getYear(this.viewDate), getMonth(this.viewDate), getDate(this.viewDate), getHours(new Date()), getMinutes(new Date()));\n    currentTime = addMinutes(currentTime, (5 - getMinutes(currentTime) % 5));  // adjust minutes to next 5 minutes\n    currentTime = addHours(currentTime, 1);\n    this.calendarEventDetail = new CalendarEventDetail('', '', '', '', null, 'N', currentTime, addHours(currentTime, 1), 'Y', '8', null, '', '', null);\n    let queryDate = new Date(getYear(this.viewDate), getMonth(this.viewDate), getDate(this.viewDate), 0, 0, 0);\n    this.calendarService.getCalendarEventList(queryDate, subMinutes(addDays(this.viewDate, 1), 1), '').subscribe(data => {\n      this.viewDateCalendarEventList = data;\n      this.onToggleAppointmentModal(true);\n    });\n  }\n\n  onClickAppointmentSave() {\n    this.isSaveClick = true;\n  }\n\n  onToggleAppointmentModal(val) {\n    // console.log(\"X\");\n    this.isExpandEdit = val;\n  }\n\n  onSaveCalendarEvent(calendarEventDetail: CalendarEventDetail) {\n    //alert(calendarEventDetail);\n    this.isSaveClick = false;\n    if (calendarEventDetail) {\n      this.calendarService.addCalendarEvent(calendarEventDetail).subscribe(data => {\n\n        if (data.status) {\n          this.isDisplaySavePopup = true;\n          calendarEventDetail.clientID = data.clientID;\n          this.calendarEventDetail = calendarEventDetail;\n\n          this.onToggleAppointmentModal(false);\n        }\n\n      });\n    }\n\n  }\n\n  addCustomer() {\n\n    this.isDisplayConfirmAlertPopup = false;\n    // this.changeDetector.detectChanges();\n    let detail = new CustomerDetail();\n    if (this.customerStore) {\n      this.customerStore.setCurrentCustomerDetail(detail);\n      this.customerStore.setState(CUSTOMER_STATE.EDIT);\n    }\n    if (this.customerAction) {\n      this.customerAction.afterCustomerEdit(detail);\n    }\n  }\n\n  editCustomer(customerClientID: string) {\n    if (this.customerStore) {\n      this.customerStore.setState(CUSTOMER_STATE.EDIT);\n      this.customerService.getCustomerDetail(customerClientID).subscribe((detail: CustomerDetail) => {\n        this.customerStore.setCurrentCustomerDetail(detail);\n        if (this.customerAction)\n          this.customerAction.afterCustomerEdit(detail);\n      })\n\n\n    }\n\n\n  }\n\n  detailChange(customerDetail: CustomerDetail) {\n    console.log('detailChange', customerDetail);\n    this.detailModel.emit(customerDetail);\n\n  }\n\n  followChange(obj) {\n    this.customerService.updateCustomerFollowStatus(obj.clientID, obj.isFollow).subscribe((data) => {\n      //this.refreshCustomerList(false);\n      //console.log(JSON.stringify(this.customerList));\n      if (this.filterCriteria) {\n        this.customerService.checkInFilterCriteria(obj.clientID, this.filterCriteria).subscribe(result => {\n\n          this.customerList.forEach(item => {\n            if (item.clientID == obj.clientID) {\n              //console.debug('change isHighLight status in follow');\n              if (result) {\n                item.isHighLight = false;\n              }\n              else {\n                item.isHighLight = true;\n              }\n            }\n          });\n        })\n      }\n\n      this.customerList.filter(x => x.clientID == obj.clientID).forEach((value) => {\n        value.isFollow = obj.isFollow;\n      });\n    });\n\n\n    //this.followChangeClientID = obj.clientID;\n\n  }\n\n  addNote() {\n    console.debug('addNote');\n    this.noteCurrentTime = new Date();\n    this.noteMessage = '';\n    this.isPopupEditNote = true;\n  }\n\n  editNote(note: CustomerContactNote) {\n    console.debug('editNote', note);\n\n    this.noteEditClientID = note.getClientID();\n    this.noteCurrentTime = new Date();\n    this.noteMessage = note.noteMessage;\n    this.isPopupEditNote = true;\n\n  }\n\n  displayNote(note: CustomerContactNote) {\n    console.debug('displayNote', note);\n    this.customerContactDetail = note;\n\n    // add click customer name\n    this.customerContactDetail.name = this.customerDetail.lastName + this.customerDetail.firstName;\n\n    this.isPopupNoteDetail = true;\n  }\n\n\n  deleteNote(note: CustomerContactNote) {\n    console.debug('deleteNote', note);\n    this.noteClientID = note.getClientID();\n\n    this.isPopupDeleteNote = true;\n  }\n\n  doDeleteContact() {\n    this.customerService.deleteCustomerContact(this.noteClientID).subscribe(data => {\n\n      console.log(\"customerService.deleteNote()\", data);\n\n      if (data.status) {\n        this.customerContactList = this.customerContactList.filter(x => x.getClientID() != this.noteClientID);\n        this.noteClientID = '';\n        this.isDisplayDeletePopup = true;\n      }\n    });\n  }\n\n  onSaveNote(event) {\n\n    /* the same save btn for edit/add ,event also the same event, how to distinguish*/\n    //alert(JSON.stringify(this.noteMessage));\n\n    if (StringUtils.isEmpty(this.noteMessage)) {\n      alert('Message is required!!');\n    }\n    else {\n      this.customerService.addCustomerContact(this.noteEditClientID, this.customerDetail.clientID, this.noteMessage, this.noteCurrentTime).subscribe(data => {\n\n        console.log(\"customerService.saveNote()\", data);\n\n        if (data.status) {\n          console.debug('saveNote success , close popup & refresh list', this.isDisplaySavePopup, 'isRefreshContactList', this.isRefreshContactList);\n\n          // if(StringUtils.isNotEmpty(this.noteEditClientID)) {\n\n          //   let array = this.customerContactList.filter(x => x.getClientID() == this.noteEditClientID).forEach((value) =>{\n          //     value.noteMessage = this.noteMessage;\n          //   });\n\n          //   alert(array.length);\n          // }\n          // else {\n          //   this.refreshContactNote(false);\n          // }\n\n\n          this.noteEditClientID = undefined;\n          this.isPopupEditNote = false;\n          this.isDisplaySavePopup = true;\n          this.refreshContactNote(false);\n\n\n        }\n      });\n\n    }\n\n    // console.debug('saveNote', event);\n    //console.debug('clickClientID', this.noteEditClientID, this.noteEditClientID, 'noteCurrentTime', this.noteCurrentTime, 'noteMessage', this.noteMessage);\n    //alert(JSON.stringify(event));\n    // if (StringUtils.isEmpty(this.noteMessage)) {\n    //   alert('Message is required!!');\n    // }\n    // else {\n    //   this.customerService.addCustomerContact(this.noteEditClientID, this.customerDetail.clientID, this.noteMessage, this.noteCurrentTime).subscribe(data => {\n\n    //     console.log(\"customerService.saveNote()\", data);\n\n    //     if (data.status) {\n    //       console.debug('saveNote success , close popup & refresh list', this.isDisplaySavePopup, 'isRefreshContactList', this.isRefreshContactList);\n    //       this.noteEditClientID = undefined;\n    //       this.isPopupEditNote = false;\n    //       this.isDisplaySavePopup = true;\n    //       this.refreshContactNote(false);\n    //     }\n    //   });\n    // }\n\n  }\n\n  showConfirmPopup(action, optionArray) {\n\n    this._confirmAction.action = action;\n    this._confirmAction.option = optionArray;\n\n    this.isDisplayConfirmAlertPopup = true;\n    //default btn is disable\n    this.isPopupConfirmDisable = true; // true;\n  }\n\n  confirmPopup() {\n\n    if (this._confirmAction.action == 'add') {\n      this.addCustomer();\n    }\n\n    // 2019/03/25 Jeffery remove because edit not showpopup\n    // else if (this._confirmAction.action == 'edit') {\n    //   this.editCustomer(this._confirmAction.option[0]);\n    // }\n\n    else if (this._confirmAction.action == 'import') {\n      this.import();\n    }\n\n    this.isDisplayConfirmAlertPopup = false;\n  }\n\n  // detect confirm popup to content bottm and the btn can click\n  detectScroll(isBtm) {\n    console.log('in detect scroll===', isBtm);\n    if (isBtm) {\n      this.isPopupConfirmDisable = false\n    }\n  }\n\n\n\n  import() {\n\n    this.deviceService.searchContactsByName(\"\").subscribe(data => {\n      let importList = data;\n      console.debug('import result ', importList);\n\n      this.importContractMap.clear();\n\n      //regroup\n      importList.forEach(element => {\n\n        console.debug(element.lastname);\n\n        //if no lastname,use first name\n        if (StringUtils.isEmpty(element.lastname)) {\n          element.lastname = element.firstname;\n          element.firstname = '';\n        }\n\n        let name = element.lastname;\n\n        if (name != null && name.length > 0) {\n          let firstWord = name.substring(0, 1);\n          firstWord = firstWord.toLowerCase();\n          console.debug('firstWord =' + firstWord);\n\n          let group: CustomerImportGroup = this.importContractMap.get(firstWord);\n          if (group == undefined) group = new CustomerImportGroup(firstWord);\n\n          group.addItem(element);\n          this.importContractMap.set(firstWord, group);\n        }\n\n      });\n\n      console.debug('importContractMap', this.importContractMap);\n    });\n\n    this.isPopupImport = true;\n\n\n  }\n\n  //control import popup is display\n  displayImportPopup(isShow: boolean) {\n    this.isPopupImport = isShow;\n  }\n\n  //when keypress keyword refresh contract list\n  refreshImport(keyword) {\n    this.importContractMap.forEach((group: CustomerImportGroup, groupName: string) => {\n      // console.log(groupName, group);\n\n      group.isShow = false;\n      group.getItems.forEach((item: ContactItem) => {\n        // console.debug('item',item);\n        let name: string = item.lastname + item.firstname;\n        name = name.toLowerCase();\n        // console.debug(name);\n        if (name.indexOf(keyword) == -1) {\n          item.isShow = false;\n        }\n        else {\n          item.isShow = true;\n          group.isShow = true;\n        }\n      })\n    });\n  }\n\n  doImport() {\n    this.customerService.importContact(this.importContactList).subscribe(data => {\n      //alert(\"1\"+JSON.parse(JSON.stringify(data)).status);\n      let status = (JSON.parse(JSON.stringify(data))).status;\n\n      if (status) {\n\n        this.isPopupImport = false;\n        this.isDisplayImportSavePopup = true;\n        this.mobileResultSize = 0;\n\n        //refresh customer list\n        this.refreshCustomerList(false);\n      }\n    });\n  }\n\n\n\n\n  /* customer-import*/\n  onImportCustomer(importItems) {\n    console.debug('importItems', importItems);\n\n    this.importContactList = importItems;\n    this.mobileResultSize = importItems.length;\n  }\n\n  //call customer function\n  callCustomer(customerClientID: string) {\n    console.debug('callCustomer = ' + customerClientID);\n    this.customerService.getCustomerContactTel(customerClientID).subscribe(data => {\n      this.callPhoneTelArray = data;\n\n      //check number array is single\n      if (this.callPhoneTelArray.length != 0) {\n\n        //only one number just to call out\n        if (this.callPhoneTelArray.length == 1) {\n          this.callPhone(this.callPhoneTelArray[0].tel);\n        }\n        else {\n          this.isPopupCallPhone = true;\n        }\n      }\n\n    });\n\n  }\n\n  //cancel callphone popup\n  cancelCallPhone() {\n    this.isPopupCallPhone = !this.isPopupCallPhone;\n  }\n\n  //call number from phone\n  callPhone(telNumber: string) {\n    console.debug('callPhone', telNumber);\n\n\n    //call phone close popup\n    if (this.isPopupCallPhone) this.isPopupCallPhone = !this.isPopupCallPhone;\n\n\n    window.open('tel:' + telNumber, '_system');\n\n    //popup contact note\n    setTimeout((fun) => {\n      this.addNote();\n    }, 1000);\n  }\n\n\n  //open filter popup\n  filter() {\n    this.isPopupFilter = true;\n  }\n\n  //clear filter item\n  clearFilter() {\n    this.clearSubject.next();\n  }\n\n\n  //filter customer list and close popup\n  doFilter() {\n    this.saveFilterSubject.next();\n  }\n\n  doneCriteria(criteria: CustomerFilterCriteria) {\n    console.debug('doneCriteria', criteria);\n\n    this.filterCriteria = criteria;\n    this.isPopupFilter = false;\n    if (this.customerStore) {\n      this.customerStore.setCriteria(criteria);\n    }\n\n    if (criteria.savePreset) {\n      this.customerService.saveFilterCriteria(criteria).subscribe(data => {\n        console.debug('doneCriteria saveFilterCriteria', data);\n      });\n    }\n\n    this.refreshCustomerList(false);\n  }\n\n  loadPresetCriteria() {\n    //check has preset\n    let criteria = new CustomerFilterCriteria();\n    return new Promise((res) => {\n      this.customerService.getFilterCriteriaPreset().subscribe(data => {\n        console.debug('getfilterCriteriaPreset', data);\n\n        if (data != undefined) {\n\n          let count = 0;\n          for (let column in data) {\n            let values = data[column];\n            console.debug('column', column, 'arrays', values);\n            criteria.addCriteriaCols(column, values);\n            count++;\n          }\n\n          if (count != 0) {\n            criteria.savePreset = true;\n          }\n          this.filterCriteria = criteria;\n        }\n        res();\n      });\n    })\n\n  }\n\n\n  cancelDelete() {\n    console.log('cancelDelete');\n  }\n\n  // refreash content\n  refreshContent() {\n    console.log('content refresh:', this.customerSync);\n    let _this = this;\n    //set timeout for refresh animation\n    setTimeout(() => {\n      this.customerSync.sync().subscribe((resp) => {\n        if (resp) {\n          this.isLoadingFinishContent = true;\n          // this.triggerCustomerListQuery();\n        }\n      })\n    }, 800);\n\n  }\n\n\n  // loading content\n  loadContent(event) {\n    console.log('content loading');\n\n    if (!this.loadContactList) this.loadContactList = true;\n    else {\n      setTimeout(() => {\n        this.isLoadingFinishContent = true;\n      }, 0);\n    }\n\n  }\n\n  contactRefreshDone(val) {\n    console.debug('refresh done');\n    setTimeout(() => {\n      this.isLoadingFinishContent = !val;\n      this.loadContactList = val;\n    }, 0);\n  }\n\n\n  //isShowChange\n  isShowChange(val) {\n    if (this.isShow !== val) {\n      this.isShow = val;\n      // this.changeDetector.detectChanges();\n    }\n  }\n\n  public toNoteTime(time: Date) {\n    return this.dateUtils.toDateString(time, 'yyyy-MM-dd HH:mm');\n  }\n\n\n}\n","import { CustomerDetail } from \"../../service/model/CustomerDetail\";\n\nexport class CustomerDetailResult {\n    //edit profile result\n  private _detailSaveSuccess : boolean = false;\n\n  //edit profile result object\n  private _editDetail : CustomerDetail;\n\n  get detailSaveSuccess() {return this._detailSaveSuccess;}\n  set detailSaveSuccess(isSuccess : boolean) {this._detailSaveSuccess = isSuccess;}\n  \n  get editDetail() {return this._editDetail;}\n  set editDetail(detail) {this._editDetail = detail;}\n\n\n}","import { Component, OnInit, ElementRef, Output, AfterViewInit, ViewChild, Input, TemplateRef, EventEmitter, Optional, Inject, ChangeDetectorRef } from '@angular/core';\nimport { SelectOption } from '@allianzSND/ui';\nimport { ProfileCodeService, ValidationResult, Language, StringUtils } from '@allianzSND/core';\nimport { CustomerService } from '../../service/customer-service.service';\nimport { CustomerDetail } from '../../service/model/CustomerDetail';\nimport { CustomerUtils } from '../../utils/customer-utils';\nimport { CustomerTel } from '../../service/model/CustomerTel';\nimport { CustomerEmail } from '../../service/model/CustomerEmail';\nimport { CustomerAddress } from '../../service/model/CustomerAddress';\nimport { CustomerDetailResult } from '../bean/customer-detail-result';\nimport { storeCustomer, CUSTOMER_STATE } from '../../interface/storeCustomer.interface';\nimport { storeCustomerToken, customerActionToken } from '../../injectionToken/injection-token';\nimport { customerAction } from '../../interface/customerAction.interface';\n\n@Component({\n  selector: 'app-customer-edit',\n  templateUrl: './customer-edit.component.html',\n  styleUrls: ['./customer-edit.component.scss']\n})\nexport class CustomerEditComponent implements OnInit, AfterViewInit {\n\n  @Output() sendContentHeight = new EventEmitter();\n  public contentHeight;\n\n  @ViewChild('inpageMain') content: ElementRef;\n\n  @Input() editPreTemplate: TemplateRef<any>;\n  @Input() editPostTemplate: TemplateRef<any>;\n  @Output() editModel: EventEmitter<CustomerDetail> = new EventEmitter();\n\n\n  public validationResult = new ValidationResult();\n  public customerDetail: CustomerDetail = new CustomerDetail();\n  public pageTitle = 'Edit Profile'; //default\n\n  //select options\n  public optionTel: Array<SelectOption> = new Array();\n  public optionAddress: Array<SelectOption> = new Array();\n  public optionEmail: Array<SelectOption> = new Array();\n  public optionAge: Array<SelectOption> = new Array();\n  public optionGender: Array<SelectOption> = new Array();\n  public optionIncome: Array<SelectOption> = new Array();\n  public optionSource: Array<SelectOption> = new Array();\n  public optionMarriage: Array<SelectOption> = new Array();\n  public optionChildren: Array<SelectOption> = new Array();\n  public optionFamiliarity: Array<SelectOption> = new Array();\n  public optionRecentStatus: Array<SelectOption> = new Array();\n  public optionManpa: Array<SelectOption> = new Array();\n  public optionContactFrequancyPerYear: Array<SelectOption> = new Array();\n\n  public language: Language = new Language();\n\n  public disableAge: boolean = false;\n  public isDisplaySavePopup: boolean = false;\n  public btnSaveDisable: boolean = false;\n  public isShow : boolean = false;\n\n  private _telLimit = 6;\n  private _emailLimit = 3;\n  private _addressLimit = 3;\n  private edit_type = \"add\";\n\n\n  constructor(\n    private customerService: CustomerService,\n    private profileCodeService: ProfileCodeService,\n    private customerUtils: CustomerUtils,\n    private changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(customerActionToken) private customCustomerAction: customerAction,\n    @Optional() @Inject(storeCustomerToken) private customerStore: storeCustomer,\n  ) {\n\n    let telCodeArray = this.profileCodeService.getCodeArray('Customer_TelType');\n    let emailCodeArray = this.profileCodeService.getCodeArray('Customer_EmailType');\n    let addressCodeArray = this.profileCodeService.getCodeArray('Customer_AddressType');\n    let ageCodeArray = this.profileCodeService.getCodeArray('Customer_Age');\n    let genderCodeArray = this.profileCodeService.getCodeArray('Customer_Gender');\n    let incomeCodeArray = this.profileCodeService.getCodeArray('Customer_Income');\n    let sourceCodeArray = this.profileCodeService.getCodeArray('Customer_Source');\n    let marriageCodeArray = this.profileCodeService.getCodeArray('Customer_Marriage');\n    let childrenCodeArray = this.profileCodeService.getCodeArray('Customer_Children');\n    let familiarityCodeArray = this.profileCodeService.getCodeArray('Customer_Familiarity');\n    let recentStatusCodeArray = this.profileCodeService.getCodeArray('Customer_RecentStatus');\n    let manpaCodeArray = this.profileCodeService.getCodeArray('Customer_Status');\n    let contactFrequancyCodeArray = this.profileCodeService.getCodeArray('Customer_ContactFrequancy');\n\n    this.optionTel = this.customerUtils.setCode2Option(telCodeArray);\n    this.optionEmail = this.customerUtils.setCode2Option(emailCodeArray);\n    this.optionAddress = this.customerUtils.setCode2Option(addressCodeArray);\n    this.optionAge = this.customerUtils.setCode2Option(ageCodeArray);\n    this.optionGender = this.customerUtils.setCode2Option(genderCodeArray);\n    this.optionIncome = this.customerUtils.setCode2Option(incomeCodeArray);\n    this.optionSource = this.customerUtils.setCode2Option(sourceCodeArray);\n    this.optionMarriage = this.customerUtils.setCode2Option(marriageCodeArray);\n    this.optionChildren = this.customerUtils.setCode2Option(childrenCodeArray);\n    this.optionFamiliarity = this.customerUtils.setCode2Option(familiarityCodeArray);\n    this.optionRecentStatus = this.customerUtils.setCode2Option(recentStatusCodeArray);\n    this.optionManpa = this.customerUtils.setCode2Option(manpaCodeArray);\n    this.optionContactFrequancyPerYear = this.customerUtils.setCode2Option(contactFrequancyCodeArray);\n\n  }\n\n  ngOnInit() {\n\n    if (this.customerStore) {\n      this.customerStore.getCurrentCustomerDetail().subscribe((data: CustomerDetail) => {\n\n        this.customerDetail = data;\n        if (StringUtils.isEmpty(this.customerDetail.clientID)) {\n          //ADD\n          console.log(\"add :\", this.customerDetail);\n          this.pageTitle = \"\";\n          this.disableAge = false;\n          this.customerDetail = new CustomerDetail();\n          this.customerDetail.ageRange = '';\n          this.edit_type = \"add\";\n        }\n        else {\n          //Edit\n          console.log(\"edit :\", this.customerDetail);\n          this.pageTitle = this.customerDetail.lastName + this.customerDetail.firstName;\n          if (StringUtils.isNotEmpty(this.customerDetail.birthday)) {\n            this.disableAge = true;\n          }\n          else {\n            this.customerDetail.ageRange = '';\n            this.disableAge = false;\n          }\n          this.edit_type = \"edit\";\n        }\n        this.editModel.emit(this.customerDetail);\n        this.changeDetector.detectChanges();\n\n        this.isShow = true;\n      })\n    }\n  }\n\n  validationForm() {\n    console.log(this.customerDetail);\n\n    //valid customer\n    this.validationResult = this.customerService.validProfile(this.customerDetail);\n    if (this.validationResult != null) {\n      setTimeout(() => {\n        this.scrollToError();\n      }, 200);\n    }\n\n  }\n\n\n  // Save btn click\n  saveProfile(event) {\n\n    //valid customer\n    this.validationForm();\n    console.log(this.validationResult.isTrue());\n\n    if (this.validationResult.isTrue()) {\n\n      this.btnSaveDisable = true;\n      //if tel/email/address all empty data , skip it\n      let tmpTelArray = [];\n      let tmpEmailArray = [];\n      let tmpAddressArray = [];\n\n      this.customerDetail.tels.forEach((tel) => {\n        if (!tel.isEmpty()) tmpTelArray.push(tel);\n      })\n\n      this.customerDetail.emails.forEach((email) => {\n        if (!email.isEmpty()) tmpEmailArray.push(email);\n      })\n\n      this.customerDetail.addresses.forEach((address) => {\n        if (!address.isEmpty()) tmpAddressArray.push(address);\n      })\n\n      this.customerDetail.tels = tmpTelArray;\n      this.customerDetail.emails = tmpEmailArray;\n      this.customerDetail.addresses = tmpAddressArray;\n\n      console.log(\"customer-edit-save: \", this.customerDetail);\n      this.customerService.saveCustomerDetail(this.customerDetail).subscribe((data) => {\n        console.debug('saveDetail', data);\n\n        //this.isDisplaySavePopup = true;\n\n        //set result\n        let result = new CustomerDetailResult();\n\n\n        result.detailSaveSuccess = data.status;\n        result.editDetail = this.customerDetail;\n        this.customerService.profileResult = result;\n\n        if (this.customerStore) {\n          this.customerStore.setCurrentCustomerDetail(this.customerDetail);\n          let state = this.edit_type == \"add\" ? CUSTOMER_STATE.ADD_SAVED : CUSTOMER_STATE.EDIT_SAVED;\n          this.customerStore.setState(state);\n        }\n        if (this.customCustomerAction) {\n          this.customCustomerAction.afterCustomerEditSave(this.customerDetail);\n        }\n        this.btnSaveDisable = false;\n      });\n    }\n\n  }\n\n  ngAfterViewInit() {\n    //ç²å¾å§å®¹é«\n    setTimeout(() => {\n      this.contentHeight = this.content.nativeElement.offsetHeight;\n      console.log('ele Height:', this.contentHeight)\n    }, 600);\n\n    this.sendContentHeight.emit(this.contentHeight);\n\n  }\n\n  countAgeRange(birthday) {\n    console.debug('birthday', birthday);\n\n    this.customerDetail.birthday = birthday;\n\n    if (StringUtils.isEmpty(birthday)) {\n      this.customerDetail.ageRange = '';\n      this.disableAge = false;\n    }\n    else {\n      let age = this.customerUtils.countAge(birthday);\n      let ageRange = this.customerUtils.countAgeRange(age);\n      console.debug('ageRange', ageRange);\n\n      if (ageRange != undefined) {\n        this.customerDetail.ageRange = ageRange;\n        this.changeDetector.detectChanges();\n        this.disableAge = true;\n      }\n    }\n    this.changeDetector.detectChanges();\n\n\n  }\n\n  getTelLimit() {\n    return this._telLimit;\n  }\n\n  getEmailLimit() {\n    return this._emailLimit;\n  }\n\n  getAddressLimit() {\n    return this._addressLimit;\n  }\n\n  onAddTelGroup() {\n    console.debug('onAddTelGroup');\n    this.customerDetail.tels.push(new CustomerTel('', 'TelHome', '', 'APP'));\n  }\n\n  onAddMailGroup() {\n    console.debug('onAddMailGroup');\n    this.customerDetail.addEmail(new CustomerEmail('', 'MailHome', '', 'APP'));\n  }\n\n  onAddAddressGroup() {\n    console.debug('onAddAddressGroup');\n    this.customerDetail.addAddress(new CustomerAddress('', 'AddressTypeHome', '', '', '', '', '', 'APP'));\n  }\n\n  onRemoveTelGroup(index) {\n    console.debug('onRemoveTelGroup', index);\n    this.customerDetail.tels.splice(index, 1);\n  }\n\n  onRemoveEmailGroup(index) {\n    console.debug('onRemoveEmailGroup', index);\n    this.customerDetail.emails.splice(index, 1);\n  }\n\n  onRemoveAddressGroup(index) {\n    console.debug('onRemoveAddressGroup', index);\n    this.customerDetail.addresses.splice(index, 1);\n  }\n\n\n  scrollToError() {\n    let errorBlock = document.body.getElementsByClassName('error-msg');\n    if (errorBlock.item(0)) {\n      errorBlock.item(0).parentElement.parentElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\n    }\n    // if (errorBlock[0]) errorBlock[0].scrollIntoView({ behavior: 'smooth', block: 'start' })\n  }\n}\n","import { Component, OnInit, Output, EventEmitter, Input, ChangeDetectorRef, ElementRef, Inject, Optional, Injectable } from '@angular/core';\nimport { StringUtils, Language } from '@allianzSND/core';\nimport { CustomerItem } from '../../service/model/CustomerItem';\nimport { showCustomerRuleToken } from '../../injectionToken/injection-token';\nimport { showCustomerRule } from '../../interface/showCustomerRule.interface';\n\n@Component({\n  selector: 'app-customer-list',\n  templateUrl: './customer-list.component.html',\n  styleUrls: ['./customer-list.component.scss']\n})\nexport class CustomerListComponent implements OnInit {\n\n  //Is Default Data(No Search Status)\n  public isDefaultData: boolean = true;\n  public showSearchNoData: boolean = false;\n\n  public loadingFinish: boolean = true;\n\n  constructor(\n    private changeDetecor: ChangeDetectorRef,\n    private elementRef: ElementRef,\n    @Optional() @Inject(showCustomerRuleToken) private showCustomerRule: showCustomerRule,\n  ) { }\n\n  @Output()\n  public customerClick: EventEmitter<CustomerItem> = new EventEmitter();\n\n  @Output()\n  public customerLoad: EventEmitter<any> = new EventEmitter();\n\n  @Output()\n  public customerRefresh: EventEmitter<any> = new EventEmitter();\n\n  @Input()\n  get customerList() { return this._customerList; }\n  set customerList(customerList: Array<CustomerItem>) {\n    customerList.forEach(item => {\n      item.showName = this.convertNameToShow(item.firstName, item.lastName);\n    })\n    this._customerList = customerList;\n\n    this.loadingFinish = true;\n  }\n  private _customerList: Array<CustomerItem> = [];\n\n  @Input()\n  get filterType() { return this._filterType; }\n  set filterType(filterType) {\n    this._filterType = filterType;\n\n    if (this.customerList.length == 0 && StringUtils.isNotEmpty(this.filterType)) {\n      this.isDefaultData = this.filterType == 'NONE';\n      this.showSearchNoData = this.filterType == 'SEARCH';\n    }\n  }\n  private _filterType;\n\n  public language: Language = new Language();\n  public onClickCustomerID;\n\n\n  ngOnInit() {\n  }\n\n\n  trackByClientID(index, item) {\n    return item.clientID;\n  }\n\n\n\n  async closeSlidingItems() {\n    console.debug('list closeSlidingItems');\n\n    const item = this.elementRef.nativeElement.querySelector('ion-item-sliding');\n    if (item != null) {\n      /// console.debug('item size',item.length);\n      console.debug('item', item);\n      await item.close();\n      await item.closeOpened();\n    }\n\n  }\n\n  onClickCustomer(clientID: string) {\n\n    this.onClickCustomerID = clientID;\n\n    setTimeout(() => {\n      this.closeSlidingItems();\n    }, 300);\n\n    let item = this.customerList.filter(item => item.clientID == clientID);\n\n    this.customerClick.emit(item[0]);\n  }\n\n\n  loadCustomer(e) {\n    console.log('lazy load customer:', e);\n\n    this.customerLoad.emit();\n\n  }\n\n  refreshCustomer() {\n    //set timeout for refresh animation\n    setTimeout(() => {\n        this.customerRefresh.emit();\n    }, 800);\n  }\n\n  convertNameToShow(firstName: string, lastName: string): string {\n    if(this.showCustomerRule) {\n      return this.showCustomerRule.convertName(firstName, lastName);\n    }\n    else {\n      return (firstName + lastName);\n    }\n  }\n}\n","import { Component, OnInit,Input, Output ,EventEmitter, ChangeDetectorRef, TemplateRef } from '@angular/core';\nimport { DateUtils, StringUtils, Language } from '@allianzSND/core'\nimport { CustomerDetail } from '../../service/model/CustomerDetail'; \n\n@Component({\n  selector: 'app-customer-detail',\n  templateUrl: './customer-detail.component.html',\n  styleUrls: ['./customer-detail.component.scss']\n})\nexport class CustomerDetailComponent implements OnInit {\n\n  @Output()\n  private onEditDetail: EventEmitter<string> = new EventEmitter();\n  @Output()\n  private onCallPhone: EventEmitter<string> = new EventEmitter();\n  @Output()\n  private onDeleteDetail: EventEmitter<string> = new EventEmitter();\n  @Output()\n  private onAddAppointment: EventEmitter<string> = new EventEmitter();\n  @Output()\n  private followChange : EventEmitter<{'isFollow': boolean, 'clientID': string}> = new EventEmitter();\n \n  //for extension placeholder\n  @Input()\n  detailPreTemplate:TemplateRef<any>;\n\n  @Input()\n  detailPostTemplate:TemplateRef<any>;\n\n\n  private _customerDetail: CustomerDetail = new CustomerDetail();\n  @Input() \n  get customerDetail() { return this._customerDetail;}\n  set customerDetail(inputCustomerDetail) {\n      //check datasource is from OPUS\n      this._customerDetail = inputCustomerDetail;\n      console.log('inputCustomerDetail: ', inputCustomerDetail);\n      if(this._customerDetail.dataSource == 'OPUS') {\n        this.isEmptyDel = true;\n      }\n      else {\n        this.isEmptyDel = false;\n      }\n\n      this._customerDetail.updateEmptyStatus();\n      this.convertEmptyValToDisplayText(this._customerDetail);\n      this.checkInfoIsEmpty();\n      this.changeCollateButton();\n      \n      this.changeDetctor.detectChanges();\n  }\n\n\n  public language : Language = new Language();\n\n  // empty status\n  public isEmptyAppointment: boolean = false;\n  public isEmptyEdit: boolean = false;\n  public isEmptyDel: boolean = false;\n  public isEmptyDetailInfo: boolean = false;\n  public isEmptyContactNote: boolean = false;\n  public isCollapseBtnShow  : boolean = true;\n  public isHasAgeRange: boolean = false;\n  public isHasContactFrequancy: boolean = false;\n  \n\n  \n\n  constructor(private dateUtils : DateUtils, private changeDetctor:ChangeDetectorRef, \n   ) {\n   \n   }\n   \n\n  ngOnInit() {\n  }\n\n  private changeCollateButton() {\n    console.debug('changeCollateButton',this.customerDetail.tels.length,this.customerDetail.emails.length,this.customerDetail.addresses.length);\n    if(this.customerDetail.tels.length <= 2 && this.customerDetail.emails.length <= 1 && this.customerDetail.addresses.length <= 1) {\n      this.isCollapseBtnShow = false;\n    }\n    else {\n      this.isCollapseBtnShow = true;\n    }\n\n    console.debug('isCollapseBtnShow',this.isCollapseBtnShow);\n  }\n\n\n\n  private checkInfoIsEmpty() {\n    //if detail info is empty , display no data status      \n    if(this.customerDetail.isEmptyInfo) {\n      this.isEmptyDetailInfo = true;\n    }\n    else {\n      this.isEmptyDetailInfo = false;\n    }\n    \n  }\n\n  private convertEmptyValToDisplayText(customerDetail : CustomerDetail) {\n     //if not data set default value(?? or -- --)\n     console.log(\"convertEmptyValToDisplayText: \", customerDetail);\n     if(StringUtils.isEmpty(customerDetail.ageRange)) {\n       this.isHasAgeRange = false;\n     }\n     else {\n       this.isHasAgeRange = true;\n     }\n     if(StringUtils.isEmpty(customerDetail.contactFrequancy)) {\n       this.isHasContactFrequancy = false;\n     }\n     else {\n       this.isHasContactFrequancy = true;\n     }\n     if(StringUtils.isEmpty(customerDetail.gender)) customerDetail.gender = '- -';\n     if(StringUtils.isEmpty(customerDetail.occupation)) customerDetail.occupation = '- -';\n     if(StringUtils.isEmpty(customerDetail.company)) customerDetail.company = '- -';\n     if(StringUtils.isEmpty(customerDetail.income)) customerDetail.income = '- -';\n     if(StringUtils.isEmpty(customerDetail.source)) customerDetail.source = '- -';\n     if(StringUtils.isEmpty(customerDetail.marriage)) customerDetail.marriage = '- -';\n     if(StringUtils.isEmpty(customerDetail.children)) customerDetail.children = '- -';\n     if(StringUtils.isEmpty(customerDetail.familiarity)) customerDetail.familiarity = '- -';\n     if(StringUtils.isEmpty(customerDetail.recentStatus)) customerDetail.recentStatus = '- -';\n     if(StringUtils.isEmpty(customerDetail.manpa)) customerDetail.manpa = '- -';\n     if(StringUtils.isEmpty(customerDetail.children)) customerDetail.children = '- -';\n  }\n\n  public toBirthday() {\n   \n    if(this.customerDetail.birthday != undefined) {\n      return this.dateUtils.toDateString(this.customerDetail.birthday,'yyyy-MM-dd');\n    }\n    else {\n      return '- -';\n    }\n    \n  }\n\n  edit() {\n    this.onEditDetail.emit(this.customerDetail.clientID);\n  }\n\n  delete() {\n    this.onDeleteDetail.emit(this.customerDetail.clientID);\n  }  \n\n  callPhone() {\n    this.onCallPhone.emit(this.customerDetail.clientID);\n  }\n\n  addAppointment() {\n    this.onAddAppointment.emit(this.customerDetail.clientID);\n  }\n\n  trackByFn(index, item) {\n    return item.name;\n  }\n\n  \n  isFollowChange(isFollow : boolean) {\n    console.debug('isFollowChange',isFollow);\n    // display new follow state first\n    this.customerDetail.updateFollowStatus(isFollow);\n    this.changeDetctor.detectChanges();\n   \n    //ouput follow detail change status\n    this.followChange.emit({'isFollow': isFollow, \"clientID\": this.customerDetail.clientID});\n    \n\n  }\n\n}\n","import { Component, OnInit, Input, Output, EventEmitter, ElementRef, Inject } from '@angular/core';\nimport { DateUtils, Language} from '@allianzSND/core';\nimport { CustomerContactNote } from '../../service/model/CustomerContactNote';\n\n@Component({\n  selector: 'app-customer-contact-list',\n  templateUrl: './customer-contact-list.component.html',\n  styleUrls: ['./customer-contact-list.component.scss']\n})\nexport class CustomerContactListComponent implements OnInit {\n\n\n  public language: Language = new Language();\n\n  @Output()\n  private onAddNote: EventEmitter<any> = new EventEmitter();\n\n  @Output()\n  private onDisplayNote: EventEmitter<CustomerContactNote> = new EventEmitter();\n\n  @Output()\n  private onEditNote: EventEmitter<CustomerContactNote> = new EventEmitter();\n\n  @Output()\n  private onDeleteNote: EventEmitter<CustomerContactNote> = new EventEmitter();\n\n  @Output()\n  private contactListRefresh: EventEmitter<any> = new EventEmitter();\n\n \n\n\n  @Input()\n  get contactList() { return this._contactList; }\n  set contactList(contactList) {\n    \n    this._contactList = contactList;\n   \n    setTimeout(() => {\n      this.closeSlidingItems();\n    }, 200)\n  }\n  private _contactList: Array<CustomerContactNote>;\n\n  elementRef: ElementRef;\n  constructor(private dateUtils: DateUtils,\n    @Inject(ElementRef) elementRef: ElementRef) {\n    this.elementRef = elementRef;\n  }\n\n\n  ngOnInit() {\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.closeSlidingItems();\n    }, 200)\n\n  }\n\n  // ionic sliding need to call close event when every refresh\n  async closeSlidingItems() {\n    console.debug('closeSlidingItems');\n  \n\n    const item = this.elementRef.nativeElement.querySelector('ion-item-sliding');\n    if (item != null) {\n      /// console.debug('item size',item.length);\n      console.debug('item', item);\n      await item.close();\n      await item.closeOpened();\n    }\n\n  }\n\n  refreshContactNote() {\n    this.contactListRefresh.emit()\n   \n\n      // need to wait ion-item-sliding create at first from no data (when skelton interface)\n    setTimeout(() => {\n      this.closeSlidingItems();\n    }, 200)\n\n  }\n\n  addNote() {\n    this.onAddNote.emit();\n  }\n\n  displayNote(note : CustomerContactNote) {\n    this.onDisplayNote.emit(note);\n  }\n\n  editNote(note : CustomerContactNote) {\n    this.onEditNote.emit(note);\n  }\n\n  deleteNote(note : CustomerContactNote) {\n    this.onDeleteNote.emit(note);\n  }\n\n\n  trackByClientID(index, item) {\n    return item.getClientID();\n  }\n\n  public toNoteTime(time: Date) {\n    return this.dateUtils.toDateString(time, 'yyyy-MM-dd HH:mm');\n  }\n}\n","import { Component, OnInit, Output, Input, EventEmitter } from '@angular/core';\nimport { ProfileCode, ProfileCodeService, Language } from '@allianzSND/core';\nimport { CustomerFilterCriteria } from '../bean/customer-filter-criteria';\nimport { CustomerService } from '../../service/customer-service.service';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-customer-filter',\n  templateUrl: './customer-filter.component.html',\n  styleUrls: ['./customer-filter.component.scss']\n})\nexport class CustomerFilterComponent implements OnInit {\n\n  public customerType: Array<ProfileCode>;\n  public customerDataSource: Array<ProfileCode>;\n  public possibility: Array<ProfileCode>;\n  public source: Array<ProfileCode>;\n  public familiarity: Array<ProfileCode>;\n  public recentStatus: Array<ProfileCode>;\n  public manpa: Array<ProfileCode>;\n  public gender: Array<ProfileCode>;\n  public marriage: Array<ProfileCode>;\n  public children: Array<ProfileCode>;\n  public income: Array<ProfileCode>;\n  public age: Array<ProfileCode>;\n  public contactFrequency: Array<ProfileCode>;\n  public completeness: Array<ProfileCode>;\n  public birthday: Array<ProfileCode>;\n  public isAsPresent = false; //é¸å®æ¯å¦å°æ­¤æ¬¡é ç®è®æé è¨­\n\n  //control filter column mapping to profilecode array\n  private filterColumnMap: Map<string, Array<ProfileCode>> = new Map();\n\n  //subject to subscribe for open & save & clear\n  @Input()\n  public clear: Subject<any>;\n\n  @Input()\n  public save: Subject<any>;\n\n  @Input()\n  public open: Subject<any>;\n\n\n\n  //Input criteria\n  private _criteria = new CustomerFilterCriteria();\n  @Input()\n  get criteria() {\n    return this._criteria;\n  }\n\n  set criteria(criteria: CustomerFilterCriteria) {\n    console.log(\"set criteria:\", criteria);\n    this._criteria = criteria;\n    this.isAsPresent = criteria.savePreset;\n    this.refreshFilterMap();\n  }\n\n\n  @Output()\n  private doneCriteria: EventEmitter<CustomerFilterCriteria> = new EventEmitter();\n\n\n\n\n  constructor(private customerService: CustomerService, private profileCodeService: ProfileCodeService) {\n\n  }\n\n  public language: Language = new Language();\n\n  ngOnInit() {\n    this.customerType = this.profileCodeService.getCodeArray('Customer_Type');\n    this.customerDataSource = this.profileCodeService.getCodeArray('Customer_DataSource');\n    this.possibility = this.profileCodeService.getCodeArray('Customer_Possibility');\n    this.children = this.profileCodeService.getCodeArray('Customer_Children');\n    this.source = this.profileCodeService.getCodeArray('Customer_Source');\n    this.familiarity = this.profileCodeService.getCodeArray('Customer_Familiarity');\n    this.recentStatus = this.profileCodeService.getCodeArray('Customer_RecentStatus');\n    this.age = this.profileCodeService.getCodeArray('Customer_Age');\n    this.gender = this.profileCodeService.getCodeArray('Customer_Gender');\n    this.income = this.profileCodeService.getCodeArray('Customer_Income');\n    this.marriage = this.profileCodeService.getCodeArray('Customer_Marriage');\n    this.manpa = this.profileCodeService.getCodeArray('Customer_Status');\n    this.contactFrequency = this.profileCodeService.getCodeArray('Customer_ContactFrequancy');\n    this.birthday = this.profileCodeService.getCodeArray('Customer_Birthday');\n    this.completeness = this.profileCodeService.getCodeArray('Customer_Completeness');\n\n    this.filterColumnMap.set('IsFollow', this.customerType);\n    this.filterColumnMap.set('DataSource', this.customerDataSource);\n    this.filterColumnMap.set('Possibility', this.possibility);\n    this.filterColumnMap.set('Source', this.source);\n    this.filterColumnMap.set('Familiarity', this.familiarity);\n    this.filterColumnMap.set('RecentStatus', this.recentStatus);\n    this.filterColumnMap.set('MANPA', this.manpa);\n    this.filterColumnMap.set('Gender', this.gender);\n    this.filterColumnMap.set('Marriage', this.marriage);\n    this.filterColumnMap.set('Children', this.children);\n    this.filterColumnMap.set('Income', this.income);\n    this.filterColumnMap.set('AgeRange', this.age);\n    this.filterColumnMap.set('Birthday', this.birthday);\n    this.filterColumnMap.set('ContactFrequancy', this.contactFrequency);\n    this.filterColumnMap.set('Completeness', this.completeness);\n    if (this.criteria.getFilterMap().size == 0)\n      this.clearCriteria();\n\n    if (this.clear) {\n      this.clear.subscribe(() => {\n        this.clearCriteria();\n      })\n    }\n\n    if (this.save) {\n      this.save.subscribe(() => {\n        this.saveCriteria();\n      })\n    }\n\n\n\n  }\n\n\n  onClick() {\n    // console.debug(this.isAsPresent);\n    this.isAsPresent = false;\n  }\n\n  private _resetFilter(array: Array<ProfileCode>) {\n    for (let profileCode of array) {\n      profileCode.isCheck = false;\n    }\n  }\n\n  private _addDefaultChecked(defaultArray: Array<string>, array: Array<ProfileCode>) {\n    for (let profileCode of array) {\n      if (defaultArray.includes(profileCode.getCode())) {\n        profileCode.isCheck = true;\n      }\n\n    }\n  }\n\n  private _addCriteria(criteriaColumn: string, array: Array<ProfileCode>, criteria: CustomerFilterCriteria) {\n    for (let profileCode of array) {\n      if (profileCode.isCheck) {\n        criteria.addCriteria(criteriaColumn, profileCode.getCode());\n      }\n    }\n  }\n\n  private _addFilterMap(column: string, value: Array<string>) {\n    if (this.filterColumnMap.has(column)) {\n      this.filterColumnMap.get(column).forEach((code: ProfileCode) => {\n        if (value.includes(code.getCode())) {\n          code.isCheck = true;\n        }\n      });\n    }\n\n  }\n\n  private clearCriteria() {\n    this._resetFilter(this.customerType);\n    this._resetFilter(this.customerDataSource);\n    this._resetFilter(this.birthday);\n    this._resetFilter(this.age);\n    this._resetFilter(this.gender);\n    this._resetFilter(this.income);\n    this._resetFilter(this.source);\n    this._resetFilter(this.marriage);\n    this._resetFilter(this.children);\n    this._resetFilter(this.familiarity);\n    this._resetFilter(this.recentStatus);\n    this._resetFilter(this.manpa);\n    this._resetFilter(this.contactFrequency);\n    this._resetFilter(this.possibility);\n    this._resetFilter(this.completeness);\n\n  }\n\n  private refreshFilterMap() {\n    // this.clearCriteria();\n    if (this.criteria.hasCriteria() && this.criteria.getFilterMap().size > 0) {\n      this.criteria.getFilterMap().forEach((value: Array<string>, column: string) => {\n        this._addFilterMap(column, value);\n      });\n    }\n  }\n\n  private saveCriteria() {\n    let criteria = new CustomerFilterCriteria();\n\n    console.debug('filterColumnMap', this.filterColumnMap);\n    this.filterColumnMap.forEach((value: Array<ProfileCode>, column: string) => {\n      this._addCriteria(column, value, criteria);\n    });\n\n    criteria.savePreset = this.isAsPresent;\n\n    this.doneCriteria.emit(criteria);\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { ContactItem, Language } from '@allianzSND/core';\nimport { CustomerImportGroup } from '../bean/customer-import-group';\n\n@Component({\n  selector: 'app-customer-import',\n  templateUrl: './customer-import.component.html',\n  styleUrls: ['./customer-import.component.scss']\n})\nexport class CustomerImportComponent implements OnInit {  \n\n  @Input()\n  public importContractMap = new Map<string,CustomerImportGroup>();\n  \n  @Output()\n  private importCustomer: EventEmitter<Array<ContactItem>> = new EventEmitter();\n\n  \n  public language: Language = new Language();\n\n  constructor() { }\n\n  ngOnInit() {\n    \n  }\n\n\n  doImport() {\n\n    let importItems : Array<ContactItem> = new Array<ContactItem>();\n\n    this.importContractMap.forEach((group: CustomerImportGroup,groupName: string) => {      \n      group.getItems.forEach((item : ContactItem) => {   \n        console.debug(item);     \n        if(item.isCheck) {\n          importItems.push(item);\n        }\n      })\n    });\n\n    this.importCustomer.emit(importItems);\n  }\n  \n}\n","import { NgModule } from '@angular/core';\nimport { CalendarModule } from '@allianzSND/calendar';\nimport { CustomersComponent } from './components/customers/customers.component';\nimport { CustomerEditComponent } from './components/customer-edit/customer-edit.component';\nimport { CustomerListComponent } from './components/customer-list/customer-list.component';\nimport { CustomerDetailComponent } from './components/customer-detail/customer-detail.component';\nimport { CustomerContactListComponent } from './components/customer-contact-list/customer-contact-list.component';\nimport { CustomerFilterComponent } from './components/customer-filter/customer-filter.component';\nimport { CustomerImportComponent } from './components/customer-import/customer-import.component';\nimport { NxFormfieldModule } from '@allianz/ngx-ndbx/formfield'; // allianz select\nimport { NxDropdownModule } from '@allianz/ngx-ndbx'; // allianz select\nimport { NxRadioModule } from '@allianz/ngx-ndbx';  // allianz radio btn\nimport { NxInputModule } from '@allianz/ngx-ndbx/input'; // è¼¸å¥æ¡\nimport { NxMessageModule } from '@allianz/ngx-ndbx'; // allianz message\nimport { NxDatefieldModule } from '@allianz/ngx-ndbx/datefield'; // allianz date\nimport { NxNativeDateModule } from '@allianz/ngx-ndbx/datefield'; //allianz datetime\nimport { NxProgressbarModule } from '@allianz/ngx-ndbx/progressbar'; // allianz progress\nimport { NxModalModule } from '@allianz/ngx-ndbx'; // allianz popup modal\nimport { NxAccordionModule } from '@allianz/ngx-ndbx'; //allianz accordion\nimport { NxGridModule } from '@allianz/ngx-ndbx/grid';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { UIModule } from '@allianzSND/ui';\nimport { CommonModule, DatePipe } from '@angular/common';\nimport { CoreModule } from '@allianzSND/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxFormfieldModule,\n    NxDropdownModule,\n    NxRadioModule,\n    NxInputModule,\n    NxMessageModule,\n    NxDatefieldModule,\n    NxNativeDateModule,\n    NxProgressbarModule,\n    NxModalModule,\n    NxAccordionModule,\n    NxGridModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CoreModule,\n    CalendarModule,\n    UIModule,\n  ],\n  declarations: [CustomersComponent, CustomerEditComponent, CustomerListComponent ,\n    CustomerDetailComponent, CustomerContactListComponent , CustomerFilterComponent, CustomerImportComponent\n  ],\n  providers:[DatePipe],\n  exports:[CustomersComponent,CustomerEditComponent]\n})\nexport class CustomersModule { }\n","import { CustomerItem } from './CustomerItem';\nexport class CustomerList {\n\n    private _customerList : Array<CustomerItem> = [];\n    \n    get length(){\n        return this._customerList.length;\n    }\n\n    constructor() {\n    }\n\n    get customerList(){\n        return this._customerList;\n    }\n\n    set customerList(customerList : Array<CustomerItem>){\n        this._customerList = customerList;\n    }\n    \n    addCustomerItem(customerEvent: CustomerItem) {\n        this._customerList.push(customerEvent);\n    }\n    \n    \n}","export class MobileCustomerItem{\n\n    private lastName : string;\n    private firstName : string;\n    private phoneNumber : Array<{id:number,text:string}>;\n    private email : Array<string>;\n    private address : Array<{id:number,city:string,area:string,code:number,address:string}>;\n    private birthday : string;\n\n    constructor(lastName : string,firstName : string,phoneNumber : Array<{id:number,text:string}>,email : Array<string>,address : Array<{id:number,city:string,area:string,code:number,address:string}>,birthday : string){\n        \n        this.lastName = lastName;\n        this.firstName = firstName;\n        this.phoneNumber = phoneNumber;\n        this.email = email;\n        this.address = address;\n        this.birthday = birthday;\n    }\n\n}","import { MobileCustomerItem } from \"./MobileCustomerItem\";\nexport class MobileCustomerList{\n\n    private mobileCustomerList : Array<MobileCustomerItem>;\n\n    constructor(mobileCustomerList : Array<MobileCustomerItem>){\n        this.mobileCustomerList = mobileCustomerList;\n    }\n\n}","import { IAPI, IMockAPI, DaoFactory, ClientCustomDao, ISQLiteAPI, EqualRestriction } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\n\nexport class CustomerAddContactNoteAPI implements IAPI , IMockAPI, ISQLiteAPI {\n  private clientID : string;\n  private customerClientID:  string;\n  private note : string;\n  private noteTime : Date;\n\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n  \n  setClientID(clientID : string) {\n    this.clientID = clientID;\n  }\n\n  setCustomerClientID(customerClientID : string) {\n    this.customerClientID = customerClientID;\n  }\n\n  setNote(note : string) {\n    this.note = note;\n  }\n\n  setNoteTime(noteTime : Date) {\n    this.noteTime = noteTime;\n  }\n\n  getAPIName() : string {\n    return 'addCustomerContactNote';\n  }\n\n  getMockPath() : string {\n    return './assets/mock/saveSuccess.json';\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let contactObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Contact\");\n      let dao = this.daoFactory.getDefaultDao();\n      if (contactObj != undefined && dao != undefined) {\n        \n        dao = new ClientCustomDao(dao);\n\n        contactObj.setValue('CustomerClientID', this.customerClientID);\n        contactObj.setValue('Note', this.note);\n        contactObj.setValue('NoteTime', this.noteTime.getTime());\n      \n        if(this.clientID != undefined) {\n          contactObj.addRestriction(new EqualRestriction('ClientID',[this.clientID]));\n          dao.updateByTable(contactObj).subscribe((resp) => {\n            observer.next(resp);\n            observer.complete();\n          });\n        }\n        else {\n          dao.insertByTable(contactObj).subscribe((resp) => {\n            observer.next(resp);\n            observer.complete();\n          });\n        }\n\n        \n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n}\n","import { IAPI, IMockAPI, DaoFactory, ClientCustomDao, ISQLiteAPI, EqualRestriction, SQLiteTable, SQLCommand, InRestriction, StringUtils } from \"@allianzSND/core\";\nimport { Observable, from, of } from 'rxjs';\n\nexport class CustomerAutoDeleteAPI implements IAPI , IMockAPI, ISQLiteAPI {\n    \n  private _clientID: string;\n  private _status: string;\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n\n  \n  setClientID(id) {\n    this._clientID = id;\n  }\n\n  getAPIName() : string {\n      return 'getCustomerAutoDelete';\n  }\n\n  getMockPath() : string {\n      return './assets/mock/getCustomerAutoDelete.json';\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let messageObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Message\");\n      let dao = this.daoFactory.getDefaultDao();\n      if (messageObj != undefined && dao != undefined) {\n          \n          dao = new ClientCustomDao(dao);\n          \n          if(StringUtils.isNotEmpty(this._clientID)) {\n            messageObj.addRestriction(new EqualRestriction(\"ClientID\", [this._clientID]));\n          }\n          else {\n            messageObj.addRestriction(new EqualRestriction(\"Status\", ['UnRead']));\n          }\n\n          messageObj.addRestriction(new EqualRestriction(\"MessageCategory\", ['Customer']));\n          messageObj.addRestriction(new EqualRestriction(\"MessageType\",['AutoDelete']));\n\n          dao.queryByTable(messageObj).subscribe((resp) => {\n            observer.next(resp);\n            observer.complete();\n          });\n\n      }\n\n      else {\n        observer.next(false);\n        observer.complete();\n      }\n\n    });\n      //   return from(dao.queryByTable(messageObj).toPromise().then( resp => {\n\n\n      //     let messageArgument = JSON.parse(resp['Body'][0]['customers']);\n      //     let customerIDList = messageArgument['ids'];\n\n      //     let customerObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer\");\n      //     console.log(\"customerIDListInAPI: \", customerIDList);\n      //     customerObj.addRestriction(new InRestriction(\"ClientID\", customerIDList));\n      //     return dao.queryByTable(customerObj).toPromise().then(resp => {\n          \n      //       return resp;\n      //     })\n        \n      \n          \n      // }));\n      \n  } \n\n    \n  \n    \n}\n","import { PageInfo, IAPI, IMockAPI, DaoFactory, ClientCustomDao, ISQLiteAPI, EqualRestriction, OrderByRestriction, LimitRestriction, OffsetRestriction } from \"@allianzSND/core\";\nimport { Observable } from \"rxjs\";\n\nexport class CustomerContactNoteAPI implements IAPI , IMockAPI , ISQLiteAPI {\n\n  private customerClientID:  string;\n  private pageInfo : PageInfo;\n\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n\n  setClientID(id : string) {\n      this.customerClientID = id;\n  }\n\n  setPageInfo(pageInfo : PageInfo) {\n    this.pageInfo = pageInfo;\n  }\n\n  getAPIName() : string {\n      return 'getCustomerContactNote';\n  }\n\n  getMockPath() : string {\n      return './assets/mock/getCustomerContactNote.json';\n  }\n  \n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let contactObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Contact\");\n      let dao = this.daoFactory.getDefaultDao();\n      if (contactObj != undefined && dao != undefined) {\n        \n        dao = new ClientCustomDao(dao);\n\n        contactObj.addRestriction(new EqualRestriction('CustomerClientID',[this.customerClientID]));\n        contactObj.addRestriction(new OrderByRestriction([{ column: 'NoteTime', order: 'DESC' }]))\n\n        //add page limit\n        contactObj.addRestriction(new LimitRestriction([this.pageInfo.pageSize]));\n        contactObj.addRestriction(new OffsetRestriction([(this.pageInfo.page - 1) * 5]));\n\n        console.debug(contactObj);\n        dao.queryByTable(contactObj).subscribe((resp) => {\n          console.debug(resp);\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n}","import { IAPI, IMockAPI, DaoFactory, ClientCustomDao, ISQLiteAPI, EqualRestriction } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\n\nexport class CustomerDeleteAPI implements IAPI , IMockAPI, ISQLiteAPI {\n  private _clientID: string;\n\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n  \n  set clientID(clientID: string) {\n    this._clientID = clientID;\n  }\n\n  getAPIName() : string {\n    return 'deleteCustomer';\n  }\n\n  getMockPath() : string {\n    return './assets/mock/saveSuccess.json';\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let customerObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer\");\n      let dao = this.daoFactory.getDefaultDao();\n      if (customerObj != undefined) {\n        \n        dao = new ClientCustomDao(dao);\n        customerObj.addRestriction(new EqualRestriction('ClientID',[this._clientID]));\n        dao.deleteByTable(customerObj).subscribe((resp) => {    \n          observer.next(resp);\n          observer.complete();\n        });\n\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n}\n","import { IAPI, IMockAPI, DaoFactory, ClientCustomDao, ISQLiteAPI, EqualRestriction } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\n\nexport class CustomerDeleteContactNoteAPI implements IAPI , IMockAPI, ISQLiteAPI {\n  private contactClientID:  string;\n\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n\n  setContactClientID(contactClientID : string) {\n    this.contactClientID = contactClientID;\n  }\n\n  getAPIName() : string {\n    return 'deleteCustomerContactNote';\n  }\n\n  getMockPath() : string {\n    return './assets/mock/saveSuccess.json';\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let contactObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Contact\");\n      let dao = this.daoFactory.getDefaultDao();\n      if (contactObj != undefined && dao != undefined) {\n        \n        dao = new ClientCustomDao(dao);\n\n        contactObj.addRestriction(new EqualRestriction('ClientID',[this.contactClientID]));\n      \n        dao.deleteByTable(contactObj).subscribe((resp) => {\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n}\n","import { IAPI, IMockAPI, DaoFactory, ClientCustomDao, SQLiteTable, EqualRestriction } from \"@allianzSND/core\";\nimport { ISQLiteAPI } from '@allianzSND/core';\nimport { Observable, of, from } from \"rxjs\";\n\nexport class CustomerDetailAPI implements IAPI, IMockAPI, ISQLiteAPI {\n    private _id;\n\n    constructor(private daoFactory: DaoFactory){\n\n    }\n    public get id() {\n        return this._id;\n    }\n    public set id(value) {\n        this._id = value;\n    }\n    getAPIName(): string {\n        return 'getCustomerDetail';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/getCustomerDetail.json';\n    }\n\n    executeSQL(): Observable<any> {\n        console.log('customer Detail:execute SQL');\n        let customerObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer\");\n        let defaultDao = this.daoFactory.getDefaultDao();\n        if (customerObj != undefined && defaultDao != undefined) {\n            let dao = new ClientCustomDao(defaultDao);\n            customerObj.addRestriction(new EqualRestriction(\"ClientID\", [this._id]));\n            return from(dao.queryByTable(customerObj).toPromise().then(resp => {\n                let customer = resp;\n                let clientID = customer['Body'][0].ClientID;\n                let customerTelObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Tel\");\n                if (customerTelObj) {\n                    customerTelObj = (<SQLiteTable>customerTelObj);\n                    customerTelObj.addRestriction( new EqualRestriction('CustomerClientID', [clientID]));\n                    return dao.queryByTable(customerTelObj).toPromise().then((resp) => {\n                        let telList = resp['Body'];\n                        customer['Body'][0]['tel'] = telList;\n                        return { customer, clientID };\n                    });\n                }\n                else\n                    return of({ customer, clientID }).toPromise();\n            }).then(({ customer, clientID }) => {\n                let customerEmailObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Email\");\n                if (customerEmailObj) {\n                    customerEmailObj = (<SQLiteTable>customerEmailObj);\n                    customerEmailObj.addRestriction( new EqualRestriction('CustomerClientID', [clientID]));\n\n                    return dao.queryByTable(customerEmailObj).toPromise().then((resp) => {\n                        let telList = resp['Body'];\n                        customer['Body'][0]['email'] = telList;\n                        return { customer, clientID };\n                    });\n                }\n                else\n                    return of({ customer, clientID }).toPromise();\n\n            }).then(({ customer, clientID }) => {\n                let customerAddrObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Address\");\n                if (customerAddrObj) {\n                    customerAddrObj = (<SQLiteTable>customerAddrObj);\n                    customerAddrObj.addRestriction( new EqualRestriction('CustomerClientID', [clientID]));\n\n                    return dao.queryByTable(customerAddrObj).toPromise().then((resp) => {\n                        let telList = resp['Body'];\n                        customer['Body'][0]['address'] = telList;\n                        return customer;\n                    });\n                }\n                else\n                    return of(customer).toPromise();\n            }))\n        }\n        else {\n            return of(false);\n        }\n    }\n\n\n}\n","import { IAPI, IMockAPI, DaoFactory, ClientCustomDao, ISQLiteAPI, EqualRestriction } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\n\nexport class CustomerEditContactNoteAPI implements IAPI , IMockAPI, ISQLiteAPI {\n  private contactClientID:  string;\n  private note : string;\n  private noteTime : Date;\n\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n\n  setContactClientID(contactClientID : string) {\n    this.contactClientID = contactClientID;\n  }\n\n  setNote(note : string) {\n    this.note = note;\n  }\n\n  setNoteTime(noteTime : Date) {\n    this.noteTime = noteTime;\n  }\n\n  getAPIName() : string {\n    return 'editCustomerContactNote';\n  }\n\n  getMockPath() : string {\n    return './assets/mock/saveSuccess.json';\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let contactObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Contact\");\n      let dao = this.daoFactory.getDefaultDao();\n      if (contactObj != undefined && dao != undefined) {\n        \n        dao = new ClientCustomDao(dao);\n\n        contactObj.addRestriction(new EqualRestriction('ClientID',[this.contactClientID]));\n        contactObj.setValue('Note', this.note);\n        contactObj.setValue('NoteTime', this.noteTime.getTime());\n      \n        dao.updateByTable(contactObj).subscribe((resp) => {\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n}\n","import { IAPI, IMockAPI, DaoFactory, ClientCustomDao, ISQLiteAPI, EqualRestriction, InRestriction, StringUtils } from \"@allianzSND/core\";\nimport { Observable, of, from } from 'rxjs';\n\nexport class CustomerEditOvertimeAPI implements IAPI , IMockAPI, ISQLiteAPI {\n    \n  private _clientID: string;\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n\n  setClientID(id) {\n    this._clientID = id;\n  }\n\n  getAPIName() : string {\n      return 'getCustomerOverTime';\n  }\n\n  getMockPath() : string {\n      return './assets/mock/getCustomerOverTime.json';\n  }\n\n  executeSQL(): Observable<any> {\n    \n    return Observable.create((observer) => {\n      let messageObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Message\");\n      let dao = this.daoFactory.getDefaultDao();\n      if (messageObj != undefined && dao != undefined) {\n          \n          dao = new ClientCustomDao(dao);\n          \n          if(StringUtils.isNotEmpty(this._clientID)) {\n            messageObj.addRestriction(new EqualRestriction(\"ClientID\", [this._clientID]));\n          }\n          else {\n            messageObj.addRestriction(new EqualRestriction(\"Status\", ['UnRead']));\n          }\n\n          messageObj.addRestriction(new EqualRestriction(\"MessageCategory\", ['Customer']));\n          messageObj.addRestriction(new EqualRestriction(\"MessageType\",['OverTime']));\n\n          \n          dao.queryByTable(messageObj).subscribe((resp) => {\n            observer.next(resp);\n            observer.complete();\n          });\n\n      }\n\n      else {\n        observer.next(false);\n        observer.complete();\n      }\n\n    });\n    \n  }\n    \n}\n","import { IAPI, IMockAPI, DaoFactory, SQLiteTable, ClientCustomDao, ISQLiteAPI, EqualRestriction } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\nexport class CustomerGetPresetAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n\n    getAPIName(): string {\n        return 'getCustomerFilterPreset';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/getCustomerFilterPreset.json';\n    }\n\n    executeSQL(): Observable<any> {\n        \n        return Observable.create((observer) => {\n            let dao = this.daoFactory.getDefaultDao();\n            if (dao != undefined) {\n\n                //save customer data\n                let setting = this.daoFactory.getDefaultTable(\"TW_LH_SD_Personal_Setting\");\n                if (setting) {\n                    dao = new ClientCustomDao(dao);\n\n                    setting = (<SQLiteTable>setting);\n\n                    setting.addRestriction(new EqualRestriction('SettingID',['CustomerFilterSetting']));\n\n                    dao.queryByTable(setting).subscribe((resp) => {\n                        console.debug(resp);\n                        observer.next(resp);\n                        observer.complete();\n                    });\n                }\n                else {\n                    observer.next(false);\n                    observer.complete();\n                }\n\n            }\n            else {\n                observer.next(false);\n                observer.complete();\n            }\n        });\n    }\n}\n","import { IAPI, IMockAPI, ISQLiteAPI, DaoFactory, ClientCustomDao, InRestriction, LikeRestriction, ORCompoundRestriction, EqualRestriction, IRestriction, LimitRestriction, OffsetRestriction, AndCompoundRestriction, PageInfo, OrderByRestriction, ProfileCodeService, LessOrEqualRestriction, GreaterOrEqualRestriction, NotEqualRestriction, StringUtils } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\nimport { CustomerFilterCriteria } from \"../components/bean/customer-filter-criteria\";\n\nexport class CustomerListAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n  private _filterCriteria: CustomerFilterCriteria;\n  private _pageInfo: PageInfo = new PageInfo();\n\n  private _queryClientID: string;\n\n  constructor(private daoFactory: DaoFactory, private profileCodeService: ProfileCodeService) {\n\n  }\n  set clientID(clientID: string) {\n    this._queryClientID = clientID;\n  }\n\n  set filterCriteria(criteria: CustomerFilterCriteria) {\n    this._filterCriteria = criteria;\n  }\n\n  set pageInfo(pageInfo: PageInfo) {\n    this._pageInfo = pageInfo;\n  }\n\n  getAPIName(): string {\n    return 'getCustomerList';\n  }\n\n  getMockPath(): string {\n    return './assets/mock/getCustomerList.json';\n  }\n\n  executeSQL(): Observable<any> {\n\n    return Observable.create((observer) => {\n      let customerObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer\");\n      let dao = this.daoFactory.getDefaultDao();\n      if (customerObj != undefined && dao != undefined) {\n\n        dao = new ClientCustomDao(dao);\n\n        if (this._filterCriteria != undefined) {\n\n          console.debug('CustomerListAPI _filterCriteria', this._filterCriteria);\n\n          let keyword = this._filterCriteria.keyword;\n\n          console.debug('customerListAPI keyword', keyword);\n          if (StringUtils.isNotEmpty(keyword)) {\n            let compoundRestriction = new ORCompoundRestriction([new LikeRestriction('FirstName', [keyword]), new LikeRestriction('LastName', [keyword])]);\n            customerObj.addRestriction(compoundRestriction);\n          }\n\n          let filterMap: Map<string, Array<string>> = this._filterCriteria.getFilterMap();\n\n          filterMap.forEach((array: Array<string>, key: string) => {\n            console.log(key, array);\n\n            if (key == 'Birthday') {\n              let birthdayRestriction = new Array<IRestriction>();\n              let monthArray = new Array<string>();\n              for (let birthday of array) {\n                if (birthday == 'Today') {\n                  let today = new Date();\n                  let startNum = today.getMonth() + 1;\n                  let endNum = today.getDate();\n                  let start = String(startNum);\n                  let end = String(endNum);\n                  if (start.length == 1) start = '0' + start;\n                  if (end.length == 1) end = '0' + end;\n\n                  birthdayRestriction.push(new AndCompoundRestriction([new EqualRestriction('BirthdayMonth', [start]),\n                  new EqualRestriction('BirthdayDate', [end])]));\n                }\n                else {\n                  if (birthday.length == 1) birthday = '0' + birthday;\n                  monthArray.push(birthday);\n                }\n              }\n\n              if (monthArray.length != 0) {\n                birthdayRestriction.push(new InRestriction('BirthdayMonth', monthArray));\n              }\n\n              customerObj.addRestriction(new ORCompoundRestriction(birthdayRestriction));\n            }\n            else if (key == 'DataSource') {\n              if (array.length != 2) {\n                let datasource = array[0];\n                if (datasource == 'E') {\n                  customerObj.addRestriction(new EqualRestriction('DataSource', ['OPUS']));\n                }\n                else {\n                  customerObj.addRestriction(new NotEqualRestriction('DataSource', ['OPUS']));\n                }\n\n              }\n            }\n            else if (key == 'Completeness') {\n              let completenessOption = this.profileCodeService.getCodeArray('Customer_Completeness');\n              let completenessRestriction = new Array<IRestriction>();\n              completenessOption.forEach(profileCode => {\n                let code = profileCode.getCode();\n\n                if (array.includes(code)) {\n                  let obj = JSON.parse(profileCode.getArguments());\n                  let start = obj.start;\n                  let end = obj.end;\n\n                  start = start / 100;\n                  end = end / 100;\n\n                  completenessRestriction.push(new AndCompoundRestriction([new GreaterOrEqualRestriction('Completeness', [start]), new LessOrEqualRestriction('Completeness', [end])]));\n                }\n              })\n\n              console.debug('completenessRestriction length', completenessRestriction.length);\n              console.log('completenessRestriction:', completenessRestriction);\n              if (completenessRestriction.length != 0) {\n                customerObj.addRestriction(new ORCompoundRestriction(completenessRestriction));\n                console.log('customerObj:', customerObj);\n              }\n\n            }\n            else {\n              customerObj.addRestriction(new InRestriction(key, array));\n            }\n\n          });\n\n        }\n\n\n        //add order by\n        customerObj.addRestriction(new OrderByRestriction([{ column: 'LastName', order: 'ASC' }]))\n\n        //add page limit\n        customerObj.addRestriction(new LimitRestriction([this._pageInfo.pageSize]));\n        customerObj.addRestriction(new OffsetRestriction([(this._pageInfo.page - 1) * 10]));\n\n        //if has edit profile will has clientID\n        if (StringUtils.isNotEmpty(this._queryClientID)) {\n          customerObj.addRestriction(new EqualRestriction('ClientID', [this._queryClientID]));\n        }\n\n        dao.queryByTable(customerObj).subscribe((resp) => {\n\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n\n}\n","import { IAPI, IMockAPI, DaoFactory, SQLiteTable, ClientCustomDao, ISQLiteAPI, EqualRestriction, SQLCommand } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\nimport { CustomerDetail } from \"../service/model/CustomerDetail\";\nimport { CustomerUtils } from \"../utils/customer-utils\";\n\n\nexport class CustomerSaveDetailAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    private customerDetail: CustomerDetail;\n\n    constructor(private daoFactory: DaoFactory,private customerUtils : CustomerUtils) {\n\n    }\n\n    setDetail(detail: CustomerDetail) {\n        this.customerDetail = detail;\n    }\n\n    getAPIName(): string {\n        return 'saveCustomerDetail';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/saveSuccess.json';\n    }\n\n    executeSQL(): Observable<any> {\n        // let returnObj = {\n        //     \"status\": true,\n        //     \"msg\": ''\n        // };\n        return Observable.create((observer) => {\n            let dao = this.daoFactory.getDefaultDao();\n            if (dao != undefined) {\n\n                //save customer data\n                let customerObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer\");\n                if (customerObj) {\n                    dao = new ClientCustomDao(dao);\n\n                    customerObj = (<SQLiteTable>customerObj);\n\n                    let birthday = this.customerDetail.birthday;\n                    if (birthday != null && birthday != undefined) {\n                        customerObj.setValue(\"BirthdayYear\", birthday.getFullYear());\n                        let month = (birthday.getMonth() + 1).toString();\n                        if(month.length < 2) {\n                            month = '0' + month.toString();\n                        }\n                        customerObj.setValue(\"BirthdayMonth\", month);\n\n                        let date = (birthday.getDate()).toString();\n                        if(date.length < 2) {\n                            date = '0' + date.toString();\n                        }\n                        customerObj.setValue(\"BirthdayDate\", date);\n                    \n                        customerObj.setValue(\"BirthDayTimeStamp\", (new Date(2000, birthday.getMonth(), birthday.getDate())).getTime());\n                        \n                    }\n\n                    customerObj.setValue('ClientID', this.customerDetail.clientID);\n                    customerObj.setValue(\"LastName\", this.customerDetail.lastName);\n                    customerObj.setValue(\"FirstName\", this.customerDetail.firstName);\n                    customerObj.setValue(\"Occupation\", this.customerDetail.occupation);\n                    customerObj.setValue(\"Company\", this.customerDetail.company);\n                    customerObj.setValue(\"AgeRange\", this.customerDetail.ageRange);\n                    customerObj.setValue(\"Gender\", this.customerDetail.gender);\n                    customerObj.setValue(\"Income\", this.customerDetail.income);\n                    customerObj.setValue(\"Source\", this.customerDetail.source);\n                    customerObj.setValue(\"Marriage\", this.customerDetail.marriage);\n                    customerObj.setValue(\"Children\", this.customerDetail.children);\n                    customerObj.setValue(\"Familiarity\", this.customerDetail.familiarity);\n                    customerObj.setValue(\"RecentStatus\", this.customerDetail.recentStatus);\n                    customerObj.setValue(\"MANPA\", this.customerDetail.manpa);\n                    customerObj.setValue(\"ContactFrequancy\", this.customerDetail.contactFrequancy);\n                    customerObj.setValue(\"Possibility\", this.customerDetail.possibility);\n                    customerObj.setValue(\"IsFollow\", this.customerDetail.isFollow ? 'Y' : 'N');\n\n\n                    //set customer default column & value\n                    this.customerUtils.setCustomerDefaultValue(customerObj);\n\n                    //count Completeness\n                    this.customerUtils.countCompleteness(customerObj,this.customerDetail.tels.length,this.customerDetail.emails.length,this.customerDetail.addresses.length);\n\n                    console.debug('insertCustomer', customerObj);\n                    // console.log('clientID:', customerObj.getValue('ClientID'));\n                    if (customerObj.getValue('ClientID') == '') {\n                        dao.transactionInsert(customerObj);\n                    }\n                    else {\n                        customerObj.addRestriction(new EqualRestriction('ClientID',[customerObj.getValue('ClientID')]))\n                        dao.transactionUpdate(customerObj);\n\n                        //delete relation data\n                        dao.transactionSqlCommand(new SQLCommand('delete from TW_LH_SD_Customer_Tel where CustomerClientID = ? ', [customerObj.getValue('ClientID')]));\n                        dao.transactionSqlCommand(new SQLCommand('delete from TW_LH_SD_Customer_Email where CustomerClientID = ? ', [customerObj.getValue('ClientID')]));\n                        dao.transactionSqlCommand(new SQLCommand('delete from TW_LH_SD_Customer_Address where CustomerClientID = ? ', [customerObj.getValue('ClientID')]));\n                    }\n\n                    //save phone data              \n                    for (let phone of this.customerDetail.tels) {\n                        let phoneInsertObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Tel\");\n                        if (phoneInsertObj) {\n\n                            if (phone.telType == '') phone.telType = 'TelHome';\n\n                            phoneInsertObj = (<SQLiteTable>phoneInsertObj);\n                            phoneInsertObj.setValue('CustomerClientID', customerObj.getValue('ClientID'));\n\n                            phoneInsertObj.setValue('TelType', phone.telType);\n                            phoneInsertObj.setValue('Tel', phone.tel);\n\n                            //insert\n                            dao.transactionInsert(phoneInsertObj);\n                        }\n                    }\n\n                    //save email data\n                    for (let email of this.customerDetail.emails) {\n                        let emailInsertObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Email\");\n                        if (emailInsertObj) {\n                            if (email.emailType == '') email.emailType = 'MailHome';\n\n                            emailInsertObj = (<SQLiteTable>emailInsertObj);\n                            emailInsertObj.setValue('CustomerClientID', customerObj.getValue('ClientID'));\n                            emailInsertObj.setValue('EmailType', email.emailType);\n                            emailInsertObj.setValue('Email', email.email);\n\n                            //insert\n                            dao.transactionInsert(emailInsertObj);\n                        }\n                    }\n\n                    //save address data\n                    for (let address of this.customerDetail.addresses) {\n                        let addressInsertObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Address\");\n                        if (addressInsertObj) {\n                            if (address.addressType == '') address.addressType = 'AddressTypeHome';\n\n                            addressInsertObj = (<SQLiteTable>addressInsertObj);\n                            addressInsertObj.setValue('CustomerClientID', customerObj.getValue('ClientID'));\n                            addressInsertObj.setValue('AddressType', address.addressType);\n                            addressInsertObj.setValue('Country',address.country);\n                            addressInsertObj.setValue('City',address.city);\n                            addressInsertObj.setValue('Area',address.area);\n                            \n                            \n                            addressInsertObj.setValue('Zipcode', address.zipcode);\n                            addressInsertObj.setValue('Address', address.address);\n\n                            //insert\n                            dao.transactionInsert(addressInsertObj);\n                        }\n                    }\n                    dao.runTransaction().subscribe((resp) => {\n                        // let header = resp['Header'];\n                        // if (!header.status) {\n                        //     returnObj['status'] = false;\n                        //     returnObj['msg'] = header.msg;\n                        // }\n                        observer.next(resp);\n                        observer.complete();\n                    });\n                }\n                else {\n                    observer.next(false);\n                    observer.complete();\n                }\n\n            }\n            else {\n                observer.next(false);\n                observer.complete();\n            }\n        });\n    }\n}\n","import { IAPI, IMockAPI, DaoFactory, SQLiteTable, ClientCustomDao, ISQLiteAPI, EqualRestriction } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\nimport { CustomerFilterCriteria } from \"../components/bean/customer-filter-criteria\";\n\nexport class CustomerSavePresetAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    private _criteria: CustomerFilterCriteria;\n\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n\n    setFilterCriteria(criteria: CustomerFilterCriteria) {\n        this._criteria = criteria;\n    }\n\n    getAPIName(): string {\n        return 'saveCustomerFilterPreset';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/saveSuccess.json';\n    }\n\n    executeSQL(): Observable<any> {\n        \n        return Observable.create((observer) => {\n            let dao = this.daoFactory.getDefaultDao();\n            if (dao != undefined) {\n\n                //save customer data\n                let setting = this.daoFactory.getDefaultTable(\"TW_LH_SD_Personal_Setting\");\n                if (setting) {\n                    dao = new ClientCustomDao(dao);\n\n                    setting = (<SQLiteTable>setting);\n\n                    setting.addRestriction(new EqualRestriction('SettingID',['CustomerFilterSetting']));\n                    setting.setValue(\"SettingVal\",JSON.stringify(this._criteria.toPresetJSON()));\n\n                    dao.updateByTable(setting).subscribe((resp) => {\n                        observer.next(resp);\n                        observer.complete();\n                    });\n                }\n                else {\n                    observer.next(false);\n                    observer.complete();\n                }\n\n            }\n            else {\n                observer.next(false);\n                observer.complete();\n            }\n        });\n    }\n}\n","import { IAPI, IMockAPI, DaoFactory, ClientCustomDao, ISQLiteAPI, EqualRestriction } from \"@allianzSND/core\";\nimport { Observable } from \"rxjs\";\n\nexport class CustomerTelAPI implements IAPI , IMockAPI , ISQLiteAPI {\n\n  private clientID : string;\n\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n\n  setClientID(id : string) {\n      this.clientID = id;\n  }\n\n  getAPIName() : string {\n      return 'getCustomerTel';\n  }\n\n  getMockPath() : string {\n      return './assets/mock/getCustomerTel.json';\n  }\n  \n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let telObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Tel\");\n      let dao = this.daoFactory.getDefaultDao();\n      if (telObj != undefined && dao != undefined) {\n        \n        dao = new ClientCustomDao(dao);\n\n        telObj.addRestriction(new EqualRestriction('CustomerClientID',[this.clientID]));\n      \n        dao.queryByTable(telObj).subscribe((resp) => {\n          console.debug(resp);\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n}","import { IAPI, IMockAPI, DaoFactory, SQLiteTable, ClientCustomDao, ISQLiteAPI, EqualRestriction } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\n\nexport class CustomerUpdateFollowAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    private _clientID : string;\n    private _isFollow : boolean;\n\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n\n    setClient(clientID : string) {\n        this._clientID = clientID;\n    }\n\n    setIsFollow(isFollow : boolean) {\n        this._isFollow = isFollow;\n    }\n\n    getAPIName(): string {\n        return 'updateCustomerFollowStatus';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/saveSuccess.json';\n    }\n\n    executeSQL(): Observable<any> {\n        \n        return Observable.create((observer) => {\n            let dao = this.daoFactory.getDefaultDao();\n            if (dao != undefined) {\n\n                //save customer data\n                let customer = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer\");\n                if (customer) {\n                    dao = new ClientCustomDao(dao);\n\n                    customer = (<SQLiteTable>customer);\n\n                    customer.addRestriction(new EqualRestriction('ClientID',[this._clientID]));\n                    customer.setValue(\"IsFollow\",this._isFollow ? 'Y' : 'N');\n\n                    dao.updateByTable(customer).subscribe((resp) => {\n                        \n                        observer.next(resp);\n                        observer.complete();\n                    });\n                }\n                else {\n                    observer.next(false);\n                    observer.complete();\n                }\n\n            }\n            else {\n                observer.next(false);\n                observer.complete();\n            }\n        });\n    }\n}\n","import { ContactItem, IAPI, IMockAPI, DaoFactory, SQLiteTable, ClientCustomDao, ISQLiteAPI } from \"@allianzSND/core\";\nimport { Observable } from \"rxjs\";\nimport { CustomerUtils } from \"../utils/customer-utils\";\n\n\nexport class ImportContactAPI implements IAPI, IMockAPI,ISQLiteAPI {\n    private items : Array<ContactItem>;\n    \n    public setItems(items : Array<ContactItem>) {\n        this.items = items;\n    }\n\n    constructor(private daoFactory: DaoFactory, private customerUtils : CustomerUtils) {\n\n    }\n\n    getAPIName(): string {\n        return 'importContact';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/saveSuccess.json';\n    }\n\n    executeSQL(): Observable<any> {\n    \n\n        return Observable.create((observer) => {\n            let dao = this.daoFactory.getDefaultDao();\n            if (dao != undefined) {\n\n                dao = new ClientCustomDao(dao);\n\n                for(let item of this.items) {\n\n                    let customerObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer\");\n\n                    customerObj.setValue(\"LastName\", item.lastname);\n                    customerObj.setValue(\"FirstName\", item.firstname);\n                    customerObj.setValue(\"IsFollow\", \"N\");\n\n                    let birthday = item.birthday;\n                    if (birthday != null) {\n                        customerObj.setValue(\"BirthdayYear\", birthday.getFullYear);\n                        customerObj.setValue(\"BirthdayMonth\", birthday.getMonth);\n                        customerObj.setValue(\"BirthdayDate\", birthday.getDate);\n                    }\n\n                    //set customer default column & value\n                    this.customerUtils.setCustomerDefaultValue(customerObj);\n\n                    //count Completeness\n                    this.customerUtils.countCompleteness(customerObj,item.phones.length,item.emails.length,item.address.length);\n\n                    //insert customer data\n                    dao.transactionInsert(customerObj);\n\n                    //save phone data\n                    for(let phone of item.phones) {\n                        let telType = 'TelHome';\n                        if(phone.type == 'work') {\n                            telType = 'TelWork';\n                        }\n                        else if(phone.type == 'mobile') {\n                            telType = 'TelMobile';\n                        }\n        \n                        let phoneInsertObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Tel\");\n                        if (phoneInsertObj) {\n\n                            phoneInsertObj = (<SQLiteTable>phoneInsertObj);\n                            phoneInsertObj.setValue('CustomerClientID', customerObj.getValue('ClientID'));\n\n                            phoneInsertObj.setValue('TelType', telType);\n                            phoneInsertObj.setValue('Tel', phone.number);\n\n                            //insert\n                            dao.transactionInsert(phoneInsertObj);\n                        }                   \n                    }\n        \n                    //save email data\n                    let maxEmailCount = 3;\n                    let importEmailCount = maxEmailCount;\n                    if(item.emails.length < 3) importEmailCount = item.emails.length;\n                    for(let i=0;i<importEmailCount;i++) {\n                        let email = item.emails[i];\n                                                \n                        let emailInsertObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Email\");\n                        if (emailInsertObj) {\n\n                            emailInsertObj = (<SQLiteTable>emailInsertObj);\n                            emailInsertObj.setValue('CustomerClientID', customerObj.getValue('ClientID'));\n                            emailInsertObj.setValue('EmailType', 'MailHome');\n                            emailInsertObj.setValue('Email', email);\n\n                            //insert\n                            dao.transactionInsert(emailInsertObj);\n                        }\n                    }\n                    \n                    //save address data\n                    for(let address of item.address) {\n                        \n                        let addressType = 'AddressTypeHome';\n                        if(address.type == 'work') {\n                            addressType = 'AddressTypeWork';\n                        }\n        \n                        let addressInsertObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Address\");\n                        if (addressInsertObj) {\n\n                            addressInsertObj = (<SQLiteTable>addressInsertObj);\n                            addressInsertObj.setValue('CustomerClientID', customerObj.getValue('ClientID'));\n\n                            addressInsertObj.setValue('AddressType', addressType);\n                            addressInsertObj.setValue('Zipcode', address.code);\n                            addressInsertObj.setValue('Address', address.address);\n\n                            //insert\n                            dao.transactionInsert(addressInsertObj);\n                        }\n                    }\n        \n                    \n                }\n\n                dao.runTransaction().subscribe((resp) => {\n                    \n                    observer.next(resp);\n                    observer.complete();\n                });\n\n            }\n            else {\n                observer.next(false);\n                observer.complete();\n            }\n        });\n\n    }\n\n}","import { IAPI } from \"@allianzSND/core\";\nimport { IMockAPI } from \"@allianzSND/core\";\nimport { ISQLiteAPI } from '@allianzSND/core';\nimport { Observable } from 'rxjs';\nimport { DaoFactory } from '@allianzSND/core';\nimport { ClientCustomDao } from '@allianzSND/core';\nimport { GreaterOrEqualRestriction, LessOrEqualRestriction,  OrderByRestriction, EqualRestriction, ORCompoundRestriction } from '@allianzSND/core';\nimport { getYear, getMonth, getDate, subDays, addDays, setYear } from 'date-fns';\n\nexport class CustomerBirthdayListAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n  private _targetDate: Date;\n\n  public isRangeCrossYear: boolean;\n  private _subN : number;\n  private _subNDayTimeStamp: number;\n\n  private _addN : number;\n  private _addNDayTimeStamp: number;\n\n  private _DaoFactory: DaoFactory;\n  constructor(DaoFactory) {\n    this._DaoFactory = DaoFactory;\n  }\n\n  set targetDate(targetDate: Date) {\n    this._targetDate = setYear(targetDate, 2000);\n    this._subNDayTimeStamp = subDays(this._targetDate, this._subN).getTime();\n    this._addNDayTimeStamp = addDays(this._targetDate, this._addN).getTime();\n\n\n    if((getYear(this._targetDate) == getYear(this._subNDayTimeStamp)) && (getYear(this._targetDate) == getYear(this._addNDayTimeStamp))) {\n      this.isRangeCrossYear = false;\n    }\n\n    else {\n      this._subNDayTimeStamp = (setYear(this._subNDayTimeStamp, 2000)).getTime();\n      this._addNDayTimeStamp = (setYear(this._addNDayTimeStamp, 2000)).getTime();\n      this.isRangeCrossYear = true;\n    }\n\n    console.warn(this._subN, \"  subDate:  \", this._subNDayTimeStamp);\n    console.warn(this._addN, \"  addDate:  \", this._addNDayTimeStamp);\n  }\n\n  set subN(subN: number) {\n    this._subN = subN;\n  }\n\n  set addN(addN: number) {\n    this._addN = addN;\n  }\n\n\n\n  getAPIName(): string {\n    return 'getCustomerBirthdayList';\n  }\n\n  getMockPath(): string {\n    return './assets/mock/getCustomerBirthday.json';\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let customerObj = this._DaoFactory.getDefaultTable(\"TW_LH_SD_Customer\");\n      let dao = this._DaoFactory.getDefaultDao();\n      if (customerObj != undefined && dao != undefined) {\n\n        dao = new ClientCustomDao(dao);\n\n        if(this.isRangeCrossYear) {\n          customerObj.addRestriction(new ORCompoundRestriction([new GreaterOrEqualRestriction('BirthDayTimeStamp', [this._subNDayTimeStamp]), new LessOrEqualRestriction('BirthDayTimeStamp', [this._addNDayTimeStamp])]));\n        }\n\n        else {\n          customerObj.addRestriction(new GreaterOrEqualRestriction('BirthDayTimeStamp', [this._subNDayTimeStamp]));\n          customerObj.addRestriction(new LessOrEqualRestriction('BirthDayTimeStamp', [this._addNDayTimeStamp]));\n        }\n\n        customerObj.addRestriction(new OrderByRestriction([{ column: 'LastName', order: 'ASC' }]))\n\n        //customerObj.addRestriction(new OrderByRestriction([{ column: 'StartTime', order: 'ASC' }]));\n        // calendarObj.addRestriction(new OrderByRestriction([{ column: 'StartTime', order: 'ASC' },{ column: 'EndTime', order: 'DESC' }]));\n        dao.queryByTable(customerObj).subscribe((resp) => {\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n\n      \n\n    });\n  }\n}\n","import { IAPI, IMockAPI, DaoFactory, SQLiteTable, ClientCustomDao, ISQLiteAPI, EqualRestriction } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\n\nexport class DashboardUpdateToReadAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    private _messageType : string;\n    private _messageDataCategory : string;\n\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n\n    public setMessageType(type) {\n        this._messageType = type;\n    }\n\n    public setMessageDataCategory(dataCategory) {\n        this._messageDataCategory = dataCategory;\n    }\n\n\n\n    getAPIName(): string {\n        return 'updateDashboardToRead';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/saveSuccess.json';\n    }\n\n    executeSQL(): Observable<any> {\n        \n        return Observable.create((observer) => {\n            let dao = this.daoFactory.getDefaultDao();\n            if (dao != undefined) {\n\n                //save customer data\n                let messageObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Message\");\n                if (messageObj) {\n                    dao = new ClientCustomDao(dao);\n\n                    messageObj = (<SQLiteTable>messageObj);\n\n                    messageObj.addRestriction(new EqualRestriction('MessageCategory',[this._messageDataCategory]));\n                    messageObj.addRestriction(new EqualRestriction('MessageType',[this._messageType]));\n                    messageObj.setValue(\"Status\", 'Reading');\n\n                    dao.updateByTable(messageObj).subscribe((resp) => {\n                        \n                        observer.next(resp);\n                        observer.complete();\n                    });\n                }\n                else {\n                    observer.next(false);\n                    observer.complete();\n                }\n\n            }\n            else {\n                observer.next(false);\n                observer.complete();\n            }\n        });\n    }\n}\n"]}