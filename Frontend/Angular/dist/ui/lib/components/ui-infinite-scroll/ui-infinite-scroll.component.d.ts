import { OnInit, ElementRef, NgZone, EventEmitter, OnDestroy } from '@angular/core';
import { DataSyncService } from '@allianzSND/core';
export declare class UiInfiniteScrollComponent implements OnInit, OnDestroy {
    private dataSyncService;
    private element;
    private zone;
    private _scroller;
    loadingState: boolean;
    refreshingState: boolean;
    private scrollState;
    private isTouchBind;
    private panState;
    refresherClass: string;
    private _loadingFinish;
    private _refreshFinish;
    private unsubscribe$;
    isRefreshing: boolean;
    refresherStyle: {};
    contentStyle: {};
    loadingStyle: {};
    touch_func: any;
    private _isScrollToPageTop;
    isScrollToPageTop: number;
    scrollTopToPos(pos: any): void;
    isScrollToPageTopChange: EventEmitter<{}>;
    syncFunction: Array<string>;
    distanceToRefresh: number;
    resistance: number;
    lazyLoading: boolean;
    alwaysCallback: boolean;
    translateText: string;
    loadingFinish: boolean;
    refreshFinish: boolean;
    loadingFinishChange: EventEmitter<{}>;
    refreshFinishChange: EventEmitter<{}>;
    loadingCallback: EventEmitter<{}>;
    refreshCallback: EventEmitter<{}>;
    infiniteScrollDistance: number;
    infiniteScrollUpDistance: number;
    scrolledUp: EventEmitter<{}>;
    constructor(dataSyncService: DataSyncService, element: ElementRef, zone: NgZone);
    scrollEle: ElementRef;
    refresherEle: ElementRef;
    contentEle: ElementRef;
    loaderEle: ElementRef;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    resetScroller(): void;
    isScrolling: boolean;
    scroll(ev: any): void;
    touch(e: any): void;
    panstart(): void;
    panup(e: any): void;
    pandown(e: any): void;
    panend(): void;
    private dorefresh;
    private doreset;
    private _setContentPan;
    private setup;
    private handleOnScroll;
    private createScroller;
    private attachScrollEvent;
    private hasWindowDefined;
    private calculatePoints;
    private getElementHeight;
    private toInfiniteScrollParams;
    private getScrollStats;
    private isScrollingDownwards;
    private shouldFireScrollEvent;
    private updateScrollState;
    private shouldTriggerEvents;
    private isTriggeredScroll;
    private updateTriggeredFlag;
    private toInfiniteScrollAction;
    private destroyScroller;
}
