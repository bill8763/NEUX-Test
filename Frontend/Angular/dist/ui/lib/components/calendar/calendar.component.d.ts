import { OnInit, EventEmitter, ElementRef, ChangeDetectorRef, AfterViewInit, Renderer2 } from '@angular/core';
import { format } from 'date-fns';
import { UiInformationBtnComponent } from '../ui-information-btn/ui-information-btn.component';
import { ViewDateChange } from '@allianzSND/core';
export declare class CalendarComponent implements OnInit, AfterViewInit {
    private element;
    private changeDector;
    private renderer;
    viewType: string;
    weekStartsOn: 0 | 1 | 2 | 3 | 4 | 5 | 6;
    eventList: any[];
    translateMap: Map<string, string>;
    viewDate: Date;
    viewDateChange: EventEmitter<ViewDateChange>;
    uiCalendarClickEventItem: EventEmitter<{}>;
    uiCalendarMobileWeekDayClicked: EventEmitter<{}>;
    uiCalendarMobileMonthDayClicked: EventEmitter<{}>;
    uiCalendarYearMonthClicked: EventEmitter<{}>;
    uiCalendarSwipe: EventEmitter<{}>;
    uiCalendarMoreInfoClicked: EventEmitter<{}>;
    onRenderWeek: EventEmitter<{}>;
    private _viewDate;
    private daySwipeEventArr;
    private calEventArr;
    private _viewType;
    windowWidth: number;
    yearVal: number;
    monthEventItemMax: number;
    today: Date;
    format: typeof format;
    dayViewHeader: Array<any>;
    nowShowBtn: UiInformationBtnComponent;
    SWIPE_ACTION: {
        LEFT: string;
        RIGHT: string;
        UP: string;
        DOWN: string;
    };
    outsideSpace: {
        top: number;
        left: number;
    };
    paddindData: {
        top: number;
        right: number;
        bottom: number;
        left: number;
    };
    constructor(element: ElementRef, changeDector: ChangeDetectorRef, renderer: Renderer2);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    onResize(event: any): void;
    swipe(action?: string, currentViewType?: string): void;
    getDayViewHeader(date: any, type: any): any[];
    dayClicked(day: any): void;
    monthDayClicked(clickedDate: any): void;
    clickEventItem(eventItem: any): void;
    yearMonthClicked(date: any): void;
    convertOpacityToHex(colorCode: any): string;
    prevView(currentViewType?: string): void;
    nextView(currentViewType?: string): void;
    infoTabClick(dom: any): void;
    closeInfo(): void;
    isSameDay(start: Date, end: Date): boolean;
    changeViewDate(date: Date): void;
    refreshHeader(date: Date): void;
    bindSwipeDayEvent(): void;
    renderWeek(): void;
}
