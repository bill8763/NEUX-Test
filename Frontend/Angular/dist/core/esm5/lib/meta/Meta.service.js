/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from "@angular/core";
import { APIFactory } from "../api/APIFactory";
import { APIDispatch } from "../api/APIDispatch";
import { DaoFactory } from "../device/sqlite/DaoFactory";
import { AOPTokenService } from "../injectionToken/AOPToken.service";
import { ProfileCodeService } from "../service/profile/profile-code.service";
import * as i0 from "@angular/core";
import * as i1 from "../injectionToken/AOPToken.service";
import * as i2 from "../api/APIFactory";
import * as i3 from "../api/APIDispatch";
import * as i4 from "../device/sqlite/DaoFactory";
import * as i5 from "../service/profile/profile-code.service";
var MetaService = /** @class */ (function () {
    function MetaService(injector, AOPTokenService, APIFactory, dispatcher, DaoFactory, profileCodeService) {
        this.injector = injector;
        this.AOPTokenService = AOPTokenService;
        this.APIFactory = APIFactory;
        this.dispatcher = dispatcher;
        this.DaoFactory = DaoFactory;
        this.profileCodeService = profileCodeService;
    }
    //Get Meta setting by id
    //Get Meta setting by id
    /**
     * @param {?} id
     * @return {?}
     */
    MetaService.prototype.getMetaJson = 
    //Get Meta setting by id
    /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var configAPI = this.APIFactory.getAPI("getMetaConfig");
        ((/** @type {?} */ (configAPI))).configName = id;
        return this.dispatcher.dispatch(configAPI).toPromise();
    };
    MetaService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    MetaService.ctorParameters = function () { return [
        { type: Injector },
        { type: AOPTokenService },
        { type: APIFactory },
        { type: APIDispatch },
        { type: DaoFactory },
        { type: ProfileCodeService }
    ]; };
    /** @nocollapse */ MetaService.ngInjectableDef = i0.defineInjectable({ factory: function MetaService_Factory() { return new MetaService(i0.inject(i0.INJECTOR), i0.inject(i1.AOPTokenService), i0.inject(i2.APIFactory), i0.inject(i3.APIDispatch), i0.inject(i4.DaoFactory), i0.inject(i5.ProfileCodeService)); }, token: MetaService, providedIn: "root" });
    return MetaService;
}());
export { MetaService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MetaService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    MetaService.prototype.AOPTokenService;
    /**
     * @type {?}
     * @private
     */
    MetaService.prototype.APIFactory;
    /**
     * @type {?}
     * @private
     */
    MetaService.prototype.dispatcher;
    /**
     * @type {?}
     * @private
     */
    MetaService.prototype.DaoFactory;
    /**
     * @type {?}
     * @private
     */
    MetaService.prototype.profileCodeService;
}
//# sourceMappingURL=data:application/json;base64,