{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@allianzSND/core/lib/bean/LanguageCode.ts","ng://@allianzSND/core/lib/errorHandler/APPError.ts","ng://@allianzSND/core/lib/api/APIFactory.ts","ng://@allianzSND/core/lib/api/APIInvokeMethod.ts","ng://@allianzSND/core/lib/api/impl/MockAPIAccess.ts","ng://@allianzSND/core/lib/injectionToken/injection-token.ts","ng://@allianzSND/core/lib/injectionToken/AOPToken.service.ts","ng://@allianzSND/core/lib/utils/StringUtils.ts","ng://@allianzSND/core/lib/utils/DateUtils.ts","ng://@allianzSND/core/lib/utils/pageInfo.ts","ng://@allianzSND/core/lib/utils/ValidationResult.ts","ng://@allianzSND/core/lib/utils/NumberUtils.ts","ng://@allianzSND/core/lib/utils/TableUtils.ts","ng://@allianzSND/core/lib/device/contact/Address.ts","ng://@allianzSND/core/lib/device/contact/Phone.ts","ng://@allianzSND/core/lib/device/contact/ContactItem.ts","ng://@allianzSND/core/lib/device/CordovaDeviceDao.ts","ng://@allianzSND/core/lib/device/DeviceFactory.ts","ng://@allianzSND/core/lib/device/device.service.ts","ng://@allianzSND/core/lib/auth/login/LoginTokenStore.ts","ng://@allianzSND/core/lib/api/DefaultHeader.ts","ng://@allianzSND/core/lib/notification/INotificationProvider.interface.ts","ng://@allianzSND/core/lib/notification/NotificationObject.ts","ng://@allianzSND/core/lib/notification/NotificationProvider.ts","ng://@allianzSND/core/lib/notification/NotificationMgr.ts","ng://@allianzSND/core/lib/api/impl/RestfulAPIAccess.ts","ng://@allianzSND/core/lib/api/impl/SQLiteAPIAccess.ts","ng://@allianzSND/core/lib/api/impl/DeviceAPIAccess.ts","ng://@allianzSND/core/lib/auth/AuthObject.ts","ng://@allianzSND/core/lib/auth/timeout/timeout.service.ts","ng://@allianzSND/core/lib/api/APIDispatch.ts","ng://@allianzSND/core/lib/device/sqlite/SQLiteResponse.ts","ng://@allianzSND/core/lib/language/translate.service.ts","ng://@allianzSND/core/lib/language/translate.pipe.ts","ng://@allianzSND/core/lib/numberFormat/numberFormat.pipe.ts","ng://@allianzSND/core/lib/auth/login/LoginInfo.ts","ng://@allianzSND/core/lib/auth/login/LoginResponse.ts","ng://@allianzSND/core/lib/utils/routeUtils.ts","ng://@allianzSND/core/lib/route/AppRouter.ts","ng://@allianzSND/core/lib/bean/CommonEnum.ts","ng://@allianzSND/core/lib/auth/login/DefaultLoginMgr.ts","ng://@allianzSND/core/lib/auth/permission/check-permission.service.ts","ng://@allianzSND/core/lib/auth/action/action.service.ts","ng://@allianzSND/core/lib/auth/auth.service.ts","ng://@allianzSND/core/lib/auth/action/action.directive.ts","ng://@allianzSND/core/lib/device/sqlite/SQLiteDatabase.ts","ng://@allianzSND/core/lib/device/sqlite/SQLiteColumn.ts","ng://@allianzSND/core/lib/device/sqlite/SQLiteTable.ts","ng://@allianzSND/core/lib/device/sqlite/restrictions/LimitRestriction.ts","ng://@allianzSND/core/lib/device/sqlite/restrictions/OffsetRestriction.ts","ng://@allianzSND/core/lib/device/sqlite/SQLCommand.ts","ng://@allianzSND/core/lib/device/sqlite/restrictions/OrderByRestriction.ts","ng://@allianzSND/core/lib/device/sqlite/SQLiteDao.ts","ng://@allianzSND/core/lib/device/sqlite/WebSQLDao.ts","ng://@allianzSND/core/lib/device/sqlite/DaoFactory.ts","ng://@allianzSND/core/lib/device/sqlite/restrictions/NotEqualRestriction.ts","ng://@allianzSND/core/lib/device/sqlite/ClientCustomDao.ts","ng://@allianzSND/core/lib/component/sqlite-executor/sqlite-executor.component.ts","ng://@allianzSND/core/lib/price/translate-price.service.ts","ng://@allianzSND/core/lib/price/translatePrice.pipe.ts","ng://@allianzSND/core/lib/core.module.ts","ng://@allianzSND/core/lib/language/LanguageClass.ts","ng://@allianzSND/core/lib/initTask/tasks/DataSyncTask.ts","ng://@allianzSND/core/lib/bean/Setting.ts","ng://@allianzSND/core/lib/device/sqlite/restrictions/AndCompoundRestriction.ts","ng://@allianzSND/core/lib/device/sqlite/restrictions/EqualRestriction.ts","ng://@allianzSND/core/lib/device/sqlite/restrictions/GreaterOrEqualRestriction.ts","ng://@allianzSND/core/lib/device/sqlite/restrictions/GreaterRestriction.ts","ng://@allianzSND/core/lib/device/sqlite/restrictions/InRestriction.ts","ng://@allianzSND/core/lib/device/sqlite/restrictions/LessOrEqualRestriction.ts","ng://@allianzSND/core/lib/device/sqlite/restrictions/LikeRestriction.ts","ng://@allianzSND/core/lib/device/sqlite/restrictions/NotNullRestriction.ts","ng://@allianzSND/core/lib/device/sqlite/restrictions/NullRestriction.ts","ng://@allianzSND/core/lib/device/sqlite/restrictions/ORCompoundRestriction.ts","ng://@allianzSND/core/lib/service/setting/setting.service.ts","ng://@allianzSND/core/lib/bean/view-date-change.ts","ng://@allianzSND/core/lib/bean/ProfileCode.ts","ng://@allianzSND/core/lib/bean/versionInfo.ts","ng://@allianzSND/core/lib/bean/SelectOption.ts","ng://@allianzSND/core/lib/bean/SuccessStatus.ts","ng://@allianzSND/core/lib/bean/GoalExtension.ts","ng://@allianzSND/core/lib/bean/SubmitGoalData.ts","ng://@allianzSND/core/lib/bean/SubmitGoalPlan.ts","ng://@allianzSND/core/lib/bean/SubmitGoalPlanInfo.ts","ng://@allianzSND/core/lib/bean/SubmitGoalSettingValue.ts","ng://@allianzSND/core/lib/bean/SubmitGoalInfo.ts","ng://@allianzSND/core/lib/initTask/tasks/ConfigTask.ts","ng://@allianzSND/core/lib/initTask/tasks/DeviceTask.ts","ng://@allianzSND/core/lib/api/register/ProfileCode.ts","ng://@allianzSND/core/lib/api/register/SettingAPI.ts","ng://@allianzSND/core/lib/api/register/ExtensionConfigAPI.ts","ng://@allianzSND/core/lib/api/register/offineAuthAPI.ts","ng://@allianzSND/core/lib/api/register/loginTokenAPI.ts","ng://@allianzSND/core/lib/api/APIRequest.ts","ng://@allianzSND/core/lib/api/register/CheckVersionAPI.ts","ng://@allianzSND/core/lib/api/register/menuAPI.ts","ng://@allianzSND/core/lib/api/register/SettingUpdateAPI.ts","ng://@allianzSND/core/lib/api/register/ContactsSearchAPI.ts","ng://@allianzSND/core/lib/api/register/SyncPushAPI.ts","ng://@allianzSND/core/lib/api/register/SyncPullAPI.ts","ng://@allianzSND/core/lib/api/register/CurrentLanguageListAPI.ts","ng://@allianzSND/core/lib/api/register/BindingAccountAPI.ts","ng://@allianzSND/core/lib/api/register/DeviceAccountAPI.ts","ng://@allianzSND/core/lib/api/register/UpdatePushIDAPI.ts","ng://@allianzSND/core/lib/api/register/syncSequenceIDAPI.ts","ng://@allianzSND/core/lib/api/register/logErrorAPI.ts","ng://@allianzSND/core/lib/api/register/logActionAPI.ts","ng://@allianzSND/core/lib/api/register/pushErrorLogAPI.ts","ng://@allianzSND/core/lib/api/register/PushActionLogAPI.ts","ng://@allianzSND/core/lib/api/register/RouterMapAPI.ts","ng://@allianzSND/core/lib/api/register/getYearConfigAPI.ts","ng://@allianzSND/core/lib/api/register/saveYearConfigAPI.ts","ng://@allianzSND/core/lib/api/register/getAgencyPlanAPI.ts","ng://@allianzSND/core/lib/api/register/saveAgencyPlanAPI.ts","ng://@allianzSND/core/lib/api/register/saveProgressAPI.ts","ng://@allianzSND/core/lib/api/register/getProgressAPI.ts","ng://@allianzSND/core/lib/api/register/MetaConfigAPI.ts","ng://@allianzSND/core/lib/api/register/SettingValueAPI.ts","ng://@allianzSND/core/lib/api/register/getGoalAPI.ts","ng://@allianzSND/core/lib/api/register/saveGoalAPI.ts","ng://@allianzSND/core/lib/api/register/saveActual.ts","ng://@allianzSND/core/lib/api/register/getActual.ts","ng://@allianzSND/core/lib/api/register/pushGoalSettingDataAPI.ts","ng://@allianzSND/core/lib/api/register/pushApproveGoalAPI.ts","ng://@allianzSND/core/lib/api/register/GetDeviceInfoAPI.ts","ng://@allianzSND/core/lib/api/register/LoginAPI.ts","ng://@allianzSND/core/lib/api/register/DashboardGetMessageListAPI.ts","ng://@allianzSND/core/lib/api/register/DashboardUpdateMessageStatusAPI.ts","ng://@allianzSND/core/lib/api/register/changeMessageStatusAPI.ts","ng://@allianzSND/core/lib/api/register/UnbindDeviceAPI.ts","ng://@allianzSND/core/lib/api/register/UpdateTimeListAPI.ts","ng://@allianzSND/core/lib/initTask/tasks/RegisterAPITask.ts","ng://@allianzSND/core/lib/initTask/initial.service.ts","ng://@allianzSND/core/lib/api/APIResponse.ts","ng://@allianzSND/core/lib/api/register/LogoutAPI.ts","ng://@allianzSND/core/lib/api/register/GetOtherParameterAPI.ts","ng://@allianzSND/core/lib/dataSync/version-check.service.ts","ng://@allianzSND/core/lib/dataSync/function/IFunctionSync.ts","ng://@allianzSND/core/lib/dataSync/data-sync.service.ts","ng://@allianzSND/core/lib/service/log/log.service.ts","ng://@allianzSND/core/lib/service/profile/profile-code.service.ts","ng://@allianzSND/core/lib/auth/login/DefaultLoadingApp.ts","ng://@allianzSND/core/lib/interface/routeObject.ts","ng://@allianzSND/core/lib/dataSync/function/CalendarSync.ts","ng://@allianzSND/core/lib/dataSync/function/ContactSync.ts","ng://@allianzSND/core/lib/dataSync/function/CustomerSync.ts","ng://@allianzSND/core/lib/dataSync/function/MessageSync.ts","ng://@allianzSND/core/lib/dataSync/function/GoalExpectedSync.ts","ng://@allianzSND/core/lib/dataSync/function/GoalSync.ts","ng://@allianzSND/core/lib/dataSync/function/ActualSync.ts","ng://@allianzSND/core/lib/dataSync/function/AgencyPlanSync.ts","ng://@allianzSND/core/lib/dataSync/function/ProgressSync.ts","ng://@allianzSND/core/lib/dataSync/function/YearConfigSync.ts","ng://@allianzSND/core/lib/dataSync/function/ProfileCodeSync.ts","ng://@allianzSND/core/lib/route/customRouterReuseStrategy.ts","ng://@allianzSND/core/lib/errorHandler/ErrorsHandler.ts","ng://@allianzSND/core/lib/meta/Meta.service.ts","ng://@allianzSND/core/lib/meta/controller/DisplayMetaController.ts","ng://@allianzSND/core/lib/meta/executor/implements/APIExecutor.ts","ng://@allianzSND/core/lib/meta/executor/implements/InputExecutor.ts","ng://@allianzSND/core/lib/meta/parser/bean/MetaColumn.ts","ng://@allianzSND/core/lib/meta/parser/bean/MetaConfig.ts","ng://@allianzSND/core/lib/meta/parser/bean/MetaSource.ts","ng://@allianzSND/core/lib/meta/parser/bean/MetaGrid.ts","ng://@allianzSND/core/lib/meta/parser/DefaultMetaParser.ts","ng://@allianzSND/core/lib/meta/parser/bean/MetaValid.ts","ng://@allianzSND/core/lib/meta/components/BaseMetaComponent.ts","ng://@allianzSND/core/lib/meta/components/DisplayMetaComponent.ts","ng://@allianzSND/core/lib/meta/components/FormMetaComponent.ts","ng://@allianzSND/core/lib/valid/ValidController.ts","ng://@allianzSND/core/lib/valid/ValidProperty.ts","ng://@allianzSND/core/lib/valid/ValidBean.ts","ng://@allianzSND/core/lib/valid/condition/ValidCondition.interface.ts","ng://@allianzSND/core/lib/valid/condition/RequiredCondition.ts","ng://@allianzSND/core/lib/valid/decorator/Valid.ts","ng://@allianzSND/core/lib/valid/decorator/Bean.ts","ng://@allianzSND/core/lib/valid/decorator/Required.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","__values","o","m","i","__read","r","ar","error","__spread","arguments","concat","LanguageCode","id","name","isDefault","_languageID","_name","_isDefault","defineProperty","APPError","code","message","_this","_super","tslib_1.__extends","Error","APIFactory","errorHandler","apiMap","Map","registerAPI","api","set","getAPIName","unRegisterAPI","delete","getAPI","apiName","target","get","console","group","log","newInstance","getPrototypeOf","assign","groupEnd","handleError","Injectable","args","providedIn","ErrorHandler","MOCK","SQLite","Restful","ONOFFSwitch","Device","MockAPIAccess","httpService","access","getMockPath","pipe","catchError","throwError","HttpClient","ConfigToken","InjectionToken","GoalSettingInterfaceToken","configTaskToken","registerAPITaskToken","dataSyncTaskToken","customTaskToken","fetchLanguageFinishToken","fetchSettingFinishToken","fetchConfigFinishToken","registerDataSyncFuncToken","checkTimeoutToken","timeoutActionToken","checkPermissionToken","authActionToken","authRouteToken","AfterLoginToken","LoadingAppToken","LoginMgrToken","PushIDMgrToken","checkForRootToken","RestHeaderToken","LanguageAccessToken","LanguageUpdateToken","NetworkChangeToken","FontSizeAccessToken","changeFontSizeToken","showRuleToken","initialFinishToken","NotificationProviderToken","GoalSettingNotStartFirstMessageActionToken","GoalSettingNotStartMessageActionToken","NeedGoalSettingMessageActionToken","GoalPromoSettingMessageActionToken","GoalAutoApproveMessageActionToken","GoalAutoApproveLeaderMessageActionToken","ApproveGoalIsRejectMessageActionToken","ApproveGoalIsApproveMessageActionToken","PendingReviewMessageActionToken","SupervisorHaveChangeAgentMessageActionToken","SupervisorHaveChangeOldMessageActionToken","SupervisorHaveChangeNewMessageActionToken","GoalAutoRejectMessageActionToken","GoalAutoRejectLeaderMessageActionToken","ActivityArriveTenPointMessageActionToken","ActivityArriveTwentyPointMessageActionToken","ActivityNotArriveTwentyPointMessageActionToken","ReminderEventsMessageActionToken","DataPrivacyProtectionMessageActionToken","OvertimeMessageActionToken","AutoDeleteMessageActionToken","OfflineMessageActionToken","VersionCheckMessageActionToken","TimoutMessageActionToken","DataCollectionMessageActionToken","ContactPermissionActionToken","yearConfigExtensionDataToken","goalSettingExtensionDataToken","agencyPlanExtensionDataToken","actionDirectiveTaskToken","AOPTokenService","tokenMap","registerToken","token","getToken","StringUtils","isNotEmpty","val","undefined","trim","isEmpty","convertEmptyVal","byteLength","byteLen","charCodeAt","isHasEnglish","match","matchEnglishRegExp","isAllEnglish","isHasChinese","matchChineseRegExp","isAllChinese","getEnglishCharCount","getChineseCharCount","getNumberCharCount","matchNumberRegExp","isHasThai","count","split","forEach","item","DateUtils","datePipe","toDateString","date","format","transform","DatePipe","PageInfo","_pageSize","_page","resetPage","pageSize","_totalRec","totalRec","_totalPage","totalPage","nextPage","ValidationResult","errorMap","setErrorMap","errorMsg","deleteError","isTrue","size","isError","getErrorMsg","clearErrorMap","clear","NumberUtils","isNumber","isNaN","Number","isDecimal","toString","indexOf","isPositive","isPositiveInt","numberToFix","toFix","fix10","Math","pow","round","strip","num","precision","toPrecision","TableUtils","fillTableColumn","tableObject","data","columns","getColumns","map","x","getName","filter","columns_1","tslib_1.__values","columns_1_1","col","setValue","Address","type","city","area","address","_type","_city","_area","_code","_address","Phone","number","_number","ContactItem","firstname","lastname","birthday","phones","emails","_isCheck","_isShow","_firstname","_lastname","_birthday","_phones","_emails","check","show","FirstName","LastName","CordovaDeviceDao","searchcontactsByName","_navigator","fields","contacts","fieldType","displayName","options","ContactFindOptions","multiple","desiredFields","addresses","phoneNumbers","Observable","observer","find","returnObj","Body","contacts_1","contacts_1_1","contact","firstName","givenName","lastName","familyName","convertAddress","complete","contactError","streetAddress","locality","reigon","postalCode","registerNotfiy","checkNotifyPermission","getFirbaseToken","_a","waitnseconds","onNotifyTokenRefresh","callback","window","FirebasePlugin","onTokenRefresh","err","warn","onNotificationOpen","onMessageReceived","notification","subscribeSubject","subject","subscribe","unsubscribeSubject","unsubscribe","hasPermission","isEnabled","grantPermission","res","rej","second","setTimeout","DeviceFactory","daoMap","getDefaultDao","getDao","DeviceService","injector","deviceFactory","APP_CONFIG","_this_1","SSL_fingerprints","deviceID","mock_deviceID","uuid","env","ENV","SSL_FINGERPRINTS","initDeviceID","initDeviceAPI","open","cordova","InAppBrowser","_isPad","judgePad","lockScreenOrient","disableBackBtn","_b","getDevicePlatform","platform","device","getDeviceUUID","_getDeviceUUID","getSecureStorage","toPromise","resp","includes","setSecureStorage","getLocalStorage","setLocalStorage","getDeviceManufacturer","manufacturer","model","restartApp","location","reload","getNetworkState","navigator","connection","networkState","searchContactsByName","word","dao","l","isCheck","error_2","dialNumber","replace","checkIfRoot","IRoot","isRooted","exitApp","plugins","exit","getAppVersion","getVersionNumber","getIsFirstLaunch","key","localStorage","setItem","getItem","orientation","isPad","screen","lock","width","innerWidth","height","innerHeight","ss","SecureStorage","checkSSL","url","sslCertificateChecker","takeScreenShot","screenshot","save","filePath","imagesaver","saveImageToGallery","document","addEventListener","preventDefault","checkContactPermission","CheckPermission","msg","grantContactPermission","Injector","Optional","Inject","LoginTokenStore","tokenSubject","BehaviorSubject","setToken","asObservable","defaultHeader","deviceService","tokenStore","customLoginMgr","version","ver","getHeader","HttpHeaders","Content-Type","Authorization","X-Date","Date","toUTCString","X-Request-ID","now","X-Organization","X-Organization-Branch","X-Organization-User","X-API-Version","GoalSettingNotStartFirst","GoalSettingNotStart","NeedGoalSetting","GoalPromoSetting","GoalAutoApprove","GoalAutoApproveLeader","ApproveGoalIsReject","ApproveGoalIsApprove","PendingReview","SupervisorHaveChangeAgent","SupervisorHaveChangeOld","SupervisorHaveChangeNew","GoalAutoReject","GoalAutoRejectLeader","ActivityArriveTenPoint","ActivityArriveTwentyPoint","ActivityLessThanTwentyPoint","ReminderEvent","DataPrivacyProtection","Overtime","AutoDelete","Offline","OnlineCheck","NewVersion","Timeout","DataCollection","NewVersionLogin","HTTPError","ContactPermissionError","ScreenShotAlert","SubmitFail","GoalSetting","Progress","Calendar","Customer","System","NotificationObject","category","order","action","_category","_id","_data","_order","_action","NotificationProvider","customNotificationProvider","actionMap","NotificationType","NotificationCategory","getNotificationObject","obj","findedType","getAction","NotificationMgr","notificationProvider","DBMessage","notificationList","notificationSubject","init","fetchMessageData","getNotificationList","pushNotification","notify","duplicateList","conflictResult","onConflict","sort","a","popNotification","popped","getUnreadMessageNumber","popAllNotification","showCategoryMessage","selected","selected_id","APIFactory_1","getAPIFactory","dispatcher","getAPIDispatch","updateMessageStatusAPI","setClientIDList","setStatus","dispatch","fetched_messages","APIFactory_2","getMessageAPI","setKeyword","setIsPopup","messageList","MessageType","Source","Title","Description","JSON","parse","Arguments","ClientID","err_1","APIDispatch","RestfulAPIAccess","notificationMgr","customHeader","requestData","getRequestData","headers","isCustomHeaderAPI","API_URL","params","timeout","handleHTTPError","post","put","status","errMsg","SQLiteAPIAccess","executeSQL","DeviceAPIAccess","runDeviceAPI","AuthObject","payload","PERMISSION_DENIED","TIMEOUT","NOT_LOGIN","PENDING_ACTION","TimeoutService","timeoutCheck","timeoutAction","zone","seconds","reaminingSubject","_interval","reset_seconds","reset","clearInterval","runOutsideAngular","setInterval","run","authRoute","isTimeout","AuthError","authAction","getTimeoutRemainingSecond","checkTimeout","NgZone","mockAPIAccess","sqliteAPIAcces","restfulAPIAccess","deviceAPIAccess","timeoutService","apiInvokeMethod","API_TYPE","apiAccess","APIInvokeMethod","of","SQLiteResponse","info","_header","_body","TranslateService","LanguageAccess","LanguageUpdate","language_map","languageMap","current_language","updateLanguageSubject","loadJson","_fetchCurrentLanguage","debug","json","translate","translateResult","translateWithVariable","mappingID","displayText","keys","RegExp","getCurrentLanguage","language","currentLanguage","_fetchCodeData","currentLanguageListAPI","codeArray","bodyDatas","LanguageID","Name","IsDefault","getCodeArray","updateLanguage","newLanguage","UpdateLanguage","getUpdateSubject","TranslatePipe","Pipe","pure","NumberFormatPipe","decimalPlaces","valueToNumber","thousands","amount","abs","j","parseInt","toFixed","substr","slice","LoginInfo","_AgentId","AgentId","_AgentName","AgentName","_Gender","Gender","_AppUseMode","AppUseMode","_exp","exp","_GoalSigningSupervisor","GoalSigningSupervisor","_CurrentJobSeniorityMonth","CurrentJobSeniorityMonth","_JobGrade","JobGrade","_CurrentJobOBMonth","CurrentJobOBMonth","_OfficeName","OfficeName","_ReferenceToken","ReferenceToken","LoginResponse","isSuccess","failCount","ONLINE","OFFLINE","RouteUtils","convertJsonToRouterMap","func_name","pageName","Function","AppRouter","routeReuseStrategy","routeMap","currentMenuObject","previousUrl","currentUrl","routerMapAPI","listenRouterEvent","navigate","func","extras","_i","router","Router","Path","setScreenName","getUrl","page","getCurrentFunction","filtered","isActive","getRouteMap","back","clearCache","deleteRouteSnapshot","getCurrentMenuObject","setCurrentMenuObject","events","event","NavigationEnd","RouteReuseStrategy","Standalone","Integration","jwt_decode","_jwt_decode","DefaultLoginMgr","pushIDMgr","appMode","loginInfo","infoSubject","logoutSubject","Subject","APP_MODE","checkLogin","getLoginInfo","APPMODE","storage_token","updateToken","subscribeLogout","login","loginBody","PushId","getPushID","Username","username","Password","password","DeviceSystem","DeviceId","DeviceModel","DeviceType","factory","loginAPI","from","_login","success","decoded","LOGIN_TYPE","error_1","logout","INTEGRATION_BACK_URL","CheckPermissionService","loginMgr","permissionCheck","permissionMap","userRole","apiFactory","apiDispatcher","authObj","pageId","checkPagePermission","authMenu","menuList","checkMenuPermission","reduce","acc","current","AVAILABLE","PENDING","ActionEvent","ActionService","currentAction","actionIntervalSec","ACTION_STATUS","statusSubject","actionSuscribe","ACTION_INTERVAL","getCurrentAction","getActionStatus","onActionClick","actionClick","AuthService","checkPermissionService","actionService","customAuthAction","customAuthRoute","ActionDirective","authService","appRouter","elRef","actionDirectiveTask","EventEmitter","isDisabled","ngAfterViewInit","onclick","stopPropagation","isAuth","emit","doTask","ActionAPI","time","valid","Directive","selector","ElementRef","Input","Output","HostBinding","HostListener","SQLiteDatabase","dbName","getKey","setName","setkey","SQLiteColumn","isPrimaryKey","isAutoincrement","colName","colValue","getValue","getType","parseFloat","getIsPrimaryKey","getIsAutoincrement","SQLiteTable","tableName","restrictions","cols","hasColumn","getTableName","addRestriction","restriction","getRestrictions","cloneTable","colArray","_c","column","clone_obj","isSetted","LimitRestriction","values","sqlString","getValues","OffsetRestriction","SQLCommand","instruction","sql","setSql","setParam","param","getSql","getParams","OrderByRestriction","prev","SQLiteDao","config","transactionArr","openDataBase","dbObj","sqlitePlugin","openDatabase","androidDatabaseImplementation","db","queryByTable","conditon_str","join","conditon_val","order_str","limit_str","offset_str","sql_count_command","sql_command","sql_obj","sqlcount_obj","runQuerySqlcommand","insertByTable","transformInsert","runSqlCommand","updateByTable","transformUpdate","deleteByTable","transformDelete","transactionInsert","addTransactionCommand","transactionUpdate","transactionDelete","transactionSqlCommand","command","excuteSqlCommand","transaction","tr","sql_command_1","sql_command_1_1","executeSql","getSchema","schema","tx","len","rows","table_name","table_sql","runTransaction","batchArr","cmd","sqlBatch","clearTransaction","tmp_colArray","info_res","isPK","pk","isAutoIncrement","toUpperCase","tableObj","sql_count_obj","res_count","record_length","setted_cols","setted_vals","set_str","WebSQLDao","mainTableIndex","extTableIndex","mainTableName","extTableName","mainTable","extTable","unique","some","DaoFactory","tableMapping","dbMapping","getTable","has","getDefaultTable","mappingDB","refreshTableSchema","db_config","DATABASE","db_names","db_names_1","db_names_1_1","getTableSchema","db_names_2","db_names_2_1","dbname","getDatabaseKey","createDao","error_3","tableMap","clearDatabaseData","dao_1","table","error_4","NotEqualRestriction","ClientCustomDao","baseDao","clientID","getTime","Header","SqliteExecutorComponent","daoFactory","_location","isHasData","recordLength","ngOnInit","selectOption","DATABASE_TABLES","SelectOption","selectTablesOptionList","selectTableChange","goToLastPage","refresh","queryBytable","currentDbName","currentTable","selectTable","substring","tableColumns","responseBody","element","alert","Component","template","Location","decorators","Profile_TW_LH_SD_Code","Profile_TW_LH_SD_DeviceInfo","Profile_TW_LH_SD_DataSync_Time","Profile_TW_LH_SD_VW_FuncSync_Time","Profile_TW_LH_SD_Language","Profile_TW_LH_SD_Error_Log","Profile_TW_LH_SD_Action_Log","TW_LH_SD_Calendar_Extension","TW_LH_SD_Calendar","TW_LH_SD_Customer_Address_Extension","TW_LH_SD_Customer_Email_Extension","TW_LH_SD_Customer_Tel_Extension","TW_LH_SD_Customer_Contact_Extension","TW_LH_SD_Customer_Extension","TW_LH_SD_Customer_Address","TW_LH_SD_Customer_Email","TW_LH_SD_Customer_Tel","TW_LH_SD_Customer_Contact","TW_LH_SD_Customer","TW_LH_SD_Personal_Setting","TW_LH_SD_VW_Customer","TW_LH_SD_Message","TW_LH_SD_Year_Config","TW_LH_SD_Goal_Setting","TW_LH_SD_Goal_Setting_Value","TW_LH_SD_Goal_Setting_Plan_Value","TW_LH_SD_Goal_Setting_Expected","TW_LH_SD_Actual_Value","TW_LH_SD_Agency_Plan_Main","TW_LH_SD_Agency_Detail_Data","TW_LH_SD_Personal_Progress","TW_LH_SD_Team_Progress_Main","TW_LH_SD_Team_Progress_Detail","TW_LH_SD_Other_Parameter","_value","TranslatePriceService","_role","_million","translatePrice","isCAOorZONEHEAD","_numberToFix","powNum","TranslatePricePipe","translatePriceService","role","million","CoreModule","NgModule","imports","HttpClientModule","CommonModule","FormsModule","declarations","exports","Language","performance","team","personal","activitiesPoints","monthlyProgress","yearlyProgress","progress","goalSettingMsgType","all","unread","noMessage","schedule","noBirthday","customerType","customerSource","ageRange","gender","source","marriage","children","familiarity","recentStatus","customerStatus","contactFrequencyMonth","possibility","completeness","contactFrequency","timePerYear","appointment","edit","home","homepage","work","mobile","detail","occupation","company","annualIncome","contactNote","add","noRecord","customerList","importPhone","people","phone","email","country","age","select","contactFrequencyYear","lastNamePlaceholder","firstNamePlaceholder","wrongLastName","wrongEmail","wrongBirthday","annualIncomeYearNTD","preset","day","week","month","year","today","appointmentDetail","saved","loading","title","activity","allDay","to","remark","yes","no","deleteAppointment","wrongTitle","wrongAlert","alertPlaceholder","wrongTitleRequired","wrongActivityRequired","wrongDate","wrongTime","wrongStartTime","wrongEndTime","wrongAlertRequired","noSchedule","customerInformation","click","noEdit","noSearch","noFilter","import","customerFilter","selectNumber","cancel","protectionTitle","deleteMessage","customer","deleteProtectionTitle","updateProtectionTitle","commentRemindTitle","confirm","completed","searchPlaceholder","notePlaceholder","logOut","noClick","noInformation","moreOption","empty","calendarMore","mainMenu","have","appointments","anAppointment","contactMessage","welcome","accountPassword","nationalID","forgotPassword","pleaseWait","changeLanguage","fontSize","changeFontSize","updateTime","seeDetails","fileDownload","signIn","loadingMessage","load","agencyPlanSubtitle","agencyPlanOverviewTitle","FYFCForecast","FYFCActual","FYFCMonthPlan","ANPForecast","ANPActual","ANPMonthPlan","manpowerPlan","recruitmentPlan","manpower","recruitment","FYFCGoal","directUnit","agencyPlanInformationTitle","yellow","agencyPlanInformation","agencyPlanExpected","teamGoal","Q1","Q2","Q3","Q4","recruitmentTotal","indirectUnit","ANPGoal","saveFile","agencyPlan","FYFC","ANP","recruitmentCommitment","caseCount","averageFYFCPerCase","averageANPPerCase","manpowerGoal","thisYearTitle","variableYearTitle","yourAgencyGoal","annualConvention","promotionPlan","MDRT","goalEffectiveMonth","allYearGoal","monthGoal","allianzStarClub","summitTrip","longTermIncentiveTripProgram","COT","TOT","SP","AM","SM","dashDash","personalMonthlyPlanFYFC","plan","actual","overviewStep3Title","meet","submit","inforce","daily","weekly","monthly","approvalStatus","goalBeenApproval","adjustYourGoal","proceedToProgress","teamMonthlyPlanFYFCTitle","completionRate","editPersonalPlanFYFCTitle","goalBeenReject","goalBeenPend","needToBeRecommentTitle","needToBeRecommentContent","workingExperience","goalSettingStep1Title","goalSettingStep2Title","goalSettingStep3Title","goalSettingStep4Title","goalSettingStep5Title","statusBarStep1","statusBarStep2","statusBarStep3","statusBarStep4","statusBarStep5","FYFCAllYear","FYFCNowToYearEnd","NowToYearEnd","yourGoal","comment","findSubtitle","scheduleSubtitle","meetSubtitle","submitSubtitle","inforceSubtitle","approve","commitmentTeamGoalTitle","CommitmentPlaceholder","progressCongratulationsMessage","month1","month2","month3","month4","month5","month6","month7","month8","month9","month10","month11","month12","times","hi","go","goalSettingExcel","setGoalThisYear","case","ok","skip","goalSettingCreateCustomer","goalSettingCustomerJournal","goalSettingActivityType","goalSettingFastQuotation","submission","goalSettingInforcePolicy","FYFCShortfall","ANPActualVariable","ANPAllYear","ANPNowToYearEnd","pendingApproval","dashboardMonth7","points","congratulationsMsg","almostMadeItMsg","wellDoneMsg","greatJobMsg","quarter","backToProgressBtnText","goal","forecast","shortfall","activitiesText","achieveText","actualGoal","actualPlan","meetPresentText","monthlyPlanFYFCTitleText","totalForecastTitle","totalYTDActualTitle","directUnitTitle","indirectUnitTitle","agencyTitle","allZoneTitle","informationDescriptionText","infoTitle","infoMonthDetailText","infoQuarterDetailText","infoYearDetailText","infoForecastRecruitmentDetailText","infoHowToReadThisTitle","infoConversionRateText","infoConversionRateDetailText","infoActivityLabelText","infoRedMeanText","infoGreyMeanText","infoIfAnActivity1Text","infoIfAnActivity2Text","infoToFindText","infoTryTo1Text","infoTryTo2Text","infoTryTo3Text","infoMoreActive1Text","infoMoreActive2Text","infoMoreActive3Text","infoMoreActive4Text","infoTryHard1Text","infoTryHard2Text","infoTryHard3Text","infoHighQuality1Text","infoHighQuality2Text","infoAllAmountCountsByMillion","waitingApproval","needToGoalSettingTitle","goalAutoApproveMessageTitle","goalAutoApproveMessageDesc","goalAutoApproveLeaderMessageTitle","goalAutoApproveLeaderMessageDesc","approveGoalIsRejectTitle","approveGoalIsRejectBody","approveGoalIsApprovedTitle","approveGoalIsApprovedBody","pendingReviewTitle","supervisorHaveChangeAgentTitle","supervisorHaveChangeAgentBody","supervisorHaveChangeOldTitle","supervisorHaveChangeOldBody","supervisorHaveChangeNewTitle","supervisorHaveChangeNewBody","goalAutoRejectMessageTitle","goalAutoRejectMessageDescription","goalAutoRejectLeaderMessageTitle","goalAutoRejectLeaderMessageDescription","activityTenPointTitle","activityTenPointBody","activityTwentyPointTitle","activityTwentyPointBody","activityMiniPointTitle","activityMiniPointBody","customerOvertimeTitle","customerAutoDeleteTitle","goalPeriodNotStartTitle","goalPeriodNotStartBody","adjustGoal","seeProgress","IGotIt","dataPrivacyProtectionTitle","dataPrivacyProtectionBody","pleaseReconnectInternet","dataCollectionProcessAndUsageTitle","dataCollectionProcessAndUsageBody","versionMessage","timeOut","versionUpdate","later","noWifiConnected","pleaseConnectInternet","deleteDataTitle","deleteDataBody","notShowMessage","languageConversionTitle","languageConversionBody","customersUnit","casesUnit","todayScheduleBirthday","yearUnit","vertical","horizonal","addProtection","more","submitDeal","progressGoToCalendar","homeHi","homeAppointmentDetails","homeEdit","homeDelete","homeAppointment","homeSave","homeFYFC","homeANP","homeConfirm","homePersonal","homeTeam","homeDetails","homeToday","homeSchedule","homeBirthday","customerClear","customerAppointment","customerContact","customerEdit","customerDelete","customerAdd","addProfile","customerSave","customerConfirm","customerDetail","unbindDevice","unbind","settingSeeDetails","goalSettingReset","goalSettingNext","goalSettingSubmit","goalSettingFind","goalSettingFindSubtitle","goalSettingSchedule","goalSettingScheduleSubtitle","goalSettingMeetPresent","goalSettingMeetPresentSubtitle","goalSettingSubmitDeal","goalSettingSubmitDealSubtitle","goalSettingInforce","goalSettingInforceSubtitle","goalSettingDaily","goalSettingWeekly","goalSettingMonthly","goalSettingDay","goalSettingWeek","goalSettingMonth","goalSettingActual","goalSettingFYFC","goalSettingANP","goalSettingManpower","goalSettingRecruitment","goalSettingPersonal","goalSettingTeam","goalSettingClear","goalSettingSave","goalSettingPlan","goalSettingSeeDetails","goalSettingLandingHi","goalSettingCalendarJournal","calendarFilter","calendarActivity","calendarCustomerName","calendarAppointmentDetails","calendarEdit","calendarDelete","calendarAppointment","calendarSave","calendarDay","calendarWeek","calendarMonth","calendarYear","calendarToday","progressWeek","progressToday","progressPersonal","progressTeam","progressMonth","progressQuarter","progressYear","progressFYFC","progressANP","progressFind","progressFindSubtitle","progressSchedule","progressScheduleSubtitle","progressMeetPresent","progressMeetPresentSubtitle","progressSubmitDeal","progressSubmitDealSubtitle","progressInforce","progressInforceSubtitle","progressPlan","progressActual","progressGoal","progressForecast","progressShortfall","progressManpower","progressRecruitment","progressCurrentMonth","progressCurrentQuarter","progressCurrentYear","progressForecastRecruitment","progressClose","progressSeeDetails","progressDetail","settingYes","settingNo","detectScreenshotTitle","detectScreenshotContent","noContactPermissionTitle","noContactPermissionContent","submitFailTitle","submitFailContent","notificationSeeProgress","notificationSaveFeedback","notificationDeleteFeedback","notificationCompleteFeedback","goalPeriodNotStartOk","goalPeriodIsBeginOk","needToGoalSettingAdjustGoal","goalAutoApproveAdjustGoal","goalAutoApproveLeaderOk","approveGoalIsRejectAdjustGoal","approveGoalIsApprovedOk","pendingReviewAgencyPlan","supervisorHaveChangeAgentOk","supervisorHaveChangeOldOk","supervisorHaveChangeNewAgencyPlan","goalAutoRejectAdjustGoal","goalAutoRejectLeaderOk","dataPrivacyProtectionConfirm","customerOvertimeConfirm","customerAutoDeleteConfirm","noWifiConnectedOk","versionUpdateYes","versionUpdateLater","timeOutOk","dataCollectionProcessAndUsageReject","dataCollectionProcessAndUsageConfirm","detectScreenshotOk","submitFailOk","noContactPermissionOk","httpErrorOk","DataSyncTask","registerDataSyncFunc","createTable","refreshSchema","ProfileDao","MainDao","runSql","createProfileTableCommand","createMainTableCommand","SqlCommandArray","cmd_1","cmd_1_1","Setting","_settingID","_settingName","_settingVal","AndCompoundRestriction","array","EqualRestriction","GreaterOrEqualRestriction","GreaterRestriction","InRestriction","str","fill","LessOrEqualRestriction","LikeRestriction","newArray","NotNullRestriction","NullRestriction","ORCompoundRestriction","SettingService","_debugMode","_debugSubject","settingAPI","setting","SettingID","SettingName","SettingVal","settingMap","getSetting","settingID","updateSetting","settingUpdateAPI","setSettingObject","settingData","setDebugMode","getDebugMode","getDeviceService","deviceChange","updatePushIDAPI","ViewDateChange","_viewDate","CLICK","SWIPE","ProfileCode","TypeID","Code","MappingID","setDisplayText","text","getCode","getTypeId","getMappingID","getArguments","versionInfo","path","_path","_version","SelectOption$1","setIsDefault","SuccessStatus","_isSuccess","GoalExtension","Key","Value","_Key","_Value","SubmitGoalData","SubmitInfo","GoalValue","GoalPlan","Extensions","SubmitGoalPlan","Values","SubmitGoalPlanInfo","PerformanceType","Month","SubmitGoalSettingValue","DataType","SubmitGoalInfo","ConfigTask","translateService","settingService","fetchSettingFinish","fontSizeAccess","AndroidFontSize","removeSystemFontSize","integrationCheck","fetchLanguage","fetchLanguageList","fetchSetting","loadLanguageFile","getFontSize","updateFontSize","DeviceTask","customCheckRoot","networkChange","checkRoot","rootedAction","fromEvent","change","ProfileCodeAPI","_DaoFactory","profileObj","SettingAPI","settingObj","ExtensionConfigAPI","OfflineAuthAPI","failTry","_offlineAuth","OFFLINE_LOGIN_MAX_TIMES","authResp","infoObj","Category","CategoryVal","offline_token","info_token","lastLoginTIme","UpdateTime","setCountResp","addFailCount","saveLoginTokenAPI","_encryptedAuth","_infoToken","configVal","stringify","encryptedAuth","infoToken","infoTableObj","APIRequest","_url","_params","_timeout","CheckVersionAPI","queryParams","HttpParams","MenuAPI","SettingUpdateAPI","_settingObject","ContactsSearchAPI","SyncPushAPI","async","SyncPullAPI","lastUpdateTime","CurrentLanguageListAPI","languageObj","BindingAccountAPI","account","deviceInfoObjForDelete","deviceInfoObjForInsert","DeviceAccountAPI","deviceInfoObj","UpdatePushIDAPI","syncSequenceIDAPI","logErrorAPI","stack","errorLogObj","logActionAPI","actionLogObj","PushErrorLogAPI","errorList","Message","Stack","Time","toISOString","PushActionLogAPI","actionList","ActionID","FunctionID","Action","Valid","RouterMapAPI","getYearConfigAPI","agentID","setAgentID","agent_id","getYearConfig","saveYearConfigAPI","yearConfigs","yearConfig","yearConfig_ext","deviceInfo","profile_dao","saveConfig","_getDate","yearcfg","DataYear","IsCurrent","PerformanceSettlementMonth","WorkingMonth","WorkingQuarter","QuarterStartMonth","QuarterEndMonth","InitialPreCaseFyfc","FyfcCovertAnpRate","InforceConvertFindRate","InforceConvertScheduleRate","InforceConvertMeetRate","InforceConvertSubmitRate","ProgressDayPointsLimit","InforceConvertPointBase","FindConvertPointBase","ScheduleConvertPointBase","MeetConvertPointBase","SubmitConvertPointBase","GoalSettingActivityProcMode","ProgressBarControlMode","GoalAndPlanDifferenceLimit","NowToYearEndDays","MonthQuantityOfYear","extensions","ext","FirstUseAPP","queryResp","getAgencyPlanAPI","getAgencyPlan","saveAgencyPlanAPI","AgencyPlanDatas","agencyPlanDetail","agencyPlanDetailExt","agencyPlanMain","agencyPlanMainExt","AgencyPlanData","otherParameter","MainDatas","MainDatas_1","MainDatas_1_1","Forecast","Actual","Plan","Manpower","Recruitment","UnitMap","DirectUnit","InDirectUnit","datas","AgentID","IsApprove","Drilldown","Goal","CaseCount","PerCase","CompletionRate","saveProgressAPI","ProgressDatas","personalProgress","personalProgressExt","teamProgressMain","teamProgressMainExt","teamProgressDetail","teamProgressDetailExt","ProgressData","Personal","personalDatas","personalDatas_1","personalDatas_1_1","personalData","TimeBase","Find","Schedule","Meet","Submit","Inforce","Team","TeamMainlDatas","TeamMainlDatas_1","TeamMainlDatas_1_1","TeamMainData","Shortfall","TeamName","Activities","YesterdayPoint","getProgressAPI","getProgress","MetaConfigAPI","_configName","SettingValueAPI","_translateService","_deviceService","LastUpdatedTime","getGoalAPI","getGoal","saveGoalAPI","GoalDatas","GoalSetting_Ext","GoalSettingValue","GoalSettingPlan","GoalSettingPlan_Ext","_d","_e","GoalData","GoalSettingData","Status","IsNeedSetting","IsFirstTime","Remainingdays","GoalSetMonth","PersonnelGoalApplicableYM","TeamGoalApplicableYM","SupervisorComment","GoalValueDatas","GoalValueDatas_1","GoalValueDatas_1_1","GoalPlanData","GoalPlanDatas","GoalPlanDatas_1","GoalPlanDatas_1_1","saveActualAPI","ActualDatas","ActualValue","ActualValueExt","ActualData","ActualMainDatas","ActualMainDatas_1","ActualMainDatas_1_1","getActualAPI","getActual","pushGoalSettingDataAPI","mainData","pushApproveGoalAPI","GetDeviceInfoAPI","dataType","setDataType","LoginAPI","DashboardGetMessageListAPI","_isPopup","keyword","_keyword","setPageInfo","pageInfo","_pageInfo","messageObj","isPopup","isShow","DashboardUpdateMessageStatusAPI","_clientIDList","setClientID","_clientID","list","_status","ChangeMessageStatusAPI","_messageID","_col","_val","_updateStatus","messageID","messageResp","UnbindDeviceAPI","_deviceID","setDeviceID","cleanDeviceUrl","UpdateTimeListAPI","dataSyncObj","RegisterAPITask","DAOFactory","InitialService","dataSyncTask","configTask","deviceTask","registerAPITask","customRegisterAPITask","customTask","initialFinish","_sequentialTasks","_parallelTasks","task","afterInitialFinish","APIResponse","setBodyJSON","bodyJSON","getBodyJSON","LogoutAPI","GetOtherParameterAPI","_year","_daoFactory","SetYear","defaultDao","VersionCheckService","appVersion","checkVersion","checkVersionAPI","newVersion","appPath","DataSyncService","devcieService","syncAPIMap","FuncAPIMap","SyncProcessList","func_url","syncStateSubject","getCurrentSyncState","SYNC_URL","getFuncMap","getSyncInstance","getSyncState","syncAllFunc","syncFunc","FuncList","parallelSync_1","seqSync_2","function_name","_.uniq","syncPromiseArray_1","dataSyncTimeObj","apiTimeMap_1","api_name","getSyncPromiseObject","seqSync_1","seqSync_1_1","sync","funcTimeMap","returnBackendTime","FuncID","BackendTime","returnFrontendTime","APIInstance","url_config","backendTime","frontendTIme","FrontendTime","getState","FUNC_STATE","setState","updateState","getSequentialIDNeeded","sequenceIDNumberNeed","getSequentialID","sequenceIDs","setSequentialID","getPushJson","pushJson","pushToServer","pullFromServer","pull","pullJson","pullData","pullResult","parseISO","waitUntilSyncFinish","frontendTime","pushAPI","pullAPI","getSyncSequenceIDAPI","state","first","entries","ApiTimeMap","LogService","pushErrorLog","_pushErrorLog","pushActionLog","_pushActionLog","ErrorLogTable","pushErrorLogAPI","pushResp","deleteResp","ActionLogTable","pushActionLogAPI","ProfileCodeService","profileCodeTypeMap","profileCodeMap","typeId","convertCode2Text","typeID","profileCode","getArgumentsByCode","profileCodeAPI","DefaultLoadingApp","versionCheck","syncService","logService","profileCodeService","loadedSubject","_loading","onLoaded","versionResp","RouteObject","CalendarSync","PushAOP","PullAOP","tmpPushData","calendarExtObj","returnJson","getCustomerIDMap","customerIDMap","getPushData","pushData","extCols","calendarObj","appointmentId","CalendarID","meetingLocation","appointmentType","CalendarType","IsAllDay","startDateTime","StartTime","endDateTime","EndTime","alertTimes","Alert1","Alert2","Alert3","personId","CustomerClientID","description","Remark","isChangeable","DataSource","synchDetail","clientTime","ClientTime","lastUpdateDateTimeBackend","DataTime","toDelete","IsDelete","execute","_g","deletedAppointmentIds","calendarExtObj_1","calendarDatas","calendarIdArr","calendarClientIdArr","IsAlert","extension","_f","ids","dataWithoutIds","tslib_1.__read","index","reverse","customerObj","CustomerID","ContactSync","customerData","customerContactExtObj","noteId","ContactID","Note","origin","creationDateTime","NoteTime","notes","deletedNoteIds","contactObj","contactExtObj_1","contactIdArr","customerResp","CustomerClientIDArr","CustomerIdArr","cliendID","DeleteIds","contactExtObj","customerArr","CustomerSync","customerExtObj","customerTelExtObj","customerEmailExtObj","customerAddressExtObj","customerExtCols","customerTelExtCols","customerEmailExtCols","customerAddressExtCols","customerID","middleName","alternateName","marritalStatus","Marriage","Occupation","employer","Company","birthDate","BirthdayYear","BirthdayMonth","BirthdayDate","AgeRange","numberOfChildren","Children","addr","addressesExtensions","addressType","AddressType","countryCode","Country","City","Area","postCode","Zipcode","line1","line2","line3","line4","phoneChannels","Tel","tel","telExtensions","usageType","TelType","phoneNumber","emailContacts","Email","emailExtensions","emailType","EmailType","isChangeAble","annualIncomeRange","Income","contactLink","Familiarity","touchPointFrequency","ContactFrequancy","leadProbability","Possibility","isFollowed","IsFollow","isOverTimeAlert","IsOverTimeAlert","profileCompletion","Completeness","_o","customerInfos","deletedPersonIds","telObj","emailObj","addressObj","customerExtObj_1","emailExtObj_1","addressExtObj_1","telExtObj_1","customerResp_1","customerInfoIds_1","ToDeleteCustomerClientIDs","_h","email_clientID","_j","_k","address_clientID","addressExtensions","_l","_m","tel_clientID","DeleteCustomerClientIds","customerArray","clientIDArray","telResp","emailResp","addressResp","customerArray_1","customerArray_1_1","MessageSync","messageArray","updatedIDs","MessageID","messageInfos","deletedMessageIds","messageExtObj","messageIDList","isExist","messageCategory","messageType","isClick","linkStatus","messageTime","GoalExpectedSync","GoalExpectedObj","Recruitments","Qarter","jsonObj","GoalExpected","GoalSettingExpected_1","GoalSettingExpected_ext_1","GoalExpectedDatas","GoalExpectedData","ToDeleteGoalExpectedYears","Recruitments_1","Recruitments_1_1","GoalSync","Goals","saveGoal","ActualSync","saveActual","AgencyPlanSync","AgencyPlans","saveAgencyPlan","ProgressSync","saveProgress","YearConfigSync","Configurations","saveYearConfig","ProfileCodeSync","profileCodeObj","datalist","datalistId","orders","endOfDay","validityPeriod","CustomRouterReuseStrategy","handlers","componentRef","destroy","shouldDetach","route","isReuseRoute","store","handle","getRouteUrl","shouldAttach","retrieve","shouldReuseRoute","future","curr","routeConfig","getTruthRoute","segments","parent","firstChild","shouldReuse","cache","ErrorsHandler","isDebug","getAPIDispatcher","stacktrace.fromError","offline","MetaService","getMetaJson","configAPI","configName","DisplayMetaController","onValueChange","groupId","vaildResult","onValidateAll","btnClick","APIExecutor","getData","API_1","read","saveData","API_2","write","InputExecutor","MetaColumn","optionRef","showTitle","required","readonly","inline","grid","default","maxLength","placeholder","groupColumns","groupRows","icon","canAdd","maxNumber","showDefaultOption","rowTitle","MetaConfig","Rows","Columns","Footer","setColumn","columnList","groupList","createColumnObject","colsInGroup_1","_.flatMap","createGroupColumnObject","ele","convertColumns2Row","splice","setFooter","footerList","columnObj","ref","groupColumn","coulmnList","columnIDs","groupColumnObj","tmpArray","rowArray","MetaSource","MetaGrid","pc","nb","pad","DefaultMetaParser","fillDefaultColumnSetting","metaConfig","getSource","footer","_defaultSetting","MetaValid","colID","isValid","BaseMetaComponent","metaService","parser","executor","metaID","metaLoaded","getMetaID","metaJSON","loadData","getMetaParams","executed_data","onDataUpdated","waitUntilMetaLoaded","checkInterval","isMetaLoaded","DisplayMetaComponent","convertCodeToDisplay","colsNeedConvert","groupData","extendedObj","cur","FormMetaComponent","validationResult","onChange","groupID","isGroup","columnID","validResp","groupCol","_.flatten","validAll","validResult","onBtnClick","disable","onGroupRemove","groupName","onGroupAdd","group_col","newObj","defaultVal","z","addBtnAttr","fetchOptions","createOption","option","ValidController","addBean","bean","beanPool","validObject","getBean","validSelf","addCondition","objectName","propertyName","condition","property","getOrCreateProperty","ValidProperty","conditionList","validProperty","ValidBean","propertyList","addProperty","Required","Max","Min","RequiredCondition","baseTypes","ValidType","beanName","YES","NO","DAY","WEEK","MONTH","QUARTER","YEAR","ALL","PLAN","PERSONAL","TEAM","Bean","class_1","propertyDesciptor","method","isObservable","handleObservable","handlePromise","resolved"],"mappings":"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oFACT43B,EAAI53B,KAAK,qFACT43B,EAAI53B,KAAK,4FACT43B,EAAI53B,KAAK,4FACT43B,EAAI53B,KAAK,uFACT43B,EAAI53B,KAAK,8FACT43B,EAAI53B,KAAK,qFACT43B,EAAI53B,KAAK,6FACT43B,EAAI53B,KAAK,qFACT43B,EAAI53B,KAAK,qFAET43B,EAAI53B,KAAK,uPAET43B,EAAI53B,KAAK,wGAIT43B,EAAI53B,KAAK,qKACT43B,EAAI53B,KAAK,mMAEF43B,GAEJ0oB,EAAAjjD,UAAAyjD,uBAAP,eACQlpB,EAAM,GA4EV,OA1EAA,EAAI53B,KAAK,sGACT43B,EAAI53B,KAAK,0ZACT43B,EAAI53B,KAAK,oHACT43B,EAAI53B,KAAK,kHACT43B,EAAI53B,KAAK,gHACT43B,EAAI53B,KAAK,kIACT43B,EAAI53B,KAAK,mIACT43B,EAAI53B,KAAK,2NACT43B,EAAI53B,KAAK,qKACT43B,EAAI53B,KAAK,+JACT43B,EAAI53B,KAAK,8NACT43B,EAAI53B,KAAK,mgBACT43B,EAAI53B,KAAK,2IACT43B,EAAI53B,KAAK,iMACT43B,EAAI53B,KAAK,iMACT43B,EAAI53B,KAAK,yOACT43B,EAAI53B,KAAK,yOACT43B,EAAI53B,KAAK,qNACT43B,EAAI53B,KAAK,+NAET43B,EAAI53B,KAAK,6bACT43B,EAAI53B,KAAK,uHACT43B,EAAI53B,KAAK,4LAGT43B,EAAI53B,KAAK,4IACT43B,EAAI53B,KAAK,4IACT43B,EAAI53B,KAAK,kIAIT43B,EAAI53B,KAAK,4uBACT43B,EAAI53B,KAAK,0FACT43B,EAAI53B,KAAK,gNAET43B,EAAI53B,KAAK,kSACT43B,EAAI53B,KAAK,2FACT43B,EAAI53B,KAAK,qNAET43B,EAAI53B,KAAK,mIACT43B,EAAI53B,KAAK,iKACT43B,EAAI53B,KAAK,sGACT43B,EAAI53B,KAAK,4QAET43B,EAAI53B,KAAK,4NACT43B,EAAI53B,KAAK,oGACT43B,EAAI53B,KAAK,kQAET43B,EAAI53B,KAA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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export class LanguageCode{\n  private _languageID : string;\n  private _name : string;\n  private _isDefault : string;\n\n  constructor(id,name,isDefault) {\n    this._languageID = id;\n    this._name = name;\n    this._isDefault = isDefault;\n  }\n\n  get getLanguageID() {\n    return this._languageID;\n  }\n\n  get getName() {\n    return this._name;\n  }\n\n  get getIsDefault() {\n    return this._isDefault;\n  }\n}\n","export class APPError extends Error {\n    constructor(code: string, message: string) {\n        super(message);\n        this.message = `CODE ${code} - ${message}`;\n        this.name = `APPError`;\n        this.code = code;\n    }\n    public name = '';\n    public message = '';\n    public code = '';\n}","import { IAPI } from './API.interface';\nimport { Injectable, ErrorHandler } from '@angular/core';\nimport { APPError } from '../errorHandler/APPError';\n\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class APIFactory {\n\n    private apiMap: Map<string, IAPI>;\n\n    private constructor(\n        private errorHandler: ErrorHandler\n    ) {\n        this.apiMap = new Map();\n    }\n\n\n    registerAPI(api: IAPI) {\n        this.apiMap.set(api.getAPIName(), api);\n    }\n\n    unRegisterAPI(api: IAPI) {\n        this.apiMap.delete(api.getAPIName());\n    }\n\n    getAPI(apiName: string): IAPI {\n        let target = this.apiMap.get(apiName);\n        if (target) {\n            console.group(\"get API:\")\n            console.log(\"target:\", target);\n            let newInstance = Object.create(Object.getPrototypeOf(target));\n            newInstance.constructor.apply(newInstance);\n            newInstance = Object.assign(newInstance, target);\n            console.log(\"new instance:\", newInstance);\n            console.groupEnd();\n            return newInstance;\n        }\n        else {\n            console.log(`API ${apiName} not found!`);\n            this.errorHandler.handleError(new APPError(\"F00013\", `Cannot find API ${apiName}.`));\n            return null;\n        }\n    }\n\n}","export enum APIInvokeMethod{\n    MOCK,\n    SQLite,\n    Restful,\n    ONOFFSwitch,\n    Device\n}","import { Injectable, ErrorHandler } from '@angular/core';\n\nimport { IAPIAccess } from '../APIAccess.interface';\nimport { IAPI } from '../API.interface';\nimport { IMockAPI } from '../MockAPI.interface';\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, Observer, throwError } from 'rxjs';\nimport { APPError } from '../../errorHandler/APPError';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class MockAPIAccess implements IAPIAccess {\n\n    constructor(\n        private httpService: HttpClient,\n        private errorHandler: ErrorHandler\n    ) { }\n\n    access(api: IAPI): Observable<any> {\n        return this.httpService.get((<IMockAPI>api).getMockPath()).pipe\n            (catchError(error => { this.errorHandler.handleError(new APPError(\"F00016\", error.message)); return throwError(error) })\n            )\n    }\n}","import { InjectionToken } from '@angular/core';\nimport { IInitTask } from '../initTask/interface/InitialTask.interface';\nimport { checkTimeout } from '../auth/timeout/checkTimeout.interface';\nimport { checkPermission } from '../auth/permission/checkPermission.interface';\nimport { ILoginMgr } from '../auth/login/LoginMgr.interface';\nimport { IregisterDataSyncFunc } from '../initTask/interface/registerDataSyncFunc.interface';\nimport { fetchLanguageFinish } from '../initTask/interface/fetchLanguageFinish.interface';\nimport { fetchSettingFinish } from '../initTask/interface/fetchSettingFinish.interface';\nimport { fetchConfigFinish } from '../initTask/interface/fetchConfigFinish.interface';\nimport { checkRoot } from '../initTask/interface/checkRoot.interface';\nimport { AfterLogin } from '../auth/login/AfterLogin.interface';\nimport { IAuthAction, IAuthRoute, LoadingApp, PushIDMgr } from '../auth';\nimport { GoalSettingInterface } from '../interface/goal-setting.interface';\nimport { RestHeader } from '../api/RestHeader.interface';\nimport { ILanguageAccess } from '../language/ILanguageAccess';\nimport { NetworkChange } from '../device/NetworkChange.interface';\nimport { timeoutAction } from '../auth/timeout/timeoutAction.interface';\nimport { ILanguageUpdate } from '../language/ILanguageUpdate';\nimport { changeFontSize } from '../interface/changeFontSize.interface';\nimport { showRule } from \"../interface/showRule.interface\";\nimport { IFontSizeAccess } from '../interface/IFontSizeAccess.interface';\nimport { initialFinish } from '../initTask/interface/initialFinish.interface';\nimport { INotificationAction } from '../notification/INotificationAction.interface';\nimport { INotificationProvider } from '../notification';\nimport { ExtensionData } from '../interface/ExtensionData.interface';\nimport { ExtensionFactory } from '../interface';\nimport { IActionDirectiveTask } from '../interface/ActionDirectiveTask.interface';\n\n\nexport const ConfigToken = new InjectionToken<Object>('APP_CONFIG');\nexport const GoalSettingInterfaceToken = new InjectionToken<GoalSettingInterface>('');\n\n\n//Initial Task Token\nexport const configTaskToken = new InjectionToken<IInitTask>('configTask');\nexport const registerAPITaskToken = new InjectionToken<IInitTask>('registerAPITask');\nexport const dataSyncTaskToken = new InjectionToken<IInitTask>('dataSyncTask');\nexport const customTaskToken = new InjectionToken<IInitTask>('customTaskToken');\n\n//Config finsish token\nexport const fetchLanguageFinishToken = new InjectionToken<fetchLanguageFinish>('fetchLanguageFinish');\nexport const fetchSettingFinishToken = new InjectionToken<fetchSettingFinish>('fetchSettingFInish');\nexport const fetchConfigFinishToken = new InjectionToken<fetchConfigFinish>('fetchConfigFinish');\n//Data sync register Func Token\nexport const registerDataSyncFuncToken = new InjectionToken<IregisterDataSyncFunc>('registerDataSyncFunc');\n//check timeout token\nexport const checkTimeoutToken = new InjectionToken<checkTimeout>('checkTimeout');\n//timeout action token\nexport const timeoutActionToken = new InjectionToken<timeoutAction>('timeoutAction');\n//check permission token\nexport const checkPermissionToken = new InjectionToken<checkPermission>('checkPermission');\n//auth action token\nexport const authActionToken = new InjectionToken<IAuthAction>('authAction');\n//auth route token\nexport const authRouteToken = new InjectionToken<IAuthRoute>('authRoute');\n//after login action token\nexport const AfterLoginToken = new InjectionToken<AfterLogin>(\"AfterLogin\");\n//do loading token\nexport const LoadingAppToken = new InjectionToken<LoadingApp>(\"LoadingApp\");\n//Login Manager token\nexport const LoginMgrToken = new InjectionToken<ILoginMgr>('LoginMgr');\n//PushID Manager token\nexport const PushIDMgrToken = new InjectionToken<PushIDMgr>('PushIDMgrToken');\n//check root token\nexport const checkForRootToken = new InjectionToken<checkRoot>(\"CheckForRoot\");\n//get header token\nexport const RestHeaderToken = new InjectionToken<RestHeader>(\"RestHeader\");\n//access language\nexport const LanguageAccessToken = new InjectionToken<ILanguageAccess>('LanguageAccess');\n//update language\nexport const LanguageUpdateToken = new InjectionToken<ILanguageUpdate>('LanguageUpdate');\n//network change token\nexport const NetworkChangeToken = new InjectionToken<NetworkChange>('NetworkChange');\n//change font size token\nexport const FontSizeAccessToken = new InjectionToken<IFontSizeAccess>('FontSizeAccess');\nexport const changeFontSizeToken = new InjectionToken<changeFontSize>('changeFontSize');\n//showrule\nexport const showRuleToken = new InjectionToken<showRule>(\"showRule\");\n\n//initialFinish\nexport const initialFinishToken = new InjectionToken<initialFinish>(\"initialFinish\");\n\nexport const NotificationProviderToken = new InjectionToken<INotificationProvider>(\"NotificationProvider\");\n// Notification Action\nexport const GoalSettingNotStartFirstMessageActionToken = new InjectionToken<INotificationAction>('GoalSettingNotStartMessageAction');\nexport const GoalSettingNotStartMessageActionToken = new InjectionToken<INotificationAction>('GoalSettingNotStartMessageAction');\nexport const NeedGoalSettingMessageActionToken = new InjectionToken<INotificationAction>('NeedGoalSettingMessage');\nexport const GoalPromoSettingMessageActionToken = new InjectionToken<INotificationAction>('GoalPromoSettingMessageAction');\nexport const GoalAutoApproveMessageActionToken = new InjectionToken<INotificationAction>('GoalAutoApproveMessageAction');\nexport const GoalAutoApproveLeaderMessageActionToken = new InjectionToken<INotificationAction>('GoalAutoApproveLeaderMessageAction');\nexport const ApproveGoalIsRejectMessageActionToken = new InjectionToken<INotificationAction>('ApproveGoalIsRejectMessageAction');\nexport const ApproveGoalIsApproveMessageActionToken = new InjectionToken<INotificationAction>('ApproveGoalIsApproveMessageAction');\nexport const PendingReviewMessageActionToken = new InjectionToken<INotificationAction>('PendingReviewMessageAction');\nexport const SupervisorHaveChangeAgentMessageActionToken = new InjectionToken<INotificationAction>('SupervisorHaveChangeAgentMessageAction');\nexport const SupervisorHaveChangeOldMessageActionToken = new InjectionToken<INotificationAction>('SupervisorHaveChangeOldMessageAction');\nexport const SupervisorHaveChangeNewMessageActionToken = new InjectionToken<INotificationAction>('SupervisorHaveChangeNewMessageAction');\nexport const GoalAutoRejectMessageActionToken = new InjectionToken<INotificationAction>('GoalAutoRejectMessageAction');\nexport const GoalAutoRejectLeaderMessageActionToken = new InjectionToken<INotificationAction>('GoalAutoRejectLeaderMessageAction');\nexport const ActivityArriveTenPointMessageActionToken = new InjectionToken<INotificationAction>('ActivityArriveTenPointMessageAction');\nexport const ActivityArriveTwentyPointMessageActionToken = new InjectionToken<INotificationAction>('ActivityArriveTwentyPointMessageAction');\nexport const ActivityNotArriveTwentyPointMessageActionToken = new InjectionToken<INotificationAction>('ActivityNotArriveTwentyPointMessageAction');\nexport const ReminderEventsMessageActionToken = new InjectionToken<INotificationAction>('ReminderEventsMessageAction');\nexport const DataPrivacyProtectionMessageActionToken = new InjectionToken<INotificationAction>('DataPrivacyProtectionMessageAction');\nexport const OvertimeMessageActionToken = new InjectionToken<INotificationAction>('OvertimeMessageAction');\nexport const AutoDeleteMessageActionToken = new InjectionToken<INotificationAction>('AutoDeleteMessageAction');\nexport const OfflineMessageActionToken = new InjectionToken<INotificationAction>('OfflineMessageAction');\nexport const VersionCheckMessageActionToken = new InjectionToken<INotificationAction>('VersionCheckMessageAction');\nexport const TimoutMessageActionToken = new InjectionToken<INotificationAction>('TimoutMessageAction');\nexport const DataCollectionMessageActionToken = new InjectionToken<INotificationAction>('DataCollectionMessageAction');\nexport const ContactPermissionActionToken = new InjectionToken<INotificationAction>('ContactPermissionAction');\n\n//Extension Data \nexport const yearConfigExtensionDataToken = new InjectionToken<ExtensionFactory>(\"ExtensionFactory\");\nexport const goalSettingExtensionDataToken = new InjectionToken<ExtensionFactory>(\"ExtensionFactory\");\nexport const agencyPlanExtensionDataToken = new InjectionToken<ExtensionFactory>(\"ExtensionFactory\");\n//export const goalSettingValueExtensionDataToken = new InjectionToken<ExtensionFactory>(\"ExtensionFactory\");\n\n//actionDirectiveTask\nexport const actionDirectiveTaskToken = new InjectionToken<IActionDirectiveTask>(\"IActionDirectiveTask\")\n","import { Injectable, InjectionToken } from \"@angular/core\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AOPTokenService {\n    private tokenMap: Map<string, InjectionToken<any>>;\n    constructor() {\n        this.tokenMap = new Map();\n    }\n\n    registerToken(name: string, token: InjectionToken<any>) {\n        this.tokenMap.set(name, token);\n    }\n\n    getToken(name: string): InjectionToken<any> {\n        return this.tokenMap.get(name);\n    }\n}","export class StringUtils {\n  private static readonly matchEnglishRegExp = \"[a-zA-Z]+\";\n  private static readonly matchChineseRegExp = \"[\\\\u4e00-\\\\u9fa5]+|['ã§']+\";\n  private static readonly matchNumberRegExp = \"[0-9]+\";\n  constructor() {\n  }\n\n  public static isNotEmpty(val): boolean {\n    return val !== '' && val !== null && val !== undefined && val !== 'null' && val !== 'NULL';\n  }\n\n  public static trim(val): string {\n    if (this.isEmpty(val)) return '';\n    else return val.trim();\n  }\n\n  public static isEmpty(val): boolean {\n    if (this.isNotEmpty(val))\n      return false;\n    else\n      return true;\n  }\n\n  public static convertEmptyVal(val): string {\n    if (this.isNotEmpty(val))\n      return val;\n    else\n      return '';\n  }\n\n  public static byteLength(val): number {\n    let byteLen = 0;\n    if (val && val.length) {\n      for (let i = 0; i < val.length; i++) {\n        if ((val.charCodeAt(i) & 0xff00) != 0) {\n          byteLen++;\n        }\n        byteLen++;\n      }\n    }\n    return byteLen;\n  }\n\n  public static isHasEnglish(val: string): boolean {\n    return !!val && val.match(this.matchEnglishRegExp) !== null;\n  }\n\n  public static isAllEnglish(val: string): boolean {\n    let result = val && val.match(this.matchEnglishRegExp);\n    return !!result && result[0].length === val.length;\n  }\n\n  public static isHasChinese(val: string): boolean {\n    return !!val && val.match(this.matchChineseRegExp) !== null;\n  }\n\n  public static isAllChinese(val: string): boolean {\n    let result = val && val.match(this.matchChineseRegExp);\n    return !!result && result[0].length === val.length;\n  }\n\n  public static getEnglishCharCount(val: string): number {\n    let result = val && val.match(this.matchEnglishRegExp);\n    return result ? result[0].length : 0;\n  }\n\n  public static getChineseCharCount(val: string): number {\n    let result = val && val.match(this.matchChineseRegExp);\n    return result ? result[0].length : 0;\n  }\n\n  public static getNumberCharCount(val: string): number {\n    let result = val && val.match(this.matchNumberRegExp);\n    return result ? result[0].length : 0;\n  }\n\n  public static isHasThai(val: string): boolean {\n    if (!val) {\n      val = '';\n    }\n    let count = 0;\n    val.split('').forEach(item => {\n      if (item.charCodeAt(0) > 3584 && item.charCodeAt(0) < 3711) {\n        count++;\n      }\n    });\n\n    return count > 0;\n\n  }\n\n\n}\n","import { DatePipe } from \"@angular/common\";\nimport { Injectable } from \"@angular/core\";\n\n@Injectable({\n    providedIn: 'root'\n  })\nexport class DateUtils{\n\n    constructor(private datePipe : DatePipe) {}\n\n    toDateString(date : Date, format : string) {\n        if(date != undefined) {\n          return this.datePipe.transform(date,format);\n        }\n    }\n}","export class PageInfo{\n    private _pageSize : number = 10;\n    private _page : number = 1;\n    private _totalRec: number;\n    \n\n    private _totalPage : number;\n\n    resetPage() {\n        this._page = 1;\n    }\n\n    get pageSize() {\n        return this._pageSize;\n    }\n\n    set pageSize(pageSize : number) {\n        this._pageSize = pageSize;\n    }\n\n    get totalRec(): number {\n        return this._totalRec;\n    }\n\n    set totalRec(totalRec : number) {\n        this._totalRec = totalRec;\n    }\n\n    get totalPage() {\n        return this._totalPage;\n    }\n\n    set totalPage(totalPage : number) {\n        this._totalPage = totalPage;\n    }\n\n    get page() {return this._page}\n\n    nextPage() {\n        this._page++;\n    }\n}","export class ValidationResult{\n    private errorMap : Map<string,string> = new Map<string,string>();\n\n    setErrorMap(name: string,errorMsg: string) {\n      this.errorMap.set(name, errorMsg);\n    }\n\n    deleteError(name: string) {\n      this.errorMap.delete(name);\n    }\n\n    isTrue() : boolean {\n      return (this.errorMap.size == 0)\n    }\n\n    isError(name : string) : boolean {\n        return this.errorMap.get(name) != undefined;\n    }\n\n    getErrorMsg(name:string) : string {\n        return this.errorMap.get(name);\n    }\n\n    clearErrorMap() {\n      this.errorMap.clear();\n    }\n}\n","import { StringUtils } from \"./StringUtils\";\n\nexport class NumberUtils {\n    constructor() {\n    }\n\n    public static isNumber(val) {\n        if(StringUtils.isNotEmpty(val)){\n            return !isNaN(Number(val));\n        }else{\n            return false;\n        }\n    }\n\n    public static isDecimal(val) {\n        let result = false;\n        if (this.isNumber(val)) {\n            if (val.toString().indexOf('.') != -1) {\n                result = true;\n            }\n        }\n        return result;\n    }\n\n    public static isPositive(val) {\n        let result = false;\n        console.log('this.isNumber(val)', this.isNumber(val));\n        if (this.isNumber(val)) {\n            if (Number(val) > 0 || Number(val) == 0) {\n                console.log('val', val);\n                result = true;\n            }\n        }\n        return result;\n    }\n\n    public static isPositiveInt(val) {\n        let result = false;\n        if (!this.isDecimal(val)) {\n            if (Number(val) >= 0) {\n                result = true;\n            }\n        }\n        return result;\n    }\n\n    static numberToFix(n: number, toFix: number): number {\n        let fix10 = Math.pow(10, toFix);\n        return Math.round(this.strip(n) * fix10) / fix10;\n    }\n\n    static strip(num, precision = 12) {\n        return Number(num.toPrecision(precision));\n    }\n\n}","import { SQLiteTable } from \"../device/sqlite/SQLiteTable\";\n\nexport class TableUtils {\n    static fillTableColumn(tableObject: SQLiteTable, data: any): SQLiteTable {\n        let columns = tableObject.getColumns().map(x => x.getName()).filter(x => x !== 'ClientID');\n        if (data != undefined) {\n            if (columns.length > 0) {\n                for (let col of columns) {\n                    if (data[col] != undefined)\n                        tableObject.setValue(col, data[col]);\n                }\n            }\n        }\n        return tableObject;\n    }\n}\n\n","export class Address {\n    private _type: string;\n    private _city: string;\n    private _area: string;\n    private _code: string;\n    private _address: string;\n\n    constructor(type, city, area, code, address) {\n        this._type = type;\n        this._city = city;\n        this._area = area;\n        this._code = code;\n        this._address = address;\n    }\n\n    public get type(): string {\n        return this._type;\n    }\n    public set type(value: string) {\n        this._type = value;\n    }\n    public get city(): string {\n        return this._city;\n    }\n    public set city(value: string) {\n        this._city = value;\n    }\n    public get area(): string {\n        return this._area;\n    }\n    public set area(value: string) {\n        this._area = value;\n    }\n    public get code(): string {\n        return this._code;\n    }\n    public set code(value: string) {\n        this._code = value;\n    }\n    public get address(): string {\n        return this._address;\n    }\n    public set address(value: string) {\n        this._address = value;\n    }\n}","export class Phone {\n    private _type: string;\n    private _number: string;\n    public get number(): string {\n        return this._number;\n    }\n    public set number(value: string) {\n        this._number = value;\n    }\n    public get type(): string {\n        return this._type;\n    }\n    public set type(value: string) {\n        this._type = value;\n    }\n\n    constructor(type, number) {\n        this._type = type;\n        this._number = number;\n    }\n\n}","import { Address } from \"./Address\";\nimport { Phone } from \"./Phone\";\n\nexport class ContactItem {\n    private _firstname: string;\n    private _lastname: string;\n    private _phones: Array<Phone>;\n    private _emails: Array<string>;\n    private _address: Array<Address>;\n    private _birthday : Date;\n    \n    public _isCheck : boolean = false;\n    public _isShow : boolean = false;\n    constructor(firstname, lastname,birthday, phones, emails, address) {\n        this._firstname = firstname;\n        this._lastname = lastname;\n        this._birthday = birthday;\n        this._phones = phones;\n        this._emails = emails;\n        this._address = address;\n        this._isShow = true;\n    }\n\n    public set Birthday(birthday:Date) {\n        this._birthday = birthday;\n    }\n\n    public get Birthday() {\n        return this._birthday;\n    }\n\n    public set isCheck(check : boolean) {\n        this._isCheck = check;\n    }\n\n    public get isCheck() {\n        return this._isCheck;\n    }\n\n    public set isShow(show : boolean) {\n        this._isShow = show;\n    }\n    public get isShow() {\n        return this._isShow;\n    }    \n    public get FirstName(): string {\n        return this._firstname;\n    }\n    public set FirstName(value: string) {\n        this._firstname = value;\n    }\n    public get LastName(): string {\n        return this._lastname;\n    }\n    public set LastName(value: string) {\n        this._lastname = value;\n    }\n    public get tel(): Array<Phone> {\n        return this._phones;\n    }\n    public set tel(value: Array<Phone>) {\n        this._phones = value;\n    }\n    public get email(): Array<string> {\n        return this._emails;\n    }\n    public set email(value: Array<string>) {\n        this._emails = value;\n    }\n    public get address(): Array<Address> {\n        return this._address;\n    }\n    public set address(value: Array<Address>) {\n        this._address = value;\n    }\n\n    public get fullname(): string {\n        return this.FirstName + ' ' + this.LastName;\n    }\n\n}","import { IDeviceDao } from \"./DeviceDao.interface\";\nimport { Observable } from \"rxjs\";\nimport { Address } from \"./contact/Address\";\nimport { Phone } from \"./contact/Phone\";\nimport { ContactItem } from \"./contact/ContactItem\";\ndeclare var ContactFindOptions;\ndeclare var window;\n\nexport class CordovaDeviceDao implements IDeviceDao {\n    constructor() { }\n\n    public searchcontactsByName(name: string): Observable<any> {\n        var _navigator = (<any>navigator);\n        var fields = [_navigator.contacts.fieldType.displayName, _navigator.contacts.fieldType.name];\n        var options = new ContactFindOptions();\n        options.filter = name;\n        options.multiple = true;\n        options.desiredFields = [_navigator.contacts.fieldType.name, _navigator.contacts.fieldType.emails, _navigator.contacts.fieldType.addresses, _navigator.contacts.fieldType.phoneNumbers];\n        return Observable.create((observer) => {\n            _navigator.contacts.find(fields, (contacts) => {\n                console.log('find contacts results:', contacts);\n                var returnObj = {\n                    \"Body\": []\n                }\n                // var results = [];\n                for (let contact of contacts) {\n                    let firstName = contact.name.givenName || '';\n                    let lastName = contact.name.familyName || '';\n                    let birthday = contact.name.birthday || null;\n                    let emails = contact.emails == null ? [] : contact.emails.map(x => x.value);\n                    let phones = contact.phoneNumbers == null ? [] : contact.phoneNumbers.map(x => new Phone(x.type, x.value.trim()));\n                    let address = contact.addresses == null ? [] : contact.addresses.map(this.convertAddress);\n\n                    returnObj['Body'].push(new ContactItem(firstName, lastName, birthday, phones, emails, address));\n                }\n                observer.next(returnObj);\n                observer.complete();\n            }, (contactError) => {\n                console.log('contacts error:', contactError, options);\n                observer.error(contactError);\n                observer.complete();\n            }, options);\n        })\n    }\n\n    private convertAddress(item): Address {\n        let type = item.type || null;\n        let address = item.streetAddress || null;\n        let area = item.locality || null;\n        let city = item.reigon || null;\n        let code = item.postalCode || null;\n        return new Address(type, city, area, code, address);\n    }\n\n    public async registerNotfiy(): Promise<any> {\n        this.checkNotifyPermission();\n        let token = await this.getFirbaseToken();\n        while (token === null) {\n            await this.waitnseconds(2000);\n            token = await this.getFirbaseToken();\n        }\n        return token;\n    }\n\n    public onNotifyTokenRefresh(callback): void {\n        return window.FirebasePlugin.onTokenRefresh((token) => {\n            callback(token);\n        }, (err) => {\n            console.warn('token refresh error:', err.message);\n        });;\n    }\n\n    public onNotificationOpen(callback): void {\n        window.FirebasePlugin.onMessageReceived((notification) => {\n            callback(notification);\n        }, (err) => {\n            console.warn('notification open error:', err.message);\n        });\n    }\n\n    public subscribeSubject(subject: string): void {\n        window.FirebasePlugin.subscribe(subject);\n    }\n\n    public unsubscribeSubject(subject: string): void {\n        window.FirebasePlugin.unsubscribe(subject);\n    }\n\n    private checkNotifyPermission(): void {\n        window.FirebasePlugin.hasPermission(function (data) {\n            if (!data.isEnabled) {\n                window.FirebasePlugin.grantPermission();\n            }\n        });\n    }\n\n    private getFirbaseToken(): Promise<any> {\n        return new Promise((res, rej) => {\n            window.FirebasePlugin.getToken((token) => {\n                console.log(\"firebase gettoken:\", token);\n                res(token);\n            }, (err) => {\n                console.warn('get token error:', err.message);\n                rej(err);\n            });\n        })\n    }\n\n    private waitnseconds(second): Promise<any> {\n        return new Promise((res, rej) => {\n            setTimeout(() => {\n                res();\n            }, second);\n        })\n    }\n}","import { IDeviceDao } from \"./DeviceDao.interface\";\nimport { CordovaDeviceDao } from \"./CordovaDeviceDao\";\nimport { Injectable } from \"@angular/core\";\n\n\n@Injectable({\n    providedIn:'root'\n})\nexport class DeviceFactory {\n    private daoMap: Map<string, IDeviceDao> = new Map();\n    private constructor() {\n        this.daoMap.set(\"cordova\", new CordovaDeviceDao());\n    }\n    public getDefaultDao(): IDeviceDao {\n        return this.getDao(\"cordova\");\n    }\n\n    public getDao(name: string): IDeviceDao {\n        return this.daoMap.get(name);\n    }\n\n\n\n}","import { Injectable, Injector, Optional, Inject, ErrorHandler } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { StringUtils } from '../utils'\nimport { ConfigToken } from '../injectionToken';\nimport { DeviceFactory } from './DeviceFactory';\nimport { v4 as uuid } from 'uuid';\nimport { UnbindDeviceAPI } from '../api/register/UnbindDeviceAPI';\nimport { APIFactory } from '../api/APIFactory';\nimport { APIDispatch } from '../api/APIDispatch';\n\ndeclare var device;\ndeclare var navigator;\ndeclare var cordova;\ndeclare var IRoot;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DeviceService {\n\n  constructor(\n    private injector: Injector,\n    private deviceFactory: DeviceFactory,\n    @Optional() @Inject(ConfigToken) private APP_CONFIG: any) {\n    let env = this.APP_CONFIG.ENV;\n    this.SSL_fingerprints = this.APP_CONFIG[env].SSL_FINGERPRINTS;\n    if (env === 'DEV_WebSQL')\n      this.initDeviceID().then((id) => {\n        this.deviceID = id;\n      });\n  };\n\n  private SSL_fingerprints = [];\n  private _isPad: boolean;\n  private deviceID: string = null;\n  private mock_deviceID: string = uuid();\n\n  public async initDeviceAPI() {\n    window.open = cordova.InAppBrowser.open;\n    this._isPad = this.judgePad();\n    this.lockScreenOrient();\n    this.disableBackBtn();\n    this.deviceID = await this.initDeviceID();\n  }\n  public getDevicePlatform(): string {\n    let platform = null;\n    try {\n      platform = device.platform;\n    }\n    catch (error) {\n      console.log('cannot get platform, beacause maynot on device.');\n      platform = 'PC';\n      //this.errorHandler.handleError(error);\n    }\n    finally {\n      return platform;\n    }\n  }\n\n  public getDeviceUUID(): string {\n    if (this.deviceID)\n      return this.deviceID;\n  }\n\n  private _getDeviceUUID(): string {\n    let uuid = null;\n    try {\n      uuid = device.uuid;\n    }\n    catch (error) {\n      console.log('cannot get UUID, beacause maynot on device.');\n      uuid = this.mock_deviceID;\n      //this.errorHandler.handleError(error);\n    }\n    finally {\n      return uuid;\n    }\n\n  }\n\n  private async initDeviceID(): Promise<string> {\n    let deviceID = this._getDeviceUUID();\n    try {\n      let resp = await this.getSecureStorage(\"deviceID\").toPromise();\n      console.log(\"getDeviceID from KeyStore resp:\", resp);\n      if (resp.includes(\"Device is not secure\")) { //which Device is not secure\n        throw new Error(resp);\n      } else if (resp) { // if have key in keyStore/keyChain\n        return resp;\n      } else {\n        let setKeyResp = await this.setSecureStorage(\"deviceID\", deviceID).toPromise();\n        if (setKeyResp) {\n          let key = await this.getSecureStorage(\"deviceID\").toPromise();\n          return key;\n        }\n      }\n    } catch (error) {\n      console.log(\"getDeviceID error, use localStorage\");\n      if (this.getLocalStorage(\"deviceID\")) {\n        return this.getLocalStorage(\"deviceID\");\n      } else {\n        this.setLocalStorage(\"deviceID\", deviceID);\n        return deviceID;\n      }\n    }\n  }\n\n  public getDeviceManufacturer(): string {\n    let manufacturer = null;\n    try {\n      manufacturer = `${device.manufacturer} ${device.model}`;\n    }\n    catch (error) {\n      console.log('cannot get Manufacturer, beacause maynot on device.');\n      manufacturer = \"PC Browser\";\n      // this.errorHandler.handleError(error);\n    }\n    finally {\n      return manufacturer;\n    }\n  }\n\n  public restartApp() {\n    try {\n      // navigator.splashscreen.show();\n      window.location.reload(true);\n      window.location.assign('index.html');\n      // navigator.splashscreen.hide();\n    }\n    catch (error) {\n      console.log('restart error');\n      //this.errorHandler.handleError(error);\n    }\n  }\n\n  public getNetworkState(): boolean {\n    if (navigator && navigator.connection) {\n      let networkState = navigator.connection.type;\n      console.log('networkState:', networkState);\n      return networkState != 'none';\n    }\n    else\n      return true;\n  }\n\n  public async searchContactsByName(word: string) {\n    let dao = this.deviceFactory.getDefaultDao();\n    try {\n      let resp = await dao.searchcontactsByName('').toPromise();\n      console.log('search Contact result:', resp);\n      let contacts = resp['Body'];\n\n      for (let item of contacts) {\n        if (StringUtils.isEmpty(item.l))\n          item.isCheck = false;\n      }\n      return contacts;\n    } catch (error) {\n      console.log('error:', error);\n      return error\n    }\n  }\n\n  public dialNumber(num: string): void {\n    window.open('tel:' + num.replace(/\\s/g, ''), '_system');\n  }\n\n  public checkIfRoot(): Promise<boolean> {\n\n    return new Promise((res, rej) => {\n      try {\n        console.log(\"iroot:\", IRoot);\n        if (IRoot !== undefined) {\n          IRoot.isRooted((result) => {\n            res(result);\n          }, (error) => {\n            rej(error);\n          });\n        }\n        else {\n          throw new Error(\"iRoot plugin error.\");\n        }\n      } catch (error) {\n        res(false);\n      }\n    })\n  }\n\n  public exitApp(): void {\n    cordova.plugins.exit();\n    // navigator.app.exitApp();\n  }\n\n  public getAppVersion(): Promise<string> {\n    try {\n      return cordova.getAppVersion.getVersionNumber();\n    }\n    catch (error) {\n      //this.errorHandler.handleError(error);\n      return Promise.resolve(\"1.0.3\");//1.0.0\n    }\n  }\n\n  public getIsFirstLaunch() {\n    return this.getLocalStorage(\"AppFirstLaunch\") === 'N' ? false : true;\n  }\n\n  public setLocalStorage(key: string, value: string) {\n    window.localStorage.setItem(key, value);\n  }\n\n  public getLocalStorage(key: string): string {\n    return window.localStorage.getItem(key);\n  }\n\n\n\n  private lockScreenOrient(): void {\n    let orientation = this.isPad() ? 'landscape' : 'portrait-primary';\n    (<any>window).screen.orientation.lock(orientation);\n  }\n\n  public judgePad(): boolean {\n    let width = window.innerWidth;\n    let height = window.innerHeight;\n    console.log('width:', width);\n    console.log('height:', height);\n    if (width < 700 || height < 700) {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n\n  public isPad() {\n    return this._isPad;\n  }\n\n\n  public setSecureStorage(key: string, value: string): Observable<boolean> {\n    return Observable.create((observer) => {\n      let ss = new cordova.plugins.SecureStorage(\n        function () {\n          ss.set(\n            function () {\n              observer.next(true);\n              observer.complete();\n            },\n            function (error) {\n              observer.next(false);\n              observer.complete();\n            },\n            key,\n            value\n          );\n        },\n        function (error) {\n          observer.next(false);\n          observer.complete();\n        },\n        \"Allianz_SND\"\n      );\n    });\n  }\n\n  public getSecureStorage(key: string): Observable<string> {\n    return Observable.create((observer) => {\n      let ss = new cordova.plugins.SecureStorage(\n        function () {\n          ss.get(\n            function (key) {\n              observer.next(key);\n              observer.complete();\n            },\n            function () {\n              observer.next(null);\n              observer.complete();\n            },\n            key\n          )\n        },\n        function (error) {\n          observer.next(error.message);\n          observer.complete();\n        },\n        \"Allianz_SND\"\n      )\n    })\n  }\n\n  public checkSSL(url): Promise<any> {\n    if (this.SSL_fingerprints.length == 0)\n      return Promise.resolve(true);\n    else\n      return new Promise((res, rej) => {\n        (<any>window).plugins.sslCertificateChecker.check(\n          (message) => {\n            if (message === 'CONNECTION_SECURE')\n              res(true);\n          },\n          (error) => {\n            rej(error);\n          },\n          url,\n          this.SSL_fingerprints);\n      })\n  }\n\n  public takeScreenShot() {\n    let _this = this;\n    (<any>navigator).screenshot.save(function (error, res) {\n      if (error) {\n        //todo throw error\n        console.warn(error);\n      } else {\n        console.log('testScreenShot success', res.filePath);\n        console.warn('getDevicePlatform', _this.getDevicePlatform());\n        if (_this.getDevicePlatform() == \"iOS\")\n          (<any>cordova).plugins.imagesaver.saveImageToGallery(res.filePath, function () { console.log(\"success\") }, function (err) { console.log(err) });\n      }\n    });\n  }\n\n  public disableBackBtn() {\n    document.addEventListener(\"backbutton\", function (e) {\n      e.preventDefault();\n    }, false);\n  }\n\n  public checkContactPermission(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      (<any>cordova).plugins.CheckPermission.checkContactPermission('contact',\n        function (msg) {\n          resolve(msg)\n        },\n        function (error) {\n          reject(error);\n        })\n    });\n  }\n\n  public grantContactPermission() {\n    (<any>cordova).plugins.CheckPermission.grantContactPermission()\n  }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject, BehaviorSubject, Observable } from \"rxjs\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LoginTokenStore {\n\n    private token = '';\n    private tokenSubject: Subject<string> = new BehaviorSubject(this.token);\n    constructor() { }\n\n    setToken(token: string): void {\n        this.token = token;\n        this.tokenSubject.next(this.token);\n    }\n\n    getToken(): Observable<string> {\n        return this.tokenSubject.asObservable();\n    }\n}","\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { Injectable, Optional, Inject } from \"@angular/core\";\nimport { DefaultLoginMgr } from \"../auth/login/DefaultLoginMgr\";\nimport { ILoginMgr } from \"../auth/login/LoginMgr.interface\";\nimport { RestHeader } from \"./RestHeader.interface\";\nimport { DeviceService } from \"../device/device.service\";\nimport { LoginMgrToken } from \"../injectionToken/injection-token\";\nimport { LoginTokenStore } from \"../auth/login/LoginTokenStore\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class defaultHeader implements RestHeader {\n\n    private token = '';\n    private version = '';\n    constructor(\n        private deviceService: DeviceService,\n        private tokenStore: LoginTokenStore,\n        @Optional() @Inject(LoginMgrToken) private customLoginMgr: ILoginMgr\n    ) {\n        if (this.customLoginMgr) {\n            this.customLoginMgr.getToken().subscribe((token) => {\n                this.token = token;\n            })\n        }\n        else {\n            this.tokenStore.getToken().subscribe((token) => {\n                this.token = token;\n            })\n        }\n        this.deviceService.getAppVersion().then((ver) => {\n            this.version = ver;\n        })\n    }\n\n    getHeader(): HttpHeaders {\n        return new HttpHeaders({\n            'Content-Type': 'application/json',\n            'Authorization': \"Bearer \" + this.token,\n            'X-Date': new Date().toUTCString(),\n            'X-Request-ID': Date.now().toString(),\n            'X-Organization': '1',\n            'X-Organization-Branch': '1',\n            'X-Organization-User': '1',\n            'X-API-Version': this.version,\n        })\n    }\n}","import { NotificationObject } from \"./NotificationObject\";\n\nexport enum NotificationType {\n    GoalSettingNotStartFirst = \"GoalSettingNotStartFirst\",\n    GoalSettingNotStart = \"GoalSettingNotStart\",\n    NeedGoalSetting = \"NeedGoalSetting\",\n    GoalPromoSetting = \"GoalPromoSetting\",\n    GoalAutoApprove = \"GoalAutoApprove\",\n    GoalAutoApproveLeader = \"GoalAutoApproveLeader\",\n    ApproveGoalIsReject = \"ApproveGoalIsReject\",\n    ApproveGoalIsApprove = \"ApproveGoalIsApprove\",\n    PendingReview = \"PendingReview\",\n    SupervisorHaveChangeAgent = \"SupervisorHaveChangeAgent\",\n    SupervisorHaveChangeOld = \"SupervisorHaveChangeOld\",\n    SupervisorHaveChangeNew = \"SupervisorHaveChangeNew\",\n    GoalAutoReject = \"GoalAutoReject\",\n    GoalAutoRejectLeader = \"GoalAutoRejectLeader\",\n    ActivityArriveTenPoint = \"ActivityArriveTenPoint\",\n    ActivityArriveTwentyPoint = \"ActivityArriveTwentyPoint\",\n    ActivityLessThanTwentyPoint = \"ActivityLessThanTwentyPoint\",\n    ReminderEvent = \"ReminderEvent\",\n    DataPrivacyProtection = \"DataPrivacyProtection\",\n    Overtime = \"Overtime\",\n    AutoDelete = \"AutoDelete\",\n    Offline = \"Offline\",\n    OnlineCheck = \"OnlineCheck\",\n    NewVersion = \"NewVersion\",\n    Timeout = \"Timeout\",\n    DataCollection = \"DataCollection\",\n    NewVersionLogin = \"NewVersionLogin\",\n    HTTPError = \"HTTPError\",\n    ContactPermissionError = \"ContactPermissionError\",\n    ScreenShotAlert = \"ScreenShotAlert\",\n    SubmitFail = \"SubmitFail\"\n}\n\nexport enum NotificationCategory {\n    GoalSetting = \"GoalSetting\",\n    Progress = \"Progress\",\n    Calendar = \"Calendar\",\n    Customer = \"Customer\",\n    System = \"System\"\n}\n\nexport interface INotificationProvider {\n    getNotificationObject(type: NotificationType, data: any): NotificationObject\n}","import { v4 as uuid } from 'uuid';\nimport { INotificationAction } from './INotificationAction.interface';\n\nexport class NotificationObject {\n    constructor() {\n        this.category = '';\n        this.type = '';\n        this.id = uuid();\n        this.data = {};\n        this.order = -1;\n        this.action = null;\n    }\n    private _category: string;\n    public get category(): string {\n        return this._category;\n    }\n    public set category(value: string) {\n        this._category = value;\n    }\n    private _type: string;\n    public get type(): string {\n        return this._type;\n    }\n    public set type(value: string) {\n        this._type = value;\n    }\n    private _id: string;\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n    private _data: any;\n    public get data(): any {\n        return this._data;\n    }\n    public set data(value: any) {\n        this._data = value;\n    }\n    private _order: number;\n    public get order(): number {\n        return this._order;\n    }\n    public set order(value: number) {\n        this._order = value;\n    }\n    private _action: INotificationAction;\n    public get action(): INotificationAction {\n        return this._action;\n    }\n    public set action(value: INotificationAction) {\n        this._action = value;\n    }\n\n}","import { Injectable, Injector, InjectionToken, Optional, Inject } from \"@angular/core\";\nimport { INotificationProvider, NotificationType, NotificationCategory } from \"./INotificationProvider.interface\";\nimport { NotificationObject } from \"./NotificationObject\";\nimport { GoalSettingNotStartMessageActionToken, NeedGoalSettingMessageActionToken, GoalPromoSettingMessageActionToken, GoalAutoApproveMessageActionToken, GoalAutoApproveLeaderMessageActionToken, ApproveGoalIsRejectMessageActionToken, ApproveGoalIsApproveMessageActionToken, PendingReviewMessageActionToken, SupervisorHaveChangeAgentMessageActionToken, SupervisorHaveChangeOldMessageActionToken, SupervisorHaveChangeNewMessageActionToken, GoalAutoRejectMessageActionToken, GoalAutoRejectLeaderMessageActionToken, ActivityArriveTenPointMessageActionToken, ActivityArriveTwentyPointMessageActionToken, ActivityNotArriveTwentyPointMessageActionToken, ReminderEventsMessageActionToken, DataPrivacyProtectionMessageActionToken, OvertimeMessageActionToken, AutoDeleteMessageActionToken, OfflineMessageActionToken, VersionCheckMessageActionToken, TimoutMessageActionToken, NotificationProviderToken, DataCollectionMessageActionToken, GoalSettingNotStartFirstMessageActionToken, ContactPermissionActionToken } from \"../injectionToken/injection-token\";\nimport { INotificationAction } from \"./INotificationAction.interface\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NotificationProvider implements INotificationProvider {\n    constructor(\n        private injector: Injector,\n        @Optional() @Inject(NotificationProviderToken) private customNotificationProvider: INotificationProvider\n    ) {\n\n    }\n\n    private actionMap = [{\n        type: NotificationType.GoalSettingNotStartFirst,\n        category: NotificationCategory.GoalSetting,\n        order: 1,\n        action: GoalSettingNotStartFirstMessageActionToken\n    }, {\n        type: NotificationType.GoalSettingNotStart,\n        category: NotificationCategory.GoalSetting,\n        order: 1,\n        action: GoalSettingNotStartMessageActionToken\n    }, {\n        type: NotificationType.NeedGoalSetting,\n        category: NotificationCategory.GoalSetting,\n        order: 2,\n        action: NeedGoalSettingMessageActionToken\n    }, {\n        type: NotificationType.GoalPromoSetting,\n        category: NotificationCategory.GoalSetting,\n        order: 3,\n        action: GoalPromoSettingMessageActionToken\n    }, {\n        type: NotificationType.GoalAutoApprove,\n        category: NotificationCategory.GoalSetting,\n        order: 4,\n        action: GoalAutoApproveMessageActionToken\n    }, {\n        type: NotificationType.GoalAutoApproveLeader,\n        category: NotificationCategory.GoalSetting,\n        order: 5,\n        action: GoalAutoApproveLeaderMessageActionToken\n    }, {\n        type: NotificationType.ApproveGoalIsReject,\n        category: NotificationCategory.GoalSetting,\n        order: 6,\n        action: ApproveGoalIsRejectMessageActionToken\n    }, {\n        type: NotificationType.ApproveGoalIsApprove,\n        category: NotificationCategory.GoalSetting,\n        order: 7,\n        action: ApproveGoalIsApproveMessageActionToken\n    }, {\n        type: NotificationType.PendingReview,\n        category: NotificationCategory.GoalSetting,\n        order: 8,\n        action: PendingReviewMessageActionToken\n    }, {\n        type: NotificationType.SupervisorHaveChangeAgent,\n        category: NotificationCategory.GoalSetting,\n        order: 9,\n        action: SupervisorHaveChangeAgentMessageActionToken\n    }, {\n        type: NotificationType.SupervisorHaveChangeOld,\n        category: NotificationCategory.GoalSetting,\n        order: 10,\n        action: SupervisorHaveChangeOldMessageActionToken\n    }, {\n        type: NotificationType.SupervisorHaveChangeNew,\n        category: NotificationCategory.GoalSetting,\n        order: 11,\n        action: SupervisorHaveChangeNewMessageActionToken\n    }, {\n        type: NotificationType.GoalAutoReject,\n        category: NotificationCategory.GoalSetting,\n        order: 12,\n        action: GoalAutoRejectMessageActionToken\n    }, {\n        type: NotificationType.GoalAutoRejectLeader,\n        category: NotificationCategory.GoalSetting,\n        order: 13,\n        action: GoalAutoRejectLeaderMessageActionToken\n    }, {\n        type: NotificationType.ActivityArriveTenPoint,\n        category: NotificationCategory.Progress,\n        order: 14,\n        action: ActivityArriveTenPointMessageActionToken\n    }, {\n        type: NotificationType.ActivityArriveTwentyPoint,\n        category: NotificationCategory.Progress,\n        order: 15,\n        action: ActivityArriveTwentyPointMessageActionToken\n    }, {\n        type: NotificationType.ActivityLessThanTwentyPoint,\n        category: NotificationCategory.Progress,\n        order: 16,\n        action: ActivityNotArriveTwentyPointMessageActionToken\n    }, {\n        type: NotificationType.ReminderEvent,\n        category: NotificationCategory.Calendar,\n        order: 17,\n        action: ReminderEventsMessageActionToken\n    }, {\n        type: NotificationType.DataPrivacyProtection,\n        category: NotificationCategory.Customer,\n        order: 18,\n        action: DataPrivacyProtectionMessageActionToken\n    }, {\n        type: NotificationType.Overtime,\n        category: NotificationCategory.Customer,\n        order: 19,\n        action: OvertimeMessageActionToken\n    }, {\n        type: NotificationType.AutoDelete,\n        category: NotificationCategory.Customer,\n        order: 20,\n        action: AutoDeleteMessageActionToken\n    }, {\n        type: NotificationType.Offline,\n        category: NotificationCategory.System,\n        order: 21,\n        action: OfflineMessageActionToken\n    }, {\n        type: NotificationType.OnlineCheck,\n        category: NotificationCategory.System,\n        order: 22,\n        action: null\n    }, {\n        type: NotificationType.NewVersion,\n        category: NotificationCategory.System,\n        order: 23,\n        action: VersionCheckMessageActionToken\n    }, {\n        type: NotificationType.NewVersionLogin,\n        category: NotificationCategory.System,\n        order: 24,\n        action: VersionCheckMessageActionToken\n    }, {\n        type: NotificationType.Timeout,\n        category: NotificationCategory.System,\n        order: 25,\n        action: TimoutMessageActionToken\n    }, {\n        type: NotificationType.DataCollection,\n        category: NotificationCategory.System,\n        order: 26,\n        action: DataCollectionMessageActionToken\n    }, {\n        type: NotificationType.HTTPError,\n        category: NotificationCategory.System,\n        order: 27,\n        action: null\n    }, {\n        type: NotificationType.ContactPermissionError,\n        category: NotificationCategory.System,\n        order: 28,\n        action: ContactPermissionActionToken\n    }, {\n        type: NotificationType.ScreenShotAlert,\n        category: NotificationCategory.System,\n        order: 29,\n        action: null\n    }, {\n        type: NotificationType.SubmitFail,\n        category: NotificationCategory.System,\n        order: 30,\n        action: null\n    }]\n\n    getNotificationObject(type: NotificationType, data: any, id: string = null): NotificationObject {\n        if (this.customNotificationProvider) {\n            return this.customNotificationProvider.getNotificationObject(type, data);\n        }\n        else {\n            let obj = new NotificationObject();\n            if (id)\n                obj.id = id;\n            obj.data = data;\n            let findedType = this.actionMap.filter(x => x.type === type);\n            if (findedType.length > 0) {\n                obj.order = findedType[0].order;\n                obj.category = findedType[0].category;\n                obj.type = findedType[0].type;\n                obj.action = this.getAction(findedType[0].action);\n            }\n            return obj;\n        }\n    }\n\n    private getAction(token: InjectionToken<INotificationAction>): INotificationAction {\n        let action: INotificationAction;\n        if (token) {\n            try {\n                action = this.injector.get(token);\n            } catch {\n                action = null;\n            }\n        }\n        else {\n            action = null;\n        }\n        return action;\n    }\n}","import { Injectable, ErrorHandler, Injector } from \"@angular/core\";\nimport { Observable, Subject, BehaviorSubject } from \"rxjs\";\nimport { NotificationObject } from \"./NotificationObject\";\nimport { APIFactory } from \"../api/APIFactory\";\nimport { APIDispatch } from \"../api/APIDispatch\";\nimport { DashboardGetMessageListAPI } from \"../api/register/DashboardGetMessageListAPI\";\nimport { APPError } from \"../errorHandler/APPError\";\nimport { DashboardUpdateMessageStatusAPI } from \"../api/register/DashboardUpdateMessageStatusAPI\";\nimport { NotificationProvider } from \"./NotificationProvider\";\nimport { NotificationType } from \"./INotificationProvider.interface\";\nimport * as _ from 'lodash';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NotificationMgr {\n\n    private DBMessage: Array<NotificationObject> = [];\n    private notificationList: Array<NotificationObject> = [];\n    private notificationSubject: Subject<Array<NotificationObject>> = new BehaviorSubject(this.notificationList);\n    constructor(\n        private injector: Injector,\n        private errorHandler: ErrorHandler,\n        private notificationProvider: NotificationProvider\n    ) {\n\n    }\n\n    async init() {\n        console.log(\"NotificationMgr init\");\n        await this.fetchMessageData();\n    }\n\n    public getNotificationList(): Observable<Array<NotificationObject>> {\n        console.log(\"NotificationMgr getNotificationList\");\n        return this.notificationSubject.asObservable();\n    }\n\n    public pushNotification(type: NotificationType, data: any) {\n        let notify = this.notificationProvider.getNotificationObject(type, data);\n        console.log(\"NotificationMgr pushNotification:\", notify);\n        // èç\breminder message\n        if (notify.action) {\n            let duplicateList = this.notificationList.filter(x => x.category === notify.category && x.type === notify.type);\n            let conflictResult = notify.action.onConflict(duplicateList, notify);\n            this.notificationList = [...conflictResult, ...this.notificationList.filter(x => x.category !== notify.category || x.type !== notify.type)]\n        }\n        else {\n            this.notificationList.push(notify);\n        }\n\n\n        this.notificationList = this.notificationList.sort((a, b) => a.order - b.order);\n        this.notificationSubject.next(this.notificationList);\n    }\n\n    public popNotification(notification: NotificationObject) {\n        console.log(\"NotificationMgr popNotification:\", notification);\n        try {\n            let popped = this.notificationList.filter(x => x.id === notification.id).length > 0;\n            console.log(\"popNotification:\", popped);\n            if (popped) {\n                this.notificationList = this.notificationList.filter(x => x.id !== notification.id);\n                this.notificationSubject.next(this.notificationList);\n                console.log(\"after popped:\", this.notificationList);\n            }\n        } catch (error) {\n            this.errorHandler.handleError(new APPError(\"F00021\", error.message));\n        }\n    }\n\n    public getUnreadMessageNumber() {\n        return this.DBMessage.length;\n    }\n\n    public popAllNotification() {\n        this.notificationList = [];\n        this.notificationSubject.next(this.notificationList);\n    }\n\n    public showCategoryMessage(category: string = null, type: string = null) {\n        console.log(\"NotificationMgr ShowCategoryMessage:\", category, type);\n        let selected = this.DBMessage.filter(x =>\n            ((x.category === category) || (!category)) && ((x.type === type) || (!type)))\n        let selected_id = selected.map(x => x.id);\n        if (selected.length > 0) {\n            this.notificationList = [...this.notificationList, ...selected];\n            this.notificationSubject.next(this.notificationList);\n            this.DBMessage = this.DBMessage.filter(x => selected_id.indexOf(x.id) < 0);\n\n            // update db message status\n            let APIFactory = this.getAPIFactory();\n            let dispatcher = this.getAPIDispatch();\n            let updateMessageStatusAPI = APIFactory.getAPI('updateDashboardMessageStatus');\n            (<DashboardUpdateMessageStatusAPI>updateMessageStatusAPI).setClientIDList(selected_id);\n            (<DashboardUpdateMessageStatusAPI>updateMessageStatusAPI).setStatus('Reading');\n            dispatcher.dispatch(updateMessageStatusAPI).subscribe((resp) => {\n                console.log(\"NotificationMgr popNotification updateMessageStatusAPI resp:\", resp);\n            })\n        }\n    }\n\n    public async fetchMessageData() {\n        console.log(\"NotificationMgr fetchMessageData\");\n        let fetched_messages = [];\n        try {\n            let APIFactory = this.getAPIFactory();\n            let dispatcher = this.getAPIDispatch();\n            let getMessageAPI = APIFactory.getAPI(\"getDashboardMessageList\");\n            (<DashboardGetMessageListAPI>getMessageAPI).setKeyword(\"UnRead\");\n            (<DashboardGetMessageListAPI>getMessageAPI).setIsPopup(true);\n            let resp = await dispatcher.dispatch(getMessageAPI).toPromise();\n            let messageList = resp['Body'];\n            fetched_messages = messageList.map(x => {\n                return this.notificationProvider.getNotificationObject(x.MessageType, Object.assign({\n                    \"Source\": \"DB\",\n                    \"Title\": x.Title,\n                    \"Description\": x.Description,\n                }, JSON.parse(x.Arguments)), x.ClientID);\n            });\n        }\n        catch (err) {\n            this.errorHandler.handleError(new APPError(\"F00020\", err.message));\n        }\n        this.DBMessage = fetched_messages;\n        console.log(\"NotificationMgr fetchMessageData end\", this.DBMessage);\n    }\n\n    private getAPIFactory(): APIFactory {\n        try {\n            let factory = this.injector.get(APIFactory);\n            return factory;\n        }\n        catch{\n            return null;\n        }\n    }\n\n    private getAPIDispatch(): APIDispatch {\n        try {\n            let dispatcher = this.injector.get(APIDispatch);\n            return dispatcher;\n        } catch  {\n            return null;\n        }\n    }\n}","import { Injectable, Inject, Optional, ErrorHandler } from '@angular/core';\nimport { IAPIAccess } from '../APIAccess.interface';\nimport { IAPI } from '../API.interface';\nimport { APIResponse } from '../APIResponse';\nimport { IRestfulAPI } from '../RestfulAPI.interface';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { APIRequest } from '../APIRequest';\nimport { RestHeaderToken, ConfigToken } from '../../injectionToken';\nimport { RestHeader } from '../RestHeader.interface';\nimport { Observable } from 'rxjs';\nimport { DeviceService } from '../../device/device.service';\nimport { APPError } from '../../errorHandler/APPError';\nimport { defaultHeader } from '../DefaultHeader';\nimport { timeout } from 'rxjs/operators';\nimport { ICustomRestfulHeaderAPI } from '../CustomRestfulHeaderAPI.interface';\nimport { NotificationMgr } from '../../notification/NotificationMgr';\nimport { NotificationType } from '../../notification/INotificationProvider.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class RestfulAPIAccess implements IAPIAccess {\n    constructor(\n        private httpService: HttpClient,\n        @Inject(ConfigToken) private APP_CONFIG: any,\n        private deviceService: DeviceService,\n        private errorHandler: ErrorHandler,\n        private defaultHeader: defaultHeader,\n        private notificationMgr: NotificationMgr,\n        @Optional() @Inject(RestHeaderToken) private customHeader: RestHeader\n    ) { }\n    //private _timeout = 15000;\n    access(api: IRestfulAPI): Observable<any> {\n        let requestData: APIRequest = api.getRequestData();\n        console.log('restful API requestData:', requestData);\n        let options = {\n            headers: this.getHeader()\n        }\n\n        if (this.isCustomHeaderAPI(api)) {\n            options.headers = api.getHeader();\n        }\n\n        if (requestData.url == '') {\n            requestData.url = this.APP_CONFIG[this.APP_CONFIG.ENV].API_URL[api.getAPIName()];\n        }\n        //check SSL\n        return Observable.create((observer) => {\n            this.deviceService.checkSSL(requestData.url).then(\n                () => {\n                    if (requestData.params != null)\n                        options['params'] = requestData.params;\n                    if (requestData.type == 'GET') {\n                        this.httpService.get(requestData.url, options).pipe(timeout(requestData.timeout)).subscribe(resp => {\n                            observer.next(resp);\n                            observer.complete();\n                        }, error => {\n                            this.handleHTTPError(error);\n                            observer.error(error.error);\n                            observer.complete();\n                        })\n                    }\n                    else if (requestData.type == 'POST') {\n\n                        this.httpService.post(requestData.url, requestData.body, options).pipe(timeout(requestData.timeout)).subscribe(resp => {\n                            observer.next(resp);\n                            observer.complete();\n                        }, error => {\n                            this.handleHTTPError(error);\n                            observer.error(error.error);\n                            observer.complete();\n                        })\n                    }\n\n                    else if (requestData.type == 'PUT') {\n                        this.httpService.put(requestData.url, requestData.body, options).pipe(timeout(requestData.timeout)).subscribe(resp => {\n                            observer.next(resp);\n                            observer.complete();\n                        }, error => {\n                            this.handleHTTPError(error);\n                            observer.error(error.error);\n                            observer.complete();\n                        })\n                    }\n                },\n                (error) => {\n                    console.log(\"check SSL fingerprint error:\", error.message);\n                    this.errorHandler.handleError(new APPError(\"C00004\", error.message))\n                    observer.error(error);\n                    observer.complete();\n                })\n        })\n    }\n\n\n    // TODO: User HTTP interceptor\n    private handleHTTPError(error) {\n        console.log('handle HTTP error:', error);\n        if (error.status == 400)\n            this.errorHandler.handleError(new APPError(\"C00001\", error.message));\n        else if (error.status == 401)\n            this.errorHandler.handleError(new APPError(\"C00003\", error.message));\n        else if (error.status == 500)\n            this.errorHandler.handleError(new APPError(\"C00002\", error.message));\n        else\n            this.errorHandler.handleError(new APPError(\"C00005\", error.message));\n        let errMsg = error.message;\n        if (error.error && error.error.code) {\n            errMsg = `Error Code:${error.error.code}\\n Msg:${error.error.message}`;\n        }\n        this.notificationMgr.pushNotification(NotificationType.HTTPError, {\n            code: error.status,\n            message: `url:${error.url}\\n${errMsg}`\n        })\n    }\n\n    private getHeader() {\n        if (this.customHeader) {\n            return this.customHeader.getHeader();\n        }\n        else\n            return this.defaultHeader.getHeader();\n    }\n\n    private isCustomHeaderAPI(api: any): api is ICustomRestfulHeaderAPI {\n        return \"getHeader\" in api;\n    }\n}","import { Injectable } from '@angular/core';\nimport { IAPIAccess } from '../APIAccess.interface';\nimport { IAPI } from '../API.interface';\nimport { APIResponse } from '../APIResponse';\nimport { of, Observable } from 'rxjs';\nimport { ISQLiteAPI } from '../SQLiteAPI.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SQLiteAPIAccess implements IAPIAccess {\n    access(api: IAPI): Observable<any> {\n        console.log('sqlite access');\n        return (<ISQLiteAPI>api).executeSQL();\n    }\n}","import { Injectable } from '@angular/core';\nimport { IAPIAccess } from '../APIAccess.interface';\nimport { IAPI } from '../API.interface';\nimport { IDeviceAPI } from '../DeviceAPI.interface';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DeviceAPIAccess implements IAPIAccess {\n    access(api: IAPI): Observable<any> {\n        return (<IDeviceAPI>api).runDeviceAPI();\n    }\n}","export class AuthObject {\n    public payload;\n    public status: boolean;\n    public error: string;\n    constructor(payload: any = {}, status: boolean = true) {\n        this.payload = payload;\n        this.status = status;\n        this.error = '';\n    }\n}\n\nexport enum AuthError {\n    PERMISSION_DENIED = 'Permission Denied',\n    TIMEOUT = 'Timeout',\n    NOT_LOGIN = 'Not Login',\n    PENDING_ACTION = 'Other Action Pending'\n}","import { Injectable, Inject, NgZone, Optional } from '@angular/core';\nimport { IAuthRoute } from '../AuthRoute.interface';\nimport { IAuthAction } from '../AuthAction.interface';\nimport { AuthObject, AuthError } from '../AuthObject';\nimport { checkTimeoutToken, ConfigToken, timeoutActionToken } from '../../injectionToken';\nimport { checkTimeout } from './checkTimeout.interface';\nimport { timeoutAction } from './timeoutAction.interface';\nimport { Subject, BehaviorSubject, Observable } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TimeoutService implements IAuthRoute, IAuthAction {\n\n  private seconds: number = 0;\n  private reset_seconds: number;\n  private reaminingSubject: Subject<number> = new BehaviorSubject(this.seconds);\n  private _interval = null;\n\n  constructor(\n    @Inject(ConfigToken) private APP_CONFIG: any,\n    @Optional() @Inject(checkTimeoutToken) private timeoutCheck: checkTimeout,\n    @Optional() @Inject(timeoutActionToken) private timeoutAction: timeoutAction,\n    private zone: NgZone) {\n    this.reset_seconds = this.APP_CONFIG[this.APP_CONFIG.ENV].TIMEOUT;\n    this.seconds = this.reset_seconds;\n  }\n\n  reset() {\n    if (this.timeoutCheck)\n      this.timeoutCheck.reset();\n    else {\n      this.seconds = this.reset_seconds;\n    }\n  }\n\n  init() {\n    if (this.timeoutCheck) {\n      this.timeoutCheck.init();\n    }\n    else {\n      if (this._interval != null) {\n        clearInterval(this._interval);\n      }\n      this.zone.runOutsideAngular(() => {\n        this._interval = setInterval(() => {\n          this.seconds--;\n          this.reaminingSubject.next(this.seconds);\n          if (this.seconds <= 0) {\n            this.zone.run(() => {\n              clearInterval(this._interval);\n              this._interval = null;\n              console.log('timeout!!');\n              if (this.timeoutAction) {\n                this.timeoutAction.timeoutAction();\n              }\n            })\n          }\n        }, 1000);\n      });\n    }\n\n  }\n\n  clear() {\n    if (this.timeoutCheck)\n      this.timeoutCheck.clear();\n    else {\n      if (this._interval != null) {\n        clearInterval(this._interval);\n        this._interval = null;\n      }\n    }\n  }\n\n  authRoute(payload: AuthObject) {\n    if (!payload.status)\n      return payload;\n    payload.status = !this.isTimeout();\n    if (!payload.status) {\n      payload.error = AuthError.TIMEOUT;\n    }\n    return payload;\n  }\n  authAction(payload: AuthObject) {\n    if (!payload.status)\n      return payload;\n    payload.status = !this.isTimeout();\n    if (!payload.status) {\n      payload.error = AuthError.TIMEOUT;\n    }\n    return payload;\n  }\n\n  getTimeoutRemainingSecond(): Observable<number> {\n    return this.reaminingSubject.asObservable();\n  }\n  private isTimeout() {\n    if (this.timeoutCheck)\n      return this.timeoutCheck.checkTimeout();\n    else\n      return this.seconds <= 0;\n  }\n}\n","import { IAPI } from './API.interface';\nimport { APIInvokeMethod } from './APIInvokeMethod';\nimport { IAPIAccess } from './APIAccess.interface';\nimport { MockAPIAccess } from './impl/MockAPIAccess';\nimport { RestfulAPIAccess } from './impl/RestfulAPIAccess';\nimport { SQLiteAPIAccess } from './impl/SQLiteAPIAccess';\nimport { Observable, of } from 'rxjs';\nimport { Injectable, Inject, Optional, ErrorHandler } from '@angular/core';\nimport { DeviceAPIAccess } from './impl/DeviceAPIAccess';\nimport { TimeoutService } from '../auth/timeout/timeout.service';\nimport { ConfigToken } from '../injectionToken';\nimport { APPError } from '../errorHandler/APPError';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class APIDispatch {\n\n    constructor(\n        private mockAPIAccess: MockAPIAccess,\n        private sqliteAPIAcces: SQLiteAPIAccess,\n        private restfulAPIAccess: RestfulAPIAccess,\n        private deviceAPIAccess: DeviceAPIAccess,\n        private timeoutService: TimeoutService,\n        private errorHandler: ErrorHandler,\n        @Inject(ConfigToken) private APP_CONFIG: any) { }\n\n    dispatch(api: IAPI): Observable<any> {\n\n        this.timeoutService.reset();\n        if (api != undefined) {\n            let env = this.APP_CONFIG.ENV;\n            let apiInvokeMethod = this.APP_CONFIG[env].API_TYPE[api.getAPIName()];\n\n            let apiAccess: IAPIAccess;\n            if (apiInvokeMethod == APIInvokeMethod.MOCK) {\n                apiAccess = this.mockAPIAccess;\n            }\n            else if (apiInvokeMethod == APIInvokeMethod.Restful) {\n                apiAccess = this.restfulAPIAccess;\n            }\n            else if (apiInvokeMethod == APIInvokeMethod.SQLite) {\n                apiAccess = this.sqliteAPIAcces;\n            }\n\n            else if (apiInvokeMethod == APIInvokeMethod.Device) {\n                apiAccess = this.deviceAPIAccess;\n            }\n\n            if (apiAccess != undefined) {\n                return apiAccess.access(api);\n            }\n            else {\n                this.errorHandler.handleError(new APPError(\"F00014\", `API ${api.getAPIName()} doesn't assign access method.`))\n            }\n        }\n        this.errorHandler.handleError(new APPError(\"F00015\", `API object is null.`))\n        return of(null);\n\n    }\n}","export class SQLiteResponse {\n    private _header = {};\n    private _body = [];\n    constructor(info, data) {\n        this._header = info;\n        this._body = data;\n    }\n\n    get Header(){\n      return this._header;\n    }\n\n    set Header(val:any){\n      this._header = val;\n    }\n\n    get Body(){\n      return this._body;\n    }\n\n    set Body(val:any){\n      this._body = val;\n    }\n\n}\n","import { Inject, Injectable, Injector, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { CurrentLanguageListAPI } from '../api/register/CurrentLanguageListAPI';\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\nimport { LanguageCode } from '../bean/LanguageCode';\nimport { APIFactory } from '../api/APIFactory';\nimport { APIDispatch } from '../api/APIDispatch'\nimport { LanguageAccessToken, LanguageUpdateToken } from '../injectionToken';\nimport { ILanguageAccess } from './ILanguageAccess';\nimport { ILanguageUpdate } from './ILanguageUpdate';\nimport { DeviceService } from '../device/device.service';\nimport { SQLiteResponse } from '../device/sqlite/SQLiteResponse';\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class TranslateService {\n  private language_map = {};\n  private languageMap = new Map<string, Array<LanguageCode>>();\n  private current_language = \"\";\n  private updateLanguageSubject: Subject<any> = new BehaviorSubject<any>(0);\n  constructor(private httpService: HttpClient,\n    private dispatcher: APIDispatch,\n    private APIFactory: APIFactory,\n    private deviceService: DeviceService,\n    @Optional() @Inject(LanguageAccessToken) private LanguageAccess: ILanguageAccess,\n    @Optional() @Inject(LanguageUpdateToken) private LanguageUpdate: ILanguageUpdate) {\n  }\n\n  async init() {\n    await this.loadJson();\n    await this._fetchCurrentLanguage().toPromise();\n  }\n\n  loadJson() {\n    let _this = this;\n    console.debug('translate.service.loadjson');\n\n    return new Promise((res, rej) => {\n      //start of for mappingID\n      // let languageJSON = window.localStorage.getItem('LanguageJSON');\n      // if (languageJSON) {\n      //   _this.language_map = JSON.parse(languageJSON);\n      //   res();\n      // }\n      // else {\n      //   _this.httpService.get(\"./assets/config/language.json\").subscribe((json) => {\n      //     console.debug('translate.service.loadjson success', json);\n      //     _this.language_map = json;\n      //     res();\n      //   });\n      // }\n      // end of for mappingID\n      _this.httpService.get(\"./assets/config/language.json\").subscribe((json) => {\n        console.debug('translate.service.loadjson success', json);\n        _this.language_map = json;\n        res();\n      });\n    })\n\n  }\n\n  translate(key) {\n    //for test language\n    if (this.current_language === 'MappingID') {\n      return '${' + key + '}';\n    }\n    // console.log(\"==============translate start==============\");\n    // console.log(\"Current Language :  \" + this.current_language);\n    // console.log(\"Translate Key (Mapping ID) : \" + key);\n    // console.log(\"Translate (Text) \" + this.language_map[this.current_language][key]);\n    // console.log(\"==============translate end==============\");\n    let translateResult = this.language_map[this.current_language][key];\n    if (translateResult === null || translateResult === undefined) {\n      return key;\n    }\n    else {\n      return translateResult;\n    }\n  }\n\n  public translateWithVariable(mappingID: string, map: any) {\n    let displayText = this.translate(mappingID);\n\n    Object.keys(map).forEach((key) => {\n      if (map[key] == null || map[key] == undefined) {\n        map[key] = '';\n      }\n      displayText = displayText.replace(new RegExp(`\\\\$\\\\{${key}\\\\}`, 'g'), map[key].toString());\n    })\n\n    return displayText;\n\n  }\n\n  public _fetchCurrentLanguage(): Observable<any> {\n    return Observable.create((observer) => {\n      if (this.LanguageAccess) {\n        this.LanguageAccess.getCurrentLanguage().subscribe((language) => {\n          this.current_language = language;\n          observer.next(language);\n          observer.complete();\n        });\n      } else {\n        console.log(\"Default _fetchCurrentLanguage\");\n        let currentLanguage = this.deviceService.getLocalStorage(\"SNDLanguage\") || 'en';\n        this.current_language = currentLanguage;\n        this.deviceService.setLocalStorage(\"SNDLanguage\", currentLanguage);\n        observer.next(this.current_language);\n        observer.complete();\n      }\n    });\n  }\n\n  public _fetchCodeData(): Observable<any> {\n    let currentLanguageListAPI: any = <CurrentLanguageListAPI>this.APIFactory.getAPI('getCurrentLanguageList');\n    let codeArray: Array<LanguageCode> = [];\n\n    console.debug('setting.service fetchCodeData', currentLanguageListAPI);\n    return Observable.create((observer) => {\n      this.dispatcher.dispatch(currentLanguageListAPI).subscribe((data) => {\n\n        let bodyDatas = data['Body'];\n        console.log('<--- Datas --->');\n        console.log(data);\n        for (let i = 0; i < bodyDatas.length; i++) {\n          let json = bodyDatas[i];\n          let language = new LanguageCode(json.LanguageID, json.Name, json.IsDefault);\n          codeArray.push(language);\n\n          this.languageMap.set('TW_LH_SD_Language', codeArray);\n        }\n\n        console.debug('languageMap', this.languageMap);\n        observer.next(true);\n        observer.complete();\n\n      })\n    })\n  }\n\n  public getCodeArray() {\n    if (this.languageMap.size != 0) {\n      let codeArray: Array<LanguageCode> = this.languageMap.get('TW_LH_SD_Language');\n      if (codeArray == undefined) codeArray = new Array<LanguageCode>();\n      return codeArray;\n    }\n    return new Array<LanguageCode>();\n  }\n\n\n\n  public updateLanguage(newLanguage: string): Observable<any> {\n    return Observable.create((observer) => {\n\n      if (this.LanguageUpdate) {\n        this.LanguageUpdate.UpdateLanguage(newLanguage).subscribe((resp) => {\n          observer.next(resp);\n          observer.complete();\n        });\n      }\n      else {\n        this.deviceService.setLocalStorage(\"SNDLanguage\", newLanguage);\n        observer.next(new SQLiteResponse({ status: true }, []));\n        observer.complete();\n\n      }\n      this._fetchCurrentLanguage().subscribe((language) => {\n        this.current_language = language;\n        this.updateLanguageSubject.next();\n      });\n    });\n  }\n\n  public getCurrentLanguage(): string {\n    return this.current_language;\n  }\n\n  public getUpdateSubject(): Subject<any> {\n    return this.updateLanguageSubject;\n  }\n}\n\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { TranslateService } from './translate.service';\n\n@Pipe({\n  name: 'translate',\n  pure: false\n})\nexport class TranslatePipe implements PipeTransform {\n\n  constructor(private translate: TranslateService) { }\n\n  transform(value: any, args?: any): any {\n    return this.translate.translate(value);\n  }\n\n}\n","import { Pipe, PipeTransform, Optional, Inject } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n\n@Pipe({\n  name: 'numberFormat',\n  pure: false\n})\nexport class NumberFormatPipe implements PipeTransform {\n\n  constructor() { }\n\n  transform(value: any, decimalPlaces: number = -1): string {\n    let valueToNumber = Number(value);\n    if (isNaN(valueToNumber)) { //ä¸è½è½ææ¸å­\n      return value;\n    }\n    else {\n      if (decimalPlaces >= 0) {\n        const decimal = '.';\n        const thousands = ',';\n        let amount: string = '';\n        try {\n          decimalPlaces = Math.abs(decimalPlaces);\n          decimalPlaces = isNaN(decimalPlaces) ? 1 : decimalPlaces;\n\n          const negativeSign = valueToNumber < 0 ? \"-\" : \"\";\n          let i = parseInt(amount = Math.abs(valueToNumber || 0).toFixed(decimalPlaces)).toString();\n          let j = (i.length > 3) ? i.length % 3 : 0;\n          // if (Math.abs(Number(amount) - parseInt(i))) {\n          //   return this._valueAddMark(negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousands) + (decimalPlaces ? decimal + Math.abs(Number(amount) - parseInt(i)).toFixed(decimalPlaces).slice(2) : \"\"));\n          // } else {\n          //   return this._valueAddMark(negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousands));\n          // }\n          return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousands) + (decimalPlaces ? decimal + Math.abs(Number(amount) - parseInt(i)).toFixed(decimalPlaces).slice(2) : \"\");\n\n        } catch (e) {\n          console.log(e)\n        }\n      } \n      else {\n        const thousands = ',';\n        let amount: string = '';\n        try {\n          const negativeSign = valueToNumber < 0 ? \"-\" : \"\";\n          let i = Math.abs(valueToNumber || 0).toString();\n          let j = (i.length > 3) ? i.length % 3 : 0;\n\n          return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousands);\n        } catch (e) {\n          console.log(e)\n        }\n      }\n    }\n  }\n\n  // private _valueAddMark(value) {\n  //   return '###' + value + '###';\n  // }\n}\n","export class LoginInfo {\n    private _AgentId: string;\n    public get AgentId(): string {\n        return this._AgentId;\n    }\n    public set AgentId(value: string) {\n        this._AgentId = value;\n    }\n    private _AppUseMode: Array<any>;\n    public get AppUseMode(): Array<any> {\n        return this._AppUseMode;\n    }\n    public set AppUseMode(value: Array<any>) {\n        this._AppUseMode = value;\n    }\n    private _AgentName: string;\n    public get AgentName(): string {\n        return this._AgentName;\n    }\n    public set AgentName(value: string) {\n        this._AgentName = value;\n    }\n    private _Gender: string;\n    public get Gender(): string {\n        return this._Gender;\n    }\n    public set Gender(value: string) {\n        this._Gender = value;\n    }\n\n    private _exp: number;\n    public get exp(): number {\n        return this._exp;\n    }\n    public set exp(value: number) {\n        this._exp = value;\n    }\n    private _GoalSigningSupervisor: number;\n    public get GoalSigningSupervisor(): number {\n        return this._GoalSigningSupervisor;\n    }\n    public set GoalSigningSupervisor(value: number) {\n        this._GoalSigningSupervisor = value;\n    }\n    private _CurrentJobSeniorityMonth;\n    public get CurrentJobSeniorityMonth() {\n        return this._CurrentJobSeniorityMonth;\n    }\n    public set CurrentJobSeniorityMonth(value) {\n        this._CurrentJobSeniorityMonth = value;\n    }\n    private _JobGrade;\n    public get JobGrade() {\n        return this._JobGrade;\n    }\n    public set JobGrade(value) {\n        this._JobGrade = value;\n    }\n    private _CurrentJobOBMonth;\n    public get CurrentJobOBMonth() {\n        return this._CurrentJobOBMonth;\n    }\n    public set CurrentJobOBMonth(value) {\n        this._CurrentJobOBMonth = value;\n    }\n    private _OfficeName;\n    public get OfficeName() {\n        return this._OfficeName;\n    }\n    public set OfficeName(value) {\n        this._OfficeName = value;\n    }\n\n    private _ReferenceToken;\n    public get ReferenceToken() {\n        return this._ReferenceToken;\n    }\n\n    public set ReferenceToken(value) {\n        this._ReferenceToken = value;\n    }\n\n    constructor(info) {\n        console.log(\"LoginInfo custructor:\", info);\n        this._AgentId = info.AgentId || '';\n        this._AgentName = info.AgentName || '';\n        this._Gender = info.Gender || '';\n        this._AppUseMode = [info.AppUseMode] || [];\n        this._exp = info.exp || null;\n        this._GoalSigningSupervisor = info.GoalSigningSupervisor || null;\n        this._CurrentJobSeniorityMonth = info.CurrentJobSeniorityMonth || null;\n        this._JobGrade = info.JobGrade || null;\n        this._CurrentJobOBMonth = info.CurrentJobOBMonth || null;\n        this._OfficeName = info.OfficeName || null;\n        this._ReferenceToken = info.ReferenceToken || null;\n    }\n\n}","export class LoginResponse {\n    isSuccess: boolean;\n    errorMsg: string;\n    type: LOGIN_TYPE;\n    token: string;\n    failCount: number;\n    constructor(resp: { isSuccess: boolean, type: LOGIN_TYPE, errorMsg: string, token: string, failCount?: number }) {\n        this.isSuccess = resp.isSuccess;\n        this.errorMsg = resp.errorMsg;\n        this.type = resp.type;\n        this.token = resp.token;\n        this.failCount = resp.failCount || -1;\n    }\n}\nexport enum LOGIN_TYPE {\n    ONLINE,\n    OFFLINE\n}","export class RouteUtils {\n\n    public static convertJsonToRouterMap(data: any): any {\n        let map = {};\n        let funcList = Object.keys(data);\n        funcList.forEach(func_name => {\n            Object.keys(data[func_name]).forEach(pageName => {\n                data[func_name][pageName] = Object.assign(data[func_name][pageName], {\n                    Function: func_name\n                })\n                map[pageName] = data[func_name][pageName];\n            })\n        })\n        return map;\n    }\n}","import { Injectable, Optional, Injector } from \"@angular/core\";\nimport { Router, NavigationEnd, RouteReuseStrategy } from \"@angular/router\";\nimport { APIFactory } from \"../api/APIFactory\";\nimport { APIDispatch } from \"../api/APIDispatch\";\nimport { RouteUtils } from \"../utils/routeUtils\";\nimport { CustomRouterReuseStrategy } from \"./customRouterReuseStrategy\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AppRouter {\n\n    private routeMap: Object = {};\n    private currentMenuObject: any = null;\n    private previousUrl: string = null;\n    private currentUrl: string = null;\n\n    constructor(\n        private injector: Injector,\n        private APIFactory: APIFactory,\n        private dispatcher: APIDispatch,\n        private routeReuseStrategy: RouteReuseStrategy\n    ) {\n    }\n\n    public init() {\n        //call api to get route map\n        let routerMapAPI = this.APIFactory.getAPI(\"getRouterMap\");\n        if (routerMapAPI) {\n            this.dispatcher.dispatch(routerMapAPI).subscribe((map) => {\n                console.log(\"routeMapAPI:\", map);\n                this.routeMap = RouteUtils.convertJsonToRouterMap(map);\n                console.log(\"router map:\", this.routeMap);\n            })\n        }\n        this.listenRouterEvent();\n    }\n\n    public navigate(func: string, ...extras: Array<string>) {\n        let router = this.injector.get(Router);\n        console.log(\"navigate:\", router, func, this.routeMap[func].Path);\n        if (router && this.routeMap[func]) {\n            if ((<any>window).FirebasePlugin)\n                (<any>window).FirebasePlugin.setScreenName(this.routeMap[func].Function);\n            // this.currentFunction = this.routeMap[func].Function;\n            if (extras)\n                router.navigate([this.routeMap[func].Path, ...extras]);\n            else\n                router.navigate([this.routeMap[func].Path]);\n        }\n    }\n\n    public getUrl(page: string) {\n        return this.routeMap[page] ? this.routeMap[page].Path : '';\n    }\n\n    public getCurrentFunction() {\n        let router = this.injector.get(Router);\n        let filtered = Object.keys(this.routeMap).filter(x => router.isActive(this.routeMap[x].Path, false))\n            .map(x => this.routeMap[x].Function);\n        if (filtered.length > 0) {\n            return filtered[0];\n        }\n        else {\n            return \"Not Found\";\n        }\n    }\n    public getRouteMap(): any {\n        return this.routeMap;\n    }\n\n    public back(clearCache: boolean = true) {\n        console.log(\"router back to:\", this.previousUrl);\n        if (this.previousUrl) {\n            if (clearCache && this.routeReuseStrategy[\"deleteRouteSnapshot\"]) {\n                (<CustomRouterReuseStrategy>this.routeReuseStrategy).deleteRouteSnapshot();\n            }\n            let router = this.injector.get(Router);\n            router.navigate([this.previousUrl]);\n        }\n    }\n\n    public getCurrentMenuObject(): any {\n        return this.currentMenuObject;\n    }\n\n    public setCurrentMenuObject(val: any): void {\n        this.currentMenuObject = val;\n    }\n\n    private listenRouterEvent() {\n        let router = this.injector.get(Router);\n        router.events.subscribe(event => {\n            if (event instanceof NavigationEnd) {\n                this.previousUrl = this.currentUrl;\n                this.currentUrl = event.url;\n            };\n        });\n    }\n}\n","export enum YESNO {\n    YES = 'Y',\n    NO = 'N'\n}\n\nexport enum TIMEBASE{\n    DAY = 'Day',\n    WEEK = 'Week',\n    MONTH = 'Month',\n    QUARTER = 'Quarter',\n    YEAR = 'Year'\n}\n\nexport enum SUBMITGOALTYPE{\n    ALL = 'All',\n    PLAN = 'Plan'\n}\n\nexport enum PERFORMANCETYPE {\n    PERSONAL = 'P',\n    TEAM = 'T'\n}\n\nexport enum APPMODE {\n    Standalone,\n    Integration\n}","import { Injectable, Optional, Inject, Injector } from \"@angular/core\";\nimport { ILoginMgr } from \"./LoginMgr.interface\";\nimport { LoginInfo } from \"./LoginInfo\";\nimport { BehaviorSubject, Observable, Subject, from } from \"rxjs\";\nimport { LoginResponse, LOGIN_TYPE } from \"./LoginResponse\";\nimport { DeviceService } from \"../../device/device.service\";\nimport { APIFactory } from \"../../api/APIFactory\";\nimport { APIDispatch } from \"../../api/APIDispatch\";\nimport { LoginAPI } from \"../../api/register/LoginAPI\";\nimport * as _jwt_decode from \"jwt-decode\";\nimport { PushIDMgrToken, LoginMgrToken, ConfigToken } from \"../../injectionToken/injection-token\";\nimport { PushIDMgr } from \"./PushIDMgr.interface\";\nimport { LoginTokenStore } from \"./LoginTokenStore\";\nimport { AppRouter } from \"../../route/AppRouter\";\nimport { APPMODE } from \"../../bean/CommonEnum\";\n\n\nconst jwt_decode = _jwt_decode;\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DefaultLoginMgr implements ILoginMgr {\n\n    private appMode: APPMODE = null;\n    private token: string = '';\n    private loginInfo: LoginInfo = null;\n    private infoSubject: BehaviorSubject<LoginInfo> = new BehaviorSubject<LoginInfo>(this.loginInfo);\n    private logoutSubject: Subject<any> = new Subject();\n\n    constructor(\n        private deviceService: DeviceService,\n        private APIFactory: APIFactory,\n        private dispatcher: APIDispatch,\n        private injector: Injector,\n        private tokenStore: LoginTokenStore,\n        private router: AppRouter,\n        @Inject(ConfigToken) private APP_CONFIG: any,\n        @Optional() @Inject(LoginMgrToken) private customLoginMgr: ILoginMgr,\n        @Optional() @Inject(PushIDMgrToken) private pushIDMgr: PushIDMgr\n    ) {\n        if (this.customLoginMgr) {\n            this.customLoginMgr.getToken().subscribe((token) => {\n                this.token = token;\n            })\n        }\n        else {\n            this.tokenStore.getToken().subscribe((token) => {\n                this.token = token;\n            });\n        }\n        this.appMode = this.APP_CONFIG.APP_MODE;\n        this.checkLogin();\n    }\n\n    public getLoginInfo(): Observable<LoginInfo> {\n        console.log(\"loginMgr getLoginInfo\");\n        if (this.customLoginMgr)\n            return this.customLoginMgr.getLoginInfo();\n        else\n            return this.infoSubject.asObservable();\n    }\n\n    public getToken(): Observable<string> {\n        if (this.customLoginMgr)\n            return this.customLoginMgr.getToken();\n        else\n            return this.tokenStore.getToken();\n    }\n\n    public checkLogin() {\n        if (this.customLoginMgr)\n            return this.customLoginMgr.checkLogin();\n        else {\n            if (this.appMode === APPMODE.Integration) {\n                let storage_token = this.deviceService.getLocalStorage(\"SNDToken\");\n                if (storage_token) {\n                    this.token = storage_token;\n                    this.updateToken(storage_token);\n                }\n            }\n            return !!this.token;\n        }\n    }\n\n    public subscribeLogout(): Observable<any> {\n        return this.logoutSubject.asObservable();\n    }\n\n    public login(payload): Observable<LoginResponse> {\n        if (this.customLoginMgr)\n            return this.customLoginMgr.login(payload);\n        else {\n            let loginBody = {\n                PushId: this.pushIDMgr.getPushID(),\n                Username: payload.username,\n                Password: payload.password,\n                DeviceSystem: this.deviceService.getDevicePlatform(),\n                DeviceId: this.deviceService.getDeviceUUID(),\n                DeviceModel: this.deviceService.getDeviceManufacturer(),\n                DeviceType: this.deviceService.isPad() ? \"Pad\" : \"Phone\"\n            }\n            let factory = this.getAPIFactory();\n            let dispatcher = this.getAPIDispatch();\n            let loginAPI = factory.getAPI(\"onlineLogin\");\n            (<LoginAPI>loginAPI).body = loginBody;\n            return from(this._login(loginAPI));\n        }\n\n    }\n\n    private async _login(loginAPI: LoginAPI) {\n        try {\n            let dispatcher = this.getAPIDispatch();\n            let resp = await dispatcher.dispatch(loginAPI).toPromise();\n            if (resp.success) {\n                let decoded = jwt_decode(resp['token']);\n                console.log(\"decoded:\", decoded);\n                this.updateToken(resp['token']);\n                return new LoginResponse({ isSuccess: true, type: LOGIN_TYPE.ONLINE, errorMsg: '', token: resp['token'] });\n            }\n            else {\n                return new LoginResponse({ isSuccess: false, type: LOGIN_TYPE.ONLINE, errorMsg: 'some error happen on login', token: '' });\n            }\n        } catch (error) {\n            console.log(\"login error handler:\", error);\n            let msg = error.message ? error.message : 'System_Maintenance';\n            return new LoginResponse({ isSuccess: false, type: LOGIN_TYPE.ONLINE, errorMsg: msg, token: '' });\n        }\n    }\n\n    public logout() {\n        this.logoutSubject.next();\n        if (this.customLoginMgr)\n            return this.customLoginMgr.logout();\n        else {\n            if (this.appMode === APPMODE.Integration) {\n                window.location.assign(this.APP_CONFIG.INTEGRATION_BACK_URL);\n            }\n            else {\n                this.updateToken(null);\n                this.router.navigate(\"Login\");\n            }\n        }\n    }\n\n    public updateToken(token: string) {\n        console.log(\"updateToken:\", token);\n        this.token = token;\n        this.tokenStore.setToken(token);\n        if (token) {\n            let info = new LoginInfo(jwt_decode(token));\n            this.loginInfo = info;\n        }\n        else {\n            this.loginInfo = null;\n        }\n        this.infoSubject.next(this.loginInfo);\n    }\n\n    private getAPIFactory() {\n        return this.APIFactory ? this.APIFactory : this.injector.get(APIFactory);\n    }\n    private getAPIDispatch() {\n        return this.dispatcher ? this.dispatcher : this.injector.get(APIDispatch);\n    }\n}","import { Injectable, Optional, Inject, Injector } from '@angular/core';\nimport { IAuthRoute } from '../AuthRoute.interface';\nimport { IAuthAction } from '../AuthAction.interface';\nimport { AuthObject, AuthError } from '../AuthObject';\nimport { HttpClient } from '@angular/common/http';\nimport { checkPermission } from './checkPermission.interface';\nimport { checkPermissionToken } from '../../injectionToken';\nimport { LoginInfo } from '../login/LoginInfo';\nimport { DefaultLoginMgr } from '../login/DefaultLoginMgr';\nimport { APIFactory } from \"../../api/APIFactory\";\nimport { APIDispatch } from '../../api/APIDispatch';\nimport { RouteUtils } from '../../utils/routeUtils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CheckPermissionService implements IAuthRoute {\n\n  private permissionMap = {};\n  private userRole = [];\n  constructor(\n    private injector: Injector,\n    private loginMgr: DefaultLoginMgr,\n    @Optional() @Inject(checkPermissionToken) private permissionCheck: checkPermission\n  ) {\n\n  }\n\n  init() {\n    console.log('init check permission service');\n    if (!this.permissionCheck) {\n      this.loadJson();\n      this.loginMgr.getLoginInfo().subscribe((info: LoginInfo) => {\n        console.log('check permission subscribe:', info);\n        if (info)\n          this.userRole = info.AppUseMode;\n      })\n    }\n    else\n      this.permissionCheck.init();\n\n\n  }\n\n  private loadJson() {\n    //call api to get route map\n    let apiFactory = this.injector.get(APIFactory);\n    let apiDispatcher = this.injector.get(APIDispatch)\n    if (apiFactory && apiDispatcher) {\n      let routerMapAPI = apiFactory.getAPI(\"getRouterMap\");\n      if (routerMapAPI) {\n        apiDispatcher.dispatch(routerMapAPI).subscribe((map) => {\n          this.permissionMap = RouteUtils.convertJsonToRouterMap(map);\n          console.log(\"page permission map:\", this.permissionMap);\n        })\n      }\n    }\n    else {\n      console.log(\"Check-permission init error: apiFactory or Dispatcher not found.\");\n    }\n  }\n\n  authRoute(authObj: AuthObject) {\n    if (!authObj.status)\n      return authObj;\n\n    let pageId = authObj.payload.func;\n    console.log(this.permissionMap);\n    if (pageId in Object.keys(this.permissionMap)) {\n      authObj.status = this.checkPagePermission(pageId)\n      if (!authObj.status) {\n        authObj.error = AuthError.PERMISSION_DENIED;\n      }\n    }\n    return authObj;\n  }\n\n  authMenu(menuList: Array<string>): Array<string> {\n    if (this.permissionCheck) {\n      return this.permissionCheck.checkMenuPermission(menuList, this.userRole);\n    }\n    else {\n      //default permission check\n      console.log(\"check menu permission:\", menuList, this.permissionMap);\n      return menuList.filter(x => {\n        if (Object.keys(this.permissionMap).includes(x)) {\n          return this.checkPagePermission(x);\n        }\n        else return true;\n      })\n    }\n  }\n\n  public checkPagePermission(name: string): boolean {\n    if (this.permissionCheck)\n      return this.permissionCheck.checkPagePermission(name, this.userRole);\n    else\n      return this.userRole\n        .map(x => !this.permissionMap[name][\"Role\"] || (this.permissionMap[name][\"Role\"].indexOf(x) > -1))\n        .reduce((acc, current) => acc || current, false);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { IAuthAction } from '../AuthAction.interface';\nimport { AuthObject, AuthError } from '../AuthObject';\nimport { Subject, BehaviorSubject, Observable } from 'rxjs';\nimport { ConfigToken } from '../../injectionToken/injection-token';\n\nexport enum ACTION_STATUS {\n  AVAILABLE,\n  PENDING\n}\n\nexport class ActionEvent {\n  public action: string;\n  public event: any;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ActionService implements IAuthAction {\n\n  constructor(\n    @Inject(ConfigToken) private APP_CONFIG: any\n  ) {\n    this.actionIntervalSec = this.APP_CONFIG.ACTION_INTERVAL;\n  }\n\n  private currentAction = null;\n  private actionIntervalSec = 800;\n  private status = ACTION_STATUS.AVAILABLE;\n  private statusSubject: Subject<ACTION_STATUS> = new BehaviorSubject(this.status);\n  private actionSuscribe: Subject<ActionEvent> = new Subject();\n\n  authAction(payload: AuthObject): AuthObject {\n    if (this.status === ACTION_STATUS.AVAILABLE) {\n      this.status = ACTION_STATUS.PENDING;\n      this.statusSubject.next(this.status);\n      //Prevent fast click\n      setTimeout(() => {\n        this.status = ACTION_STATUS.AVAILABLE;\n        this.statusSubject.next(this.status);\n      }, this.actionIntervalSec);\n    }\n    else {\n      //Other Action is active\n      payload.status = false;\n      payload.error = AuthError.PENDING_ACTION;\n    }\n    return payload;\n  }\n\n  getCurrentAction(): string {\n    return this.currentAction;\n  }\n\n  getActionStatus(): Observable<ACTION_STATUS> {\n    return this.statusSubject.asObservable();\n  }\n\n  onActionClick(): Observable<ActionEvent> {\n    return this.actionSuscribe.asObservable();\n  }\n\n  actionClick(event: ActionEvent) {\n    this.actionSuscribe.next(event);\n  }\n\n\n}\n","import { Injectable, Inject, Optional } from '@angular/core';\nimport { AuthObject } from './AuthObject';\nimport { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckPermissionService } from './permission/check-permission.service';\nimport { ActionService } from './action/action.service';\nimport { authActionToken, authRouteToken } from '../injectionToken';\nimport { IAuthAction } from './AuthAction.interface';\nimport { IAuthRoute } from './AuthRoute.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(\n    private checkPermissionService: CheckPermissionService,\n    private actionService: ActionService,\n    @Optional() @Inject(authActionToken) private customAuthAction: IAuthAction,\n    @Optional() @Inject(authRouteToken) private customAuthRoute: IAuthRoute,\n  ) { }\n\n  async authRoute(data) {\n    let result = of(new AuthObject(data)).pipe(\n      map(x => this.checkPermissionService.authRoute(x))\n    );\n    if (this.customAuthRoute) {\n      result.pipe(\n        map(x => this.customAuthRoute.authRoute(x))\n      )\n    }\n    return result.pipe(\n      map(x => { return { status: x.status, error: x.error } })\n    ).toPromise();\n  }\n\n  async authAction(payload) {\n    let result = of(new AuthObject(payload)).pipe(\n      map(x => this.actionService.authAction(x))\n    );\n    if (this.customAuthAction) {\n      result.pipe(\n        map(x => this.customAuthAction.authAction(x))\n      );\n    }\n    return result.pipe(\n      map(x => { return { status: x.status, error: x.error } })\n    ).toPromise();\n\n  }\n}\n","import { Directive, HostListener, Input, Output, EventEmitter, HostBinding, OnInit, ElementRef, AfterViewInit, Optional, Inject } from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport { APIDispatch } from '../../api/APIDispatch';\nimport { APIFactory } from '../../api/APIFactory';\nimport { logActionAPI } from '../../api/register/logActionAPI';\nimport { DeviceService } from '../../device/device.service';\nimport { AppRouter } from '../../route/AppRouter';\nimport { ActionService, ACTION_STATUS, ActionEvent } from './action.service';\nimport { actionDirectiveTaskToken } from '../../injectionToken/injection-token';\nimport { IActionDirectiveTask } from '../../interface/ActionDirectiveTask.interface';\n\n\n@Directive({\n  selector: '[Action]'\n})\nexport class ActionDirective implements AfterViewInit {\n\n  constructor(\n    private authService: AuthService,\n    private APIFactory: APIFactory,\n    private dispatcher: APIDispatch,\n    private deviceService: DeviceService,\n    private actionService: ActionService,\n    private appRouter: AppRouter,\n    private elRef: ElementRef,\n    @Optional() @Inject(actionDirectiveTaskToken) private actionDirectiveTask: IActionDirectiveTask\n  ) {\n    this.actionService.getActionStatus().subscribe((status: ACTION_STATUS) => {\n      this.isDisabled = status === ACTION_STATUS.PENDING;\n    })\n\n\n  }\n\n  // start of highlight digital track\n  ngAfterViewInit() {\n\n    // this.settingService.getDebugMode().subscribe((debugMode: boolean) => {\n\n    //   let elementTagName = this.elRef.nativeElement.localName;\n    //   let targetElement = null;\n    //   if (elementTagName === 'app-ui-btn') {\n    //     targetElement = this.elRef.nativeElement.children[0];\n    //     console.log('app-ui-btn targetElement: ', targetElement);\n    //   }\n    //   else if (elementTagName === 'app-ui-link') {\n    //     targetElement = this.elRef.nativeElement.children[0].children[0];\n    //     console.log('app-ui-link targetElement: ', targetElement);\n    //   }\n    //   else {\n    //     targetElement = this.elRef.nativeElement;\n    //   }\n\n\n    //   if (targetElement) {\n    //     if (debugMode) {\n    //       targetElement.setAttribute('style', \"border: 3px solid #ff0000 !important\");\n    //     }\n    //     else {\n    //       targetElement.setAttribute('style', \"\");\n    //     }\n    //   }\n\n    // })\n\n\n  }\n  // @HostListener('mouseenter') onMouseenter(e) {\n  //   this.elRef.nativeElement.innerText = this.action;\n  // }\n\n  //end of highlight digital track\n\n  @Input() action;\n  @Output() actionClick: EventEmitter<any> = new EventEmitter();\n  @HostBinding('class.disabled') isDisabled = false;\n  // @HostBinding('class.hightlightDigitalTrack') isHightight = true;\n  @HostListener('onClick', ['$event'])\n  @HostListener('onClickLink', ['$event'])\n  @HostListener('onTabChildClick', ['$event'])\n  @HostListener('ClickBtn', ['$event'])\n  @HostListener('click', ['$event'])\n  async onclick(e) {\n    console.log('action click:', this.action, e);\n    if (e.stopPropagation) { e.stopPropagation(); }\n    if (e.preventDefault) { e.preventDefault(); }\n    console.log(\"actionClick after output: \", e);\n    let event = new ActionEvent();\n    event.action = this.action;\n    event.event = e;\n    this.actionService.actionClick(event);\n    let isAuth = await this.authService.authAction({ action: this.action });\n    if (isAuth.status) {\n      this.actionClick.emit(e);\n      console.log(\"actionClick output: \", e);\n      if (this.actionDirectiveTask) {\n        await this.actionDirectiveTask.doTask(this.action);\n      }\n    }\n    else {\n      console.log(`action: ${this.action} auth failed.`);\n    }\n    let ActionAPI = this.APIFactory.getAPI(\"LogAction\");\n    (<logActionAPI>ActionAPI).action = this.action;\n    (<logActionAPI>ActionAPI).time = new Date();\n    (<logActionAPI>ActionAPI).valid = isAuth.status;\n    (<logActionAPI>ActionAPI).message = isAuth.error;\n    (<logActionAPI>ActionAPI).Function = this.appRouter.getCurrentFunction();\n    (<logActionAPI>ActionAPI).DeviceModel = this.deviceService.getDeviceManufacturer();\n    (<logActionAPI>ActionAPI).DeviceSystem = this.deviceService.getDevicePlatform();\n    let resp = await this.dispatcher.dispatch(ActionAPI).toPromise();\n    console.log(\"log Action resp:\", resp);\n  }\n}\n","export class SQLiteDatabase {\n  private dbName : string;\n  private key : string;\n\n  constructor(name, key) {\n    this.dbName = name;\n    this.key = key;\n  }\n  getName() {\n    return this.dbName;\n  }\n  getKey() {\n    return this.key;\n  }\n  setName(name : string) {\n    this.dbName = name\n  }\n  setkey(key : string) {\n    this.key = key\n  }\n}\n","export class SQLiteColumn {\n  private colName: string;\n  private colValue: any;\n  private isPrimaryKey: boolean;\n  private isAutoincrement: boolean;\n  private type: string;\n  constructor(name: string, value: string, type: string, isPrimaryKey: boolean, isAutoincrement: boolean) {\n    this.colName = name;\n    this.colValue = value;\n    this.isPrimaryKey = isPrimaryKey;\n    this.isAutoincrement = isAutoincrement;\n    this.type = type;\n  }\n\n  getName() {\n    return this.colName;\n  }\n\n  getValue() {\n    return this.colValue;\n  }\n\n  getType() {\n    return this.type;\n  }\n\n  setValue(val: any) {\n    if (this.type == 'text')\n      this.colValue = val.toString();\n    else if (this.type == 'integer')\n      this.colValue = parseInt(val);\n    else if (this.type == 'real')\n      this.colValue = parseFloat(val);\n    else\n      this.colValue = val;\n  }\n\n  getIsPrimaryKey() {\n    return this.isPrimaryKey;\n  }\n\n  getIsAutoincrement() {\n    return this.isAutoincrement;\n  }\n}\n","import { SQLiteColumn } from './SQLiteColumn';\nimport { IRestriction } from './Restriction.interface';\n\nexport class SQLiteTable {\n  private tableName: string;\n  private columns: Array<SQLiteColumn>;\n  private restrictions: Array<IRestriction>;\n  constructor(name: string, columns: Array<SQLiteColumn>) {\n    this.tableName = name;\n    this.columns = columns;\n    this.restrictions = [];\n  }\n  setValue(col: string, value: any) {\n    this.columns.filter(x => x.getName() == col).forEach((col) => {\n      col.setValue(value);\n    })\n  }\n  getValue(col: string) {\n    let cols = this.columns.filter(x => x.getName() == col);\n    return col.length > 0 ? cols[0].getValue() : null;\n  }\n\n  hasColumn(col: string) {\n    let cols = this.columns.filter(x => x.getName() == col);\n    return cols.length > 0;\n  }\n\n  getTableName() {\n    return this.tableName;\n  }\n  getColumns() {\n    return this.columns;\n  }\n\n  addRestriction(restriction: IRestriction) {\n    this.restrictions.push(restriction);\n  }\n  getRestrictions() {\n    return this.restrictions;\n  }\n\n  cloneTable(): SQLiteTable {\n    var colArray = [];\n    for (var column of this.columns) {\n      var clone_obj = Object.create(SQLiteColumn.prototype);\n      clone_obj = Object.assign(clone_obj, column);\n      colArray.push(clone_obj);\n    }\n    return new SQLiteTable(this.tableName, colArray);\n  }\n\n  isSetted() {\n    return this.getColumns().map(x => x.getValue() !== undefined).length > 0;\n  }\n\n}\n","import { IRestriction } from '../Restriction.interface';\nexport class LimitRestriction implements IRestriction {\n    private values: Array<string>;\n    constructor(values = []) {\n        this.values = values;\n    }\n    sqlString(): string {\n        return `LIMIT ${this.values[0].toString()} `;\n    }\n\n    getValues() {\n        return this.values;\n    }\n}","import { IRestriction } from '../Restriction.interface';\nexport class OffsetRestriction implements IRestriction {\n    private values: Array<string>;\n    constructor(values = []) {\n        this.values = values;\n    }\n    sqlString(): string {\n        return `OFFSET ${this.values[0]} `;\n    }\n\n    getValues() {\n        return this.values;\n    }\n}","export class SQLCommand {\n  private sql: string;\n  private params: Array<any> = new Array<any>();\n\n\n  constructor(instruction: string, params: Array<any>) {\n    this.sql = instruction;\n    this.params = params;\n  }\n  setSql(instruction: string) {\n    this.sql = instruction\n  }\n  setParam(param: string) {\n    this.params.push(param);\n  }\n  getSql() {\n    return this.sql;\n  }\n  getParams() {\n    return this.params;\n  }\n}\n","import { IRestriction } from '../Restriction.interface';\nexport class OrderByRestriction implements IRestriction {\n    private values: Array<any>;\n    constructor(values = []) {\n        this.values = values;\n    }\n    sqlString(): string {\n        let str = this.values.map(x => `${x.column} ${x.order}`).reduce((prev, current) => prev + ',' + current);\n        return `ORDER BY ${str} `;\n    }\n\n    getValues() {\n        return this.values;\n    }\n}","import { IDao } from \"./Dao.interface\";\nimport { SQLiteTable } from \"./SQLiteTable\";\nimport { SQLiteColumn } from \"./SQLiteColumn\";\nimport { Observable, of } from \"rxjs\";\nimport { LimitRestriction } from \"./restrictions/LimitRestriction\";\nimport { OffsetRestriction } from \"./restrictions/OffsetRestriction\";\nimport { SQLiteResponse } from \"./SQLiteResponse\";\nimport { SQLCommand } from \"./SQLCommand\";\nimport { OrderByRestriction } from \"./restrictions/OrderByRestriction\";\nimport { DaoFactory } from \"./DaoFactory\";\nimport { APPError } from \"../../errorHandler/APPError\";\nimport { SQLiteDatabase } from \"./SQLiteDatabase\";\n\nexport class SQLiteDao implements IDao {\n    protected connection: any;\n    protected transactionArr: Array<any>;\n    protected config: SQLiteDatabase;\n    constructor(config: SQLiteDatabase) {\n        this.transactionArr = [];\n        this.config = config;\n    }\n\n    public openDataBase(): Promise<any> {\n        let dbObj = this.config;\n        return new Promise((res, rej) => {\n            (<any>window).sqlitePlugin.openDatabase({\n                name: dbObj.getName() + '.db',\n                location: 'default',\n                key: dbObj.getKey(),\n                androidDatabaseImplementation: 'system'\n            }, db => {\n                this.connection = db;\n                res(db);\n            }, () => {\n                let error = new Error(\"Sqlite DB open error.\");\n                rej(error);\n            });\n        })\n    }\n\n    public queryByTable(tableObject: SQLiteTable): Observable<SQLiteResponse> {\n        var restrictions = tableObject.getRestrictions();\n        var conditon_str = restrictions.filter(x => !(x instanceof LimitRestriction || x instanceof OffsetRestriction || x instanceof OrderByRestriction)).map(x => `AND ${x.sqlString()}`).join('');\n        var conditon_val = restrictions.filter(x => !(x instanceof LimitRestriction || x instanceof OffsetRestriction || x instanceof OrderByRestriction)).map(x => x.getValues()).reduce((prev, x) => [...prev, ...x], []);\n        var order_str = restrictions.filter(x => x instanceof OrderByRestriction).map(x => x.sqlString()).join('');\n        var limit_str = restrictions.filter(x => x instanceof LimitRestriction).map(x => x.sqlString()).join('');\n        var offset_str = restrictions.filter(x => x instanceof OffsetRestriction).map(x => x.sqlString()).join('');\n        var sql_count_command = `SELECT count(*) FROM ${tableObject.getTableName()} WHERE 1=1 ${conditon_str}`;\n        var sql_command = `SELECT * FROM ${tableObject.getTableName()} WHERE 1=1 ${conditon_str}${order_str}${limit_str}${offset_str}`;\n        var sql_obj = new SQLCommand(sql_command, conditon_val);\n        var sqlcount_obj = new SQLCommand(sql_count_command, conditon_val);\n        console.group(\"run select sql command\");\n        console.log(sql_command);\n        console.log('params', conditon_val);\n        console.groupEnd();\n        return this.runQuerySqlcommand(sql_obj, sqlcount_obj);\n    }\n\n    public insertByTable(tableObject: SQLiteTable): Observable<SQLiteResponse> {\n        let sql_obj = this.transformInsert(tableObject);\n        console.group(\"run insert sql command\");\n        console.log(sql_obj.getSql());\n        console.log('params', sql_obj.getParams());\n        console.groupEnd();\n        return Observable.create((observer) => {\n            this.runSqlCommand(observer, sql_obj);\n        })\n    }\n\n    public updateByTable(tableObject: SQLiteTable): Observable<SQLiteResponse> {\n        let sql_obj = this.transformUpdate(tableObject);\n        console.group(\"run update sql command\");\n        console.log(sql_obj.getSql());\n        console.log('params', sql_obj.getParams());\n        console.groupEnd();\n        return Observable.create((observer) => {\n            this.runSqlCommand(observer, sql_obj);\n        })\n    }\n\n    public deleteByTable(tableObject: SQLiteTable): Observable<SQLiteResponse> {\n        let sql_obj = this.transformDelete(tableObject);\n        console.group(\"run delete sql command\");\n        console.log(sql_obj.getSql());\n        console.log('params', sql_obj.getParams());\n        console.groupEnd();\n        return Observable.create((observer) => {\n            this.runSqlCommand(observer, sql_obj);\n        })\n    }\n\n    public transactionInsert(tableObject: SQLiteTable) {\n        this.addTransactionCommand(this.transformInsert(tableObject));\n    }\n    public transactionUpdate(tableObject: SQLiteTable) {\n        this.addTransactionCommand(this.transformUpdate(tableObject));\n    }\n    public transactionDelete(tableObject: SQLiteTable) {\n        this.addTransactionCommand(this.transformDelete(tableObject));\n    }\n\n    public transactionSqlCommand(command: SQLCommand) {\n        this.addTransactionCommand(command);\n    }\n\n    public excuteSqlCommand(sql_command: Array<SQLCommand>) {\n        console.log('excuteSqlCommand:', sql_command);\n        return Observable.create((observer) => {\n            this.connection.transaction(tr => {\n                for (let command of sql_command) {\n                    tr.executeSql(command.getSql(), command.getParams(), () => { }, (_, error) => {\n                        console.log('execute sql error:', error);\n                    });\n                }\n            }, (error) => {\n                observer.next(new SQLiteResponse({ status: false, msg: error.message }, []));\n                observer.complete();\n                throw new APPError(\"F00017\", error.message);\n            }, () => {\n                observer.next(new SQLiteResponse({ status: true }, []));\n                observer.complete();\n            })\n        });\n    }\n\n    public getSchema() {\n        var schema = new Map();\n        return Observable.create((observer) => {\n            this.connection.transaction(tr => {\n                tr.executeSql('SELECT name,sql FROM sqlite_master WHERE type=\"table\" OR type=\"view\"', [], (tx, res) => {\n                    //æ¿å°TABLEåç¨±ï¼query table schema\n                    for (var len = 0; len < res.rows.length; len++) {\n                        var table_name = res.rows.item(len).name;\n                        var table_sql = res.rows.item(len).sql;\n                        this.getColumns(tx, schema, table_name, table_sql);\n                    }\n                }, (tx, error) => {\n                    console.log('select table name error:', error.message);\n                });\n            }, (_, error) => {\n                observer.next(new SQLiteResponse({ status: false, msg: error.message }, []));\n                observer.complete();\n                throw new APPError(\"F00017\", error.message);\n            }, () => {\n                observer.next(schema);\n                observer.complete();\n            });\n        })\n\n    }\n\n    public runTransaction() {\n        return Observable.create((observer => {\n            let batchArr = this.transactionArr.map((cmd) => [cmd.getSql(), cmd.getParams()]);\n            console.group('run transaction SQL:');\n            console.log('command:', batchArr);\n            console.groupEnd();\n            this.connection.sqlBatch(batchArr, () => {\n                observer.next(new SQLiteResponse({ status: true }, []));\n                observer.complete();\n            }, (error) => {\n                observer.next(new SQLiteResponse({ status: false, msg: error.message }, []));\n                observer.complete();\n                throw new APPError(\"F00018\", error.message);\n            });\n        }))\n    }\n\n    public clearTransaction() {\n        this.transactionArr = [];\n    }\n\n    protected getColumns(tx, schema, table_name, table_sql) {\n        var tmp_colArray = [];\n        console.log(\"getColumns:\", table_name, table_sql);\n        tx.executeSql('PRAGMA table_info(' + table_name + ')', [], (tx, info_res) => {\n            //æ¿å°tableçæ¯åæ¬ä½\n            for (var i = 0; i < info_res.rows.length; i++) {\n                var isPK = !!info_res.rows.item(i).pk;\n                var name = info_res.rows.item(i).name;\n                var isAutoIncrement = isPK && (table_sql.toUpperCase().indexOf(\"AUTOINCREMENT\") > -1);\n                var type = info_res.rows.item(i).type;\n                tmp_colArray.push(new SQLiteColumn(name, undefined, type, isPK, isAutoIncrement));\n            }\n            var tableObj = new SQLiteTable(table_name, tmp_colArray);\n            schema.set(table_name, tableObj);\n        }, (tx, error) => {\n            console.log('Get table column list error:', error.message);\n            throw new APPError(\"F00019\", error.message);\n        });\n    }\n\n    private runSqlCommand(observer, sql_command) {\n        this.connection.transaction(tr => {\n            tr.executeSql(sql_command.getSql(), sql_command.getParams(), (tx, res) => {\n                observer.next(new SQLiteResponse({ status: true }, []));\n                observer.complete();\n            }, (_, error) => {\n                observer.next(new SQLiteResponse({ status: false, msg: error.message }, []));\n                observer.complete();\n                throw new APPError(\"F00017\", error.message);\n            });\n        });\n    }\n\n    private runQuerySqlcommand(sql_obj, sql_count_obj) {\n        console.log(\"runQuerySqlcommand\", sql_obj);\n        return Observable.create((observer) => {\n            this.connection.transaction(tr => {\n                tr.executeSql(sql_obj.getSql(), sql_obj.getParams(), (tx, res) => {\n                    tx.executeSql(sql_count_obj.getSql(), sql_count_obj.getParams(), (tx, res_count) => {\n                        var data = [];\n                        for (var i = 0; i < res.rows.length; i++) {\n                            data.push(res.rows.item(i));\n                        }\n                        console.log(\"run query sql finish!\", data);\n                        observer.next(new SQLiteResponse({\n                            record_length: res_count.rows.item(0)['count(*)'],\n                            status: true\n                        }, data));\n                        observer.complete();\n                    }, (_, error) => {\n                        console.log(error.message);\n                        observer.next(new SQLiteResponse({ status: false, message: error.message }, []));\n                        observer.complete();\n                        throw new APPError(\"F00017\", error.message);\n                    })\n                }, (_, error) => {\n                    console.log(error.message);\n                    observer.next(new SQLiteResponse({ status: false, message: error.message }, []));\n                    observer.complete();\n                    throw new APPError(\"F00017\", error.message);\n                });\n            });\n        })\n\n    }\n\n    private transformInsert(tableObject: SQLiteTable) {\n        var setted_cols = tableObject.getColumns().filter(x => x.getValue() !== undefined);\n        var setted_vals = setted_cols.map(x => x.getValue());\n        var sql_command = `INSERT INTO ${tableObject.getTableName()} (${setted_cols.map(x => x.getName()).join(',')}) VALUES (${setted_cols.map(x => '?').join(',')})`;\n        return new SQLCommand(sql_command, setted_vals);\n    }\n\n    private transformUpdate(tableObject: SQLiteTable) {\n        var setted_cols = tableObject.getColumns().filter(x => x.getValue() !== undefined);\n        var setted_vals = setted_cols.map(x => x.getValue());\n        var set_str = setted_cols.map(x => ` ${x.getName()}=?`).join(',');\n        var restrictions = tableObject.getRestrictions();\n        var conditon_str = restrictions.filter(x => !(x instanceof LimitRestriction || x instanceof OffsetRestriction)).map(x => `AND ${x.sqlString()}`).join('');\n        var conditon_val = restrictions.filter(x => !(x instanceof LimitRestriction || x instanceof OffsetRestriction)).map(x => x.getValues()).reduce((prev, x) => [...prev, ...x], []);\n        var sql_command = `UPDATE ${tableObject.getTableName()} SET ${set_str} WHERE 1=1 ${conditon_str}`;\n        return new SQLCommand(sql_command, [...setted_vals, ...conditon_val]);\n    }\n\n    private transformDelete(tableObject: SQLiteTable) {\n        var restrictions = tableObject.getRestrictions();\n        var conditon_str = restrictions.filter(x => !(x instanceof LimitRestriction || x instanceof OffsetRestriction)).map(x => `AND ${x.sqlString()}`).join('');\n        var conditon_val = restrictions.filter(x => !(x instanceof LimitRestriction || x instanceof OffsetRestriction)).map(x => x.getValues()).reduce((prev, x) => [...prev, ...x], []);\n        var sql_command = `DELETE FROM ${tableObject.getTableName()} WHERE 1=1 ${conditon_str}`;\n        return new SQLCommand(sql_command, conditon_val);\n    }\n\n    private addTransactionCommand(sql_command: SQLCommand) {\n        this.transactionArr.push(sql_command);\n    }\n\n\n}\n","import { IDao } from \"./Dao.interface\";\nimport { SQLiteTable } from \"./SQLiteTable\";\nimport { SQLiteColumn } from \"./SQLiteColumn\";\nimport { Observable } from \"rxjs\";\nimport { LimitRestriction } from \"./restrictions/LimitRestriction\";\nimport { OffsetRestriction } from \"./restrictions/OffsetRestriction\";\nimport { SQLiteResponse } from \"./SQLiteResponse\";\nimport { SQLCommand } from \"./SQLCommand\";\nimport { OrderByRestriction } from \"./restrictions/OrderByRestriction\";\nimport { APPError } from \"../../errorHandler/APPError\";\nimport { SQLiteDatabase } from \"./SQLiteDatabase\";\nimport { SQLiteDao } from \"./SQLiteDao\";\n\ndeclare var window;\n\nexport class WebSQLDao extends SQLiteDao implements IDao {\n    constructor(config: SQLiteDatabase) {\n        super(config);\n    }\n\n    public async openDataBase(): Promise<any> {\n        function timeout(ms) {\n            return new Promise(resolve => setTimeout(resolve, ms));\n        }\n\n        this.connection = window.openDatabase(this.config.getName(), '1.0', this.config.getName(), 2 * 1024 * 1024);\n        console.log(\"OpenDataBase:\", this.connection);\n        return this.connection;\n    }\n\n    protected getColumns(tx, schema: Map<string, SQLiteTable>, table_name, table_sql) {\n        let tmp_colArray = [];\n        let columnStr = [];\n        let isView = table_sql.indexOf('CREATE VIEW') > -1;\n        if (!isView) {\n            columnStr = table_sql.split('(')[1].split(',');\n            tmp_colArray = columnStr.map(x => {\n                let isPK = x.toUpperCase().indexOf(\"PRIMARY KEY\") > -1;\n                let name = x.trim().split(' ')[0];\n                let isAutoIncrement = isPK && (x.toUpperCase().indexOf(\"AUTOINCREMENT\") > -1);\n                let type = x.toUpperCase().indexOf(\"INTEGER\") > -1 ? 'Integer' : 'Text';\n                return new SQLiteColumn(name, undefined, type, isPK, isAutoIncrement);\n            })\n        }\n        else {\n            // VIEW\n            let mainTableIndex = table_sql.split(' ').indexOf(\"LEFT\") - 1;\n            let extTableIndex = mainTableIndex + 3;\n            let mainTableName = table_sql.split(' ')[mainTableIndex];\n            let extTableName = table_sql.split(' ')[extTableIndex];\n            let mainTable = schema.get(mainTableName);\n            let extTable = schema.get(extTableName);\n            tmp_colArray = [...mainTable.getColumns(), ...extTable.getColumns()];\n            tmp_colArray = tmp_colArray.reduce((unique, o) => {\n                if (!unique.some(obj => obj.getName() === o.getName())) {\n                    unique.push(o);\n                }\n                return unique;\n            }, []);\n        }\n        let tableObj = new SQLiteTable(table_name, tmp_colArray);\n        schema.set(table_name, tableObj);\n    }\n\n    public runTransaction() {\n        return Observable.create((observer => {\n            let batchArr = this.transactionArr.map((cmd) => [cmd.getSql(), cmd.getParams()]);\n            console.group('run transaction SQL:');\n            console.log('command:', batchArr);\n            console.groupEnd();\n            this.connection.transaction((tx) => {\n                this.transactionArr.forEach(cmd => {\n                    tx.executeSql(cmd.getSql(), cmd.getParams());\n                })\n            }, (error) => {\n                observer.next(new SQLiteResponse({ status: false, msg: error.message }, []));\n                observer.complete();\n                throw new APPError(\"F00018\", error.message);\n            }, () => {\n                observer.next(new SQLiteResponse({ status: true }, []));\n                observer.complete();\n            });\n        }))\n    }\n\n    public clearTransaction() {\n        this.transactionArr = [];\n    }\n}\n","import { SQLiteTable } from \"./SQLiteTable\";\nimport { SQLiteDatabase } from \"./SQLiteDatabase\";\nimport { IDao } from \"./Dao.interface\";\nimport { SQLiteDao } from \"./SQLiteDao\";\nimport { Optional, Inject, Injectable, ErrorHandler } from \"@angular/core\";\nimport { ConfigToken } from \"../../injectionToken/injection-token\";\nimport { DeviceService } from '../device.service';\nimport { v4 as uuid } from 'uuid';\nimport { APPError } from \"../../errorHandler/APPError\";\nimport { WebSQLDao } from \"./WebSQLDao\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DaoFactory {\n  private tableMapping: Map<string, Map<string, SQLiteTable>>;\n  private dbMapping: Map<string, IDao>;\n  private constructor(\n    private deviceService: DeviceService,\n    private errorHandler: ErrorHandler,\n    @Optional() @Inject(ConfigToken) private APP_CONFIG) {\n    this.tableMapping = new Map();\n    this.dbMapping = new Map();\n  }\n\n  public getTable(dbName, tableName): SQLiteTable {\n    if (this.tableMapping.has(dbName)) {\n      if (this.tableMapping.get(dbName).has(tableName)) {\n        return this.tableMapping.get(dbName).get(tableName).cloneTable();\n      }\n      else {\n        this.errorHandler.handleError(new APPError(\"F00012\", `Cannot Find table ${tableName} in DB ${dbName}.`))\n        return undefined;\n      }\n    }\n    this.errorHandler.handleError(new APPError(\"F00012\", `Cannot Find table ${tableName} in DB ${dbName}.`));\n    return undefined;\n  }\n\n  public getDefaultTable(tableName): SQLiteTable {\n    return this.getTable(\"Main\", tableName);\n  }\n\n  public getDao(dbName): IDao {\n    console.log('get Dao:', dbName);\n    if (this.dbMapping.has(dbName)) {\n      this.dbMapping.get(dbName).clearTransaction();\n      return this.dbMapping.get(dbName);\n    }\n    else {\n      this.errorHandler.handleError(new APPError(\"F00011\", `Cannot Find Sqlite DB ${dbName} Dao.`))\n      return undefined;\n    }\n\n  }\n\n  public getDefaultDao(): IDao {\n    return this.getDao(\"Main\");\n  }\n\n\n  public async init() {\n    //get each db dao\n    if (this.APP_CONFIG.ENV == 'DEV')\n      return;\n    else {\n      await this.mappingDB();\n    }\n\n  }\n\n  public async refreshTableSchema() {\n    let db_config = this.APP_CONFIG[this.APP_CONFIG.ENV].DATABASE;\n    let db_names = Object.keys(db_config);\n    for (var name of db_names) {\n      await this.getTableSchema(name, db_config);\n    }\n    setTimeout(() => {\n      console.group(\"refreshTableSchema\");\n      console.log(this.dbMapping);\n      console.log(this.tableMapping);\n      console.groupEnd();\n    }, 5000);\n  }\n\n  private async mappingDB() {\n    let db_config = this.APP_CONFIG[this.APP_CONFIG.ENV].DATABASE;\n    let db_names = Object.keys(db_config);\n    for (var name of db_names) {\n      console.log('getSchema:', name);\n      await this.getSchema(name, db_config);\n    }\n\n    setTimeout(() => {\n      console.group(\"mappingDB\");\n      console.log(this.dbMapping);\n      console.log(this.tableMapping);\n      console.groupEnd();\n    }, 5000);\n  }\n\n  private async getSchema(dbname, config): Promise<any> {\n    try {\n      let key = await this.getDatabaseKey(dbname, config);\n      await this.openDatabase(dbname, config, key);\n    } catch (error) {\n      console.warn(\"getSchema error:\", error.message);\n      let err = new APPError(\"F00010\", \"Sqlite DB open error.\");\n      this.errorHandler.handleError(err);\n    };\n  }\n\n  private async getDatabaseKey(dbname, config) {\n    try {\n      let resp = await this.deviceService.getSecureStorage(config[dbname].name).toPromise();\n      console.log(\"getDatabaseKey resp:\", resp);\n      if (resp.includes(\"Device is not secure\")) { //which Device is not secure\n        throw new Error(resp);\n      } else if (resp) { // if have key in keyStore/keyChain\n        return resp;\n      } else {\n        let setKeyResp = await this.deviceService.setSecureStorage(config[dbname].name, uuid()).toPromise();\n        if (setKeyResp) {\n          let key = await this.deviceService.getSecureStorage(config[dbname].name).toPromise();\n          return key;\n        }\n      }\n    } catch (error) {\n      console.log(\"getDatabaseKey error, use localStorage\");\n      if (this.deviceService.getLocalStorage(config[dbname].name)) {\n        return this.deviceService.getLocalStorage(config[dbname].name);\n      } else {\n        let key = uuid();\n        this.deviceService.setLocalStorage(config[dbname].name, key);\n        return key;\n      }\n    }\n\n  }\n\n  private async openDatabase(dbname, config, key: string): Promise<any> {\n    try {\n      let db_config = new SQLiteDatabase(config[dbname].name, key);\n      let dao = await this.createDao(db_config);\n      this.dbMapping.set(config[dbname].name, dao);\n      // await this.getTableSchema(dbname, config);\n    }\n    catch (error) {\n      this.errorHandler.handleError(new APPError(\"F00010\", error.message));\n    }\n  }\n\n  private async createDao(config: SQLiteDatabase): Promise<IDao> {\n    let dao: IDao;\n    if (this.APP_CONFIG.ENV === 'DEV_WebSQL') {\n      dao = new WebSQLDao(config);\n    }\n    else {\n      dao = new SQLiteDao(config);\n    }\n    await dao.openDataBase();\n    return dao;\n  }\n\n\n  private async getTableSchema(dbname, config): Promise<any> {\n    let tableMap = await this.dbMapping.get(config[dbname].name).getSchema().toPromise();\n    this.tableMapping.set(config[dbname].name, tableMap);\n  }\n\n  public async clearDatabaseData(dbname): Promise<any> {\n    try {\n      let dao = this.dbMapping.get(dbname);\n      if (dao) {\n        let tableMap = this.tableMapping.get(dbname);\n        tableMap.forEach((table, table_name) => {\n          // Not View\n          if (table_name.indexOf('TW_LH_SD') !== -1 && table_name.indexOf('TW_LH_SD_VW') == -1) {\n            dao.transactionDelete(table);\n          }\n        });\n        let resp = await dao.runTransaction().toPromise();\n        console.log(\"clearDatabaseData resp:\", resp);\n      }\n      else {\n        throw new Error(`Cannot find dao ${dbname}.`);\n      }\n    } catch (error) {\n      throw new APPError('F00022', `Clear database error, ${error.message}`);\n    }\n  }\n}\n","import { IRestriction } from '../Restriction.interface';\nexport class NotEqualRestriction implements IRestriction {\n    private column: string;\n    private values: Array<string>;\n    constructor(column, values = []) {\n        this.column = column;\n        this.values = values;\n    }\n    sqlString(): string {\n        return `${this.column} <> ? `;\n    }\n    getValues() {\n        return this.values;\n    }\n}","import { IDao } from \"./Dao.interface\";\nimport { SQLiteTable } from \"./SQLiteTable\";\nimport { Observable, observable } from \"rxjs\";\nimport { NotEqualRestriction } from \"./restrictions/NotEqualRestriction\";\nimport { v4 as uuid } from 'uuid';\nimport { SQLCommand } from \"./SQLCommand\";\nimport { SQLiteResponse } from \"./SQLiteResponse\";\n\n\n\n\nexport class ClientCustomDao implements IDao {\n    private baseDao: IDao;\n    constructor(dao) {\n        this.baseDao = dao;\n    }\n    public openDataBase() {\n        return this.baseDao.openDataBase();\n    }\n\n    public queryByTable(tableObject: SQLiteTable): Observable<SQLiteResponse> {\n        if (tableObject.hasColumn('IsDelete')) {\n            tableObject.addRestriction(new NotEqualRestriction(\"IsDelete\", [\"Y\"]));\n        }\n\n        return this.baseDao.queryByTable(tableObject);\n    }\n\n    public insertByTable(tableObject: SQLiteTable) {\n        let clientID = uuid();\n        if (tableObject.getValue('ClientID') == ''\n            || tableObject.getValue('ClientID') == undefined) {\n            tableObject.setValue(\"ClientID\", clientID);\n        }\n\n        tableObject.setValue(\"ClientTime\", new Date().getTime());\n        tableObject.setValue(\"DataSource\", \"APP\");\n        tableObject.setValue(\"IsDelete\", \"N\");\n        return Observable.create((observer) => {\n            this.baseDao.insertByTable(tableObject).subscribe((resp) => {\n                resp.Header.clientID = clientID;\n                observer.next(resp);\n                observer.complete();\n            });\n        })\n    }\n\n    public updateByTable(tableObject: SQLiteTable): Observable<SQLiteResponse> {\n        tableObject.setValue(\"ClientTime\", new Date().getTime());\n        return this.baseDao.updateByTable(tableObject);\n    }\n\n    public deleteByTable(tableObject: SQLiteTable): Observable<SQLiteResponse> {\n        tableObject.setValue(\"IsDelete\", \"Y\");\n        tableObject.setValue(\"ClientTime\", new Date().getTime());\n        return this.baseDao.updateByTable(tableObject);\n    }\n\n    public excuteSqlCommand(sql_command: Array<SQLCommand>) {\n        return this.baseDao.excuteSqlCommand(sql_command);\n    }\n\n    public getSchema() {\n        return this.baseDao.getSchema();\n    }\n\n    public transactionInsert(tableObject: SQLiteTable) {\n        if (tableObject.getValue('ClientID') == ''\n            || tableObject.getValue('ClientID') == undefined) {\n            tableObject.setValue(\"ClientID\", uuid());\n        }\n\n        tableObject.setValue(\"ClientTime\", new Date().getTime());\n        tableObject.setValue(\"DataSource\", \"APP\");\n        tableObject.setValue(\"IsDelete\", \"N\");\n\n        this.baseDao.transactionInsert(tableObject);\n    }\n\n    public transactionUpdate(tableObject: SQLiteTable) {\n        tableObject.setValue(\"ClientTime\", new Date().getTime());\n        this.baseDao.transactionUpdate(tableObject);\n    }\n\n    public transactionDelete(tableObject: SQLiteTable) {\n        tableObject.setValue(\"IsDelete\", \"Y\");\n        tableObject.setValue(\"ClientTime\", new Date().getTime());\n        this.baseDao.transactionUpdate(tableObject);\n    }\n\n    public transactionSqlCommand(command: SQLCommand) {\n        this.baseDao.transactionSqlCommand(command);\n    }\n\n    public runTransaction() {\n        return this.baseDao.runTransaction();\n    }\n\n    public clearTransaction() {\n        return this.baseDao.clearTransaction();\n    }\n}\n","import { Component, OnInit, Optional } from '@angular/core';\nimport { DaoFactory } from '../../device/sqlite/DaoFactory';\nimport { Location } from '@angular/common';\nimport { IDao } from '../../device/sqlite/Dao.interface';\nimport { SQLiteTable } from '../../device/sqlite/SQLiteTable';\nimport { ClientCustomDao } from '../../device/sqlite/ClientCustomDao';\nimport { SQLiteResponse } from '../../device/sqlite/SQLiteResponse';\n\n\n@Component({\n  selector: 'snd-sqlite-executor',\n  templateUrl: './sqlite-executor.component.html',\n  styleUrls: ['./sqlite-executor.component.scss']\n})\nexport class SqliteExecutorComponent implements OnInit {\n\n  public isHasData: boolean = false;\n  public selectTablesOptionList: Array<SelectOption>;\n  public selectTable: string;\n  public recordLength: number = 0;\n  public responseBody;\n  public tableColumns: Array<string>;\n  public currentDbName: string;\n  public currentTable: string;\n  constructor(\n    private daoFactory: DaoFactory,\n    @Optional() private _location: Location\n  ) { }\n\n  ngOnInit() {\n    let selectOption: Array<SelectOption> = [];\n    for (let item in DATABASE_TABLES) {\n      if (isNaN(Number(item))) {\n          console.log('value:',item ,'  name:' ,DATABASE_TABLES[item]);\n          selectOption.push(new SelectOption(item, DATABASE_TABLES[item]));\n      }\n    }\n\n    this.selectTablesOptionList = selectOption;\n    this.selectTableChange(this.selectTablesOptionList[0].getValue());\n\n  }\n\n  goToLastPage() {\n    this._location.back();\n  }\n\n  refresh() {\n    this.queryBytable(this.currentDbName,this.currentTable);\n  }\n\n  selectTableChange(event: string){\n    console.log(\"selectTableKey: \", event);\n    this.selectTable = event;\n    this.currentTable = DATABASE_TABLES[event]\n    console.log(\"selectTable: \", this.selectTable);\n\n\n    if(event.substring(0,7) == 'Profile') {\n\n      this.currentDbName = 'Profile';\n      this.queryBytable(this.currentDbName, this.currentTable);\n\n    }\n\n    else {\n\n      this.currentDbName = 'Main';\n      this.queryBytable(this.currentDbName, this.currentTable);\n\n    }\n  }\n\n  queryBytable(dbName: string, tableName: string) {\n    console.log(\"dbName: \",dbName, \" tableName: \", tableName);\n    let dao: IDao;\n    let tableObj: SQLiteTable;\n    dao = this.daoFactory.getDao(dbName);\n    dao = new ClientCustomDao(dao);\n    tableObj = this.daoFactory.getTable(dbName, tableName);\n    this.tableColumns = tableObj.getColumns().map(x => x.getName());\n    console.log(\"dao: \",dao);\n    console.log(\"tableObj: \",tableObj);\n    dao.queryByTable(tableObj).subscribe((data: SQLiteResponse)=>{\n    console.log(\"response data: \", data);\n      if(data.Header['status']) {\n        this.recordLength = data.Header['record_length'];\n\n        this.responseBody = data.Body;\n        console.log(\"responseBody: \", this.responseBody);\n        this.responseBody.forEach(element => {\n\n          // console.log(\"element key: \", Object.keys(element));\n          // console.log(\"element values: \", Object.values(element));\n          console.log(\"element: \", element);\n          element.values = Object.values(element);\n        });\n\n        this.isHasData = true;\n      }\n      else {\n        this.isHasData = false;\n        alert(\"fail\");\n      }\n      console.log(\"Sqlite data: \", data);\n    });\n\n    \n\n  }\n\n  \n}\n\nenum DATABASE_TABLES {\n  //TW_LH_SD_Code_Type,\n  Profile_TW_LH_SD_Code = 'TW_LH_SD_Code',\n  Profile_TW_LH_SD_DeviceInfo = 'TW_LH_SD_DeviceInfo',\n  Profile_TW_LH_SD_DataSync_Time = 'TW_LH_SD_DataSync_Time',\n  //Profile_TW_LH_SD_DataSync_Function = 'TW_LH_SD_DataSync_Function',\n  Profile_TW_LH_SD_VW_FuncSync_Time = 'TW_LH_SD_VW_FuncSync_Time',\n  Profile_TW_LH_SD_Language = 'TW_LH_SD_Language',\n  Profile_TW_LH_SD_Error_Log = 'TW_LH_SD_Error_Log',\n  Profile_TW_LH_SD_Action_Log = 'TW_LH_SD_Action_Log',\n  TW_LH_SD_Calendar_Extension = 'TW_LH_SD_Calendar_Extension',\n  TW_LH_SD_Calendar = 'TW_LH_SD_Calendar',\n  TW_LH_SD_Customer_Address_Extension = 'TW_LH_SD_Customer_Address_Extension',\n  TW_LH_SD_Customer_Email_Extension = 'TW_LH_SD_Customer_Email_Extension',\n  TW_LH_SD_Customer_Tel_Extension = 'TW_LH_SD_Customer_Tel_Extension',\n  TW_LH_SD_Customer_Contact_Extension = 'TW_LH_SD_Customer_Contact_Extension',\n  TW_LH_SD_Customer_Extension = 'TW_LH_SD_Customer_Extension',\n  TW_LH_SD_Customer_Address = 'TW_LH_SD_Customer_Address',\n  TW_LH_SD_Customer_Email = 'TW_LH_SD_Customer_Email',\n  TW_LH_SD_Customer_Tel = 'TW_LH_SD_Customer_Tel',\n  TW_LH_SD_Customer_Contact = 'TW_LH_SD_Customer_Contact',\n  TW_LH_SD_Customer = 'TW_LH_SD_Customer',\n  TW_LH_SD_Personal_Setting = 'TW_LH_SD_Personal_Setting',\n  TW_LH_SD_VW_Customer = 'TW_LH_SD_VW_Customer',\n  TW_LH_SD_Message = 'TW_LH_SD_Message',\n\n  //goal-setting & progress table \n  TW_LH_SD_Year_Config = 'TW_LH_SD_Year_Config',\n  TW_LH_SD_Goal_Setting = 'TW_LH_SD_Goal_Setting',\n  TW_LH_SD_Goal_Setting_Value = 'TW_LH_SD_Goal_Setting_Value',\n  TW_LH_SD_Goal_Setting_Plan_Value = 'TW_LH_SD_Goal_Setting_Plan_Value',\n  TW_LH_SD_Goal_Setting_Expected = 'TW_LH_SD_Goal_Setting_Expected',\n  TW_LH_SD_Actual_Value = 'TW_LH_SD_Actual_Value',\n  TW_LH_SD_Agency_Plan_Main = 'TW_LH_SD_Agency_Plan_Main',\n  TW_LH_SD_Agency_Detail_Data = 'TW_LH_SD_Agency_Detail_Data',\n  TW_LH_SD_Personal_Progress = 'TW_LH_SD_Personal_Progress',\n  TW_LH_SD_Team_Progress_Main = 'TW_LH_SD_Team_Progress_Main',\n  TW_LH_SD_Team_Progress_Detail = 'TW_LH_SD_Team_Progress_Detail',\n  TW_LH_SD_Other_Parameter = 'TW_LH_SD_Other_Parameter'\n\n}\n\nclass SelectOption{\n    \n  private _name: string;\n  private _value: string;\n  constructor(value : string, name : string) { \n    this._value = value;\n    this._name = name;\n  }\n\n  public getName(): string {\n      return this._name;\n  }\n\n  public getValue(): string {\n      return this._value;\n  }\n}","import { Injectable, OnInit, Inject, Optional } from '@angular/core';\nimport { DefaultLoginMgr } from '../auth/login/DefaultLoginMgr';\nimport { ILoginMgr } from '../auth/login/LoginMgr.interface';\nimport { LoginMgrToken } from '../injectionToken';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TranslatePriceService {\n\n  private _role: string = '';\n  private _million: number = 1000000;\n\n\n  constructor(\n    private loginMgr: DefaultLoginMgr,\n  ) {\n\n    this.loginMgr.getLoginInfo().subscribe((info) => {\n      if (info.AppUseMode && info.AppUseMode.length > 0)\n        this._role = info.AppUseMode[info.AppUseMode.length - 1];\n    })\n  }\n\n\n\n\n\n  translatePrice(value: any):string {\n    let isCAOorZONEHEAD = (this._role == 'Manager' || this._role == 'Supervisor');\n    let isValueLegal = !isNaN(Number(value));\n    if (isValueLegal) {\n      return isCAOorZONEHEAD ? this._numberToFix(value / this._million, 1) : value;\n    }\n    else {\n      return value;\n    }\n  }\n\n  private _numberToFix(n: number, toFix: number): number {\n    let powNum = Math.pow(10,toFix);\n    return Math.round(n*powNum)/powNum;\n  }\n\n\n\n\n\n\n}\n","import { Pipe, PipeTransform} from '@angular/core';\nimport { TranslatePriceService } from './translate-price.service';\n\n\n@Pipe({\n  name: 'translatePrice',\n  pure: false\n})\nexport class TranslatePricePipe implements PipeTransform {\n\n  public role: string = '';\n  public million: number = 1000000;\n  constructor(\n    private translatePriceService: TranslatePriceService,\n  ) {\n  }\n\n\n\n  transform(value: any, args?: any): string {\n    return this.translatePriceService.translatePrice(value);\n  }\n\n  \n}\n","import { NgModule } from '@angular/core';\nimport { TranslatePipe } from './language/translate.pipe';\nimport { NumberFormatPipe } from './numberFormat/numberFormat.pipe';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ActionDirective } from './auth/action/action.directive';\nimport { SqliteExecutorComponent } from './component/sqlite-executor/sqlite-executor.component';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { TranslatePricePipe } from './price/translatePrice.pipe';\n\n@NgModule({\n  imports: [\n    HttpClientModule,\n    CommonModule,\n    FormsModule\n  ],\n  declarations: [TranslatePipe, TranslatePricePipe, NumberFormatPipe, ActionDirective, SqliteExecutorComponent],\n  exports: [TranslatePipe, TranslatePricePipe, NumberFormatPipe, ActionDirective, HttpClientModule]\n})\nexport class CoreModule { }\n","export class Language {\n\n    //dashboard \n    performance: string = \"Performance\";\n    team: string = \"Team\";\n    personal: string = \"Personal\";\n    activitiesPoints: string = \"Activities_Points\";\n    monthlyProgress: string = \"Monthly_Progress\";\n    yearlyProgress: string = \"Yearly_Progress\";\n    message: string = \"Message\";\n    progress: string = \"Progress\";\n    goalSettingMsgType: string = \"Goal_Setting\";\n    all: string = \"All\";\n    unread: string = \"Unread\";\n    noMessage: string = \"No_Message\";\n    schedule: string = \"Schedule\";\n    noBirthday: string = \"No_Birthday\";\n\n\n    customerType: string = \"Customer_Type\";\n    customerSource: string = \"Customer_Source\";\n    birthday: string = \"Birthday\";\n    ageRange: string = \"Age_range\";\n    gender: string = \"Gender\";\n    //annualIncome : string = \"Annual_Income(Year/NTD)\";\n    source: string = \"Source\";\n    marriage: string = \"Marriage\";\n    children: string = \"Children\";\n    familiarity: string = \"Familiarity\";\n    recentStatus: string = \"Recent_status\";\n    customerStatus: string = \"Customer_Status\";\n    contactFrequencyMonth: string = \"Contact_Frequency_Month\";\n    possibility: string = \"Possibility\";\n    completeness: string = \"Completeness\";\n\n    contactFrequency: string = \"Contact_Frequency\";\n    timePerYear: string = \"Time_Per_Year\";\n    appointment: string = \"Appointment\";\n    contact: string = \"Contact\";\n    edit: string = \"Edit\";\n    delete: string = \"Delete\";\n    home: string = \"Home\";\n    homepage: string = \"Homepage\";\n    work: string = \"Work\";\n    mobile: string = \"Mobile\";\n    detail: string = \"Detail\";\n    occupation: string = \"Occupation\";\n    company: string = \"Company\";\n    annualIncome: string = \"Annual_Income\";\n    // extraItem : string = \"ExtraItem\";\n    contactNote: string = \"Contact_Note\";\n    add: string = \"Add\";\n    noRecord: string = \"No_Record\";\n    customerList: string = \"Customer_List\";\n    importPhone: string = \"Import_Phone\";\n    people: string = \"People\";\n\n\n    // customer-edit page\n\n    lastName: string = \"Last_name\";\n    firstName: string = \"First_name\";\n    phone: string = \"Phone\";\n    email: string = \"Email\";\n    address: string = \"Address\";\n    country: string = \"Country\";\n    city: string = \"City\";\n    area: string = \"Area\";\n    code: string = \"Code\";\n    // birthday : string = \"Birthday\";\n    age: string = \"Age\";\n    // gender : string = \"Gender\";\n    // occupation : string = \"Occupation\";\n    // company : string =\"Company\";\n    // annualIncome : string =  \"Annual_Income\";\n    select: string = \"Select\";\n    // source : string = \"Source\";\n    // marriage : string = \"Marriage\";\n    // children : string = \"Children\";\n    // familiarity : string = \"Familiarity\";\n    // occupation : string = \"Occupation\";\n    // recentStatus : string = \"Recent_status\";\n    // customerStatus : string = \"Customer_Status\";\n    contactFrequencyYear: string = \"Contact_Frequency_Year\";\n    // possibility : string = \"Possibility\";\n    save: string = \"Save\";\n\n    lastNamePlaceholder: string = \"Last_Name_Placeholder\";\n    firstNamePlaceholder: string = \"First_Name_Placeholder\";\n\n    wrongLastName: string = \"Wrong_Lastname\";\n    wrongEmail: string = \"Wrong_Email\";\n    wrongBirthday: string = \"Wrong_Birthday\";\n\n    // custermer-filter page\n\n    // customerType : string = \"Customer_Type\";\n    // customerSource : string = \"Customer_Source\";\n    // birthday : string = \"Birthday\";\n    // ageRange : string = \"Age_range\";\n    // gender : string = \"Gender\";\n    annualIncomeYearNTD: string = \"Annual_Income(Year/NTD)\";\n    // source : string = \"Source\";\n    // marriage : string = \"Marriage\";\n    // familiarity : string = \"Familiarity\";\n    // customerStatus : string = \"Customer_Status\";\n    // contactFrequencyMonth : string = \"Contact_Frequency_Month\";\n    preset: string = \"Preset\";\n    day: string = \"Day\";\n    week: string = \"Week\";\n    month: string = \"Month\";\n    year: string = \"Year\";\n    today: string = \"Today\";\n    filter: string = \"Filter\";\n    appointmentDetail: string = \"Appointment_Details\";\n    saved: string = \"Saved\";\n    loading: string = \"Loading\";\n    title: string = \"Title\";\n    location: string = \"Location\";\n    activity: string = \"Activity\";\n    date: string = \"Date\";\n    allDay: string = \"All_Day\";\n    from: string = \"From\";\n    to: string = \"To\";\n    alert: string = \"Alert\";\n    remark: string = \"Remark\";\n    yes: string = \"Yes\";\n    no: string = \"No\";\n    deleteAppointment: string = \"Delete_Appointment\";\n    wrongTitle: string = \"wrong_Title\";\n    wrongAlert: string = \"Wrong_Alert\";\n    alertPlaceholder: string = \"Alert_Placeholder\";\n    wrongTitleRequired: string = \"Wrong_Title_Require\";\n    wrongActivityRequired: string = \"Wrong_Activity_Required\";\n    wrongDate: string = \"Wrong_Date\";\n    wrongTime: string = \"Wrong_Time\";\n    wrongStartTime: string = \"Wrong_Start_Time\";\n    wrongEndTime: string = \"Wrong_End_Time\";\n    wrongAlertRequired: string = \"Wrong_Alert_Require\";\n    noSchedule: string = \"No_Schedule\";\n\n\n    // customer-list page\n\n    customerInformation: string = \"Customer_Information\";\n    click: string = \"Click\";\n    noEdit: string = \"No_Edit\";\n    noSearch: string = \"No_Search\";\n    noFilter: string = \"No_Filter\";\n\n    // customer page \n\n    import: string = \"Import\";\n    customerFilter: string = \"Customer_Filter\";\n    clear: string = \"CLEAR\";\n    selectNumber: string = \"Select_Number\";\n    // save : string = \"Save\";\n    // contactNote : string = \"Contact_Note\";\n    cancel: string = \"Cancel\";\n    protectionTitle: string = \"Protection_Title\";\n    deleteMessage: string = \"Delete_Message\";\n    customer: string = \"Customer\";\n    deleteProtectionTitle: string = \"Delete_Protection_Title\";\n    updateProtectionTitle: string = \"Update_Protection_Title\";\n    commentRemindTitle: string = \"Comment_Remind_Title\";\n    confirm: string = \"Confirm\";\n    completed: string = \"Completed\";\n    searchPlaceholder: string = \"Search_Placeholder\";\n    notePlaceholder: string = \"Note_Placeholder\";\n    logOut: string = \"Log_Out\";\n    noClick: string = \"No_Click\";\n    noInformation: string = \"No_Information\";\n    moreOption: string = \"More_Option\";\n    empty: string = \"Empty\";\n    calendarMore: string = \"Calendar_More\";\n    mainMenu: string = \"Main_Menu\";\n    have: string = \"Have\";\n    appointments: string = \"Appointments\";\n    anAppointment: string = \"An_Appointment\";\n    notification: string = \"Notification\";\n    language: string = \"Language\";\n    version: string = \"Version\";\n    contactMessage: string = \"Contact_Message\";\n    welcome: string = \"Welcome\";\n    accountPassword: string = \"Account_Password\";\n    nationalID: string = \"National_ID\";\n    password: string = \"Password\";\n    forgotPassword: string = \"Forgot_Password\";\n    login: string = \"Login\";\n    pleaseWait: string = \"Please_Wait\";\n    changeLanguage: string = \"Change_Language\";\n    fontSize: string = \"Font_Size\";\n    changeFontSize: string = \"Change_Font_Size\";\n    updateTime: string = \"Update_Time\";\n    seeDetails: string = \"See_Details\";\n    fileDownload: string = \"File_Download\";\n    signIn: string = \"Sign_In\";\n    loadingMessage: string = \"Landing_Message\";\n    load: string = \"Load\";\n    agencyPlanSubtitle: string = \"Agency_Plan_Subtitle\";\n    agencyPlanOverviewTitle: string = \"Agency_Plan_Overview_Title\";\n    FYFCForecast: string = \"FYFC_Forecast\";\n    FYFCActual: string = \"FYFC_Actual\";\n    FYFCMonthPlan: string = \"FYFC_Month_Plan\";\n    ANPForecast: string = \"ANP_Forecast\";\n    ANPActual: string = \"ANP_Actual\";\n    ANPMonthPlan: string = \"ANP_Month_Plan\";\n    manpowerPlan: string = \"Manpower_Plan\";\n    recruitmentPlan: string = \"Recruitment_Plan\";\n    manpower: string = \"Manpower\";\n    recruitment: string = \"Recruitment\";\n    FYFCGoal: string = \"FYFC_Goal\";\n    directUnit: string = \"Direct_Unit\";\n    agencyPlanInformationTitle: string = \"Agency_Plan_Information_Title\";\n    yellow: string = \"Yellow\";\n    agencyPlanInformation: string = \"Agency_Plan_Information\";\n    agencyPlanExpected: string = \"Agency_Plan_Expected\";\n    teamGoal: string = 'Team_Goal';\n    Q1: string = \"Q1\";\n    Q2: string = \"Q2\";\n    Q3: string = \"Q3\";\n    Q4: string = \"Q4\";\n    recruitmentTotal: string = \"Recruitment_Total\";\n    indirectUnit: string = \"Indirect_Unit\";\n    ANPGoal: string = \"ANP_Goal\";\n    saveFile: string = \"Save_File\";\n    agencyPlan: string = \"Agency_Plan\";\n    FYFC: string = \"FYFC\";\n    ANP: string = \"ANP\";\n    recruitmentCommitment: string = \"Recruitment_Commitment\";\n    caseCount: string = \"Case_Count\";\n    averageFYFCPerCase: string = \"Average_FYFC_Per_Case\";\n    averageANPPerCase: string = \"Average_ANP_Per_Case\";\n    manpowerGoal: string = \"Manpower_Goal\";\n    reset: string = \"Reset\";\n\n\n    thisYearTitle: string = \"This_Year_Title\";\n    variableYearTitle: string = \"Variable_Year_Title\";\n    yourAgencyGoal: string = \"Your_Agency_Goal\";\n\n    annualConvention: string = \"Annual_Convention\";\n    promotionPlan: string = \"Promotion_Plan\";\n    MDRT: string = \"MDRT\";\n    goalEffectiveMonth: string = \"Goal_Effective_Month\";\n    allYearGoal: string = \"All_Year_Goal\";\n    monthGoal: string = \"Month_Goal\";\n    allianzStarClub: string = \"Allianz_Star_Club\";\n    summitTrip: string = \"Summit_Trip\";\n    longTermIncentiveTripProgram: string = \"Long_Term_Incentive_Trip_Program\";\n    COT: string = \"COT\";\n    TOT: string = \"TOT\";\n    SP: string = \"SP\";\n    AM: string = \"AM\";\n    SM: string = \"SM\";\n    dashDash: string = \"Dash_Dash\";\n    personalMonthlyPlanFYFC: string = \"Personal_Monthly_Plan_FYFC\";\n    plan: string = \"Plan\";\n    actual: string = \"Actual\";\n    overviewStep3Title: string = \"Overview_Step3_Title\";\n    find: string = \"Find\";\n    meet: string = \"Meet\";\n    submit: string = \"Submit\";\n    inforce: string = \"Inforce\";\n    daily: string = \"Daily\";\n    weekly: string = \"Weekly\";\n    monthly: string = \"Monthly\";\n    approvalStatus: string = \"Approval_Status\";\n    goalBeenApproval: string = \"Goal_Been_Approval\";\n    adjustYourGoal: string = \"Adjust_Your_Goal\";\n    proceedToProgress: string = \"Proceed_To_Progress\";\n    teamMonthlyPlanFYFCTitle: string = \"Team_Monthly_Plan_FYFC_Title\";\n    completionRate: string = \"Completion_Rate\";\n    editPersonalPlanFYFCTitle: string = \"Edit_Personal_Plan_FYFC_Title\";\n    goalBeenReject: string = \"Goal_Been_Reject\";\n    goalBeenPend: string = \"Goal_Been_Pend\";\n    needToBeRecommentTitle: string = \"Need_To_Be_Recomment_Title\";\n    needToBeRecommentContent: string = \"Need_To_Be_Recomment_Content\";\n    workingExperience: string = \"Working_Experience\";\n    goalSettingStep1Title: string = \"Goal_Setting_Step1_Title\";\n    goalSettingStep2Title: string = \"Goal_Setting_Step2_Title\";\n    goalSettingStep3Title: string = \"Goal_Setting_Step3_Title\";\n    goalSettingStep4Title: string = \"Goal_Setting_Step4_Title\";\n    goalSettingStep5Title: string = \"Goal_Setting_Step5_Title\";\n    statusBarStep1: string = \"Status_Bar_Step1\";\n    statusBarStep2: string = \"Status_Bar_Step2\";\n    statusBarStep3: string = \"Status_Bar_Step3\";\n    statusBarStep4: string = \"Status_Bar_Step4\";\n    statusBarStep5: string = \"Status_Bar_Step5\";\n    FYFCAllYear: string = \"FYFC_All_Year\";\n    FYFCNowToYearEnd: string = \"FYFC_Now_To_Year_End\";\n    NowToYearEnd: string = \"Now_To_Year_End\";\n    yourGoal: string = \"Your_Goal\";\n    comment: string = \"Comment\";\n    findSubtitle: string = \"Find_Subtitle\";\n    scheduleSubtitle: string = \"Schedule_Subtitle\";\n    meetSubtitle: string = \"Meet_Subtitle\";\n    submitSubtitle: string = \"Submit_Subtitle\";\n    inforceSubtitle: string = \"Inforce_Subtitle\";\n    reject: string = \"Reject\";\n    approve: string = \"Approve\";\n    commitmentTeamGoalTitle: string = \"Commitment_Team_Goal_Title\";\n    CommitmentPlaceholder: string = \"Commitment_Placeholder\";\n    progressCongratulationsMessage: string = \"Progress_Congratulations_Message\";\n    month1: string = 'Month_1';\n    month2: string = 'Month_2';\n    month3: string = 'Month_3';\n    month4: string = 'Month_4';\n    month5: string = 'Month_5';\n    month6: string = 'Month_6';\n    month7: string = 'Month_7';\n    month8: string = 'Month_8';\n    month9: string = 'Month_9';\n    month10: string = 'Month_10';\n    month11: string = 'Month_11';\n    month12: string = 'Month_12';\n    times: string = \"Times\";\n    hi: string = \"Hi\";\n    go: string = \"Go\";\n    goalSettingExcel: string = \"Goal_Setting_Excel\";\n    setGoalThisYear: string = \"Set_Goal_This_Year\";\n    next: string = \"Next\";\n    case: string = \"Case\";\n    ok: string = \"Ok\";\n    skip: string = \"Skip\";\n    goalSettingCreateCustomer: string = \"Goal_Setting_Create_Customer\";\n    goalSettingCustomerJournal: string = \"Goal_Setting_Customer_Journal\";\n    goalSettingActivityType: string = \"Goal_Setting_Activity_Type\";\n    goalSettingFastQuotation: string = \"Goal_Setting_Fast_Quotation\";\n    submission: string = \"Submission\";\n    goalSettingInforcePolicy: string = \"Goal_Setting_Inforce_Policy\";\n    FYFCShortfall: string = \"FYFC_Shortfall\";\n    ANPActualVariable: string = \"ANP_Actual_Variable\";\n    ANPAllYear: string = \"ANP_All_Year\";\n    ANPNowToYearEnd: string = \"ANP_Now_To_Year_End\";\n    pendingApproval: string = \"Pending_Approval\";\n    dashboardMonth7: string = \"Dashboard_Month_7\";\n\n    //progress\n    points: string = \"Points\";\n    congratulationsMsg: string = 'Progress_Congratulations_Message';\n    almostMadeItMsg: string = 'Progress_Almost_Made_It_Message';\n    wellDoneMsg: string = 'Progress_Well_Done_Message';\n    greatJobMsg: string = 'Progress_Great_Job_Message';\n    quarter: string = 'Quarter';\n    backToProgressBtnText: string = 'Back_To_Progress';\n    goal: string = 'Goal';\n    forecast: string = 'Forecast';\n    shortfall: string = 'Shortfall';\n\n    //progres activity\n    activitiesText = 'Activities';\n    achieveText = 'Achieve';\n    actualGoal = 'Actual_Goal';//\n    actualPlan = 'Actual_Plan';//\n    meetPresentText = 'Meet_Present';\n    monthlyPlanFYFCTitleText = 'Monthly_Plan_FYFC_Title';\n    totalForecastTitle = 'Total_Forecast';\n    totalYTDActualTitle = 'Total_YTD_Actual';\n    directUnitTitle = 'Direct_Unit_Title';\n    indirectUnitTitle = 'Indirect_Unit_Title';\n    agencyTitle = 'Agency_Title';\n    allZoneTitle = 'All_Zone_Title';\n\n    //infomation\n    informationDescriptionText: string = 'Info_Information_Description';\n    infoTitle: string = 'Info_Title';\n    infoMonthDetailText: string = 'Info_Month_Detail';\n    infoQuarterDetailText: string = 'Info_Quarter_Detail';\n    infoYearDetailText: string = 'Info_Year_Detail';\n    infoForecastRecruitmentDetailText: string = 'Info_Forecast_Recruitment_Detail';\n    infoHowToReadThisTitle: string = 'Info_How_To_Read_This';\n    infoConversionRateText: string = 'Info_Conversion_Rate';\n    infoConversionRateDetailText: string = 'Info_Conversion_Rate_Detail';\n    infoActivityLabelText: string = 'Info_Activity_Label';\n    infoRedMeanText: string = 'Info_Red_Mean';\n    infoGreyMeanText: string = 'Info_Grey_Mean';\n    infoIfAnActivity1Text: string = 'Info_If_An_Activity_1';\n    infoIfAnActivity2Text: string = 'Info_If_An_Activity_2';\n    infoToFindText: string = 'Info_To_Find';\n    infoTryTo1Text: string = 'Info_Try_To_1';\n    infoTryTo2Text: string = 'Info_Try_To_2';\n    infoTryTo3Text: string = 'Info_Try_To_3';\n    infoMoreActive1Text: string = 'Info_More_Active_1';\n    infoMoreActive2Text: string = 'Info_More_Active_2';\n    infoMoreActive3Text: string = 'Info_More_Active_3';\n    infoMoreActive4Text: string = 'Info_More_Active_4';\n    infoTryHard1Text: string = 'Info_Try_Hard_1';\n    infoTryHard2Text: string = 'Info_Try_Hard_2';\n    infoTryHard3Text: string = 'Info_Try_Hard_3';\n    infoHighQuality1Text: string = 'Info_High_Quality_1';\n    infoHighQuality2Text: string = 'Info_High_Quality_2';\n    infoAllAmountCountsByMillion: string = \"Info_All_Amount_Counts_By_Million\";\n    waitingApproval: string = \"Waiting_Approval\";\n    complete: string = \"Complete\";\n\n    //notification\n    needToGoalSettingTitle: string = \"Need_To_Goal_Setting_Title\";\n    goalAutoApproveMessageTitle: string = \"Goal_Auto_Approve_Message_Title\";\n    goalAutoApproveMessageDesc: string = \"Goal_Auto_Approve_Message_Desc\";\n    goalAutoApproveLeaderMessageTitle: string = \"Goal_Auto_Approve_Leader_Message_Title\";\n    goalAutoApproveLeaderMessageDesc: string = \"Goal_Auto_Approve_Leader_Message_Desc\";\n    approveGoalIsRejectTitle: string = \"Approve_Goal_Is_Reject_Title\";\n    approveGoalIsRejectBody: string = \"Approve_Goal_Is_Reject_Body\";\n    approveGoalIsApprovedTitle: string = \"Approve_Goal_Is_Approved_Title\";\n    approveGoalIsApprovedBody: string = \"Approve_Goal_Is_Approved_Body\";\n    pendingReviewTitle: string = \"Pending_Review_Title\";\n    supervisorHaveChangeAgentTitle: string = \"Supervisor_Have_Change_Agent_Title\";\n    supervisorHaveChangeAgentBody: string = \"Supervisor_Have_Change_Agent_Body\";\n    supervisorHaveChangeOldTitle: string = \"Supervisor_Have_Change_Old_Title\";\n    supervisorHaveChangeOldBody: string = \"Supervisor_Have_Change_Old_Body\";\n    supervisorHaveChangeNewTitle: string = \"Supervisor_Have_Change_New_Title\";\n    supervisorHaveChangeNewBody: string = \"Supervisor_Have_Change_New_Body\";\n    goalAutoRejectMessageTitle: string = \"Goal_Auto_Reject_Message_Title\";\n    goalAutoRejectMessageDescription: string = \"Goal_Auto_Reject_Message_Description\";\n    goalAutoRejectLeaderMessageTitle: string = \"Goal_Auto_Reject_Leader_Message_Title\";\n    goalAutoRejectLeaderMessageDescription: string = \"Goal_Auto_Reject_Leader_Message_Description\";\n    activityTenPointTitle: string = \"Activity_Ten_Point_Title\";\n    activityTenPointBody: string = \"Activity_Ten_Point_Body\";\n    activityTwentyPointTitle: string = \"Activity_Twenty_Point_Title\";\n    activityTwentyPointBody: string = \"Activity_Twenty_Point_Body\";\n    activityMiniPointTitle: string = \"Activity_Mini_Point_Title\";\n    activityMiniPointBody: string = \"Activity_Mini_Point_Body\";\n    customerOvertimeTitle: string = \"Customer_Overtime_Title\";\n    customerAutoDeleteTitle: string = \"Customer_Auto_Delete_Title\";\n    goalPeriodNotStartTitle: string = \"Goal_Period_Not_Start_Title\";\n    goalPeriodNotStartBody: string = \"Goal_Period_Not_Start_Body\";\n    adjustGoal: string = \"Adjust_Goal\";\n    seeProgress: string = \"See_Progress\";\n    IGotIt: string = \"I_Got_It\";\n    dataPrivacyProtectionTitle: string = \"Data_Privacy_Protection_Title\";\n    dataPrivacyProtectionBody: string = \"Data_Privacy_Protection_Body\";\n    pleaseReconnectInternet: string = \"Please_Reconnect_Internet\";\n    dataCollectionProcessAndUsageTitle: string = \"Data_Collection_Process_And_Usage_Title\";\n    dataCollectionProcessAndUsageBody: string = \"Data_Collection_Process_And_Usage_Body\";\n    versionMessage: string = \"Version_Message\";\n    timeOut: string = \"Time_Out\";\n    versionUpdate: string = \"Version_Update\";\n    later: string = \"Later\";\n    noWifiConnected: string = \"No_Wifi_Connected\";\n    pleaseConnectInternet: string = \"Please_Connect_Internet\";\n    deleteDataTitle: string = \"Delete_Data_Title\";\n    deleteDataBody: string = \"Delete_Data_Body\";\n    notShowMessage: string = \"Not_Show_Message\";\n    languageConversionTitle: string = \"Language_Conversion_Title\";\n    languageConversionBody: string = \"Language_Conversion_Body\";\n    customersUnit:string = \"Customers_Unit\";\n    casesUnit:string = \"Cases_Unit\";\n    todayScheduleBirthday: string = \"Today_Schedule_Birthday\";\n    yearUnit: string = \"Year_Unit\";\n    vertical: string = \"Vertical\";\n    horizonal: string = \"Horizonal\";\n    addProtection: string = \"Add_Protection\";\n    more: string = \"More\";\n    submitDeal: string = \"Submit_Deal\";\n    progressGoToCalendar: string = \"Progress_Go_To_Calendar\";\n\n    homeHi: string = \"Home_Hi\";\n    homeAppointmentDetails: string = \"Home_Appointment_Details\";\n    homeEdit: string = \"Home_Edit\";\n    homeDelete: string = \"Home_Delete\";\n    homeAppointment: string = \"Home_Appointment\";\n    homeSave: string = \"Home_Save\";\n    homeFYFC: string = \"Home_FYFC\";\n    homeANP: string = \"Home_ANP\";\n    homeConfirm: string = \"Home_Confirm\";\n    homePersonal: string = \"Home_Personal\";\n    homeTeam: string = \"Home_Team\";\n    homeDetails: string = \"Home_Details\";\n    homeToday: string = \"Home_Today\";\n    homeSchedule: string = \"Home_Schedule\";\n    homeBirthday: string = \"Home_Birthday\";\n\n    customerClear: string = \"Customer_Clear\";\n    customerAppointment: string = \"Customer_Appointment\";\n    customerContact: string = \"Customer_Contact\";\n    customerEdit: string = \"Customer_Edit\";\n    customerDelete: string = \"Customer_Delete\";\n    customerAdd: string = \"Customer_Add\";\n    addProfile: string = \"Add_Profile\";\n    customerSave: string = \"Customer_Save\";\n    customerConfirm: string = \"Customer_Confirm\";\n    customerDetail: string = \"Customer_Detail\";\n\n    unbindDevice: string = \"Unbind_Device\";\n    unbind: string = \"Unbind\";\n    settingSeeDetails: string = \"Setting_See_Details\";\n\n    goalSettingReset: string = \"Goal_Setting_Reset\";\n    goalSettingNext: string = \"Goal_Setting_Next\";\n    goalSettingSubmit: string = \"Goal_Setting_Submit\";\n    goalSettingFind: string = \"Goal_Setting_Find\";\n    goalSettingFindSubtitle: string = \"Goal_Setting_Find_Subtitle\";\n    goalSettingSchedule: string = \"Goal_Setting_Schedule\";\n    goalSettingScheduleSubtitle: string = \"Goal_Setting_Schedule_Subtitle\";\n    goalSettingMeetPresent: string = \"Goal_Setting_Meet_Present\";\n    goalSettingMeetPresentSubtitle: string = \"Goal_Setting_Meet_Present_Subtitle\";\n    goalSettingSubmitDeal: string = \"Goal_Setting_Submit_Deal\";\n    goalSettingSubmitDealSubtitle: string = \"Goal_Setting_Submit_Deal_Subtitle\";\n    goalSettingInforce: string = \"Goal_Setting_Inforce\";\n    goalSettingInforceSubtitle: string = \"Goal_Setting_Inforce_Subtitle\";\n    goalSettingDaily: string = \"Goal_Setting_Daily\";\n    goalSettingWeekly: string = \"Goal_Setting_Weekly\";\n    goalSettingMonthly: string = \"Goal_Setting_Monthly\";\n    goalSettingDay: string = \"Goal_Setting_Day\";\n    goalSettingWeek: string = \"Goal_Setting_Week\";\n    goalSettingMonth: string = \"Goal_Setting_Month\";\n    goalSettingActual: string = \"Goal_Setting_Actual\";\n    goalSettingFYFC: string = \"Goal_Setting_FYFC\";\n    goalSettingANP: string = \"Goal_Setting_ANP\";\n    goalSettingManpower: string = \"Goal_Setting_Manpower\";\n    goalSettingRecruitment: string = \"Goal_Setting_Recruitment\";\n    goalSettingPersonal: string = \"Goal_Setting_Personal\";\n    goalSettingTeam: string = \"Goal_Setting_Team\";\n    goalSettingClear: string = \"Goal_Setting_Clear\";\n    goalSettingSave: string = \"Goal_Setting_Save\";\n    goalSettingPlan: string = \"Goal_Setting_Plan\";\n    goalSettingSeeDetails: string = \"Goal_Setting_See_Details\";\n    goalSettingLandingHi: string = \"Goal_Setting_Landing_Hi\";\n    goalSettingCalendarJournal: string = \"Goal_Setting_Calendar_Journal\";\n\n    calendarFilter: string = \"Calendar_Filter\";\n    calendarActivity: string = \"Calendar_Activity\";\n    calendarCustomerName: string = \"Calendar_Customer_Name\";\n    calendarAppointmentDetails: string = \"Calendar_Appointment_Details\";\n    calendarEdit: string = \"Calendar_Edit\";\n    calendarDelete: string = \"Calendar_Delete\";\n    calendarAppointment: string = \"Calendar_Appointment\";\n    calendarSave: string = \"Calendar_Save\";\n    calendarDay: string = \"Calendar_Day\";\n    calendarWeek: string = \"Calendar_Week\";\n    calendarMonth: string = \"Calendar_Month\";\n    calendarYear: string = \"Calendar_Year\";\n    calendarToday: string = \"Calendar_Today\";\n\n    progressWeek: string = \"Progress_Week\";\n    progressToday: string = \"Progress_Today\";\n\n    progressPersonal: string = \"Progress_Personal\";\n    progressTeam: string = \"Progress_Team\";\n    progressMonth: string = \"Progress_Month\";\n    progressQuarter: string = \"Progress_Quarter\";\n    progressYear: string = \"Progress_Year\";\n    progressFYFC: string = \"Progress_FYFC\";\n    progressANP: string = \"Progress_ANP\";\n    progressFind: string = \"Progress_Find\";\n    progressFindSubtitle: string = \"Progress_Find_Subtitle\";\n    progressSchedule: string = \"Progress_Schedule\";\n    progressScheduleSubtitle: string = \"Progress_Schedule_Subtitle\";\n    progressMeetPresent: string = \"Progress_Meet_Present\";\n    progressMeetPresentSubtitle: string = \"Progress_Meet_Present_Subtitle\";\n    progressSubmitDeal: string = \"Progress_Submit_Deal\";\n    progressSubmitDealSubtitle: string = \"Progress_Submit_Deal_Subtitle\";\n    progressInforce: string = \"Progress_Inforce\";\n    progressInforceSubtitle: string = \"Progress_Inforce_Subtitle\";\n    progressPlan: string = \"Progress_Plan\";\n    progressActual: string = \"Progress_Actual\";\n    progressGoal: string = \"Progress_Goal\";\n    progressForecast: string = \"Progress_Forecast\";\n    progressShortfall: string = \"Progress_Shortfall\";\n    progressManpower: string = \"Progress_Manpower\";\n    progressRecruitment: string = \"Progress_Recruitment\";\n    progressCurrentMonth: string = \"Progress_Current_Month\";\n    progressCurrentQuarter: string = \"Progress_Current_Quarter\";\n    progressCurrentYear: string = \"Progress_Current_Year\";\n    progressForecastRecruitment: string = \"Progress_Forecast_Recruitment\";\n    progressClose: string = \"Progress_Close\";\n    progressSeeDetails: string = \"Progress_See_Details\";\n    progressDetail: string = \"Progress_Detail\";\n\n    settingYes: string = \"Setting_Yes\";\n    settingNo: string = \"Setting_No\";\n\n    detectScreenshotTitle: string = \"Detect_Screenshot_Title\";\n    detectScreenshotContent: string = \"Detect_Screenshot_Content\";\n    noContactPermissionTitle: string = \"No_Contact_Permission_Title\";\n    noContactPermissionContent: string = \"No_Contact_Permission_Content\";\n    submitFailTitle: string = \"Submit_Fail_Title\";\n    submitFailContent: string = \"Submit_Fail_Content\";\n    notificationSeeProgress: string = \"Notification_See_Progress\";\n    notificationSaveFeedback: string = \"Notification_Save_Feedback\";\n    notificationDeleteFeedback: string = \"Notification_Delete_Feedback\";\n    notificationCompleteFeedback: string = \"Notification_Complete_Feedback\";\n\n\n    //message 1, 2\n    goalPeriodNotStartOk: string = \"Goal_Period_Not_Start_Ok\";\n\n    //message 3 \n    goalPeriodIsBeginOk: string = \"Goal_Period_Is_Begin_Ok\";\n\n    //message 5 \n    needToGoalSettingAdjustGoal: string = \"Need_To_Goal_Setting_Adjust_Goal\";\n\n    //message 6 \n    goalAutoApproveAdjustGoal: string = \"Goal_Auto_Approve_Adjust_Goal\";\n\n    //messsage 7 \n    goalAutoApproveLeaderOk: string = \"Goal_Auto_Approve_Leader_Ok\";\n\n    //messaage 8\n    approveGoalIsRejectAdjustGoal: string = \"Approve_Goal_Is_Reject_Adjust_Goal\";\n\n    //message 9\n    approveGoalIsApprovedOk: string = \"Approve_Goal_Is_Approved_Ok\";\n\n    //message 11\n    pendingReviewAgencyPlan: string = \"Pending_Review_Agency_Plan\";\n\n    //message 12\n    supervisorHaveChangeAgentOk: string = \"Supervisor_Have_Change_Agent_Ok\";\n\n    //message 13\n    supervisorHaveChangeOldOk: string = \"Supervisor_Have_Change_Old_Ok\";\n\n    //message 14\n    supervisorHaveChangeNewAgencyPlan: string = \"Supervisor_Have_Change_New_Agency_Plan\";\n\n    //message 15\n    goalAutoRejectAdjustGoal: string = \"Goal_Auto_Reject_Adjust_Goal\";\n\n    //message 16\n    goalAutoRejectLeaderOk: string = \"Goal_Auto_Reject_Leader_Ok\";\n\n    //message 21\n    dataPrivacyProtectionConfirm: string = \"Data_Privacy_Protection_Confirm\";\n\n    // message 23\n    customerOvertimeConfirm: string = \"Customer_Overtime_Confirm\";\n\n    //message 24\n    customerAutoDeleteConfirm: string = \"Customer_Auto_Delete_Confirm\";\n\n    //message 28\n    noWifiConnectedOk: string = \"No_Wifi_Connected_Ok\";\n\n    //message 29\n    versionUpdateYes: string = \"Version_Update_Yes\";\n    versionUpdateLater: string = \"Version_Update_Later\";\n\n    //message 30\n    timeOutOk: string = \"Time_Out_Ok\";\n\n    //message 31\n    dataCollectionProcessAndUsageReject: string = \"Data_Collection_Process_And_Usage_Reject\";\n    dataCollectionProcessAndUsageConfirm: string = \"Data_Collection_Process_And_Usage_Confirm\";\n\n    //message 38\n    detectScreenshotOk: string = \"Detect_Screenshot_Ok\";\n\n    //not on master file\n    submitFailOk: string = \"Submit_Fail_Ok\";\n    noContactPermissionOk: string = \"No_Contact_Permission_Ok\";\n    httpErrorOk: string = \"HTTP_Error_Ok\";\n\n\n\n\n\n\n\n\n}\n","import { Injectable, ErrorHandler, Optional, Inject } from \"@angular/core\";\nimport { IInitTask } from \"../interface/InitialTask.interface\";\nimport { SQLCommand } from \"../../device/sqlite/SQLCommand\";\nimport { DaoFactory } from \"../../device/sqlite/DaoFactory\";\nimport { registerDataSyncFuncToken } from \"../../injectionToken\";\nimport { IregisterDataSyncFunc } from \"../interface/registerDataSyncFunc.interface\";\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DataSyncTask implements IInitTask {\n\n    constructor(\n        private errorHandler: ErrorHandler,\n        private DaoFactory: DaoFactory,\n        @Inject(registerDataSyncFuncToken) private registerDataSyncFunc: IregisterDataSyncFunc\n    ) { }\n    public async doTask(): Promise<any> {\n        try {\n            await this.createTable();\n        } catch (error) {\n            console.warn('cannot run datasync!');\n            this.errorHandler.handleError(error);\n        }\n    }\n\n    public async refreshSchema() {\n        await this.DaoFactory.refreshTableSchema();\n    }\n\n    private async createTable(): Promise<any> {\n        console.log('create table task')\n        let factory = this.DaoFactory;\n        //initial DB\n        await factory.init();\n        console.log('factory init finish!');\n        let ProfileDao = factory.getDao(\"Profile\");\n        let MainDao = factory.getDefaultDao();\n        if (ProfileDao && MainDao) {\n            await Promise.all([this.runSql(ProfileDao, this.createProfileTableCommand()), this.runSql(MainDao, this.createMainTableCommand())]);\n            await factory.refreshTableSchema();\n        }\n    }\n\n    private runSql(dao, cmd: Array<string>): Promise<any> {\n        let SqlCommandArray = [];\n        for (let command of cmd) {\n            SqlCommandArray.push(new SQLCommand(command, []));\n        }\n        return new Promise((res, rej) => {\n            dao.excuteSqlCommand(SqlCommandArray).subscribe((resp) => {\n                console.log('create table res:', resp);\n                res();\n            });\n        })\n    }\n\n    public createProfileTableCommand(): Array<string> {\n        let cmd = [];\n        // cmd.push(\"DROP TABLE IF EXISTS TW_LH_SD_Code;\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Code (TypeID TEXT,Code TEXT,MappingID TEXT,Orders INT NOT NULL,Arguments TEXT,ValidityPeriod INT NOT NULL,PRIMARY KEY (TypeID, Code, MappingID));\");\n\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Type\\' , \\'N\\' , \\'NormalType\\' , 1 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Type\\' , \\'Y\\' , \\'FavoriteType\\' , 2 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Birthday\\' , \\'Today\\' , \\'Today\\' , 1 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Birthday\\' , \\'1\\' , \\'Jan\\' , 2 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Birthday\\' , \\'2\\' , \\'Feb\\' , 3 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Birthday\\' , \\'3\\' , \\'Mar\\' , 4 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Birthday\\' , \\'4\\' , \\'Apr\\' , 5 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Birthday\\' , \\'5\\' , \\'May\\' , 6 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Birthday\\' , \\'6\\' , \\'Jun\\' , 7 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Birthday\\' , \\'7\\' , \\'Jul\\' , 8 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Birthday\\' , \\'8\\' , \\'Aug\\' , 9 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Birthday\\' , \\'9\\' , \\'Sep\\' , 10 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Birthday\\' , \\'10\\' , \\'Oct\\' , 11 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Birthday\\' , \\'11\\' , \\'Nov\\' , 12 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Birthday\\' , \\'12\\' , \\'Dec\\' , 13 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Completeness\\' , \\'1\\' , \\'Completeness1_10\\' , 1 , \\'{\\\"start\\\":1,\\\"end\\\":10}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Completeness\\' , \\'2\\' , \\'Completeness11_20\\' , 2 , \\'{\\\"start\\\":11,\\\"end\\\":20}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Completeness\\' , \\'3\\' , \\'Completeness21_30\\' , 3 , \\'{\\\"start\\\":21,\\\"end\\\":30}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Completeness\\' , \\'4\\' , \\'Completeness31_40\\' , 4 , \\'{\\\"start\\\":31,\\\"end\\\":40}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Completeness\\' , \\'5\\' , \\'Completeness41_50\\' , 5 , \\'{\\\"start\\\":41,\\\"end\\\":50}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Completeness\\' , \\'6\\' , \\'Completeness51_60\\' , 6 , \\'{\\\"start\\\":51,\\\"end\\\":60}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Completeness\\' , \\'7\\' , \\'Completeness61_70\\' , 7 , \\'{\\\"start\\\":61,\\\"end\\\":70}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Completeness\\' , \\'8\\' , \\'Completeness71_80\\' , 8 , \\'{\\\"start\\\":71,\\\"end\\\":80}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Completeness\\' , \\'9\\' , \\'Completeness81_90\\' , 9 , \\'{\\\"start\\\":81,\\\"end\\\":90}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Completeness\\' , \\'10\\' , \\'Completeness91_100\\' , 10 , \\'{\\\"start\\\":91,\\\"end\\\":100}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Age\\' , \\'1\\' , \\'AgeRange0_15\\' , 1 , \\'{\\\"start\\\":0,\\\"end\\\":15}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Age\\' , \\'2\\' , \\'AgeRange16_24\\' , 2 , \\'{\\\"start\\\":16,\\\"end\\\":24}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Age\\' , \\'3\\' , \\'AgeRange25_34\\' , 3 , \\'{\\\"start\\\":25,\\\"end\\\":34}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Age\\' , \\'4\\' , \\'AgeRange35_44\\' , 4 , \\'{\\\"start\\\":35,\\\"end\\\":44}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Age\\' , \\'5\\' , \\'AgeRange45_54\\' , 5 , \\'{\\\"start\\\":45,\\\"end\\\":54}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Age\\' , \\'6\\' , \\'AgeRange55_More\\' , 6 , \\'{\\\"start\\\":55,\\\"end\\\":999}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Gender\\' , \\'1\\' , \\'Male\\' , 1 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Gender\\' , \\'2\\' , \\'Female\\' , 2 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Income\\' , \\'1\\' , \\'Income40\\' , 1 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Income\\' , \\'2\\' , \\'Income41_60\\' , 2 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Income\\' , \\'3\\' , \\'Income61_90\\' , 3 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Income\\' , \\'4\\' , \\'Income91_120\\' , 4 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Income\\' , \\'5\\' , \\'Income121_220\\' , 5 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Income\\' , \\'6\\' , \\'Income221_300\\' , 6 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Income\\' , \\'7\\' , \\'Income300\\' , 7 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Source\\' , \\'1\\' , \\'Relatives\\' , 1 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Source\\' , \\'2\\' , \\'Friends\\' , 2 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Source\\' , \\'3\\' , \\'Classmate\\' , 3 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Source\\' , \\'4\\' , \\'Alumni\\' , 4 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Source\\' , \\'5\\' , \\'Neighbors\\' , 5 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Source\\' , \\'6\\' , \\'Community_tenants\\' , 6 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Source\\' , \\'7\\' , \\'Work\\' , 7 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Source\\' , \\'8\\' , \\'Business_related\\' , 8 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Source\\' , \\'9\\' , \\'Persons_who_provide_service\\' , 9 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Source\\' , \\'10\\' , \\'Professional\\' , 10 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Source\\' , \\'11\\' , \\'Social\\' , 11 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Source\\' , \\'12\\' , \\'Religious_group\\' , 12 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Source\\' , \\'13\\' , \\'Leisure\\' , 13 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Source\\' , \\'14\\' , \\'hobbies\\' , 14 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Source\\' , \\'15\\' , \\'Known_by_family\\' , 15 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Source\\' , \\'16\\' , \\'Engage_Experience\\' , 16 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Source\\' , \\'17\\' , \\'Discovery_Experience\\' , 17 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Marriage\\' , \\'1\\' , \\'Single\\' , 1 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Marriage\\' , \\'2\\' , \\'Married\\' , 2 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Children\\' , \\'1\\' , \\'Children0\\' , 1 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Children\\' , \\'2\\' , \\'Children1_2\\' , 2 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Children\\' , \\'3\\' , \\'Children3_4\\' , 3 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Children\\' , \\'4\\' , \\'Children5\\' , 4 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Familiarity\\' , \\'1\\' , \\'Close\\' , 1 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Familiarity\\' , \\'2\\' , \\'Known(acquaintance)\\' , 2 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Familiarity\\' , \\'3\\' , \\'Nodding_acquaintance\\' , 3 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_RecentStatus\\' , \\'1\\' , \\'Newly_married\\' , 1 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_RecentStatus\\' , \\'2\\' , \\'child_get_birth\\' , 2 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_RecentStatus\\' , \\'3\\' , \\'Get_promoted\\' , 3 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_RecentStatus\\' , \\'4\\' , \\'change_work\\' , 4 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_RecentStatus\\' , \\'5\\' , \\'Become_a_boss\\' , 5 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_RecentStatus\\' , \\'6\\' , \\'Property\\' , 6 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_RecentStatus\\' , \\'7\\' , \\'Investment\\' , 7 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_RecentStatus\\' , \\'8\\' , \\'Burden_family\\' , 8 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Status\\' , \\'1\\' , \\'Ability_to_pay_the_premium\\' , 1 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Status\\' , \\'2\\' , \\'Accessible_to_contact\\' , 2 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Status\\' , \\'3\\' , \\'Have_Insurance_Needs\\' , 3 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Status\\' , \\'4\\' , \\'Could_be_pass_underwriting_check\\' , 4 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Status\\' , \\'5\\' , \\'Key_person_to_decide_to_buy_policy\\' , 5 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_ContactFrequancy\\' , \\'1\\' , \\'ContactFrequancy1_2\\' , 1 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_ContactFrequancy\\' , \\'2\\' , \\'ContactFrequancy3_5\\' , 2 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_ContactFrequancy\\' , \\'3\\' , \\'ContactFrequancy5_More\\' , 3 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Possibility\\' , \\'HOT\\' , \\'HOT\\' , 1 , \\'{\\\"color\\\":\\\"#dc3149\\\"}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Possibility\\' , \\'WARM\\' , \\'WARM\\' , 2 , \\'{\\\"color\\\":\\\"#f86200\\\"}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_Possibility\\' , \\'COLD\\' , \\'COLD\\' , 3 , \\'{\\\"color\\\":\\\"#7fe4e0\\\"}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_TelType\\' , \\'TelHome\\' , \\'Home\\' , 1 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_TelType\\' , \\'TelMobile\\' , \\'Mobile\\' , 2 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_TelType\\' , \\'TelWork\\' , \\'Work\\' , 3 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_EmailType\\' , \\'MailHome\\' , \\'Home\\' , 1 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_EmailType\\' , \\'MailWork\\' , \\'Work\\' , 2 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_AddressType\\' , \\'AddressTypeHome\\' , \\'Home\\' , 1 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_AddressType\\' , \\'AddressTypeWork\\' , \\'Work\\' , 2 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_DataSource\\' , \\'E\\' , \\'Existing_customer\\' , 1 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Customer_DataSource\\' , \\'P\\' , \\'Potential_customer\\' , 2 , \\'{}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_Type\\' , \\'1\\' , \\'Build_relationship\\' , 1 , \\'{\\\"color\\\": \\\"#496EBD\\\", \\\"backgroundColor\\\": \\\"#CFE9EE\\\"}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_Type\\' , \\'2\\' , \\'Sell\\' , 2 , \\'{\\\"color\\\": \\\"#FF934F\\\", \\\"backgroundColor\\\": \\\"#EBE1BF\\\"}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_Type\\' , \\'3\\' , \\'Customer_service\\' , 3 , \\'{\\\"color\\\": \\\"#7FE4E0\\\", \\\"backgroundColor\\\": \\\"#EFF6EE\\\"}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_Type\\' , \\'4\\' , \\'PRP\\' , 4 , \\'{\\\"color\\\": \\\"#FDD25C\\\", \\\"backgroundColor\\\": \\\"#F5F0E0\\\"}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_Type\\' , \\'5\\' , \\'Cultivate\\' , 5 , \\'{\\\"color\\\": \\\"#CCDD61\\\", \\\"backgroundColor\\\": \\\"#DFEEDE\\\"}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_Type\\' , \\'6\\' , \\'Meeting\\' , 6 , \\'{\\\"color\\\": \\\"#96DCFA\\\", \\\"backgroundColor\\\": \\\"#E6F4F6\\\"}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_Type\\' , \\'7\\' , \\'Private_Birthday\\' , 7 , \\'{\\\"color\\\": \\\"#8A679C\\\", \\\"backgroundColor\\\": \\\"#E1CFEB\\\"}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_Type\\' , \\'8\\' , \\'Private\\' , 8 , \\'{\\\"color\\\": \\\"#E4003A\\\", \\\"backgroundColor\\\": \\\"#F1C8D0\\\"}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_Type\\' , \\'9\\' , \\'Marketing\\' , 9 , \\'{\\\"color\\\": \\\"#DAD0E1\\\", \\\"backgroundColor\\\": \\\"#F9F2EF\\\"}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_Type\\' , \\'10\\' , \\'Workshop\\' , 10 , \\'{\\\"color\\\": \\\"#F7C7C3\\\", \\\"backgroundColor\\\": \\\"#FBF2F4\\\"}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_RemindTime\\' , \\'1\\' , \\'On_day_of_event\\' , 1 , \\'{\\\"isAllDay\\\": true, \\\"day\\\": 0}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_RemindTime\\' , \\'2\\' , \\'1_day_before(T)\\' , 2 , \\'{\\\"isAllDay\\\": true, \\\"day\\\": 1}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_RemindTime\\' , \\'3\\' , \\'2_days_before(T)\\' , 3 , \\'{\\\"isAllDay\\\": true, \\\"day\\\": 2}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_RemindTime\\' , \\'4\\' , \\'1_week_before(T)\\' , 4 , \\'{\\\"isAllDay\\\": true, \\\"day\\\": 7}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_RemindTime\\' , \\'5\\' , \\'At_time_of_event\\' , 5 , \\'{\\\"isAllDay\\\": false, \\\"min\\\": 0}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_RemindTime\\' , \\'6\\' , \\'5_minutes_before\\' , 6 , \\'{\\\"isAllDay\\\": false, \\\"min\\\": 5}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_RemindTime\\' , \\'7\\' , \\'15_minutes_before\\' , 7 , \\'{\\\"isAllDay\\\": false, \\\"min\\\": 15}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_RemindTime\\' , \\'8\\' , \\'30_minutes_before\\' , 8 , \\'{\\\"isAllDay\\\": false, \\\"min\\\": 30}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_RemindTime\\' , \\'9\\' , \\'1_hour_before\\' , 9 , \\'{\\\"isAllDay\\\": false, \\\"min\\\": 60}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_RemindTime\\' , \\'10\\' , \\'2_hours_before\\' , 10 , \\'{\\\"isAllDay\\\": false, \\\"min\\\": 120}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_RemindTime\\' , \\'11\\' , \\'1_day_before(F)\\' , 11 , \\'{\\\"isAllDay\\\": false,\\\"min\\\": 1440}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_RemindTime\\' , \\'12\\' , \\'2_days_before(F)\\' , 12 , \\'{\\\"isAllDay\\\": false, \\\"min\\\": 2880}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Calendar_RemindTime\\' , \\'13\\' , \\'1_week_before(F)\\' , 13 , \\'{\\\"isAllDay\\\": false, \\\"min\\\": 10080}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Font_Size\\' , \\'1\\' , \\'Small\\' , 1 , '{}' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Font_Size\\' , \\'2\\' , \\'Midden\\' , 2 , '{}' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Font_Size\\' , \\'3\\' , \\'Large\\' , 3 , '{}' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'GoalSetting_AnnualConvention\\' , \\'1\\' , \\'Allianz_Star_Club\\' , 1 , '{}' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'GoalSetting_AnnualConvention\\' , \\'2\\' , \\'Summit_Trip\\' , 2 , '{}' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'GoalSetting_AnnualConvention\\' , \\'3\\' , \\'Long_Term_Incentive_Trip_Program\\' , 3 , '{}' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'GoalSetting_MDRT\\' , \\'1\\' , \\'MDRT\\' , 1 , '{}' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'GoalSetting_MDRT\\' , \\'2\\' , \\'COT\\' , 2 , '{}' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'GoalSetting_MDRT\\' , \\'3\\' , \\'TOT\\' , 3 , '{}' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Promotion_Plan\\' , \\'1\\' , \\'JobGrade_SP\\' , 1 , \\'{\\\"MappingJobGrade\\\": \\\"SA\\\"}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Promotion_Plan\\' , \\'2\\' , \\'JobGrade_AM\\' , 2 , \\'{\\\"MappingJobGrade\\\": \\\"SP\\\"}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n        // cmd.push(\"INSERT INTO TW_LH_SD_Code (TypeID , Code , MappingID , Orders , Arguments , CreateBy , CreateTime , UpdateBy , UpdateTime) VALUES ( \\'Promotion_Plan\\' , \\'3\\' , \\'JobGrade_SM\\' , 3 , \\'{\\\"MappingJobGrade\\\": \\\"AM\\\"}\\' ,\\'admin\\',\\'2019/01/23 12:00:00\\',\\'admin\\',\\'2019/01/23 12:00:00\\');\");\n\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_DeviceInfo (Category TEXT PRIMARY KEY,CategoryVal TEXT NOT NULL,UpdateTime NUMBER NOT NULL);\");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DeviceInfo VALUES ('OfflineLoginFailCount','{\\\"count\\\":0}',1553855173876);\");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DeviceInfo VALUES ('OfflineValidationToken','{\\\"token\\\":\\\"\\\"}',1553855173876);\");\n\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_DataSync_Time (FuncID TEXT PRIMARY KEY,BackendTime INT,FrontendTime INT,LastUpdate INT);\");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DataSync_Time VALUES ('MESSAGE',0,0,1); \");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DataSync_Time VALUES ('YEAR_CONFIG',0,0,1); \");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DataSync_Time VALUES ('AGENCY_PLAN',0,0,1); \");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DataSync_Time VALUES ('GOAL',0,0,1); \");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DataSync_Time VALUES ('ACTUAL',0,0,1); \");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DataSync_Time VALUES ('CUSTOMER',0,0,1); \");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DataSync_Time VALUES ('CUSTOMER_CONTACT',0,0,1); \");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DataSync_Time VALUES ('CALENDAR',0,0,1); \");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DataSync_Time VALUES ('PROGRESS',0,0,1); \");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DataSync_Time VALUES ('GOAL_EXPECTED',0,0,1); \");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DataSync_Time VALUES ('PROFILE_CODE',0,0,1); \");\n\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_DataSync_Function (FuncID TEXT PRIMARY KEY,MainFunc TEXT NOT NULL);\");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DataSync_Function VALUES ('MESSAGE','Homepage'); \");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DataSync_Function VALUES ('GOAL','Goal_Setting'); \");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DataSync_Function VALUES ('YEAR_CONFIG','Goal_Setting'); \");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DataSync_Function VALUES ('AGENCY_PLAN','Goal_Setting'); \");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DataSync_Function VALUES ('ACTUAL','Goal_Setting'); \");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DataSync_Function VALUES ('GOAL_EXPECTED','Goal_Setting'); \");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DataSync_Function VALUES ('CUSTOMER','Customer'); \");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DataSync_Function VALUES ('CUSTOMER_CONTACT','Customer'); \");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DataSync_Function VALUES ('CALENDAR','Calendar'); \");\n        cmd.push(\"INSERT OR IGNORE INTO TW_LH_SD_DataSync_Function VALUES ('PROGRESS','Progress'); \");\n\n        cmd.push(\"CREATE VIEW IF NOT EXISTS TW_LH_SD_VW_FuncSync_Time AS SELECT * FROM TW_LH_SD_DataSync_Function LEFT JOIN TW_LH_SD_DataSync_Time ON TW_LH_SD_DataSync_Function.FuncID = TW_LH_SD_DataSync_Time.FuncID GROUP BY TW_LH_SD_DataSync_Function.MainFunc;\");\n\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Language (LanguageID TEXT PRIMARY KEY,Name TEXT,IsDefault TEXT);\");\n        // cmd.push('INSERT OR IGNORE INTO TW_LH_SD_Language (LanguageID ,Name,IsDefault) VALUES (\\'en\\',\\'English\\',\\'Y\\')');\n        // cmd.push('INSERT OR IGNORE INTO TW_LH_SD_Language (LanguageID ,Name,IsDefault) VALUES (\\'zh_TW\\',\\'ä¸­æ\\',\\'N\\')');\n\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Error_Log (ErrorID TEXT PRIMARY KEY, Message TEXT, Time NUMBER, Stack TEXT, DeviceModel TEXT, DeviceSystem TEXT, IsSend TEXT)\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Action_Log (ActionID TEXT PRIMARY KEY, Action TEXT, Function TEXT, Time NUMBER, Valid TEXT, Message TEXT, DeviceModel TEXT, DeviceSystem TEXT, IsSend TEXT)\");\n\n        return cmd;\n    }\n    public createMainTableCommand(): Array<string> {\n        let cmd = [];\n\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Calendar_Extension (ClientID TEXT PRIMARY KEY,CalendarID INT);\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Calendar (ClientID TEXT PRIMARY KEY,CalendarID INT,CustomerClientID TEXT,Title TEXT NOT NULL,Location TEXT,CalendarType TEXT NOT NULL,IsAllDay TEXT NOT NULL,StartTime INT NOT NULL,EndTime INT NOT NULL,IsAlert TEXT NOT NULL,Alert1 TEXT,Alert2 TEXT,Alert3 TEXT,Remark TEXT,DataSource TEXT NOT NULL,ClientTime INT NOT NULL,IsDelete TEXT NOT NULL,DataTime INT DEFAULT NULL);\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Customer_Address_Extension (ClientID TEXT PRIMARY KEY,CustomerClientID INT);\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Customer_Email_Extension (ClientID TEXT PRIMARY KEY,CustomerClientID INT);\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Customer_Tel_Extension (ClientID TEXT PRIMARY KEY,CustomerClientID INT);\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Customer_Contact_Extension (ClientID TEXT PRIMARY KEY,CustomerClientID INT,ContactID INT);\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Customer_Extension (ClientID TEXT PRIMARY KEY,CustomerID INT,RecentStatus TEXT,MANPA TEXT);\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Customer_Address (ClientID TEXT PRIMARY KEY,CustomerClientID TEXT NOT NULL,AddressType TEXT,Country TEXT , City TEXT,Area TEXT,Zipcode TEXT,Address TEXT,DataSource TEXT NOT NULL);\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Customer_Email (ClientID TEXT PRIMARY KEY,CustomerClientID TEXT NOT NULL,EmailType TEXT,Email TEXT,DataSource TEXT NOT NULL);\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Customer_Tel (ClientID TEXT PRIMARY KEY,CustomerClientID TEXT NOT NULL,TelType TEXT,Tel TEXT,DataSource TEXT NOT NULL);\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Customer_Contact (ClientID TEXT PRIMARY KEY,CustomerClientID TEXT NOT NULL,ContactID INT,Note TEXT NOT NULL,NoteTime INT NOT NULL,DataTime INT,ClientTime INT NOT NULL,IsDelete TEXT);\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Customer (ClientID TEXT PRIMARY KEY,CustomerID INT,FirstName TEXT,LastName TEXT,Occupation TEXT,Company TEXT,BirthdayYear TEXT,BirthdayMonth TEXT,BirthdayDate TEXT,Age INT,AgeRange TEXT,Gender TEXT,Income TEXT,Source TEXT,Marriage TEXT,Children TEXT,Familiarity TEXT,ContactFrequancy TEXT,Possibility TEXT,IsFollow TEXT NOT NULL,DataTime INT,DataTimeBackend INT,DataSource TEXT,ClientTime INT NOT NULL,PartId INT,IsDelete TEXT,Completeness INT NOT NULL,IsOverTimeAlert TEXT);\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Personal_Setting (SettingID TEXT PRIMARY KEY,SettingName TEXT NOT NULL , SettingVal Text NOT NULL);\");\n        cmd.push(\"CREATE VIEW IF NOT EXISTS TW_LH_SD_VW_Customer AS SELECT * FROM TW_LH_SD_Customer LEFT JOIN TW_LH_SD_Customer_Extension ON TW_LH_SD_Customer.ClientID = TW_LH_SD_Customer_Extension.ClientID;\");\n        cmd.push(\"CREATE VIEW IF NOT EXISTS TW_LH_SD_VW_Calendar AS SELECT * FROM TW_LH_SD_Calendar LEFT JOIN TW_LH_SD_Calendar_Extension ON TW_LH_SD_Calendar.ClientID = TW_LH_SD_Calendar_Extension.ClientID;\");\n        cmd.push(\"CREATE VIEW IF NOT EXISTS TW_LH_SD_VW_Customer_Contact AS SELECT * FROM TW_LH_SD_Customer_Contact LEFT JOIN TW_LH_SD_Customer_Contact_Extension ON TW_LH_SD_Customer_Contact.ClientID = TW_LH_SD_Customer_Contact_Extension.ClientID;\");\n        cmd.push(\"CREATE VIEW IF NOT EXISTS TW_LH_SD_VW_Customer_Address AS SELECT * FROM TW_LH_SD_Customer_Address LEFT JOIN TW_LH_SD_Customer_Address_Extension ON TW_LH_SD_Customer_Address.ClientID = TW_LH_SD_Customer_Address_Extension.ClientID;\");\n        cmd.push(\"CREATE VIEW IF NOT EXISTS TW_LH_SD_VW_Customer_Tel AS SELECT * FROM TW_LH_SD_Customer_Tel LEFT JOIN TW_LH_SD_Customer_Tel_Extension ON TW_LH_SD_Customer_Tel.ClientID = TW_LH_SD_Customer_Tel_Extension.ClientID;\");\n        cmd.push(\"CREATE VIEW IF NOT EXISTS TW_LH_SD_VW_Customer_Email AS SELECT * FROM TW_LH_SD_Customer_Email LEFT JOIN TW_LH_SD_Customer_Email_Extension ON TW_LH_SD_Customer_Email.ClientID = TW_LH_SD_Customer_Email_Extension.ClientID;\");\n\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Message (ClientID TEXT NOT NULL PRIMARY KEY, MessageID INT NOT NULL , MessageCategory TEXT NOT NULL, MessageType TEXT NOT NULL, Title TEXT NOT NULL, Description TEXT, Arguments TEXT, Status TEXT NOT NULL, IsClick TEXT NOT NULL, IsPopup TEXT NOT NULL, IsShow TEXT NOT NULL, LinkStatus TEXT NOT NULL, MessageTime INT NOT NULL, Extensions TEXT, IsDelete TEXT NOT NULL, ClientTime INT NOT NULL, DataTime INT);\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Message_Extension (ClientID TEXT NOT NULL PRIMARY KEY, MessageID INT NOT NULL);\");\n        cmd.push(\"CREATE VIEW IF NOT EXISTS TW_LH_SD_VW_Message AS SELECT * FROM TW_LH_SD_Message LEFT JOIN TW_LH_SD_Message_Extension ON TW_LH_SD_Message.ClientID = TW_LH_SD_Message_Extension.ClientID;\");\n\n\n        cmd.push('INSERT OR IGNORE INTO TW_LH_SD_Personal_Setting (SettingID ,SettingName,SettingVal) VALUES (\\'CustomerFilterSetting\\',\\'å®¢æ¶Filteré è¨­æ¢ä»¶\\',\\'{}\\')');\n        cmd.push('INSERT OR IGNORE INTO TW_LH_SD_Personal_Setting (SettingID ,SettingName,SettingVal) VALUES (\\'CalendarFilterSetting\\',\\'æ¥æFilteré è¨­æ¢ä»¶\\',\\'{}\\')');\n        cmd.push('INSERT OR IGNORE INTO TW_LH_SD_Personal_Setting (SettingID ,SettingName,SettingVal) VALUES (\\'FontSizeSetting\\',\\'å­é«å¤§å°é è¨­æ¢ä»¶\\',\\'{}\\')');\n\n\n        //goal-setting & progress table \n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Year_Config (ClientID TEXT PRIMARY KEY, DataYear INTEGER, IsCurrent TEXT, PerformanceSettlementMonth INTEGER, WorkingQuarter INTEGER, WorkingMonth INTEGER, QuarterStartMonth INTEGER, QuarterEndMonth INTEGER, InitialPreCaseFyfc INTEGER, FyfcCovertAnpRate REAL, InforceConvertFindRate REAL, InforceConvertScheduleRate REAL, InforceConvertMeetRate REAL, InforceConvertSubmitRate REAL, ProgressDayPointsLimit INTEGER, InforceConvertPointBase REAL, FindConvertPointBase REAL, ScheduleConvertPointBase REAL, MeetConvertPointBase REAL, SubmitConvertPointBase REAL, GoalSettingActivityProcMode TEXT, ProgressBarControlMode TEXT, GoalAndPlanDifferenceLimit REAL, NowToYearEndDays INTEGER, MonthQuantityOfYear INTEGER)\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Year_Config_Extension (ClientID TEXT PRIMARY KEY);\");\n        cmd.push(\"CREATE VIEW IF NOT EXISTS TW_LH_SD_VW_Year_Config AS SELECT * FROM TW_LH_SD_Year_Config LEFT JOIN TW_LH_SD_Year_Config_Extension ON TW_LH_SD_Year_Config.ClientID = TW_LH_SD_Year_Config_Extension.ClientID;\");\n\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Goal_Setting (ClientID TEXT PRIMARY KEY, DataYear INTEGER, IsNeedSetting TEXT, IsFirstTime TEXT, ApproveStatus TEXT, Remainingdays INTEGER, GoalSetMonth INTEGER, PersonnelGoalApplicableYM INTEGER, TeamGoalApplicableYM INTEGER, SupervisorComment TEXT)\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Goal_Setting_Extension (ClientID TEXT PRIMARY KEY);\");\n        cmd.push(\"CREATE VIEW IF NOT EXISTS TW_LH_SD_VW_Goal_Setting AS SELECT * FROM TW_LH_SD_Goal_Setting LEFT JOIN TW_LH_SD_Goal_Setting_Extension ON TW_LH_SD_Goal_Setting.ClientID = TW_LH_SD_Goal_Setting_Extension.ClientID;\");\n\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Goal_Setting_Value (ClientID TEXT PRIMARY KEY, DataYear INTEGER, DataType TEXT, Value TEXT)\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Goal_Setting_Plan_Value (ClientID TEXT PRIMARY KEY, DataYear INTEGER, PerformanceType TEXT, Month INTEGER, Value INTEGER)\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Goal_Setting_Plan_Value_Extension (ClientID TEXT PRIMARY KEY);\");\n        cmd.push(\"CREATE VIEW IF NOT EXISTS TW_LH_SD_VW_Goal_Setting_Plan_Value AS SELECT * FROM TW_LH_SD_Goal_Setting_Plan_Value LEFT JOIN TW_LH_SD_Goal_Setting_Plan_Value_Extension ON TW_LH_SD_Goal_Setting_Plan_Value.ClientID = TW_LH_SD_Goal_Setting_Plan_Value_Extension.ClientID;\");\n\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Goal_Setting_Expected (ClientID TEXT PRIMARY KEY, DataYear INTEGER, Q1 INTEGER, Q2 INTEGER, Q3 INTEGER, Q4 INTEGER, FYFC INTEGER, ANP INTEGER, ClientTime INTEGER, DataTime INTEGER)\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Goal_Setting_Expected_Extension (ClientID TEXT PRIMARY KEY);\");\n        cmd.push(\"CREATE VIEW IF NOT EXISTS TW_LH_SD_VW_Goal_Setting_Expected AS SELECT * FROM TW_LH_SD_Goal_Setting_Expected LEFT JOIN TW_LH_SD_Goal_Setting_Expected_Extension ON TW_LH_SD_Goal_Setting_Expected.ClientID = TW_LH_SD_Goal_Setting_Expected_Extension.ClientID;\");\n\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Actual_Value (ClientID TEXT PRIMARY KEY, DataYear INTEGER, PerformanceType TEXT, DataType TEXT, Month INTEGER, Value REAL)\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Actual_Value_Extension (ClientID TEXT PRIMARY KEY);\");\n        cmd.push(\"CREATE VIEW IF NOT EXISTS TW_LH_SD_VW_Actual_Value AS SELECT * FROM TW_LH_SD_Actual_Value LEFT JOIN TW_LH_SD_Actual_Value_Extension ON TW_LH_SD_Actual_Value.ClientID = TW_LH_SD_Actual_Value_Extension.ClientID;\");\n\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Agency_Plan_Main (ClientID TEXT PRIMARY KEY, DataYear INTEGER , DataType TEXT, Forecast INTEGER, Actual INTEGER, MonthPlan INTEGER)\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Agency_Plan_Main_Extension (ClientID TEXT PRIMARY KEY);\");\n        cmd.push(\"CREATE VIEW IF NOT EXISTS TW_LH_SD_VW_Agency_Plan_Main AS SELECT * FROM TW_LH_SD_Agency_Plan_Main LEFT JOIN TW_LH_SD_Agency_Plan_Main_Extension ON TW_LH_SD_Agency_Plan_Main.ClientID = TW_LH_SD_Agency_Plan_Main_Extension.ClientID;\");\n\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Agency_Detail_Data (ClientID TEXT PRIMARY KEY, DataYear INTEGER, DirectUnitType TEXT, DataType TEXT, AgentID TEXT, AgentName TEXT, JobGrade TEXT, IsApprove TEXT, Drilldown TEXT, AppUseMode TEXT,Goal INTEGER, Forecast INTEGER, Actual REAL, MonthPlan INTEGER, Manpower INTEGER, Recruitment INTEGER, CaseCount INTEGER, PerCase INTEGER, Orders INTEGER)\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Agency_Detail_Data_Extension (ClientID TEXT PRIMARY KEY);\");\n        cmd.push(\"CREATE VIEW IF NOT EXISTS TW_LH_SD_VW_Agency_Detail_Data AS SELECT * FROM TW_LH_SD_Agency_Detail_Data LEFT JOIN TW_LH_SD_Agency_Detail_Data_Extension ON TW_LH_SD_Agency_Detail_Data.ClientID = TW_LH_SD_Agency_Detail_Data_Extension.ClientID;\");\n\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Personal_Progress (ClientID TEXT PRIMARY KEY, DataYear INTEGER, TimeBase TEXT, DataType TEXT, Find INTEGER, Schedule INTEGER, Meet INTEGER, Submit INTEGER, Inforce INTEGER, FYFC INTEGER)\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Personal_Progress_Extension (ClientID TEXT PRIMARY KEY);\");\n        cmd.push(\"CREATE VIEW IF NOT EXISTS TW_LH_SD_VW_Personal_Progress AS SELECT * FROM TW_LH_SD_Personal_Progress LEFT JOIN TW_LH_SD_Personal_Progress_Extension ON TW_LH_SD_Personal_Progress.ClientID = TW_LH_SD_Personal_Progress_Extension.ClientID;\");\n\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Team_Progress_Main (ClientID TEXT PRIMARY KEY, DataYear INTEGER, TimeBase TEXT, DataType TEXT, Goal INTEGER, Forecast INTEGER, Actual INTEGER, Shortfall INTEGER)\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Team_Progress_Main_Extension (ClientID TEXT PRIMARY KEY);\");\n        cmd.push(\"CREATE VIEW IF NOT EXISTS TW_LH_SD_VW_Team_Progress_Main AS SELECT * FROM TW_LH_SD_Team_Progress_Main LEFT JOIN TW_LH_SD_Team_Progress_Main_Extension ON TW_LH_SD_Team_Progress_Main.ClientID = TW_LH_SD_Team_Progress_Main_Extension.ClientID;\");\n\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Team_Progress_Detail (ClientID TEXT PRIMARY KEY, DataYear INTEGER, TimeBase TEXT, DirectUnitType TEXT, AgentID TEXT, AgentName TEXT, JobGrade TEXT, TeamName TEXT, Drilldown TEXT, AppUseMode TEXT, DataType TEXT, Activities TEXT, Goal INTEGER, Forecast INTEGER, Actual INTEGER, Shortfall INTEGER, Orders INTEGER)\");\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Team_Progress_Detail_Extension (ClientID TEXT PRIMARY KEY);\");\n        cmd.push(\"CREATE VIEW IF NOT EXISTS TW_LH_SD_VW_Team_Progress_Detail AS SELECT * FROM TW_LH_SD_Team_Progress_Detail LEFT JOIN TW_LH_SD_Team_Progress_Detail_Extension ON TW_LH_SD_Team_Progress_Detail.ClientID = TW_LH_SD_Team_Progress_Detail_Extension.ClientID;\");\n\n        cmd.push(\"CREATE TABLE IF NOT EXISTS TW_LH_SD_Other_Parameter (ClientID TEXT PRIMARY KEY, DataYear INTEGER , MappingID TEXT, SetValue TEXT)\");\n\n        return cmd;\n\n    }\n}\n","export class Setting{\n    private _settingID : string;\n    private _settingName : string;\n    private _settingVal : string;\n\n    constructor(id,name,val) {\n        this._settingID = id;\n        this._settingName = name;\n        this._settingVal = val;\n    }\n\n    get SettingID() {\n        return this._settingID;\n    }\n\n    get SettingName() {\n        return this._settingName;\n    }\n\n    get SettingVal() {\n        return this._settingVal;\n    }\n}","import { IRestriction } from '../Restriction.interface';\nexport class AndCompoundRestriction implements IRestriction {\n    private restrictions : Array<IRestriction>;    \n    constructor(restrictions) {\n        this.restrictions = restrictions;\n    }\n    sqlString(): string {\n\n        let sqlString = '';\n        \n        this.restrictions.forEach(function(restriction , i){\n            if(i != 0)  sqlString += ' AND ';\n            sqlString += '' + restriction.sqlString();\n        });\n\n        return `(`+sqlString+`)`;\n    }\n\n    getValues() {\n        let values = new Array<string>();\n        this.restrictions.forEach(function(restriction , i){\n            let array = restriction.getValues();\n            values = values.concat(array);\n        });\n\n        return values;\n    }\n}","import { IRestriction } from '../Restriction.interface';\nexport class EqualRestriction implements IRestriction {\n    private column: string;\n    private values: Array<string>;\n    constructor(column, values = []) {\n        this.column = column;\n        this.values = values;\n    }\n    sqlString(): string {\n        return `${this.column} = ? `;\n    }\n    getValues() {\n        return this.values;\n    }\n}","import { IRestriction } from '../Restriction.interface';\nexport class GreaterOrEqualRestriction implements IRestriction {\n    private column: string;\n    private values: Array<string>;\n    constructor(column, values = []) {\n        this.column = column;\n        this.values = values;\n    }\n    sqlString(): string {\n        return `${this.column} >= ? `;\n    }\n    getValues() {\n        return this.values;\n    }\n}","import { IRestriction } from '../Restriction.interface';\nexport class GreaterRestriction implements IRestriction {\n    private column: string;\n    private values: Array<string>;\n    constructor(column, values = []) {\n        this.column = column;\n        this.values = values;\n    }\n    sqlString(): string {\n        return `${this.column} > ? `;\n    }\n    getValues() {\n        return this.values;\n    }\n}","import { IRestriction } from '../Restriction.interface';\nexport class InRestriction implements IRestriction {\n    private column: string;\n    private values: Array<string>;\n    constructor(column, values = []) {\n        this.column = column;\n        this.values = values;\n    }\n    sqlString(): string {\n        var str = Array(this.values.length).fill('?').join(',');\n        return `${this.column} IN (${str}) `;\n    }\n    getValues() {\n        return this.values;\n    }\n}","import { IRestriction } from '../Restriction.interface';\nexport class LessOrEqualRestriction implements IRestriction {\n    private column: string;\n    private values: Array<string>;\n    constructor(column, values = []) {\n        this.column = column;\n        this.values = values;\n    }\n    sqlString(): string {\n        return `${this.column} <= ? `;\n    }\n    getValues() {\n        return this.values;\n    }\n}","import { IRestriction } from '../Restriction.interface';\nexport class LikeRestriction implements IRestriction {\n    private column: string;\n    private values: Array<string>;\n    constructor(column, values = []) {\n        this.column = column;\n\n\n        let newArray = [];\n        values.forEach(val => {\n            newArray.push('%' + val + '%');\n        });\n\n        this.values = newArray;\n\n        \n    }\n    sqlString(): string {\n        return `${this.column} LIKE ? `;\n    }\n\n    getValues() {\n        return this.values;\n    }\n}","import { IRestriction } from '../Restriction.interface';\nexport class NotNullRestriction implements IRestriction {\n    private column: string;\n    private values: Array<string>;\n    constructor(column, values = []) {\n        this.column = column;\n        this.values = values;\n    }\n    sqlString(): string {\n        return `${this.column} IS NOT NULL `;\n    }\n\n    getValues() {\n        return this.values;\n    }\n}","import { IRestriction } from '../Restriction.interface';\nexport class NullRestriction implements IRestriction {\n    private column: string;\n    private values: Array<string>;\n    constructor(column, values = []) {\n        this.column = column;\n        this.values = values;\n    }\n    sqlString(): string {\n        return `${this.column} IS NULL `;\n    }\n\n    getValues() {\n        return this.values;\n    }\n}","import { IRestriction } from '../Restriction.interface';\nexport class ORCompoundRestriction implements IRestriction {\n    private restrictions : Array<IRestriction>;    \n    constructor(restrictions) {\n        this.restrictions = restrictions;\n    }\n    sqlString(): string {\n\n        let sqlString = '';\n        \n        this.restrictions.forEach(function(restriction , i){\n            if(i != 0)  sqlString += ' OR ';\n            sqlString += '' + restriction.sqlString();\n        });\n\n        return `(`+sqlString+`)`;\n    }\n\n    getValues() {\n        let values = new Array<string>();\n        this.restrictions.forEach(function(restriction , i){\n            let array = restriction.getValues();\n            values = values.concat(array);\n        });\n\n        return values;\n    }\n}","import { Injectable, Injector } from '@angular/core';\nimport { APIDispatch } from '../../api/APIDispatch';\nimport { SettingAPI } from '../../api/register/SettingAPI';\nimport { APIFactory } from '../../api/APIFactory';\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\nimport { Setting } from '../../bean/Setting';\nimport { SettingUpdateAPI } from '../../api/register/SettingUpdateAPI';\nimport { DeviceService } from '../../device';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SettingService {\n\n  private static settingMap = new Map<string, Setting>();\n  private _debugMode: boolean = false;\n  private _debugSubject: Subject<boolean> = new BehaviorSubject(this._debugMode);\n\n  constructor(\n    private injector: Injector\n  ) { }\n\n  public _fetchCodeData() {\n    let factory = this.getAPIFactory();\n    let dispatcher = this.getAPIDispatch();\n    let settingAPI: SettingAPI = <SettingAPI>factory.getAPI('getSetting');\n\n    console.debug('setting.service fetchCodeData', settingAPI);\n    return Observable.create((observer) => {\n      dispatcher.dispatch(settingAPI).subscribe((data) => {\n\n        let bodyDatas = data['Body'];\n        console.log('<--- Datas --->');\n        console.log(data);\n        for (let i = 0; i < bodyDatas.length; i++) {\n          let json = bodyDatas[i];\n          let setting = new Setting(json.SettingID, json.SettingName, json.SettingVal);\n\n          SettingService.settingMap.set(setting.SettingID, setting);\n        }\n\n        console.debug('profileCodeMap', SettingService.settingMap);\n        observer.next(true);\n        observer.complete();\n\n      })\n    })\n  }\n\n  public getSetting(settingID: string) {\n    return SettingService.settingMap.get(settingID);\n  }\n\n  public updateSetting(setting: Setting) {\n    let settingUpdateAPI: SettingUpdateAPI = <SettingUpdateAPI>this.getAPIFactory().getAPI('updateSetting');\n    settingUpdateAPI.setSettingObject(setting);\n    return Observable.create((observer) => {\n      this.getAPIDispatch().dispatch(settingUpdateAPI).subscribe((settingData) => {\n        this._fetchCodeData().subscribe(data => {\n          console.warn('_fetchCodeData', data);\n          observer.next(settingData['Header']);\n          observer.complete();\n        });\n      })\n    })\n  }\n\n  public setDebugMode(val: boolean) {\n    this._debugMode = val;\n    this._debugSubject.next(val);\n  }\n  public getDebugMode(): Observable<boolean> {\n    return this._debugSubject.asObservable();\n  }\n\n  public getAPIFactory(): APIFactory {\n    return this.injector.get(APIFactory);\n  }\n  public getAPIDispatch(): APIDispatch {\n    return this.injector.get(APIDispatch);\n  }\n\n  public getDeviceService(): DeviceService {\n    return this.injector.get(DeviceService);\n  }\n\n  public async deviceChange(token: string) {\n    console.log(\"device change firebase token:\", token);\n\n    let updatePushIDAPI = this.getAPIFactory().getAPI(\"UpdatePushID\");\n    let deviceService = this.getDeviceService();\n    if (updatePushIDAPI) {\n      let _body = {\n        PushId: token,\n        DeviceSystem: deviceService.getDevicePlatform(),\n        DeviceId: deviceService.getDeviceUUID(),\n        DeviceModel: deviceService.getDeviceManufacturer(),\n        DeviceType: deviceService.isPad() ? \"Pad\" : \"Phone\"\n      }\n      updatePushIDAPI[\"body\"] = _body;\n      let resp = await this.getAPIDispatch().dispatch(updatePushIDAPI).toPromise();\n      console.log(\"Update PushID resp:\", resp);\n    }\n\n  }\n}\n","export class ViewDateChange {\n    private _viewDate: Date;\n    private _action: ChangeAction;\n\n    constructor({ date, action }) {\n        this._viewDate = date;\n        this._action = action;\n    }\n\n    public get viewDate(): Date {\n        return this._viewDate;\n    }\n    public set viewDate(value: Date) {\n        this._viewDate = value;\n    }\n\n    public get action(): ChangeAction {\n        return this._action;\n    }\n    public set action(value: ChangeAction) {\n        this._action = value;\n    }\n\n}\n\nexport enum ChangeAction {\n    CLICK,\n    SWIPE\n}","export class ProfileCode{\n\n    private TypeID : string;\n    private Code : string;\n    private MappingID : string;\n    private Arguments : string;\n    public displayText : string;\n\n    public isCheck : boolean = false;\n  \n    constructor(TypeID:string,Code:string,MappingID : string,Arguments : string){\n        this.TypeID = TypeID;\n        this.Code = Code;\n        this.MappingID = MappingID;\n        this.Arguments = Arguments;\n    }\n\n    public setDisplayText(text : string) {\n        this.displayText = text;\n    }\n\n    public getCode() {\n        return this.Code;\n    }    \n\n    public getTypeId(){\n        return this.TypeID;\n    }\n\n    public getMappingID() {\n        return this.MappingID;\n    }\n\n    public getArguments() {\n        return this.Arguments;\n    }\n\n}\n","export class versionInfo {\n\n    constructor(path = '', version = '') {\n        this._path = path;\n        this._version = version;\n    }\n    private _version: string;\n    private _path: string;\n    public get path(): string {\n        return this._path;\n    }\n    public set path(value: string) {\n        this._path = value;\n    }\n    public get version(): string {\n        return this._version;\n    }\n    public set version(value: string) {\n        this._version = value;\n    }\n}","\nexport class SelectOption{\n    \n    private isDefault : boolean;\n    constructor(private value : string,private name : string) { }\n\n    public setIsDefault(isDefault : boolean) {\n        this.isDefault = isDefault;\n        return this;\n    }\n    public getName():string {\n        return this.name;\n    }\n\n    public getValue():string {\n        return this.value;\n    }\n\n    public setName(name : string):void {\n        this.name = name;\n    }\n\n    public setValue(value : string):void {\n        this.value = value;\n    }\n}\n","export class SuccessStatus {\n\n    private _isSuccess: boolean;\n\n    constructor(isSuccess){\n        this._isSuccess = isSuccess;\n    }\n    public get isSuccess(): boolean {\n        return this._isSuccess;\n    }\n    public set isSuccess(value: boolean) {\n        this._isSuccess = value;\n    }\n\n}","export class GoalExtension{\n\n    private _Key: string;\n    private _Value: string;\n\n\n    constructor(Key, Value){\n        this._Key = Key;\n        this._Value = Value;\n    }\n\n    public get Value(): string {\n        return this._Value;\n    }\n    public set Value(value: string) {\n        this._Value = value;\n    }\n    public get Key(): string {\n        return this._Key;\n    }\n    public set Key(value: string) {\n        this._Key = value;\n    }\n}","import { SubmitGoalInfo } from \"./SubmitGoalInfo\";\nimport { SubmitGoalSettingValue } from \"./SubmitGoalSettingValue\";\nimport { SubmitGoalPlan } from \"./SubmitGoalPlan\";\nimport { GoalExtension } from \"./GoalExtension\";\n\nexport class SubmitGoalData{\n\n    public SubmitInfo: SubmitGoalInfo;\n    public GoalValue: SubmitGoalSettingValue;\n    public GoalPlan: SubmitGoalPlan;\n    public Extensions: Array<GoalExtension> = [];\n\n    constructor(SubmitInfo,GoalValue,GoalPlan) {\n        this.SubmitInfo = SubmitInfo;\n        this.GoalValue = GoalValue;\n        this.GoalPlan = GoalPlan;\n    }\n\n}","import { SubmitGoalPlanInfo } from \"./SubmitGoalPlanInfo\";\nimport { TIMEBASE } from \"./CommonEnum\";\n\n\nexport class SubmitGoalPlan{\n    public TimeBase: TIMEBASE;\n\n    public Values: Array<SubmitGoalPlanInfo> = [];\n\n    constructor(){\n\n    }\n\n\n}","import { PERFORMANCETYPE } from \"./CommonEnum\";\nimport { GoalExtension } from \"./GoalExtension\";\n\nexport class SubmitGoalPlanInfo{\n\n    public PerformanceType: PERFORMANCETYPE;\n    public Month: number;\n    public Value: number;\n    public Extensions: Array<GoalExtension> = [];\n\n    constructor(PerformanceType: PERFORMANCETYPE, Month: number, Value: number, Extensions: Array<GoalExtension>) {\n        this.PerformanceType = PerformanceType;\n        this.Month = Month;\n        this.Value = Value;\n        this.Extensions = Extensions;\n    }\n    \n}","import { GoalExtension } from \"./GoalExtension\";\n\nexport class SubmitGoalSettingValue{\n\n    public DataType: string;\n    public Value: string;\n\n    public Extensions: Array<GoalExtension> = [];\n\n    constructor(DataType: string, Value:string, Extensions:Array<GoalExtension>) {\n        this.DataType = DataType;\n        this.Value = Value;\n        this.Extensions = Extensions;\n    }\n\n}","import { GoalExtension } from \"./GoalExtension\";\nimport {  SUBMITGOALTYPE, TIMEBASE, YESNO } from \"./CommonEnum\";\n\nexport class SubmitGoalInfo{\n\n    public DataYear: number;\n    public SubmitType: SUBMITGOALTYPE;\n    public ActivityGoalBase: TIMEBASE;\n    public IsNeedApprove: YESNO;\n    public Extensions: Array<GoalExtension> = [];\n \n    constructor() {\n\n    }\n\n}","import { Injectable, Optional, Inject } from '@angular/core';\nimport { IInitTask } from '../interface/InitialTask.interface';\nimport { TranslateService } from '../../language/translate.service';\nimport { DeviceService } from '../../device/device.service';\nimport {\n    fetchSettingFinishToken,\n    changeFontSizeToken,\n    FontSizeAccessToken,\n    ConfigToken\n} from '../../injectionToken';\nimport { CheckPermissionService } from '../../auth/permission/check-permission.service';\nimport { fetchSettingFinish } from '../interface/fetchSettingFinish.interface';\nimport { SettingService } from '../../service/setting/setting.service';\nimport { changeFontSize } from '../../interface/changeFontSize.interface';\nimport { IFontSizeAccess } from '../../interface';\nimport { AppRouter } from '../../route/AppRouter';\nimport { NotificationMgr } from '../../notification/NotificationMgr';\nimport { APPMODE } from '../../bean';\nimport { APPError } from '../../errorHandler/APPError';\nimport { NotificationType } from '../../notification/INotificationProvider.interface';\n\ndeclare var StatusBar;\ndeclare var cordova;\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class ConfigTask implements IInitTask {\n\n    constructor(\n        private translateService: TranslateService,\n        private deviceService: DeviceService,\n        private settingService: SettingService,\n        private appRouter: AppRouter,\n        private notificationMgr: NotificationMgr,\n        @Inject(ConfigToken) private APP_CONFIG,\n        @Optional() @Inject(fetchSettingFinishToken) private fetchSettingFinish: fetchSettingFinish,\n        @Optional() @Inject(changeFontSizeToken) private changeFontSize: changeFontSize,\n        @Optional() @Inject(FontSizeAccessToken) private fontSizeAccess: IFontSizeAccess,\n        private checkPermissionService: CheckPermissionService) { }\n    public async doTask(): Promise<any> {\n        console.log('do task');\n        var _this = this;\n        //do task\n        document.addEventListener(\"deviceready\", function () {\n            _this.deviceService.initDeviceAPI();\n            if ((<any>cordova).plugins.AndroidFontSize) {\n                (<any>cordova).plugins.AndroidFontSize.removeSystemFontSize();\n            }\n            if (_this.deviceService.getDevicePlatform() == 'Android') {\n                document.addEventListener('screenshotDetect', function () {\n                    alert('Screenshot');\n                }, false)\n            } else if (_this.deviceService.getDevicePlatform() == 'iOS') {\n                document.addEventListener(\"screenshot\", function () {\n                    _this.notificationMgr.pushNotification(NotificationType.ScreenShotAlert, {});\n                }, false);\n            }\n            // StatusBar.overlaysWebView(false);\n            // StatusBar.styleBlackTranslucent();\n            // StatusBar.show();\n        }, false);\n\n        this.integrationCheck();\n        this.checkPermissionService.init();\n        this.appRouter.init();\n        await Promise.all([this.fetchLanguage(), this.fetchLanguageList(), this.fetchSetting(), this.loadLanguageFile()]);\n\n    }\n\n    private fetchLanguage(): Promise<any> {\n        console.log(\"fetch language func\");\n        return new Promise((res, rej) => {\n            this.translateService._fetchCurrentLanguage().subscribe((resp) => {\n                console.log(\"_fetchCurrentLanguage resp:\", resp);\n                res(resp);\n            });\n        });\n    }\n\n    private fetchLanguageList(): Promise<any> {\n        console.log(\"fetch language List\");\n        return new Promise((res, rej) => {\n            this.translateService._fetchCodeData().subscribe((resp) => {\n                res(resp);\n            });\n        })\n    }\n\n    private integrationCheck() {\n        try {\n            let needCheckKey = ['SNDToken', 'SNDLanguage'];\n            if (this.APP_CONFIG.APP_MODE === APPMODE.Integration) {\n                // Check LocalStorage\n                let result = needCheckKey\n                    .filter(key => !this.deviceService.getLocalStorage(key))\n                    .map(key => `Integration mode failed: ${key} not found in localstorage. Please set ${key} into localstorage before switch to S&D.`);\n                if (result.length > 0)\n                    throw new Error(result[0]);\n            }\n        } catch (error) {\n            alert('Integration failed. Please check console for more details.');\n            throw new APPError('F00704', error.message);\n        }\n\n    }\n\n    private fetchSetting(): Promise<any> {\n        console.debug('fetch setting');\n        return new Promise((res, rej) => {\n\n            this.settingService._fetchCodeData().subscribe((resp) => {\n                if (this.changeFontSize) {\n                    if (this.fontSizeAccess) {\n                        this.fontSizeAccess.getFontSize().subscribe((resp) => {\n                            this.changeFontSize.updateFontSize(resp);\n                        })\n                    }\n                }\n\n                if (this.fetchSettingFinish) {\n                    this.fetchSettingFinish.fetchSettingFinish(resp);\n                }\n                res(resp);\n            });\n        })\n\n    }\n\n    private async loadLanguageFile(): Promise<any> {\n        await this.translateService.init();\n    }\n}\n","import { Injectable, Optional, Inject, ErrorHandler } from '@angular/core';\nimport { IInitTask } from '../interface/InitialTask.interface';\nimport { DeviceService } from '../../device/device.service';\nimport { checkRoot } from '../interface/checkRoot.interface';\nimport { checkForRootToken, NetworkChangeToken } from '../../injectionToken';\nimport { fromEvent } from 'rxjs';\nimport { NetworkChange } from '../../device/NetworkChange.interface';\n\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DeviceTask implements IInitTask {\n\n    constructor(\n        private deviceService: DeviceService,\n        private errorHandler: ErrorHandler,\n        @Optional() @Inject(checkForRootToken) private customCheckRoot: checkRoot,\n        @Optional() @Inject(NetworkChangeToken) private networkChange: NetworkChange\n    ) { }\n\n    public doTask(): Promise<any> {\n        console.log('do device task');\n        return new Promise((res, rej) => {\n            //do task\n            //check for root\n            console.log('has inject custom root:', this.customCheckRoot);\n            try {\n                if (this.customCheckRoot) {\n                    this.customCheckRoot.checkRoot().then((resp) => {\n                        if (resp)\n                            this.customCheckRoot.rootedAction();\n                        res();\n                    })\n                }\n                else {\n                    this.deviceService.checkIfRoot().then(resp => {\n                        console.log('check root resp:', resp);\n                        if (resp) {\n                            alert(\"device has rooted!\");\n                            this.deviceService.exitApp();\n                        }\n                        res();\n                    }, errMsg => {\n                        console.warn(errMsg);\n                    })\n                }\n\n                //device network event\n                fromEvent(document, 'online').pipe(\n                    // debounceTime(5000)\n                ).subscribe(() => {\n                    this.networkChange.change('online',true);\n                })\n                fromEvent(document, 'offline').pipe(\n                    // debounceTime(5000)\n                ).subscribe(() => {\n                    this.networkChange.change('offline',true);\n                })\n            } catch (error) {\n                console.warn(\"cannot detect rooted device.\");\n                this.errorHandler.handleError(error);\n                res();\n            }\n\n        });\n    }\n}","import { Observable } from 'rxjs';\nimport { IAPI } from '../API.interface';\nimport { IMockAPI } from '../MockAPI.interface';\nimport { ISQLiteAPI } from '../SQLiteAPI.interface';\nimport { DaoFactory } from '../../device/sqlite/DaoFactory';\nimport { SQLiteTable } from '../../device/sqlite/SQLiteTable';\nimport { GreaterOrEqualRestriction } from '../../device/sqlite/restrictions/GreaterOrEqualRestriction';\n\nexport class ProfileCodeAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n  private _DaoFactory;\n  constructor(DaoFactory: DaoFactory) {\n    this._DaoFactory = DaoFactory;\n  }\n\n  getAPIName(): string {\n    return 'getProfileCode';\n  }\n\n  getMockPath(): string {\n    return './assets/mock/getCode.json';\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let profileObj = this._DaoFactory.getTable('Profile', 'TW_LH_SD_Code');\n      let dao = this._DaoFactory.getDao('Profile');\n      if (profileObj != undefined) {\n        (<SQLiteTable>profileObj).addRestriction(new GreaterOrEqualRestriction(\"ValidityPeriod\", [Date.now()]));\n        dao.queryByTable(profileObj).subscribe((resp) => {\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n\n}\n","import { Observable } from 'rxjs';\nimport { IAPI } from '../API.interface';\nimport { IMockAPI } from '../MockAPI.interface';\nimport { ISQLiteAPI } from '../SQLiteAPI.interface';\nimport { DaoFactory } from '../../device/sqlite/DaoFactory';\nimport { SQLiteTable } from '../../device/sqlite/SQLiteTable';\nimport { ClientCustomDao } from '../../device/sqlite/ClientCustomDao';\n\nexport class SettingAPI implements IAPI, IMockAPI, ISQLiteAPI {\n  private _DaoFactory: DaoFactory;\n  constructor(DaoFactory) {\n    this._DaoFactory = DaoFactory;\n  }\n\n  getAPIName(): string {\n    return 'getSetting';\n  }\n\n  getMockPath(): string {\n    return './assets/mock/getPersonalSetting.json';\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let settingObj = this._DaoFactory.getDefaultTable(\"TW_LH_SD_Personal_Setting\");\n      let dao = this._DaoFactory.getDefaultDao();\n\n      if (settingObj != undefined && dao != undefined) {\n        settingObj = (<SQLiteTable>settingObj);\n        dao = new ClientCustomDao(dao);\n        dao.queryByTable(settingObj).subscribe((resp) => {\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n\n}\n","import { IAPI } from \"../API.interface\";\nimport { IMockAPI } from \"../MockAPI.interface\";\n\nexport class ExtensionConfigAPI implements IAPI , IMockAPI {\n    \n\n    getAPIName() : string {\n        return 'getExtensionConfig';\n    }\n\n    getMockPath() : string {\n        return './assets/config/extension-config.json';\n    }\n\n   \n    \n}\n","\nimport { Observable, of, from } from \"rxjs\";\nimport { IAPI } from \"../API.interface\";\nimport { ISQLiteAPI } from \"../SQLiteAPI.interface\";\nimport { DaoFactory } from \"../../device/sqlite/DaoFactory\";\nimport { EqualRestriction } from \"../../device/sqlite/restrictions/EqualRestriction\";\n\nexport class OfflineAuthAPI implements IAPI, ISQLiteAPI {\n\n\n    constructor(\n        private daoFactory: DaoFactory,\n        private APP_CONFIG: any\n    ) {\n\n    }\n\n    public token = '';\n    private failTry: number = null;\n\n    getAPIName(): string {\n        return 'offlineAuth';\n    }\n    executeSQL(): Observable<any> {\n        // return sha-256: \"test||test\"\n        return from(this._offlineAuth());\n\n    }\n\n    private async _offlineAuth() {\n        let env = this.APP_CONFIG.ENV;\n        this.failTry = this.APP_CONFIG[env].OFFLINE_LOGIN_MAX_TIMES || 999;\n        let authResp = null;\n        let infoObj = this.daoFactory.getTable(\"Profile\", \"TW_LH_SD_DeviceInfo\");\n        let dao = this.daoFactory.getDao(\"Profile\");\n        let resp = await dao.queryByTable(infoObj).toPromise();\n        console.log('query device info resp:', resp);\n\n        let body = resp.Body;\n        let failCount = parseInt(body.filter(x => x.Category == \"OfflineLoginFailCount\").map(x => JSON.parse(x.CategoryVal)[\"count\"])[0]);\n        let offline_token = body.filter(x => x.Category == \"OfflineValidationToken\").map(x => JSON.parse(x.CategoryVal)[\"token\"])[0];\n        let info_token = body.filter(x => x.Category == \"OfflineValidationToken\").map(x => JSON.parse(x.CategoryVal)[\"infoToken\"])[0];\n        let lastLoginTIme = body.filter(x => x.Category == \"OfflineValidationToken\").map(x => x.UpdateTime)[0];\n\n\n        console.group(\"offline auth:\");\n        console.log(\"failCount:\", failCount);\n        console.log(\"offline_token:\", offline_token);\n        console.log('this.token:', this.token);\n        console.log(\"lastLoginTime:\", lastLoginTIme);\n        console.groupEnd();\n\n\n        if (offline_token == \"\" || (Date.now() - lastLoginTIme) >= 86400000) {\n            authResp = { isSuccess: false, message: 'First_Login_Must_Online' };\n        }\n        else if (failCount >= this.failTry) {\n            authResp = { isSuccess: false, message: \"Wrong_Counts_Over_Max\", failCount: -1};\n        }\n        else {\n            console.log('offline fail count:', failCount);\n            if (this.token === offline_token) {\n                //offline login success, set count to zero\n                infoObj.setValue(\"CategoryVal\", '{\"count\":0}');\n                infoObj.addRestriction(new EqualRestriction(\"Category\", [\"OfflineLoginFailCount\"]));\n                let setCountResp = await dao.updateByTable(infoObj).toPromise();\n                console.log('set count to zero resp:', setCountResp);\n                authResp = { isSuccess: true, token: info_token };\n            }\n            else {\n                let addFailCount = failCount + 1;\n                infoObj.setValue(\"CategoryVal\", `{\"count\":${addFailCount}}`);\n                infoObj.addRestriction(new EqualRestriction(\"Category\", [\"OfflineLoginFailCount\"]));\n                let setCountResp = await dao.updateByTable(infoObj).toPromise();\n                console.log('plus one count:', setCountResp);\n                authResp = { isSuccess: false, message: \"Offline_Login_Locked\", failCount: addFailCount };\n            }\n        }\n\n        return authResp;\n\n    }\n}\n","\nimport { Observable, of } from \"rxjs\";\nimport { IAPI } from \"../API.interface\";\nimport { IMockAPI } from \"../MockAPI.interface\";\nimport { ISQLiteAPI } from \"../SQLiteAPI.interface\";\nimport { DaoFactory } from \"../../device/sqlite/DaoFactory\";\nimport { EqualRestriction } from \"../../device/sqlite/restrictions/EqualRestriction\";\n\nexport class saveLoginTokenAPI implements IAPI, ISQLiteAPI, IMockAPI {\n\n    constructor(private daoFactory: DaoFactory) { }\n    private _encryptedAuth: string = '';\n    private _infoToken: string = '';\n\n    public get infoToken(): string {\n        return this._infoToken;\n    }\n    public set infoToken(value: string) {\n        this._infoToken = value;\n    }\n\n    public get encryptedAuth(): string {\n        return this._encryptedAuth;\n    }\n    public set encryptedAuth(value: string) {\n        this._encryptedAuth = value;\n    }\n\n    getAPIName(): string {\n        return 'saveLoginToken';\n    }\n    executeSQL(): Observable<any> {\n        // return sha-256: \"test||test\"\n        let infoObj = this.daoFactory.getTable(\"Profile\", \"TW_LH_SD_DeviceInfo\");\n        console.log(\"infoObj:\", infoObj);\n        let dao = this.daoFactory.getDao(\"Profile\");\n        let configVal = JSON.stringify({ token: this.encryptedAuth, infoToken: this._infoToken });\n        if (infoObj != undefined) {\n            return Observable.create((observer) => {\n                infoObj.setValue(\"CategoryVal\", configVal);\n                infoObj.setValue(\"UpdateTime\", Date.now());\n                infoObj.addRestriction(new EqualRestriction(\"Category\", [\"OfflineValidationToken\"]));\n                dao.updateByTable(infoObj).subscribe(resp => {\n                    console.log(\"save token resp:\", resp);\n                    let infoTableObj = this.daoFactory.getTable(\"Profile\", \"TW_LH_SD_DeviceInfo\");\n                    infoTableObj.setValue(\"CategoryVal\", '{\"count\":0}');\n                    infoTableObj.addRestriction(new EqualRestriction(\"Category\", [\"OfflineLoginFailCount\"]));\n                    dao.updateByTable(infoTableObj).subscribe(resp => {\n                        observer.next(resp);\n                        observer.complete();\n                    });\n                })\n\n            });\n        }\n        else {\n            return of(false);\n        }\n    }\n\n    getMockPath(): string {\n        return './assets/mock/saveLoginToken.json'\n    }\n}\n","export class APIRequest {\n    constructor() {\n        this._body = {};\n        this._type = \"GET\";\n        this._url = '';\n        this._params = null;\n        this._timeout = 10000;\n    }\n    private _body;\n    private _type;\n    private _url;\n    private _params;\n    private _timeout;\n    public get params() {\n        return this._params;\n    }\n    public set params(value) {\n        this._params = value;\n    }\n    public get type() {\n        return this._type;\n    }\n    public set type(value) {\n        this._type = value;\n    }\n    public get url() {\n        return this._url;\n    }\n    public set url(value) {\n        this._url = value;\n    }\n    public get body() {\n        return this._body;\n    }\n    public set body(value) {\n        this._body = value;\n    }\n    public get timeout() {\n        return this._timeout;\n    }\n    public set timeout(value) {\n        this._timeout = value;\n    }\n}","import { IAPI } from \"../API.interface\";\nimport { IMockAPI } from \"../MockAPI.interface\";\nimport { IRestfulAPI } from \"../RestfulAPI.interface\";\nimport { APIRequest } from \"../APIRequest\";\nimport { HttpParams } from \"@angular/common/http\";\n\nexport class CheckVersionAPI implements IAPI, IMockAPI, IRestfulAPI {\n\n    constructor() { }\n\n    public version = '';\n    public DeviceSystem = '';\n\n    public getAPIName(): string {\n        return 'CheckVersion';\n    }\n\n    public getRequestData(): APIRequest {\n        let queryParams = new HttpParams();\n        queryParams = queryParams.set(\"version\", this.version);\n        queryParams = queryParams.set(\"DeviceSystem\", this.DeviceSystem);\n        let requestData = new APIRequest();\n        requestData.type = \"GET\";\n        requestData.params = queryParams;\n        return requestData;\n    }\n\n    public getMockPath(): string {\n        return './assets/mock/CheckVersionAPI.json';\n    }\n\n}","\nimport { IAPI } from \"../API.interface\";\nimport { IMockAPI } from \"../MockAPI.interface\";\n\nexport class MenuAPI implements IAPI, IMockAPI {\n\n    getAPIName(): string {\n        return 'getMenu';\n    }\n\n    getMockPath() {\n        return './assets/config/menu.json';\n    }\n\n}\n","import { IAPI } from \"../API.interface\";\nimport { IMockAPI } from \"../MockAPI.interface\";\nimport { ISQLiteAPI } from \"../SQLiteAPI.interface\";\nimport { Setting } from \"../../bean\";\nimport { Observable } from \"rxjs\";\nimport { DaoFactory, SQLiteTable, ClientCustomDao, EqualRestriction } from \"../../device\";\n\nexport class SettingUpdateAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    constructor(private DaoFactory: DaoFactory) { }\n\n    private _settingObject: Setting;\n\n    setSettingObject(value: Setting) {\n        this._settingObject = value;\n    }\n\n    getAPIName(): string {\n        return 'updateSetting';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/getPersonalSetting.json';\n    }\n\n    executeSQL(): Observable<any> {\n        return Observable.create((observer) => {\n            let settingObj = this.DaoFactory.getDefaultTable(\"TW_LH_SD_Personal_Setting\");\n            let dao = this.DaoFactory.getDefaultDao();\n\n            if (settingObj != undefined && dao != undefined) {\n                settingObj = (<SQLiteTable>settingObj);\n                dao = new ClientCustomDao(dao);\n                settingObj.addRestriction(new EqualRestriction('SettingID', [this._settingObject.SettingID]));\n                settingObj.setValue('SettingVal', this._settingObject.SettingVal);\n\n                dao.updateByTable(settingObj).subscribe((resp) => {\n                    observer.next(resp);\n                    observer.complete();\n                });\n            } else {\n                observer.next(false);\n                observer.complete();\n            }\n        });\n    }\n\n}\n","import { IAPI } from \"../API.interface\";\nimport { IMockAPI } from \"../MockAPI.interface\";\nimport { IDeviceAPI } from \"../DeviceAPI.interface\";\nimport { Observable } from \"rxjs\";\nimport { DeviceFactory } from \"../../device/DeviceFactory\";\n\n\nexport class ContactsSearchAPI implements IAPI, IMockAPI, IDeviceAPI {\n   \n    constructor(private deviceFactory: DeviceFactory){\n        \n    }\n\n    getAPIName(): string {\n        return 'contactsSearch';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/getImportContact.json';\n    }\n\n    runDeviceAPI(): Observable<any> {\n        let dao = this.deviceFactory.getDefaultDao();\n        return dao.searchcontactsByName('');\n    }\n\n}","import { IAPI } from '../API.interface';\nimport { IRestfulAPI } from '../RestfulAPI.interface';\nimport { APIRequest } from '../APIRequest';\nimport { HttpParams } from '@angular/common/http';\n\nexport class SyncPushAPI implements IAPI, IRestfulAPI {\n\n    public url = '';\n    public body = {};\n    public async: Boolean = false;\n    constructor() { }\n\n    getAPIName() {\n        return 'SyncPush';\n    }\n\n    getRequestData() {\n        let requestData = new APIRequest();\n        requestData.url = this.url;\n        requestData.body = this.body;\n        requestData.type = \"PUT\";\n\n        return requestData;\n    }\n}","import { IAPI } from '../API.interface';\nimport { IRestfulAPI } from '../RestfulAPI.interface';\nimport { APIRequest } from '../APIRequest';\nimport { HttpParams } from '@angular/common/http';\n\nexport class SyncPullAPI implements IAPI, IRestfulAPI {\n\n    public url = '';\n    public body = {};\n    public lastUpdateTime: string = '';\n    constructor() { }\n\n    getAPIName() {\n        return 'SyncPull';\n    }\n\n    getRequestData() {\n        let requestData = new APIRequest();\n        requestData.url = this.url;\n        requestData.body = this.body;\n        requestData.type = \"GET\";\n        requestData.params = new HttpParams()\n            .set('lastUpdateTime', this.lastUpdateTime);\n        return requestData;\n    }\n}","import { IAPI } from '../API.interface';\nimport { IMockAPI } from '../MockAPI.interface';\nimport { ISQLiteAPI } from '../SQLiteAPI.interface';\nimport { Observable } from 'rxjs';\nimport { DaoFactory } from '../../device/sqlite';\nimport {SQLiteTable} from '../../device/sqlite';\nimport {ClientCustomDao} from '../../device/sqlite';\n\nexport class CurrentLanguageListAPI implements IAPI , IMockAPI , ISQLiteAPI {\n  private _DaoFactory;\n  constructor(DaoFactory: DaoFactory) {\n    this._DaoFactory = DaoFactory;\n  }\n\n  getAPIName() : string {\n    return 'getCurrentLanguageList';\n  }\n\n  getMockPath() : string {\n    return './assets/mock/getCurrentLanguage.json';\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let languageObj = this._DaoFactory.getTable('Profile', \"TW_LH_SD_Language\");\n      let dao = this._DaoFactory.getDao('Profile');\n\n      if (languageObj != undefined && dao != undefined) {\n        languageObj = (<SQLiteTable>languageObj);\n        dao = new ClientCustomDao(dao);\n        dao.queryByTable(languageObj).subscribe((resp) => {\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n\n}\n","\nimport { Observable, of } from \"rxjs\";\nimport { IAPI } from \"../API.interface\";\nimport { IMockAPI } from \"../MockAPI.interface\";\nimport { ISQLiteAPI } from \"../SQLiteAPI.interface\";\nimport { ClientCustomDao, DaoFactory } from '../../device/sqlite';\nimport { EqualRestriction } from '../../device/sqlite';\n\nexport class BindingAccountAPI implements IAPI, IMockAPI, ISQLiteAPI {\n    private _DaoFactory: DaoFactory;\n    constructor(DaoFactory: DaoFactory) {\n        this._DaoFactory = DaoFactory;\n    }\n\n    public account = '';\n\n    getAPIName(): string {\n        return 'BindingAccount';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/saveSuccess.json';\n    }\n    executeSQL(): Observable<any> {\n        let deviceInfoObjForDelete = this._DaoFactory.getTable('Profile', \"TW_LH_SD_DeviceInfo\");\n        let deviceInfoObjForInsert = this._DaoFactory.getTable('Profile', \"TW_LH_SD_DeviceInfo\");\n        let dao = this._DaoFactory.getDao('Profile');\n        if (deviceInfoObjForDelete != undefined && deviceInfoObjForInsert != undefined && dao != undefined) {\n            deviceInfoObjForDelete.addRestriction(new EqualRestriction('Category', ['BindingAccount']));\n            dao.transactionDelete(deviceInfoObjForDelete);\n\n            deviceInfoObjForInsert.setValue(\"Category\", \"BindingAccount\");\n            deviceInfoObjForInsert.setValue(\"CategoryVal\", JSON.stringify({ account: this.account }));\n            deviceInfoObjForInsert.setValue(\"UpdateTime\", Date.now());\n            dao.transactionInsert(deviceInfoObjForInsert);\n            return dao.runTransaction();\n        } else {\n            return of(false);\n        }\n\n    }\n}\n","\nimport { Observable, of } from \"rxjs\";\nimport { IAPI } from \"../API.interface\";\nimport { IMockAPI } from \"../MockAPI.interface\";\nimport { ISQLiteAPI } from \"../SQLiteAPI.interface\";\nimport { ClientCustomDao, DaoFactory } from '../../device/sqlite';\nimport { EqualRestriction } from '../../device/sqlite';\n\nexport class DeviceAccountAPI implements IAPI, IMockAPI, ISQLiteAPI {\n    private _DaoFactory: DaoFactory;\n    constructor(DaoFactory: DaoFactory) {\n        this._DaoFactory = DaoFactory;\n    }\n\n\n    getAPIName(): string {\n        return 'getDeviceAccount';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/getDeviceAccount.json';\n    }\n    executeSQL(): Observable<any> {\n        return Observable.create((observer) => {\n            let deviceInfoObj = this._DaoFactory.getTable('Profile', \"TW_LH_SD_DeviceInfo\");\n\n            let dao = this._DaoFactory.getDao('Profile');\n            if (deviceInfoObj != undefined && dao != undefined) {\n                dao = new ClientCustomDao(dao);\n                deviceInfoObj.addRestriction(new EqualRestriction('Category', [\"BindingAccount\"]));\n                dao.queryByTable(deviceInfoObj).subscribe((resp) => {\n                    console.log(\"getDeviceAccount API resp:\",resp);\n                    observer.next(resp);\n                    observer.complete();\n                });\n            } else {\n                observer.next(false);\n                observer.complete();\n            }\n        })\n    }\n}\n","import { IAPI } from '../API.interface';\nimport { IRestfulAPI } from '../RestfulAPI.interface';\nimport { APIRequest } from '../APIRequest';\nimport { IMockAPI } from '../MockAPI.interface';\n\nexport class UpdatePushIDAPI implements IAPI, IMockAPI, IRestfulAPI {\n\n    public body = {};\n\n    constructor() { }\n\n    getAPIName() {\n        return 'UpdatePushID';\n    }\n\n    getMockPath() {\n        //return save resp\n        return './assets/mock/logout.json';\n    }\n\n    getRequestData() {\n        let requestData = new APIRequest();\n        requestData.body = this.body;\n        requestData.type = \"POST\";\n        return requestData;\n    }\n}","import { IAPI } from '../API.interface';\nimport { IRestfulAPI } from '../RestfulAPI.interface';\nimport { APIRequest } from '../APIRequest';\nimport { HttpParams } from '@angular/common/http';\n\nexport class syncSequenceIDAPI implements IAPI, IRestfulAPI {\n\n    public num: number = 0;\n    public type: string = '';\n\n    constructor() { }\n\n    getAPIName() {\n        return 'getSyncSequenceID';\n    }\n\n    getRequestData() {\n        let requestData = new APIRequest();\n        let queryParams = new HttpParams();\n        queryParams = queryParams.set(\"category\", this.type);\n        queryParams = queryParams.set(\"idNums\", this.num.toString());\n        requestData.params = queryParams;\n        requestData.type = \"GET\";\n        return requestData;\n    }\n}","import { IAPI } from \"../API.interface\";\nimport { ISQLiteAPI } from \"../SQLiteAPI.interface\";\nimport { Observable, of } from \"rxjs\";\nimport { IMockAPI } from \"../MockAPI.interface\";\nimport { DaoFactory } from \"../../device/sqlite/DaoFactory\";\nimport { v4 as uuid } from 'uuid';\n\n\nexport class logErrorAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    public stack: Array<string> = [];\n    public message: string = '';\n    public time: Date = new Date();\n    public DeviceModel: string = '';\n    public DeviceSystem: string = '';\n\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n\n    getAPIName() {\n        return 'LogError';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/addCalendarEvent.json';\n    }\n\n    executeSQL() {\n        let errorLogObj = this.daoFactory.getTable('Profile', 'TW_LH_SD_Error_Log');\n        let dao = this.daoFactory.getDao('Profile');\n        if (errorLogObj) {\n            errorLogObj.setValue(\"ErrorID\", uuid());\n            errorLogObj.setValue(\"Message\", this.message);\n            errorLogObj.setValue(\"Time\", this.time.getTime());\n            errorLogObj.setValue(\"Stack\", JSON.stringify(this.stack));\n            errorLogObj.setValue(\"DeviceModel\", this.DeviceModel);\n            errorLogObj.setValue(\"DeviceSystem\", this.DeviceSystem);\n            errorLogObj.setValue(\"IsSend\", 'N');\n            return dao.insertByTable(errorLogObj);\n        }\n        else return of(false);\n    }\n}","import { IAPI } from \"../API.interface\";\nimport { ISQLiteAPI } from \"../SQLiteAPI.interface\";\nimport { Observable, of } from \"rxjs\";\nimport { IMockAPI } from \"../MockAPI.interface\";\nimport { DaoFactory } from \"../../device/sqlite/DaoFactory\";\nimport { v4 as uuid } from 'uuid';\n\n\nexport class logActionAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    public action: string = '';\n    public Function: string = '';\n    public message: string = '';\n    public time: Date = new Date();\n    public valid: boolean = true;\n    public DeviceModel: string = '';\n    public DeviceSystem: string = '';\n\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n\n    getAPIName() {\n        return 'LogAction';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/addCalendarEvent.json';\n    }\n\n    executeSQL() {\n        let actionLogObj = this.daoFactory.getTable('Profile', 'TW_LH_SD_Action_Log');\n        let dao = this.daoFactory.getDao('Profile');\n        if (actionLogObj) {\n            actionLogObj.setValue(\"ActionID\", uuid());\n            actionLogObj.setValue(\"Function\", this.Function);\n            actionLogObj.setValue(\"Message\", this.message);\n            actionLogObj.setValue(\"Time\", this.time.getTime());\n            actionLogObj.setValue(\"Action\", this.action);\n            actionLogObj.setValue(\"Valid\", this.valid ? 'Y' : 'N');\n            actionLogObj.setValue(\"IsSend\", 'N');\n            actionLogObj.setValue(\"DeviceModel\", this.DeviceModel);\n            actionLogObj.setValue(\"DeviceSystem\", this.DeviceSystem);\n            return dao.insertByTable(actionLogObj);\n        }\n        else return of(false);\n    }\n}","import { IAPI } from '../API.interface';\nimport { IRestfulAPI } from '../RestfulAPI.interface';\nimport { APIRequest } from '../APIRequest';\nimport { HttpParams } from '@angular/common/http';\nimport { IMockAPI } from '../MockAPI.interface';\n\n\nexport class PushErrorLogAPI implements IAPI, IMockAPI, IRestfulAPI {\n\n    public url: string = '';\n    public errorList: Array<any> = [];\n\n    constructor() { }\n\n    getAPIName() {\n        return 'PushErrorLog';\n    }\n\n    getRequestData() {\n        let requestData = new APIRequest();\n        requestData.url = this.url;\n        requestData.body = this.errorList.map(err => {\n            return {\n                \"Message\": err.Message,\n                \"Stack\": err.Stack,\n                \"Time\": new Date(err.Time).toISOString(),\n                \"DeviceModel\": err.DeviceModel,\n                \"DeviceSystem\": err.DeviceSystem\n            }\n        })\n        requestData.type = \"POST\";\n        return requestData;\n    }\n\n    getMockPath() {\n        return './assets/mock/logout.json';\n    }\n}","import { IAPI } from '../API.interface';\nimport { IRestfulAPI } from '../RestfulAPI.interface';\nimport { APIRequest } from '../APIRequest';\nimport { HttpParams } from '@angular/common/http';\nimport { IMockAPI } from '../MockAPI.interface';\n\n\nexport class PushActionLogAPI implements IAPI, IMockAPI, IRestfulAPI {\n\n    public url: string = '';\n    public actionList: Array<any> = [];\n\n    constructor() { }\n\n    getAPIName() {\n        return 'PushActionLog';\n    }\n\n    getRequestData() {\n        let requestData = new APIRequest();\n        requestData.url = this.url;\n        requestData.body = this.actionList.map(action => {\n            return {\n                \"ActionID\": action.ActionID,\n                \"FunctionID\": action.Function,\n                \"Message\": action.Message,\n                \"Time\": new Date(action.Time).toISOString(),\n                \"Action\": action.Action,\n                \"Valid\": action.Valid,\n                \"DeviceModel\": action.DeviceModel,\n                \"DeviceSystem\": action.DeviceSystem\n            }\n        })\n        requestData.type = \"POST\";\n        return requestData;\n    }\n\n    getMockPath() {\n        return './assets/mock/logout.json';\n    }\n}","import { IAPI } from \"../API.interface\";\nimport { IMockAPI } from \"../MockAPI.interface\";\n\nexport class RouterMapAPI implements IAPI, IMockAPI {\n\n    getAPIName() {\n        return 'getRouterMap'\n    }\n\n    getMockPath() {\n        return './assets/config/router-map.json';\n    }\n\n}\n\n","import { IAPI } from '../API.interface';\nimport { IRestfulAPI } from '../RestfulAPI.interface';\nimport { APIRequest } from '../APIRequest';\nimport { HttpParams } from '@angular/common/http';\nimport { IMockAPI } from '../MockAPI.interface';\n\nexport class getYearConfigAPI implements IAPI, IRestfulAPI, IMockAPI {\n\n    constructor(private APP_CONFIG: any) { }\n\n    private agentID = '';\n    public url = '';\n    public lastUpdateTime: string = '2019-01-01 00:00:00';\n\n    public setAgentID(agent_id) {\n        this.agentID = agent_id;\n    }\n\n\n    getMockPath(): string {\n        return './assets/mock/yearConfig.json';\n    }\n\n    getAPIName() {\n        return 'getYearConfig';\n    }\n\n    getRequestData() {\n        let requestData = new APIRequest();\n        let env = this.APP_CONFIG.ENV;\n        if (this.agentID != '' && this.agentID != undefined && this.agentID != null) {\n            this.url = this.APP_CONFIG[env].API_URL.getYearConfig;\n            requestData.url = this.url + '/' + this.agentID;\n        } else {\n            requestData.url = this.url;\n        }\n        requestData.type = \"GET\";\n        requestData.params = new HttpParams()\n            .set('lastUpdateTime', this.lastUpdateTime);\n        return requestData;\n    }\n}","import { IAPI } from \"../API.interface\";\nimport { ISQLiteAPI } from \"../SQLiteAPI.interface\";\nimport { Observable, of } from \"rxjs\";\nimport { IMockAPI } from \"../MockAPI.interface\";\nimport { DaoFactory } from \"../../device/sqlite/DaoFactory\";\nimport { EqualRestriction } from \"../../device/sqlite/restrictions/EqualRestriction\";\nimport { v4 as uuid } from 'uuid';\n\n\nexport class saveYearConfigAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    public yearConfigs: Array<any> = [];\n    public FirstUseAPP: boolean;\n\n    private deviceInfo;\n    private yearConfig;\n    private yearConfig_ext;\n    private dao;\n    private profile_dao;\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n\n    getAPIName() {\n        return 'saveYearConfig';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/addCalendarEvent.json';\n    }\n\n    executeSQL() {\n\n        this.yearConfig = this.daoFactory.getDefaultTable('TW_LH_SD_Year_Config');\n        this.yearConfig_ext = this.daoFactory.getDefaultTable('TW_LH_SD_Year_Config_Extension');\n        this.deviceInfo = this.daoFactory.getTable('Profile', 'TW_LH_SD_DeviceInfo');\n        this.dao = this.daoFactory.getDefaultDao();\n        this.profile_dao = this.daoFactory.getDao(\"Profile\");\n        console.log('yearConfig', this.yearConfig);\n        console.log('deviceInfo', this.deviceInfo);\n        if (this.yearConfig && this.deviceInfo) {\n            return of(this.saveConfig().then(resp => {\n                let status = resp[\"Header\"].status;\n                console.log('saveYearConfigAPI resp:', resp);\n                if (status) {\n                    this.dao.transactionDelete(this.yearConfig);\n                    this.dao.transactionDelete(this.yearConfig_ext);\n                    return Promise.all(this.yearConfigs.map(x => this._getDate(x))).then(() => this.dao.runTransaction().toPromise());\n                }\n                else\n                    return resp;\n            }));\n        }\n        else return of(false);\n    }\n\n\n    private async _getDate(yearcfg: any): Promise<any> {\n        console.log('yearcfg', yearcfg);\n        let clientID = uuid();\n\n        this.yearConfig.setValue(\"ClientID\", clientID);\n        this.yearConfig.setValue(\"DataYear\", yearcfg.DataYear);\n        this.yearConfig.setValue(\"IsCurrent\", yearcfg.IsCurrent ? \"Y\" : \"N\");\n        this.yearConfig.setValue(\"PerformanceSettlementMonth\", yearcfg.PerformanceSettlementMonth);\n        this.yearConfig.setValue(\"WorkingMonth\", yearcfg.WorkingMonth);\n        this.yearConfig.setValue(\"WorkingQuarter\", yearcfg.WorkingQuarter);\n        this.yearConfig.setValue(\"QuarterStartMonth\", yearcfg.QuarterStartMonth);\n        this.yearConfig.setValue(\"QuarterEndMonth\", yearcfg.QuarterEndMonth);\n        this.yearConfig.setValue(\"InitialPreCaseFyfc\", yearcfg.InitialPreCaseFyfc);\n        this.yearConfig.setValue(\"FyfcCovertAnpRate\", yearcfg.FyfcCovertAnpRate);\n        this.yearConfig.setValue(\"InforceConvertFindRate\", yearcfg.InforceConvertFindRate);\n        this.yearConfig.setValue(\"InforceConvertScheduleRate\", yearcfg.InforceConvertScheduleRate);\n        this.yearConfig.setValue(\"InforceConvertMeetRate\", yearcfg.InforceConvertMeetRate);\n        this.yearConfig.setValue(\"InforceConvertSubmitRate\", yearcfg.InforceConvertSubmitRate);\n        this.yearConfig.setValue(\"ProgressDayPointsLimit\", yearcfg.ProgressDayPointsLimit);\n        this.yearConfig.setValue(\"InforceConvertPointBase\", yearcfg.InforceConvertPointBase);\n        this.yearConfig.setValue(\"FindConvertPointBase\", yearcfg.FindConvertPointBase);\n        this.yearConfig.setValue(\"ScheduleConvertPointBase\", yearcfg.ScheduleConvertPointBase);\n        this.yearConfig.setValue(\"MeetConvertPointBase\", yearcfg.MeetConvertPointBase);\n        this.yearConfig.setValue(\"SubmitConvertPointBase\", yearcfg.SubmitConvertPointBase);\n        this.yearConfig.setValue(\"GoalSettingActivityProcMode\", yearcfg.GoalSettingActivityProcMode);\n        this.yearConfig.setValue(\"ProgressBarControlMode\", yearcfg.ProgressBarControlMode);\n        this.yearConfig.setValue(\"GoalAndPlanDifferenceLimit\", yearcfg.GoalAndPlanDifferenceLimit);\n        this.yearConfig.setValue(\"NowToYearEndDays\", yearcfg.NowToYearEndDays);\n        this.yearConfig.setValue(\"MonthQuantityOfYear\", yearcfg.MonthQuantityOfYear);\n        this.dao.transactionInsert(this.yearConfig);\n\n        //Extension\n        this.yearConfig_ext.setValue(\"ClientID\", clientID);\n        if (yearcfg.extensions) {\n            yearcfg.extensions.forEach(ext => {\n                this.yearConfig_ext.setValue(ext.id, ext.value);\n            });\n        }\n        this.dao.transactionInsert(this.yearConfig_ext);\n    }\n\n    private async saveConfig(): Promise<any> {\n        //Update other parameter\n        console.log('[saveYearConfigAPI] isFirstUse', this.FirstUseAPP);\n        if (this.FirstUseAPP != null && this.FirstUseAPP != undefined) {\n            this.deviceInfo.addRestriction(new EqualRestriction(\"Category\", [\"FirstUseAPP\"]));\n            let queryResp = await this.profile_dao.queryByTable(this.deviceInfo).toPromise();\n            console.log('[saveYearConfigAPI] queryResp', queryResp);\n            if (queryResp.Header[\"status\"]) {\n                if (queryResp.Body.length > 0) {\n                    this.deviceInfo.setValue(\"CategoryVal\", this.FirstUseAPP ? \"Y\" : \"N\");\n                    console.log('[saveYearConfigAPI] deviceInfo 1', this.deviceInfo);\n                    this.profile_dao.transactionUpdate(this.deviceInfo);\n                } else {\n                    this.deviceInfo = this.daoFactory.getTable('Profile', 'TW_LH_SD_DeviceInfo');\n                    this.deviceInfo.setValue(\"Category\", \"FirstUseAPP\");\n                    this.deviceInfo.setValue(\"CategoryVal\", this.FirstUseAPP ? \"Y\" : \"N\");\n                    this.deviceInfo.setValue(\"UpdateTime\", new Date().getTime());\n                    console.log('[saveYearConfigAPI] otherParameter 2', this.deviceInfo);\n                    this.profile_dao.transactionInsert(this.deviceInfo);\n                }\n                return this.profile_dao.runTransaction().toPromise();\n            }\n        }\n    }\n\n}","import { IAPI } from '../API.interface';\nimport { IRestfulAPI } from '../RestfulAPI.interface';\nimport { APIRequest } from '../APIRequest';\nimport { HttpParams } from '@angular/common/http';\nimport { IMockAPI } from '../MockAPI.interface';\n\nexport class getAgencyPlanAPI implements IAPI, IRestfulAPI, IMockAPI{\n\n    constructor(private APP_CONFIG: any) { }\n\n    private agentID = '';\n    public url = '';\n    public lastUpdateTime: string = '2019-01-01 00:00:00';\n\n    public setAgentID(agent_id: string){\n        this.agentID = agent_id;\n    }\n\n    getMockPath(): string {\n        return './assets/mock/AgencyPlan.json';\n    }\n\n    getAPIName() {\n        return 'getAgencyPlan';\n    }\n\n    getRequestData() {\n        let requestData = new APIRequest();\n        let env = this.APP_CONFIG.ENV;\n        if(this.agentID != '' && this.agentID != undefined && this.agentID != null){\n            this.url = this.APP_CONFIG[env].API_URL.getAgencyPlan;\n            requestData.url = this.url + '/' + this.agentID;\n        }else{\n            requestData.url = this.url;\n        }\n        requestData.type = \"GET\";\n        requestData.params = new HttpParams()\n        .set('lastUpdateTime', this.lastUpdateTime);\n        return requestData;\n    }\n}","import { IAPI } from \"../API.interface\";\nimport { ISQLiteAPI } from \"../SQLiteAPI.interface\";\nimport { Observable, of, from } from \"rxjs\";\nimport { IMockAPI } from \"../MockAPI.interface\";\nimport { DaoFactory } from \"../../device/sqlite/DaoFactory\";\nimport { v4 as uuid } from 'uuid';\nimport { SQLCommand } from \"../../device/sqlite/SQLCommand\";\nimport { stringify } from \"@angular/core/src/render3/util\";\nimport { StringUtils } from \"../../utils\";\nimport { EqualRestriction } from \"../../device\";\n\n\nexport class saveAgencyPlanAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    public AgencyPlanDatas: Array<any> = [];\n\n    private dao;\n\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n\n    getAPIName() {\n        return 'saveAgencyPlan';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/addCalendarEvent.json';\n    }\n\n    executeSQL() {\n        console.log('AgencyPlanDatas', this.AgencyPlanDatas);\n        let agencyPlanDetail = this.daoFactory.getDefaultTable('TW_LH_SD_Agency_Detail_Data');\n        let agencyPlanDetailExt = this.daoFactory.getDefaultTable('TW_LH_SD_Agency_Detail_Data_Extension');\n        let agencyPlanMain = this.daoFactory.getDefaultTable('TW_LH_SD_Agency_Plan_Main');\n        let agencyPlanMainExt = this.daoFactory.getDefaultTable('TW_LH_SD_Agency_Plan_Main_Extension');\n        this.dao = this.daoFactory.getDefaultDao();\n        console.log('agencyPlanMain', agencyPlanMain);\n        console.log('agencyPlanDetail', agencyPlanDetail);\n        if (agencyPlanMain && agencyPlanDetail) {\n            this.dao.transactionDelete(agencyPlanDetail);\n            this.dao.transactionDelete(agencyPlanDetailExt);\n            this.dao.transactionDelete(agencyPlanMain);\n            this.dao.transactionDelete(agencyPlanMainExt);\n\n\n            return from(Promise.all(this.AgencyPlanDatas.map(x => this._getDate(x))).then(() => {\n                let resp = this.dao.runTransaction().toPromise();\n                return resp;\n            }));\n        }\n        else return of(false);\n    }\n\n    private async _getDate(AgencyPlanData: any): Promise<any> {\n\n        let agencyPlanDetail = this.daoFactory.getDefaultTable('TW_LH_SD_Agency_Detail_Data');\n        let agencyPlanDetailExt = this.daoFactory.getDefaultTable('TW_LH_SD_Agency_Detail_Data_Extension');\n        let agencyPlanMain = this.daoFactory.getDefaultTable('TW_LH_SD_Agency_Plan_Main');\n        let agencyPlanMainExt = this.daoFactory.getDefaultTable('TW_LH_SD_Agency_Plan_Main_Extension');\n        let otherParameter = this.daoFactory.getDefaultTable('TW_LH_SD_Other_Parameter');\n\n        let DataYear = AgencyPlanData.DataYear;\n        console.log('DataYear', DataYear);\n\n        let MainDatas: Array<any> = AgencyPlanData.Values;\n        console.log('MainDatas', MainDatas);\n        for (let data of MainDatas) {\n            let clientID = uuid();\n            agencyPlanMain.setValue(\"ClientID\", clientID);\n            agencyPlanMain.setValue(\"DataYear\", DataYear);\n            agencyPlanMain.setValue(\"DataType\", data.DataType);\n            agencyPlanMain.setValue(\"Forecast\", data.Forecast);\n            agencyPlanMain.setValue(\"Actual\", data.Actual);\n            agencyPlanMain.setValue(\"MonthPlan\", data.Plan);\n            agencyPlanMain.setValue(\"Manpower\", data.Manpower);\n            agencyPlanMain.setValue(\"Recruitment\", data.Recruitment);\n            this.dao.transactionInsert(agencyPlanMain);\n\n            agencyPlanMainExt.setValue(\"ClientID\", clientID);\n            if (AgencyPlanData.extensions) {\n                AgencyPlanData.extensions.forEach(ext => {\n                    agencyPlanMainExt.setValue(ext.id, ext.value);\n                });\n            }\n            this.dao.transactionInsert(agencyPlanMainExt);\n        }\n\n        let UnitMap = new Map<string, Array<any>>();\n        if (AgencyPlanData.DirectUnit != null) {\n            UnitMap.set('Direct', AgencyPlanData.DirectUnit);\n        }\n        if (AgencyPlanData.InDirectUnit != null) {\n            UnitMap.set('Indirect', AgencyPlanData.InDirectUnit);\n        }\n        if (UnitMap.size > 0) {\n            UnitMap.forEach((datas, key) => {\n                let i: number = 0;\n                for (i = 0; i < datas.length; i++) {\n                    let data = datas[i];\n                    let clientID = uuid();\n                    agencyPlanDetail.setValue(\"ClientID\", clientID);\n                    agencyPlanDetail.setValue(\"DataYear\", DataYear);\n                    agencyPlanDetail.setValue(\"DirectUnitType\", key);\n                    agencyPlanDetail.setValue(\"AgentID\", data.AgentID);\n                    agencyPlanDetail.setValue(\"AgentName\", data.AgentName);\n                    agencyPlanDetail.setValue(\"JobGrade\", data.JobGrade);\n                    agencyPlanDetail.setValue(\"IsApprove\", data.IsApprove ? \"Y\" : \"N\");\n                    agencyPlanDetail.setValue(\"Drilldown\", data.Drilldown ? \"Y\" : \"N\");\n                    agencyPlanDetail.setValue(\"AppUseMode\", data.AppUseMode);\n                    agencyPlanDetail.setValue(\"DataType\", data.DataType);\n                    agencyPlanDetail.setValue(\"Goal\", data.Goal);\n                    agencyPlanDetail.setValue(\"Forecast\", data.Forecast);\n                    agencyPlanDetail.setValue(\"Actual\", data.Actual);\n                    agencyPlanDetail.setValue(\"MonthPlan\", data.Plan);\n                    agencyPlanDetail.setValue(\"Manpower\", data.Manpower);\n                    agencyPlanDetail.setValue(\"Recruitment\", data.Recruitment);\n                    agencyPlanDetail.setValue(\"CaseCount\", data.CaseCount);\n                    agencyPlanDetail.setValue(\"PerCase\", data.PerCase);\n                    agencyPlanDetail.setValue(\"Orders\", i);\n                    this.dao.transactionInsert(agencyPlanDetail);\n\n                    agencyPlanDetailExt.setValue(\"ClientID\", clientID);\n                    if (data.extensions) {\n                        data.extensions.forEach(ext => {\n                            agencyPlanDetailExt.setValue(ext.id, ext.value);\n                        });\n                    }\n                    this.dao.transactionInsert(agencyPlanDetailExt);\n                }\n            });\n        }\n\n        //Update other parameter\n        let completionRate = AgencyPlanData.CompletionRate;\n        console.log('[saveAgencyPlanAPI] completionRate', completionRate);\n        if (StringUtils.isNotEmpty(completionRate)) {\n            otherParameter = this.daoFactory.getDefaultTable('TW_LH_SD_Other_Parameter');\n            otherParameter.addRestriction(new EqualRestriction(\"MappingID\", [\"CompletionRate\"]));\n            otherParameter.addRestriction(new EqualRestriction(\"DataYear\", [DataYear]));\n            let queryResp = await this.dao.queryByTable(otherParameter).toPromise();\n            console.log('[saveAgencyPlanAPI] queryResp', queryResp);\n            if (queryResp.Header[\"status\"]) {\n                if (queryResp.Body.length > 0) {\n                    otherParameter.setValue(\"SetValue\", completionRate.toString());\n                    console.log('[saveAgencyPlanAPI] otherParameter 1', otherParameter);\n                    this.dao.transactionUpdate(otherParameter);\n                } else {\n                    otherParameter = this.daoFactory.getDefaultTable('TW_LH_SD_Other_Parameter');\n                    otherParameter.setValue(\"ClientID\", uuid());\n                    otherParameter.setValue(\"DataYear\", DataYear);\n                    otherParameter.setValue(\"MappingID\", \"CompletionRate\");\n                    otherParameter.setValue(\"SetValue\", completionRate.toString());\n                    otherParameter.setValue(\"syncTime\", new Date().getTime());\n                    console.log('[saveAgencyPlanAPI] otherParameter 2', otherParameter);\n                    this.dao.transactionInsert(otherParameter);\n                }\n            }\n        }\n    }\n\n}","import { IAPI } from \"../API.interface\";\nimport { ISQLiteAPI } from \"../SQLiteAPI.interface\";\nimport { Observable, of, from } from \"rxjs\";\nimport { IMockAPI } from \"../MockAPI.interface\";\nimport { DaoFactory } from \"../../device/sqlite/DaoFactory\";\nimport { v4 as uuid } from 'uuid';\nimport { SQLCommand } from \"../../device/sqlite/SQLCommand\";\nimport { stringify } from \"@angular/core/src/render3/util\";\nimport { EqualRestriction } from \"../../device\";\n\n\nexport class saveProgressAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    public ProgressDatas: Array<any> = [];\n    private dao;\n\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n\n\n    getAPIName() {\n        return 'saveProgress';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/addCalendarEvent.json';\n    }\n\n    executeSQL() {\n\n        console.log('ProgressDatas', this.ProgressDatas);\n        let personalProgress = this.daoFactory.getDefaultTable('TW_LH_SD_Personal_Progress');\n        let personalProgressExt = this.daoFactory.getDefaultTable('TW_LH_SD_Personal_Progress_Extension');\n        let teamProgressMain = this.daoFactory.getDefaultTable('TW_LH_SD_Team_Progress_Main');\n        let teamProgressMainExt = this.daoFactory.getDefaultTable('TW_LH_SD_Team_Progress_Main_Extension');\n        let teamProgressDetail = this.daoFactory.getDefaultTable('TW_LH_SD_Team_Progress_Detail');\n        let teamProgressDetailExt = this.daoFactory.getDefaultTable('TW_LH_SD_Team_Progress_Detail_Extension');\n        let otherParameter = this.daoFactory.getDefaultTable('TW_LH_SD_Other_Parameter');\n        console.log(\"table personalProgress\", personalProgress);\n        console.log(\"table teamProgressMain\", teamProgressMain);\n        console.log(\"table teamProgressDetail\", teamProgressDetail);\n        console.log(\"table otherParameter\", otherParameter);\n        this.dao = this.daoFactory.getDefaultDao();\n        if (personalProgress && teamProgressMain && teamProgressDetail && otherParameter) {\n            this.dao.transactionDelete(personalProgress);\n            this.dao.transactionDelete(teamProgressMain);\n            this.dao.transactionDelete(teamProgressDetail);\n            this.dao.transactionDelete(personalProgressExt);\n            this.dao.transactionDelete(teamProgressMainExt);\n            this.dao.transactionDelete(teamProgressDetailExt);\n\n            return from(Promise.all(this.ProgressDatas.map(x => this._getDate(x))).then(() => {\n                let resp = this.dao.runTransaction().toPromise();\n                return resp;\n            }));\n\n        }\n        else return of(false);\n    }\n\n    private async _getDate(ProgressData: any): Promise<any> {\n\n        let personalProgress = this.daoFactory.getDefaultTable('TW_LH_SD_Personal_Progress');\n        let personalProgressExt = this.daoFactory.getDefaultTable('TW_LH_SD_Personal_Progress_Extension');\n        let teamProgressMain = this.daoFactory.getDefaultTable('TW_LH_SD_Team_Progress_Main');\n        let teamProgressMainExt = this.daoFactory.getDefaultTable('TW_LH_SD_Team_Progress_Main_Extension');\n        let teamProgressDetail = this.daoFactory.getDefaultTable('TW_LH_SD_Team_Progress_Detail');\n        let teamProgressDetailExt = this.daoFactory.getDefaultTable('TW_LH_SD_Team_Progress_Detail_Extension');\n        let otherParameter = this.daoFactory.getDefaultTable('TW_LH_SD_Other_Parameter');\n\n        console.log('ProgressData', ProgressData);\n\n        let DataYear = ProgressData.DataYear;\n        console.log('DataYear', DataYear);\n\n        //save  personal_Progress_Main\n        if (ProgressData.Personal.Values != null) {\n            let personalDatas: Array<any> = ProgressData.Personal.Values;\n            console.log('personalDatas', personalDatas);\n            for (let personalData of personalDatas) {\n                let clientID = uuid();\n                personalProgress.setValue(\"ClientID\", clientID);\n                personalProgress.setValue(\"DataYear\", DataYear);\n                personalProgress.setValue(\"DataType\", personalData.DataType);\n                personalProgress.setValue(\"TimeBase\", personalData.TimeBase);\n                personalProgress.setValue(\"Find\", personalData.Find);\n                personalProgress.setValue(\"Schedule\", personalData.Schedule);\n                personalProgress.setValue(\"Meet\", personalData.Meet);\n                personalProgress.setValue(\"Submit\", personalData.Submit);\n                personalProgress.setValue(\"Inforce\", personalData.Inforce);\n                personalProgress.setValue(\"FYFC\", personalData.FYFC);\n                this.dao.transactionInsert(personalProgress);\n\n                personalProgressExt.setValue(\"ClientID\", clientID);\n                if (personalData.extensions) {\n                    personalData.extensions.forEach(ext => {\n                        personalProgressExt.setValue(ext.id, ext.value);\n                    });\n                }\n                this.dao.transactionInsert(personalProgressExt);\n            }\n        }\n\n        //save  Team_Progress_Main\n        if (ProgressData.Team.Values != null) {\n            let TeamMainlDatas: Array<any> = ProgressData.Team.Values;\n            console.log('TeamMainlDatas', TeamMainlDatas);\n            for (let TeamMainData of TeamMainlDatas) {\n                let clientID = uuid();\n                teamProgressMain.setValue(\"ClientID\", clientID);\n                teamProgressMain.setValue(\"DataYear\", DataYear);\n                teamProgressMain.setValue(\"DataType\", TeamMainData.DataType);\n                teamProgressMain.setValue(\"TimeBase\", TeamMainData.TimeBase);\n                teamProgressMain.setValue(\"Goal\", TeamMainData.Goal);\n                teamProgressMain.setValue(\"Forecast\", TeamMainData.Forecast);\n                teamProgressMain.setValue(\"Actual\", TeamMainData.Actual);\n                teamProgressMain.setValue(\"Shortfall\", TeamMainData.Shortfall);\n                this.dao.transactionInsert(teamProgressMain);\n\n                teamProgressMainExt.setValue(\"ClientID\", clientID);\n                if (TeamMainData.extensions) {\n                    TeamMainData.extensions.forEach(ext => {\n                        teamProgressMainExt.setValue(ext.id, ext.value);\n                    });\n                }\n                this.dao.transactionInsert(teamProgressMainExt);\n            }\n        }\n\n        //save  Team_Progress_Detail\n        let UnitMap = new Map<string, Array<any>>();\n        if (ProgressData.Team.DirectUnit != null) {\n            UnitMap.set('Direct', ProgressData.Team.DirectUnit);\n        }\n        if (ProgressData.Team.InDirectUnit != null) {\n            UnitMap.set('Indirect', ProgressData.Team.InDirectUnit);\n        }\n        if (UnitMap.size > 0) {\n            UnitMap.forEach((datas, key) => {\n                console.log('key', key, 'datas', datas);\n                let i: number = 0;\n                for (i = 0; i < datas.length; i++) {\n                    let data = datas[i];\n                    let clientID = uuid();\n                    teamProgressDetail.setValue(\"ClientID\", clientID);\n                    teamProgressDetail.setValue(\"DataYear\", DataYear);\n                    teamProgressDetail.setValue(\"DirectUnitType\", key);\n                    teamProgressDetail.setValue(\"TimeBase\", data.TimeBase);\n                    teamProgressDetail.setValue(\"AgentID\", data.AgentID);\n                    teamProgressDetail.setValue(\"AgentName\", data.AgentName);\n                    teamProgressDetail.setValue(\"JobGrade\", data.JobGrade);\n                    teamProgressDetail.setValue(\"TeamName\", data.TeamName);\n                    teamProgressDetail.setValue(\"Drilldown\", data.Drilldown ? \"Y\" : \"N\");\n                    teamProgressDetail.setValue(\"DataType\", data.DataType);\n                    teamProgressDetail.setValue(\"AppUseMode\", data.AppUseMode);\n                    if (data.Activities != null) {\n                        teamProgressDetail.setValue(\"Activities\", data.Activities);\n                    }\n                    teamProgressDetail.setValue(\"Goal\", data.Goal);\n                    teamProgressDetail.setValue(\"Forecast\", data.Forecast);\n                    teamProgressDetail.setValue(\"Actual\", data.Actual);\n                    teamProgressDetail.setValue(\"Shortfall\", data.Shortfall);\n                    teamProgressDetail.setValue(\"Orders\", i);\n                    this.dao.transactionInsert(teamProgressDetail);\n\n                    teamProgressDetailExt.setValue(\"ClientID\", clientID);\n                    if (data.extensions) {\n                        data.extensions.forEach(ext => {\n                            teamProgressDetailExt.setValue(ext.id, ext.value);\n                        });\n                    }\n                    this.dao.transactionInsert(teamProgressDetailExt);\n                }\n            });\n        }\n\n        //Update other parameter\n        let YesterdayPoint = ProgressData.YesterdayPoint;\n        console.log('[saveProgressAPI] YesterdayPoint', YesterdayPoint);\n        if (YesterdayPoint != null && YesterdayPoint != undefined) {\n            otherParameter = this.daoFactory.getDefaultTable('TW_LH_SD_Other_Parameter');\n            otherParameter.addRestriction(new EqualRestriction(\"MappingID\", [\"YesterdayPoint\"]));\n            otherParameter.addRestriction(new EqualRestriction(\"DataYear\", [DataYear]));\n            let queryResp = await this.dao.queryByTable(otherParameter).toPromise();\n            console.log('[saveProgressAPI] queryResp', queryResp);\n            if (queryResp.Header[\"status\"]) {\n                if (queryResp.Body.length > 0) {\n                    otherParameter.setValue(\"SetValue\", YesterdayPoint);\n                    console.log('[saveProgressAPI] otherParameter 1', otherParameter);\n                    this.dao.transactionUpdate(otherParameter);\n                } else {\n                    otherParameter = this.daoFactory.getDefaultTable('TW_LH_SD_Other_Parameter');\n                    otherParameter.setValue(\"ClientID\", uuid());\n                    otherParameter.setValue(\"DataYear\", DataYear);\n                    otherParameter.setValue(\"MappingID\", \"YesterdayPoint\");\n                    otherParameter.setValue(\"SetValue\", YesterdayPoint);\n                    otherParameter.setValue(\"syncTime\", new Date().getTime());\n                    console.log('[saveProgressAPI] otherParameter 2', otherParameter);\n                    this.dao.transactionInsert(otherParameter);\n                }\n            }\n        }\n    }\n}","import { IAPI } from '../API.interface';\nimport { IRestfulAPI } from '../RestfulAPI.interface';\nimport { APIRequest } from '../APIRequest';\nimport { HttpParams } from '@angular/common/http';\nimport { IMockAPI } from '../MockAPI.interface';\n\nexport class getProgressAPI implements IAPI, IRestfulAPI, IMockAPI {\n\n    constructor(private APP_CONFIG: any) { }\n\n    private agentID = '';\n    public url = '';\n    public lastUpdateTime: string = '2019-01-01 00:00:00';\n\n    public setAgentID(agent_id) {\n        this.agentID = agent_id;\n    }\n\n    getMockPath(): string {\n        return './assets/mock/Progress.json';\n    }\n\n    getAPIName() {\n        return 'getProgress';\n    }\n\n    getRequestData() {\n        let requestData = new APIRequest();\n        let env = this.APP_CONFIG.ENV;\n        if (this.agentID != '' && this.agentID != undefined && this.agentID != null) {\n            this.url = this.APP_CONFIG[env].API_URL.getProgress;\n            requestData.url = this.url + '/' + this.agentID;\n        } else {\n            requestData.url = this.url;\n        }\n        requestData.type = \"GET\";\n        requestData.params = new HttpParams()\n            .set('lastUpdateTime', this.lastUpdateTime);\n        return requestData;\n    }\n}","\nimport { IAPI } from \"../API.interface\";\nimport { IMockAPI } from \"../MockAPI.interface\";\n\nexport class MetaConfigAPI implements IAPI, IMockAPI {\n\n    private _configName = '';\n    public get configName() {\n        return this._configName;\n    }\n    public set configName(value) {\n        this._configName = value;\n    }\n\n\n    getAPIName(): string {\n        return 'getMetaConfig';\n    }\n\n    getMockPath() {\n        return `./assets/config/meta/${this._configName}.json`;\n    }\n\n}\n","import { Observable } from 'rxjs';\nimport { IAPI } from '../API.interface';\nimport { IMockAPI } from '../MockAPI.interface';\nimport { ISQLiteAPI } from '../SQLiteAPI.interface';\nimport { DaoFactory } from '../../device/sqlite/DaoFactory';\nimport { TranslateService } from '../../language/translate.service';\nimport { DeviceService } from '../../device/device.service';\n\nexport class SettingValueAPI implements IAPI, IMockAPI, ISQLiteAPI {\n    private _translateService: TranslateService;\n    private _deviceService: DeviceService\n    constructor(\n        translateService: TranslateService,\n        deviceService: DeviceService) {\n        this._translateService = translateService;\n        this._deviceService = deviceService;\n    }\n\n    getAPIName(): string {\n        return 'getSettingValue';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/getSettingValue.json';\n    }\n\n    executeSQL(): Observable<any> {\n        return Observable.create((observer) => {\n            let resp = {\n                Language: this._translateService.getCurrentLanguage(),\n                LastUpdatedTime: \"Setting_See_Details\"\n            }\n            this._deviceService.getAppVersion().then(version => {\n                resp[\"Version\"] = version;\n                observer.next({ Header: { \"isSuccess\": true }, Body: [resp] });\n                observer.complete();\n            })\n        });\n    }\n\n}\n","import { IAPI } from '../API.interface';\nimport { IRestfulAPI } from '../RestfulAPI.interface';\nimport { APIRequest } from '../APIRequest';\nimport { HttpParams } from '@angular/common/http';\nimport { IMockAPI } from '../MockAPI.interface';\nimport { Inject, Optional } from '@angular/core';\nimport { ConfigToken } from '../../injectionToken/injection-token';\n\nexport class getGoalAPI implements IAPI, IRestfulAPI, IMockAPI{\n\n    constructor(\n        private APP_CONFIG: any\n    ) { }\n\n\n    private agentID = '';\n    private url = '';\n    \n    public lastUpdateTime: string = '2019-01-01 00:00:00';\n\n    public setAgentID( agent_id){\n        this.agentID = agent_id;\n    }\n\n    getMockPath(): string {\n        return 'assets/mock/Goal.json';\n    }\n\n    getAPIName() {\n        return 'getGoal';\n    }\n\n    getRequestData() {\n        let requestData = new APIRequest();\n        let env = this.APP_CONFIG.ENV;\n          if(this.agentID != '' && this.agentID != undefined && this.agentID != null){\n            this.url = this.APP_CONFIG[env].API_URL.getGoal;\n            requestData.url = this.url + '/' + this.agentID;\n        }else{\n            requestData.url = this.url;\n        }\n        requestData.type = \"GET\";\n        requestData.params = new HttpParams()\n        .set('lastUpdateTime', this.lastUpdateTime);\n        return requestData;\n    }\n}","import { IAPI } from \"../API.interface\";\nimport { ISQLiteAPI } from \"../SQLiteAPI.interface\";\nimport { Observable, of } from \"rxjs\";\nimport { IMockAPI } from \"../MockAPI.interface\";\nimport { DaoFactory } from \"../../device/sqlite/DaoFactory\";\nimport { v4 as uuid } from 'uuid';\n\n\n\nexport class saveGoalAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    public GoalDatas: Array<any> = [];\n\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n\n    getAPIName() {\n        return 'saveGoal';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/addCalendarEvent.json';\n    }\n\n    executeSQL() {\n        console.log('GoalDatas', this.GoalDatas);\n        let GoalSetting = this.daoFactory.getDefaultTable('TW_LH_SD_Goal_Setting');\n        let GoalSetting_Ext = this.daoFactory.getDefaultTable('TW_LH_SD_Goal_Setting_Extension');\n        let GoalSettingValue = this.daoFactory.getDefaultTable('TW_LH_SD_Goal_Setting_Value');\n        let GoalSettingPlan = this.daoFactory.getDefaultTable('TW_LH_SD_Goal_Setting_Plan_Value');\n        let GoalSettingPlan_Ext = this.daoFactory.getDefaultTable('TW_LH_SD_Goal_Setting_Plan_Value_Extension');\n        let dao = this.daoFactory.getDefaultDao();\n        console.log('GoalSetting', GoalSetting);\n        console.log('GoalSetting_Ext', GoalSetting_Ext);\n        console.log('GoalSettingValue', GoalSettingValue);\n        console.log('GoalSettingPlan', GoalSettingPlan);\n        console.log('GoalSettingPlan_Ext', GoalSettingPlan_Ext);\n\n        if (GoalSetting && GoalSetting_Ext && GoalSettingValue && GoalSettingPlan && GoalSettingPlan_Ext) {\n            dao.transactionDelete(GoalSetting);\n            dao.transactionDelete(GoalSettingValue);\n            dao.transactionDelete(GoalSettingPlan);\n            dao.transactionDelete(GoalSetting_Ext);\n            dao.transactionDelete(GoalSettingPlan_Ext);\n\n            for (let GoalData of this.GoalDatas) {\n                console.log('GoalData', GoalData);\n\n                let DataYear = GoalData.DataYear;\n                console.log('DataYear', DataYear);\n\n                if (GoalData.GoalSetting != null) {\n                    let GoalSettingData = GoalData.GoalSetting;\n                    let clientID = uuid();\n                    console.log('GoalSettingData', GoalSettingData);\n                    GoalSetting.setValue(\"ClientID\", clientID);\n                    GoalSetting.setValue(\"DataYear\", DataYear);\n                    GoalSetting.setValue(\"ApproveStatus\", GoalSettingData.Status);\n                    GoalSetting.setValue(\"IsNeedSetting\", GoalSettingData.IsNeedSetting ? \"Y\" : \"N\");\n                    GoalSetting.setValue(\"IsFirstTime\", GoalSettingData.IsFirstTime ? \"Y\" : \"N\");\n                    GoalSetting.setValue(\"Remainingdays\", GoalSettingData.Remainingdays);\n                    GoalSetting.setValue(\"GoalSetMonth\", GoalSettingData.GoalSetMonth);\n                    GoalSetting.setValue(\"PersonnelGoalApplicableYM\", GoalSettingData.PersonnelGoalApplicableYM);\n                    GoalSetting.setValue(\"TeamGoalApplicableYM\", GoalSettingData.TeamGoalApplicableYM);\n                    GoalSetting.setValue(\"SupervisorComment\", GoalSettingData.SupervisorComment);\n                    dao.transactionInsert(GoalSetting);\n\n                    //Extension\n                    GoalSetting_Ext.setValue(\"ClientID\", clientID);\n                    if (GoalSettingData.extensions) {\n                        GoalSettingData.extensions.forEach(ext => {\n                            GoalSetting_Ext.setValue(ext.id, ext.value);\n                        });\n                    }\n                    dao.transactionInsert(GoalSetting_Ext);\n                }\n\n                if (GoalData.GoalValue != null) {\n                    let GoalValueDatas: Array<any> = GoalData.GoalValue;\n                    console.log('GoalValueDatas', GoalValueDatas);\n                    for (let data of GoalValueDatas) {\n                        GoalSettingValue.setValue(\"ClientID\", uuid());\n                        GoalSettingValue.setValue(\"DataYear\", DataYear);\n                        GoalSettingValue.setValue(\"DataType\", data.DataType);\n                        GoalSettingValue.setValue(\"Value\", data.Value.toString());\n                        dao.transactionInsert(GoalSettingValue);\n                    }\n                }\n\n                if (GoalData.GoalPlan != null) {\n                    let GoalPlanData = GoalData.GoalPlan;\n                    console.log('GoalPlanData', GoalPlanData);\n                    if (GoalPlanData.TimeBase == 'Month') {\n                        let GoalPlanDatas: Array<any> = GoalPlanData.Values;\n                        for (let data of GoalPlanDatas) {\n                            let clientID = uuid();\n                            GoalSettingPlan.setValue(\"ClientID\", clientID);\n                            GoalSettingPlan.setValue(\"DataYear\", DataYear);\n                            GoalSettingPlan.setValue(\"PerformanceType\", data.PerformanceType);\n                            GoalSettingPlan.setValue(\"Month\", data.Month);\n                            GoalSettingPlan.setValue(\"Value\", data.Value);\n                            dao.transactionInsert(GoalSettingPlan);\n\n                            //Extension\n                            GoalSettingPlan_Ext.setValue(\"ClientID\", clientID);\n                            if (data.extensions) {\n                                data.extensions.forEach(ext => {\n                                    GoalSettingPlan_Ext.setValue(ext.id, ext.value);\n                                });\n                            }\n                            dao.transactionInsert(GoalSettingPlan_Ext);\n                        }\n                    }\n                }\n            }\n            return dao.runTransaction();\n        }\n        else return of(false);\n    }\n}","import { IAPI } from \"../API.interface\";\nimport { ISQLiteAPI } from \"../SQLiteAPI.interface\";\nimport { of } from \"rxjs\";\nimport { IMockAPI } from \"../MockAPI.interface\";\nimport { DaoFactory } from \"../../device/sqlite/DaoFactory\";\nimport { v4 as uuid } from 'uuid';\n\nexport class saveActualAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    public ActualDatas: Array<any> = [];\n\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n\n    getAPIName() {\n        return 'saveActual';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/addCalendarEvent.json';\n    }\n\n    executeSQL() {\n        console.log('ActualDatas', this.ActualDatas);\n        let ActualValue = this.daoFactory.getDefaultTable('TW_LH_SD_Actual_Value');\n        let ActualValueExt = this.daoFactory.getDefaultTable('TW_LH_SD_Actual_Value_Extension');\n        let dao = this.daoFactory.getDefaultDao();\n        console.log('ActualValue', ActualValue);\n        if (ActualValue) {\n            dao.transactionDelete(ActualValue);\n            dao.transactionDelete(ActualValueExt);\n            for (let ActualData of this.ActualDatas) {\n                console.log('ActualData', ActualData);\n\n                let DataYear = ActualData.DataYear;\n                console.log('DataYear', DataYear);\n\n                let ActualMainDatas: Array<any> = ActualData.Values;\n                console.log('ActualMainDatas', ActualMainDatas);\n                for (let data of ActualMainDatas) {\n                    let clientID = uuid();\n                    ActualValue.setValue(\"ClientID\", clientID);\n                    ActualValue.setValue(\"DataYear\", DataYear);\n                    ActualValue.setValue(\"DataType\", data.DataType);\n                    ActualValue.setValue(\"PerformanceType\", data.PerformanceType);\n                    ActualValue.setValue(\"Month\", data.Month);\n                    ActualValue.setValue(\"Value\", data.Value);\n                    dao.transactionInsert(ActualValue);\n\n                    ActualValueExt.setValue(\"ClientID\", clientID);\n                    if (data.extensions) {\n                        data.extensions.forEach(ext => {\n                            ActualValueExt.setValue(ext.id, ext.value);\n                        });\n                    }\n                    dao.transactionInsert(ActualValueExt);\n                }\n\n            }\n            return dao.runTransaction();\n        }\n        else return of(false);\n    }\n}","import { IAPI } from '../API.interface';\nimport { IRestfulAPI } from '../RestfulAPI.interface';\nimport { APIRequest } from '../APIRequest';\nimport { HttpParams } from '@angular/common/http';\nimport { IMockAPI } from '../MockAPI.interface';\n\nexport class getActualAPI implements IAPI, IRestfulAPI, IMockAPI{\n\n    constructor(private APP_CONFIG: any) { }\n\n    private agentID = '';\n    public url = '';\n    public lastUpdateTime: string = '2019-01-01 00:00:00';\n\n    public setAgentID( agent_id){\n        this.agentID = agent_id;\n    }\n\n    getMockPath(): string {\n        return 'assets/mock/Actual.json';\n    }\n\n    getAPIName() {\n        return 'getActual';\n    }\n\n    getRequestData() {\n        let requestData = new APIRequest();\n        let env = this.APP_CONFIG.ENV;\n        if(this.agentID != '' && this.agentID != undefined && this.agentID != null){\n            this.url = this.APP_CONFIG[env].API_URL.getActual;\n            requestData.url = this.url + '/' + this.agentID;\n        }else{\n            requestData.url = this.url;\n        }\n        requestData.type = \"GET\";\n        requestData.params = new HttpParams()\n        .set('lastUpdateTime', this.lastUpdateTime);\n        return requestData;\n    }\n}","import { IAPI } from '../API.interface';\nimport { IRestfulAPI } from '../RestfulAPI.interface';\nimport { APIRequest } from '../APIRequest';\nimport { HttpParams } from '@angular/common/http';\nimport { IMockAPI } from '../MockAPI.interface';\nimport { SubmitGoalData } from '../../bean';\n\n\nexport class pushGoalSettingDataAPI implements IAPI, IMockAPI, IRestfulAPI {\n\n    public url: string = '';\n    public mainData: SubmitGoalData;\n\n    constructor() { }\n\n    getAPIName() {\n        return 'pushGoalSettingData';\n    }\n\n    getRequestData() {\n        let requestData = new APIRequest();\n        requestData.url = this.url;\n        requestData.body = this.mainData;\n        requestData.type = \"POST\";\n        return requestData;\n    }\n\n    getMockPath() {\n        return './assets/mock/GoalCallback.json';\n    }\n}","import { IAPI } from '../API.interface';\nimport { IRestfulAPI } from '../RestfulAPI.interface';\nimport { APIRequest } from '../APIRequest';\nimport { HttpParams } from '@angular/common/http';\nimport { IMockAPI } from '../MockAPI.interface';\n\n\nexport class pushApproveGoalAPI implements IAPI, IMockAPI, IRestfulAPI {\n\n    public url: string = '';\n    public mainData: any = {};\n\n    constructor() { }\n\n    getAPIName() {\n        return 'pushApproveGoal';\n    }\n\n    getRequestData() {\n        let requestData = new APIRequest();\n        requestData.url = this.url;\n        requestData.body = this.mainData;\n        requestData.type = \"POST\";\n        return requestData;\n    }\n\n    getMockPath() {\n        return './assets/mock/logout.json';\n    }\n}","\nimport { Observable, of } from \"rxjs\";\nimport { IAPI } from \"../API.interface\";\nimport { IMockAPI } from \"../MockAPI.interface\";\nimport { ISQLiteAPI } from \"../SQLiteAPI.interface\";\nimport { DaoFactory } from \"../../device/sqlite/DaoFactory\";\nimport { SQLiteResponse } from \"../../device/sqlite/SQLiteResponse\";\nimport { EqualRestriction } from \"../../device/sqlite/restrictions/EqualRestriction\";\n\nexport class GetDeviceInfoAPI implements IAPI, ISQLiteAPI {\n\n\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n\n    private dataType = '';\n\n    setDataType(dataType: string) {\n        this.dataType = dataType;\n    }\n    public token = '';\n\n    getAPIName(): string {\n        return 'getDeviceInfo';\n    }\n    getMockPath(): string {\n        if (this.dataType === 'StepupLevel') {\n            return './assets/mock/getDeviceInfoForAgentInfo.json';\n        }\n        else {\n            return './assets/mock/getDeviceInfo.json'\n        }\n    }\n\n    executeSQL(): Observable<any> {\n        // return sha-256: \"test||test\"\n        let infoObj = this.daoFactory.getTable(\"Profile\", \"TW_LH_SD_DeviceInfo\");\n        let dao = this.daoFactory.getDao(\"Profile\");\n        if (this.dataType != '') {\n            infoObj.addRestriction(new EqualRestriction('Category', [this.dataType]));\n        }\n        return dao.queryByTable(infoObj);\n    }\n}\n","import { HttpClient } from \"@angular/common/http\";\nimport { IAPI } from \"../API.interface\";\nimport { IRestfulAPI } from \"../RestfulAPI.interface\";\nimport { IMockAPI } from \"../MockAPI.interface\";\nimport { APIRequest } from \"../APIRequest\";\n\nexport class LoginAPI implements IAPI, IRestfulAPI, IMockAPI {\n\n  constructor() { }\n\n  public url = '';\n  public body = {};\n  public type = \"GET\";\n  public params = null;\n\n  public getAPIName() {\n    return 'onlineLogin';\n  }\n\n  public getMockPath() {\n    return './assets/mock/onlineLogin.json';\n  }\n\n  public getRequestData() {\n    let requestData = new APIRequest();\n    requestData.body = this.body;\n    requestData.url = this.url;\n    requestData.type = \"POST\";\n    requestData.params = this.params;\n    return requestData;\n  }\n\n}\n\n","import { Observable } from 'rxjs';\nimport { IAPI } from '../API.interface';\nimport { IMockAPI } from '../MockAPI.interface';\nimport { ISQLiteAPI } from '../SQLiteAPI.interface';\nimport { DaoFactory } from '../../device/sqlite/DaoFactory';\nimport { PageInfo } from '../../utils/pageInfo';\nimport { ClientCustomDao } from '../../device/sqlite/ClientCustomDao';\nimport { EqualRestriction } from '../../device/sqlite/restrictions/EqualRestriction';\nimport { LimitRestriction } from '../../device/sqlite/restrictions/LimitRestriction';\nimport { OffsetRestriction } from '../../device/sqlite/restrictions/OffsetRestriction';\nimport { StringUtils } from '../../utils/StringUtils';\nimport { OrderByRestriction } from '../../device';\n\nexport class DashboardGetMessageListAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n\n    private _keyword: string;\n    private _pageInfo: PageInfo;\n    private _isPopup: boolean = null;\n    private _isShow: boolean = null;\n\n    public get isShow(): boolean {\n        return this._isShow;\n    }\n    public set isShow(value: boolean) {\n        this._isShow = value;\n    }\n\n    setKeyword(keyword: string) {\n        this._keyword = keyword;\n    }\n\n    setPageInfo(pageInfo: PageInfo) {\n        this._pageInfo = pageInfo;\n    }\n\n    setIsPopup(val: boolean) {\n        this._isPopup = val;\n    }\n\n    getAPIName(): string {\n        return 'getDashboardMessageList';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/getDashboardMessageList.json';\n    }\n\n    executeSQL(): Observable<any> {\n        return Observable.create((observer) => {\n            let dao = this.daoFactory.getDefaultDao();\n            if (dao != undefined) {\n\n                //save customer data\n                let messageObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Message\");\n                if (messageObj) {\n\n                    dao = new ClientCustomDao(dao);\n\n                    if (StringUtils.isNotEmpty(this._keyword)) {\n                        if (this._keyword == 'All') { }\n                        else if (this._keyword == 'UnRead') {\n                            messageObj.addRestriction(new EqualRestriction(\"Status\", [this._keyword]));\n                        }\n                        else if(this._keyword === 'PendingApproval') {\n                            messageObj.addRestriction(new EqualRestriction(\"MessageCategory\", ['GoalSetting']));\n                            messageObj.addRestriction(new EqualRestriction(\"MessageType\", ['Need_Goal_Approve']));\n                            messageObj.addRestriction(new EqualRestriction(\"LinkStatus\", ['Approve']));\n\n                        }\n                        else if (this._keyword == 'Customer' || this._keyword == 'Calendar' || this._keyword == 'GoalSetting' || this._keyword == 'Progress') {\n                            messageObj.addRestriction(new EqualRestriction(\"MessageCategory\", [this._keyword]));\n                        }\n                    }\n\n                    if (this._isPopup !== null) {\n                        let isPopup = this._isPopup ? 'Y' : 'N';\n                        messageObj.addRestriction(new EqualRestriction(\"IsPopup\", [isPopup]));\n                    }\n\n                    if (this._isShow !== null) {\n                        let isShow = this._isShow ? 'Y' : 'N';\n                        messageObj.addRestriction(new EqualRestriction(\"IsShow\", [isShow]));\n                    }\n\n                    //add page limit\n                    if (this._pageInfo) {\n                        messageObj.addRestriction(new LimitRestriction([this._pageInfo.pageSize]));\n                        messageObj.addRestriction(new OffsetRestriction([(this._pageInfo.page - 1) * this._pageInfo.pageSize]));\n                    }\n\n                    //add order\n                    messageObj.addRestriction(new OrderByRestriction([{ column: 'MessageTime', order: 'DESC' }]))\n\n                    dao.queryByTable(messageObj).subscribe((resp) => {\n                        console.log(\"queryByTable: \", JSON.stringify(resp));\n                        observer.next(resp);\n                        observer.complete();\n                    });\n                }\n                else {\n                    observer.next(false);\n                    observer.complete();\n                }\n\n            }\n            else {\n                observer.next(false);\n                observer.complete();\n            }\n        });\n    }\n}\n","import { Observable } from 'rxjs';\nimport { IAPI } from '../API.interface';\nimport { IMockAPI } from '../MockAPI.interface';\nimport { ISQLiteAPI } from '../SQLiteAPI.interface';\nimport { DaoFactory } from '../../device/sqlite/DaoFactory';\nimport { ClientCustomDao } from '../../device/sqlite/ClientCustomDao';\nimport { EqualRestriction } from '../../device/sqlite/restrictions/EqualRestriction';\nimport { SQLiteTable } from '../../device/sqlite/SQLiteTable';\nimport { InRestriction } from '../../device/sqlite/restrictions/InRestriction';\n\n\nexport class DashboardUpdateMessageStatusAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    private _clientID: string;\n    private _clientIDList: Array<string> = [];\n    private _status: string;\n\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n\n    setClientID(clientID: string) {\n        this._clientID = clientID;\n    }\n\n    setClientIDList(list: Array<string>) {\n        this._clientIDList = list;\n    }\n\n    setStatus(status: string) {\n        this._status = status;\n    }\n\n    getAPIName(): string {\n        return 'updateDashboardMessageStatus';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/saveSuccess.json';\n    }\n\n    executeSQL(): Observable<any> {\n\n        return Observable.create((observer) => {\n            let dao = this.daoFactory.getDefaultDao();\n            if (dao != undefined) {\n\n                //save customer data\n                let messageObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Message\");\n                if (messageObj) {\n                    dao = new ClientCustomDao(dao);\n\n                    messageObj = (<SQLiteTable>messageObj);\n\n\n                    if (this._clientIDList.length > 0) {\n                        messageObj.addRestriction(new InRestriction('ClientID', this._clientIDList));\n                    } else {\n                        messageObj.addRestriction(new EqualRestriction('ClientID', [this._clientID]));\n                    }\n                    messageObj.setValue(\"Status\", this._status);\n\n                    dao.updateByTable(messageObj).subscribe((resp) => {\n\n                        observer.next(resp);\n                        observer.complete();\n                    });\n                }\n                else {\n                    observer.next(false);\n                    observer.complete();\n                }\n\n            }\n            else {\n                observer.next(false);\n                observer.complete();\n            }\n        });\n    }\n}\n","import { Observable, of, from } from 'rxjs';\nimport { IAPI } from '../API.interface';\nimport { IMockAPI } from '../MockAPI.interface';\nimport { ISQLiteAPI } from '../SQLiteAPI.interface';\nimport { DaoFactory } from '../../device/sqlite/DaoFactory';\nimport { TranslateService } from '../../language/translate.service';\nimport { DeviceService } from '../../device/device.service';\nimport { EqualRestriction } from '../../device';\n\nexport class ChangeMessageStatusAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    private _messageID = null;\n    private _col = null;\n    private _val = null;\n\n    public get val() {\n        return this._val;\n    }\n    public set val(value) {\n        this._val = value;\n    }\n\n    public get col() {\n        return this._col;\n    }\n    public set col(value) {\n        this._col = value;\n    }\n    public get messageID() {\n        return this._messageID;\n    }\n    public set messageID(value) {\n        this._messageID = value;\n    }\n\n    constructor(private daoFactory: DaoFactory) {\n    }\n\n    getAPIName(): string {\n        return 'ChangeMessageStatus';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/addCalendarEvent.json';\n    }\n\n    executeSQL(): Observable<any> {\n\n        if(this._messageID && this._col && this._val){\n            return from(this._updateStatus(this._messageID, this._col, this._val));\n        }else{\n            return of(false);\n        }\n    }\n\n    private async _updateStatus(messageID, col, val){\n        let resp = null;\n        let dao = this.daoFactory.getDefaultDao();\n        let Message = this.daoFactory.getDefaultTable('TW_LH_SD_Message');\n        console.log(\"_updateStatus Message\",Message)\n        if(Message){\n            Message.addRestriction(new EqualRestriction(\"MessageID\",[messageID]));\n            let messageResp = await dao.queryByTable(Message).toPromise();\n            if(messageResp.Header[\"status\"] && messageResp.Body.length>0){\n                Message.setValue(col,val);\n                resp = await dao.updateByTable(Message).toPromise();\n            }\n        }\n        console.log(\"_updateStatus resp\", resp);\n        return resp;\n    }\n\n}\n","\nimport { Observable, of } from \"rxjs\";\nimport { IAPI } from \"../API.interface\";\nimport { IMockAPI } from \"../MockAPI.interface\";\nimport { ISQLiteAPI } from \"../SQLiteAPI.interface\";\nimport { ClientCustomDao, DaoFactory } from '../../device/sqlite';\nimport { EqualRestriction } from '../../device/sqlite';\nimport { IRestfulAPI } from \"../RestfulAPI.interface\";\nimport { APIRequest } from \"../APIRequest\";\n\nexport class UnbindDeviceAPI implements IAPI, IMockAPI, IRestfulAPI {\n\n    constructor(private APP_CONFIG: any) {\n    }\n\n\n    private _deviceID: string = '';\n\n    setDeviceID(deviceID: string) {\n        this._deviceID = deviceID;\n    }\n\n    getAPIName(): string {\n        return 'unbindDevice';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/logout.json';\n    }\n\n    getRequestData(): APIRequest {\n        let env = this.APP_CONFIG.ENV;\n        let cleanDeviceUrl = this.APP_CONFIG[env]['API_URL']['unbindDevice'];\n        let requestData = new APIRequest();\n        requestData.url = cleanDeviceUrl;\n        requestData.body = { \"DeviceId\": this._deviceID };\n        requestData.type = \"POST\";\n        return requestData;\n    }\n}\n","import { Observable } from 'rxjs';\nimport { IAPI } from '../API.interface';\nimport { IMockAPI } from '../MockAPI.interface';\nimport { ISQLiteAPI } from '../SQLiteAPI.interface';\nimport { DaoFactory } from '../../device/sqlite/DaoFactory';\nimport { SQLiteTable } from '../../device/sqlite/SQLiteTable';\nimport { ClientCustomDao } from '../../device/sqlite/ClientCustomDao';\n\nexport class UpdateTimeListAPI implements IAPI, IMockAPI, ISQLiteAPI {\n  private _DaoFactory: DaoFactory;\n  constructor(DaoFactory) {\n    this._DaoFactory = DaoFactory;\n  }\n\n  getAPIName(): string {\n    return 'getUpdateTimeList';\n  }\n\n  getMockPath(): string {\n    return \"./assets/mock/getUpdateTimeList.json\";\n  }\n\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let dataSyncObj = this._DaoFactory.getTable('Profile', \"TW_LH_SD_VW_FuncSync_Time\");\n      let dao = this._DaoFactory.getDao('Profile');\n      if (dataSyncObj != undefined && dao != undefined) {\n        dataSyncObj = (<SQLiteTable>dataSyncObj);\n        dao = new ClientCustomDao(dao);\n        dao.queryByTable(dataSyncObj).subscribe((resp) => {\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n}\n","import { Injectable, Inject } from \"@angular/core\";\nimport { ProfileCodeAPI } from \"../../api/register/ProfileCode\";\nimport { SettingAPI } from '../../api/register/SettingAPI';\nimport { ExtensionConfigAPI } from \"../../api/register/ExtensionConfigAPI\";\nimport { IInitTask } from \"../interface/InitialTask.interface\";\nimport { APIFactory } from \"../../api/APIFactory\";\nimport { DaoFactory } from \"../../device/sqlite/DaoFactory\";\nimport { DeviceFactory } from \"../../device/DeviceFactory\";\nimport { OfflineAuthAPI } from \"../../api/register/offineAuthAPI\";\nimport { saveLoginTokenAPI } from \"../../api/register/loginTokenAPI\";\nimport { CheckVersionAPI } from '../../api/register/CheckVersionAPI';\nimport { MenuAPI } from \"../../api/register/menuAPI\";\nimport { SettingUpdateAPI, } from \"../../api/register/SettingUpdateAPI\";\nimport { ContactsSearchAPI } from '../../api/register/ContactsSearchAPI';\nimport { SyncPushAPI } from \"../../api/register/SyncPushAPI\";\nimport { SyncPullAPI } from \"../../api/register/SyncPullAPI\";\nimport { CurrentLanguageListAPI } from '../../api/register/CurrentLanguageListAPI';\nimport { BindingAccountAPI } from \"../../api/register/BindingAccountAPI\";\nimport { DeviceAccountAPI } from \"../../api/register/DeviceAccountAPI\";\nimport { UpdatePushIDAPI } from \"../../api/register/UpdatePushIDAPI\";\nimport { syncSequenceIDAPI } from \"../../api/register/syncSequenceIDAPI\";\nimport { logErrorAPI } from \"../../api/register/logErrorAPI\";\nimport { logActionAPI } from \"../../api/register/logActionAPI\";\nimport { PushErrorLogAPI } from \"../../api/register/pushErrorLogAPI\";\nimport { PushActionLogAPI } from \"../../api/register/PushActionLogAPI\";\nimport { RouterMapAPI } from \"../../api/register/RouterMapAPI\";\nimport { getYearConfigAPI } from \"../../api/register/getYearConfigAPI\";\nimport { saveYearConfigAPI } from \"../../api/register/saveYearConfigAPI\";\nimport { getAgencyPlanAPI } from \"../../api/register/getAgencyPlanAPI\";\nimport { saveAgencyPlanAPI } from \"../../api/register/saveAgencyPlanAPI\";\nimport { saveProgressAPI } from \"../../api/register/saveProgressAPI\";\nimport { getProgressAPI } from \"../../api/register/getProgressAPI\";\n\nimport { MetaConfigAPI } from \"../../api/register/MetaConfigAPI\";\nimport { SettingValueAPI } from \"../../api/register/SettingValueAPI\";\nimport { TranslateService } from \"../../language/translate.service\";\nimport { DeviceService } from \"../../device/device.service\";\nimport { getGoalAPI } from \"../../api/register/getGoalAPI\";\nimport { saveGoalAPI } from \"../../api/register/saveGoalAPI\";\nimport { saveActualAPI } from \"../../api/register/saveActual\";\nimport { getActualAPI } from \"../../api/register/getActual\";\nimport { pushGoalSettingDataAPI } from \"../../api/register/pushGoalSettingDataAPI\";\nimport { pushApproveGoalAPI } from \"../../api/register/pushApproveGoalAPI\";\nimport { ConfigToken } from \"../../injectionToken/injection-token\";\nimport { GetDeviceInfoAPI } from \"../../api/register/GetDeviceInfoAPI\";\nimport { LoginAPI } from \"../../api/register/LoginAPI\";\nimport { DashboardGetMessageListAPI } from \"../../api/register/DashboardGetMessageListAPI\";\nimport { DashboardUpdateMessageStatusAPI } from \"../../api/register/DashboardUpdateMessageStatusAPI\";\nimport { ChangeMessageStatusAPI } from \"../../api/register/changeMessageStatusAPI\";\nimport { UnbindDeviceAPI } from \"../../api/register/UnbindDeviceAPI\";\nimport { UpdateTimeListAPI } from \"../../api/register/UpdateTimeListAPI\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class RegisterAPITask implements IInitTask {\n\n    constructor(private APIFactory: APIFactory,\n        private DAOFactory: DaoFactory,\n        private deviceFactory: DeviceFactory,\n        private translateService: TranslateService,\n        private deviceService: DeviceService,\n        @Inject(ConfigToken) private APP_CONFIG: any\n    ) { }\n    doTask(): Promise<any> {\n        return new Promise((res, rej) => {\n            console.log('register API');\n            //register Setting API\n            this.APIFactory.registerAPI(new SettingAPI(this.DAOFactory));\n            this.APIFactory.registerAPI(new SettingUpdateAPI(this.DAOFactory));\n            //register Config API\n            this.APIFactory.registerAPI(new ExtensionConfigAPI());\n            //register Profile API\n            this.APIFactory.registerAPI(new ProfileCodeAPI(this.DAOFactory));\n            //register Device API\n            this.APIFactory.registerAPI(new CurrentLanguageListAPI(this.DAOFactory));\n            //register Login API\n            this.APIFactory.registerAPI(new saveLoginTokenAPI(this.DAOFactory));\n            this.APIFactory.registerAPI(new OfflineAuthAPI(this.DAOFactory, this.APP_CONFIG));\n            //register getMenu API\n            this.APIFactory.registerAPI(new MenuAPI());\n            //register checkversion API\n            this.APIFactory.registerAPI(new CheckVersionAPI());\n            //register datasync API\n            this.APIFactory.registerAPI(new SyncPushAPI());\n            this.APIFactory.registerAPI(new SyncPullAPI());\n            //register UpdatePushID API\n            this.APIFactory.registerAPI(new UpdatePushIDAPI());\n            //register getSyncSequence API\n            this.APIFactory.registerAPI(new syncSequenceIDAPI());\n\n            //register account binding API\n            this.APIFactory.registerAPI(new BindingAccountAPI(this.DAOFactory));\n            this.APIFactory.registerAPI(new DeviceAccountAPI(this.DAOFactory));\n\n            this.APIFactory.registerAPI(new ContactsSearchAPI(this.deviceFactory));\n\n            this.APIFactory.registerAPI(new logErrorAPI(this.DAOFactory));\n            this.APIFactory.registerAPI(new logActionAPI(this.DAOFactory));\n\n            this.APIFactory.registerAPI(new PushErrorLogAPI());\n            this.APIFactory.registerAPI(new PushActionLogAPI());\n\n            this.APIFactory.registerAPI(new RouterMapAPI());\n\n            this.APIFactory.registerAPI(new getYearConfigAPI(this.APP_CONFIG));\n            this.APIFactory.registerAPI(new saveYearConfigAPI(this.DAOFactory));\n            this.APIFactory.registerAPI(new getAgencyPlanAPI(this.APP_CONFIG));\n            this.APIFactory.registerAPI(new saveAgencyPlanAPI(this.DAOFactory));\n            this.APIFactory.registerAPI(new getProgressAPI(this.APP_CONFIG));\n            this.APIFactory.registerAPI(new saveProgressAPI(this.DAOFactory));\n            this.APIFactory.registerAPI(new getGoalAPI(this.APP_CONFIG));\n            this.APIFactory.registerAPI(new saveGoalAPI(this.DAOFactory));\n            this.APIFactory.registerAPI(new getActualAPI(this.APP_CONFIG));\n            this.APIFactory.registerAPI(new saveActualAPI(this.DAOFactory));\n            this.APIFactory.registerAPI(new pushGoalSettingDataAPI());\n            this.APIFactory.registerAPI(new pushApproveGoalAPI());\n            this.APIFactory.registerAPI(new GetDeviceInfoAPI(this.DAOFactory));\n\n            this.APIFactory.registerAPI(new MetaConfigAPI());\n            this.APIFactory.registerAPI(new SettingValueAPI(this.translateService, this.deviceService));\n\n            this.APIFactory.registerAPI(new LoginAPI());\n            this.APIFactory.registerAPI(new DashboardGetMessageListAPI(this.DAOFactory));\n            this.APIFactory.registerAPI(new DashboardUpdateMessageStatusAPI(this.DAOFactory));\n            this.APIFactory.registerAPI(new ChangeMessageStatusAPI(this.DAOFactory));\n            this.APIFactory.registerAPI(new UnbindDeviceAPI(this.APP_CONFIG));\n            this.APIFactory.registerAPI(new UpdateTimeListAPI(this.DAOFactory));\n\n            res(\"register API tasks Done!\");\n        })\n    }\n}\n","import { Injectable, ErrorHandler, Optional, Inject } from '@angular/core';\nimport { configTaskToken, registerAPITaskToken, dataSyncTaskToken, customTaskToken, initialFinishToken } from '../injectionToken';\nimport { IInitTask } from './interface/InitialTask.interface';\nimport { DataSyncTask } from './tasks/DataSyncTask';\nimport { ConfigTask } from './tasks/ConfigTask';\nimport { DeviceTask } from './tasks/DeviceTask';\nimport { RegisterAPITask } from './tasks/RegisterAPITask';\nimport { initialFinish } from './interface/initialFinish.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InitialService {\n  _sequentialTasks = [];\n  _parallelTasks = [];\n  constructor(\n    private errorHandler: ErrorHandler,\n    private dataSyncTask: DataSyncTask,\n    private configTask: ConfigTask,\n    private deviceTask: DeviceTask,\n    private registerAPITask: RegisterAPITask,\n    @Optional() @Inject(registerAPITaskToken) private customRegisterAPITask: IInitTask,\n    @Optional() @Inject(customTaskToken) private customTask: IInitTask,\n    @Optional() @Inject(initialFinishToken) private initialFinish: initialFinish) {\n    //register sequential tasks\n    if (this.registerAPITask)\n      this._sequentialTasks.push(this.registerAPITask);\n    if (this.customRegisterAPITask)\n      this._sequentialTasks.push(this.customRegisterAPITask);\n    if (this.dataSyncTask)\n      this._sequentialTasks.push(this.dataSyncTask);\n    if (this.deviceTask)\n      this._sequentialTasks.push(this.deviceTask);\n    if (this.configTask)\n      this._sequentialTasks.push(this.configTask);\n    if (this.customTask)\n      this._sequentialTasks.push(this.customTask);\n\n    //register parallel tasks\n    // this._parallelTasks.push(this.configTask);\n  }\n\n  public async load(): Promise<any> {\n    console.log('initial service load!', this._sequentialTasks);\n    try {\n      await this.waitnseconds(1000);\n      for (let t of this._sequentialTasks) {\n        await t.doTask()\n      }\n      await Promise.all(this._parallelTasks.map(task => task.doTask())).then(val => {\n      });\n      await this.dataSyncTask.refreshSchema();\n      if(this.initialFinish) {\n        this.initialFinish.afterInitialFinish();\n      }\n    } catch (err) {\n      console.warn('Initial Error: maybe not on the mobile');\n      this.errorHandler.handleError(err);\n    }\n  }\n\n\n  public waitnseconds(second): Promise<any> {\n    return new Promise((res, rej) => {\n      setTimeout(() => {\n        res();\n      }, second);\n    })\n  }\n}\n","export class APIResponse{\n    private bodyJSON : string;\n\n    public setBodyJSON(bodyJSON) :void {\n        this.bodyJSON = bodyJSON;\n    }\n\n    public getBodyJSON() :string {\n        return this.bodyJSON;\n    }\n}","import { IAPI } from \"../API.interface\";\nimport { IRestfulAPI } from \"../RestfulAPI.interface\";\nimport { IMockAPI } from \"../MockAPI.interface\";\nimport { APIRequest } from \"../APIRequest\";\n\nexport class LogoutAPI implements IAPI, IRestfulAPI, IMockAPI {\n\n  constructor() { }\n\n  public url = '';\n  public body = {};\n  public type = \"GET\";\n  public params = null;\n\n  public getAPIName() {\n    return 'Logout';\n  }\n\n  public getMockPath() {\n    return './assets/mock/logout.json';\n  }\n\n  public getRequestData() {\n    let requestData = new APIRequest();\n    requestData.url = this.url;\n    requestData.type = \"POST\";\n    return requestData;\n  }\n\n}\n","import {Observable, from, of} from 'rxjs';\nimport { IAPI } from '../API.interface';\nimport { IMockAPI } from '../MockAPI.interface';\nimport { ISQLiteAPI } from '../SQLiteAPI.interface';\nimport { ISearchTableByField } from '../../interface/ISearchTableByField';\nimport { DaoFactory, EqualRestriction } from '../../device/sqlite';\n\n\nexport class GetOtherParameterAPI implements IAPI, IMockAPI, ISQLiteAPI, ISearchTableByField {\n\n    private _year: number = -1;\n\n    private _daoFactory: DaoFactory;\n    constructor(daoFactory: DaoFactory) {\n        this._daoFactory = daoFactory;\n    }\n\n    SetYear(value: number): void {\n        this._year = value;\n    }\n\n    getAPIName(): string {\n        return 'getOtherParameter';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/getOtherParameterMock.json';\n    }\n\n    executeSQL(): Observable<any> {\n        console.debug(\"SQLite Start \");\n\n        let defaultDao = this._daoFactory.getDefaultDao();\n        console.debug(\"SQLite defaultDao: \", defaultDao);\n\n        let tableObj = this._daoFactory.getDefaultTable(\"TW_LH_SD_Other_Parameter\"); \n        if(this._year !== -1) {\n            tableObj.addRestriction(new EqualRestriction('DataYear', [this._year]));\n        }\n        console.debug(\"SQLite tableObj: \", tableObj);\n\n        if(defaultDao != undefined && tableObj != undefined) {\n            return from(defaultDao.queryByTable(tableObj).toPromise().then(resp => {\n                console.debug(\"SQLite getOtherParameter resp: \", resp);\n                console.debug(\"SQLite getOtherParameter json resp: \", JSON.stringify(resp)); \n                return resp;\n            }));\n        }\n        else {\n            of(false);\n            console.debug(\"SQLite failed\");\n        }\n    }\n\n}","import { Injectable, Inject } from \"@angular/core\";\nimport { ConfigToken } from \"../injectionToken\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\nimport { APIFactory } from \"../api/APIFactory\";\nimport { APIDispatch } from \"../api/APIDispatch\";\nimport { CheckVersionAPI } from \"../api/register/CheckVersionAPI\";\nimport { DeviceService } from \"../device\";\nimport { Observable } from \"rxjs\";\nimport { versionInfo } from \"../bean\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class VersionCheckService {\n\n    constructor(\n        private httpService: HttpClient,\n        private APIFactory: APIFactory,\n        private dispatcher: APIDispatch,\n        private deviceService: DeviceService,\n        @Inject(ConfigToken) private APP_CONFIG: any\n    ) {\n        this.deviceService.getAppVersion().then((version) => {\n            this.appVersion = version;\n        })\n        this.platform = this.deviceService.getDevicePlatform();\n    }\n    private appVersion;\n    private platform;\n\n    public checkVersion(): Observable<any> {\n        // get app && schema version\n        let checkVersionAPI = this.APIFactory.getAPI('CheckVersion');\n        (<CheckVersionAPI>checkVersionAPI).version = this.appVersion;\n        (<CheckVersionAPI>checkVersionAPI).DeviceSystem = this.deviceService.getDevicePlatform();\n        return Observable.create((observer) => {\n            this.dispatcher.dispatch(checkVersionAPI).subscribe((resp) => {\n                console.log(\"check version resp:\", resp);\n                if (resp.version != this.appVersion) {\n                    observer.next({ isSuccess: true, newVersion: true, appVersion: new versionInfo(resp.appPath, resp.version) });\n                    observer.complete();\n                }\n                else {\n                    observer.next({ isSuccess: true, newVersion: false, appVersion: new versionInfo(resp.appPath, resp.version) });\n                    observer.complete();\n                }\n            }, (error) => {\n                console.warn(\"check Version request error:\", error.message);\n                observer.next({ isSuccess: false, errorMsg: error.message });\n                observer.complete();\n            })\n        });\n\n    }\n\n\n}","export interface IFunctionSync {\n    getName(): string;\n    getState(): FUNC_STATE;\n    setState(state: FUNC_STATE): any;\n    getPushJson(frontendTime: number): Promise<any>;\n    pullData(data: any): Promise<any>;\n    getSequentialIDNeeded(frontendTime: number): Promise<number>;\n    setSequentialID(IdList: Array<string>): Promise<any>;\n}\n\nexport enum FUNC_STATE {\n    PENDING = 0,\n    AVAILABLE = 1\n}","import { Injectable, Inject, Optional, ErrorHandler } from '@angular/core';\nimport { IFunctionSync, FUNC_STATE } from './function/IFunctionSync';\nimport { DaoFactory } from '../device/sqlite/DaoFactory';\nimport { EqualRestriction } from '../device/sqlite/restrictions/EqualRestriction';\nimport { ConfigToken, registerDataSyncFuncToken } from '../injectionToken/injection-token';\nimport { first } from 'rxjs/operators';\nimport { APIFactory } from '../api/APIFactory';\nimport { APIDispatch } from '../api/APIDispatch';\nimport { SyncPushAPI } from '../api/register/SyncPushAPI';\nimport { SyncPullAPI } from '../api/register/SyncPullAPI';\nimport { syncSequenceIDAPI } from '../api/register/syncSequenceIDAPI';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { parseISO } from 'date-fns';\nimport { IregisterDataSyncFunc } from '../initTask/interface/registerDataSyncFunc.interface';\nimport * as _ from 'lodash';\nimport { APPError } from '../errorHandler/APPError';\nimport { IDao } from '../device/sqlite/Dao.interface';\nimport { DeviceService } from '../device/device.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataSyncService {\n\n  private syncAPIMap: Object = {}; // APIåç¨±å°æå°å¯¦ä¾\n  private FuncAPIMap: Object = {}; // åè½å°æå°API\n  private SyncProcessList: Array<string> = []; // ç¶åæ­£å¨syncçåè½\n  private func_url = {};\n  private syncStateSubject = new BehaviorSubject<any>(this.getCurrentSyncState());\n  constructor(\n    @Inject(ConfigToken) private APP_CONFIG: any,\n    private APIFactory: APIFactory,\n    private dispatcher: APIDispatch,\n    private errorHandler: ErrorHandler,\n    private DaoFactory: DaoFactory,\n    private devcieService: DeviceService,\n    @Inject(registerDataSyncFuncToken) private registerDataSyncFunc: IregisterDataSyncFunc\n  ) {\n    this.init();\n  }\n\n  private init() {\n    this.func_url = this.APP_CONFIG[this.APP_CONFIG.ENV].SYNC_URL;\n    this.FuncAPIMap = this.registerDataSyncFunc.getFuncMap();\n    this.registerDataSyncFunc.getSyncInstance().forEach(x => {\n      this.registerAPI(x);\n    })\n  }\n\n  public getSyncState(): Observable<any> {\n    return this.syncStateSubject.asObservable();\n  }\n\n  public registerAPI(func: IFunctionSync) {\n    this.syncAPIMap[func.getName()] = func;\n  }\n\n  async syncAllFunc(async = false) {\n    console.log(\"syncAllFunc:\", this.FuncAPIMap, Object.keys(this.FuncAPIMap));\n    return this.syncFunc(Object.keys(this.FuncAPIMap), async);\n  }\n\n  async syncFunc(FuncList: Array<string>, async = false) {\n    console.log(\"SyncProcessList:\", this.SyncProcessList);\n    console.log(\"Sync Func:\", FuncList);\n\n    if (this.devcieService.getNetworkState()) {\n\n      try {\n        // If not async , filter current sync function first \n        if (!async) {\n          FuncList = FuncList.filter(x => !this.SyncProcessList.includes(x));\n        }\n\n        this.SyncProcessList = [...this.SyncProcessList, ...FuncList];\n\n        let parallelSync = [];\n        let seqSync = [];\n\n        FuncList.forEach((function_name) => {\n\n          if (Object.keys(this.FuncAPIMap).includes(function_name)) {\n            if (this.FuncAPIMap[function_name].length > 1)\n              seqSync = [...seqSync, ...this.FuncAPIMap[function_name]];\n            else\n              parallelSync = [...parallelSync, ...this.FuncAPIMap[function_name]];\n          }\n        });\n        console.log(\"SeqSync before uniq:\", seqSync);\n        console.log(\"parallelSync before uniq:\", parallelSync);\n        seqSync = _.uniq(seqSync);\n        parallelSync = _.uniq(parallelSync);\n        console.log(\"SeqSync after uniq:\", seqSync);\n        console.log(\"parallelSync after uniq:\", parallelSync);\n        console.log(\"SyncProcessList after uniq:\", this.SyncProcessList);\n\n        //DEV mode, skip sync\n        if (this.APP_CONFIG[\"ENV\"] == \"DEV\") {\n          return;\n        }\n\n        let syncPromiseArray = [];\n        let dao = this.DaoFactory.getDao(\"Profile\");\n        if (dao) {\n          let dataSyncTimeObj = this.DaoFactory.getTable(\"Profile\", \"TW_LH_SD_DataSync_Time\");\n          let resp = await dao.queryByTable(dataSyncTimeObj).toPromise();\n          console.log('dataSyncTime resp:', resp);\n          let apiTimeMap = resp.Body;\n\n\n          parallelSync.forEach((api_name) => {\n            syncPromiseArray.push(this.getSyncPromiseObject(api_name, apiTimeMap, dao));\n          });\n\n\n          //DO PARALLEL SYNC\n          await Promise.all(syncPromiseArray);\n\n          //DO SEQ SYNC\n          for (let api_name of seqSync) {\n            await this.getSyncPromiseObject(api_name, apiTimeMap, dao);\n          }\n        }\n        else\n          throw new Error(\"Cannot Find Profile DAO.\");\n\n      } catch (error) {\n        this.errorHandler.handleError(new APPError(\"F00110\", error.message));\n      }\n      finally {\n        this.SyncProcessList = this.SyncProcessList.filter(x => !FuncList.includes(x));\n      }\n    }\n    else {\n      console.log(\"It's offline now, skip syncFunc:\", FuncList);\n    }\n  }\n\n  private async sync(api_name: string, funcTimeMap: Array<any>) {\n    let returnBackendTime: number = funcTimeMap.filter(x => (x.FuncID == api_name)).map(x => x.BackendTime)[0];\n    let returnFrontendTime: number = Date.now();\n    try {\n      let APIInstance: IFunctionSync = this.syncAPIMap[api_name];\n      let url_config = this.func_url[api_name];\n      let backendTime = funcTimeMap.filter(x => (x.FuncID == api_name)).map(x => x.BackendTime)[0];\n      let frontendTIme = funcTimeMap.filter(x => (x.FuncID == api_name)).map(x => x.FrontendTime)[0];\n\n      // Debug console\n      console.group(`last sync ${api_name} time:`);\n      console.log(\"backendTime:\", backendTime);\n      console.log(\"frontendTime:\", frontendTIme);\n      console.groupEnd();\n\n\n      // Do sync\n      if (APIInstance.getState() === FUNC_STATE.AVAILABLE) {\n        // Change to pending\n        APIInstance.setState(FUNC_STATE.PENDING);\n        this.updateState();\n\n        let sequenceIDNumberNeed = await APIInstance.getSequentialIDNeeded(frontendTIme);\n        console.log(\"sequenceID need:\", sequenceIDNumberNeed);\n        if (sequenceIDNumberNeed > 0) {\n          let sequenceIDs = await this.getSequentialID(api_name, sequenceIDNumberNeed);\n          await APIInstance.setSequentialID(sequenceIDs);\n        }\n        let pushJson = await APIInstance.getPushJson(frontendTIme);\n        console.log('pushJson:', pushJson);\n        if (pushJson.length > 0)\n          await this.pushToServer({ data: pushJson, url: url_config.push });\n\n        let pullJson = await this.pullFromServer({ backendTime, url: url_config.pull });\n        console.log('pullJson:', pullJson);\n        let pullResult = await this.syncAPIMap[api_name].pullData(pullJson);\n        console.log('pull result:', pullResult);\n        if (pullResult.Header.status) {\n          returnBackendTime = parseISO(pullJson['lastUpdateTime']).getTime();\n          returnFrontendTime = Date.now();\n        }\n        else {\n          throw new Error(pullResult.Header.msg);\n        }\n      }\n      else {\n        await this.waitUntilSyncFinish(api_name);\n      }\n    } catch (error) {\n      returnFrontendTime = funcTimeMap.filter(x => (x.FuncID == api_name)).map(x => x.FrontendTime)[0];\n      this.errorHandler.handleError(new APPError(\"F00113\", `${api_name} sync failed,` + error.message));\n    }\n    finally {\n      this.syncAPIMap[api_name].setState(FUNC_STATE.AVAILABLE);\n      this.updateState();\n      return Promise.resolve({ backendTime: returnBackendTime, frontendTime: returnFrontendTime });\n    }\n  }\n\n  private async pushToServer({ data, url }) {\n    let pushAPI = this.APIFactory.getAPI(\"SyncPush\");\n    (<SyncPushAPI>pushAPI).url = url;\n    (<SyncPushAPI>pushAPI).body = data;\n    await this.dispatcher.dispatch(pushAPI).toPromise();\n  }\n\n  private async pullFromServer({ backendTime, url }) {\n    let pullAPI = this.APIFactory.getAPI(\"SyncPull\");\n    (<SyncPullAPI>pullAPI).lastUpdateTime = new Date(backendTime).toISOString();\n    (<SyncPullAPI>pullAPI).url = url;\n    return await this.dispatcher.dispatch(pullAPI).toPromise()\n      .then(data => {\n        console.log('data from server:', data);\n        return data;\n      });\n  }\n\n  private getSequentialID(category: string, num: number): Promise<Array<string>> {\n    let getSyncSequenceIDAPI = this.APIFactory.getAPI(\"getSyncSequenceID\");\n    if (getSyncSequenceIDAPI) {\n      (<syncSequenceIDAPI>getSyncSequenceIDAPI).type = category;\n      (<syncSequenceIDAPI>getSyncSequenceIDAPI).num = num;\n      return this.dispatcher.dispatch(getSyncSequenceIDAPI).toPromise().then((resp) => {\n        console.log(\"get sync sequence ID resp:\", resp);\n        return resp['ids'];\n      })\n    }\n\n  }\n\n  private getCurrentSyncState() {\n\n    let state = {};\n    Object.keys(this.syncAPIMap).forEach((val) => {\n      state[val] = this.syncAPIMap[val].getState();\n    })\n    return state;\n  }\n\n  private updateState() {\n    this.syncStateSubject.next(this.getCurrentSyncState());\n  }\n\n\n  private async waitUntilSyncFinish(func: string) {\n    return this.getSyncState().pipe(\n      first(x => Object.entries(x).filter(y => y[0] === func && y[1] === FUNC_STATE.AVAILABLE).length > 0)\n    ).toPromise()\n  }\n\n  private async getSyncPromiseObject(api_name: string, ApiTimeMap: any, dao: IDao) {\n    let { backendTime, frontendTime } = await this.sync(api_name, ApiTimeMap);\n    let dataSyncTimeObj = this.DaoFactory.getTable(\"Profile\", \"TW_LH_SD_DataSync_Time\");\n    dataSyncTimeObj.addRestriction(new EqualRestriction('FuncID', [api_name]));\n    dataSyncTimeObj.setValue('BackendTime', backendTime);\n    dataSyncTimeObj.setValue('FrontendTime', frontendTime);\n    let result = await dao.updateByTable(dataSyncTimeObj).toPromise();\n    console.log(`Finish sync function ${api_name} :`, result);\n    return result;\n  }\n\n\n}\n","import { Injectable, ErrorHandler } from \"@angular/core\";\nimport { DaoFactory } from \"../../device/sqlite/DaoFactory\";\nimport { APIFactory } from \"../../api/APIFactory\";\nimport { PushErrorLogAPI } from \"../../api/register/pushErrorLogAPI\";\nimport { APIDispatch } from \"../../api/APIDispatch\";\nimport { NotEqualRestriction } from \"../../device/sqlite/restrictions/NotEqualRestriction\";\nimport { InRestriction } from \"../../device/sqlite/restrictions/InRestriction\";\nimport { PushActionLogAPI } from \"../../api/register/PushActionLogAPI\";\nimport { SQLiteResponse } from \"../../device/sqlite/SQLiteResponse\";\nimport { SQLCommand } from \"../../device/sqlite/SQLCommand\";\nimport { from, Observable } from \"rxjs\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LogService {\n\n    constructor(\n        private DaoFactory: DaoFactory,\n        private APIFactory: APIFactory,\n        private dispatcher: APIDispatch,\n        private errorHandler:ErrorHandler\n    ) {\n\n    }\n    public pushErrorLog():Observable<any>{\n        return from(this._pushErrorLog());\n    }\n    public pushActionLog():Observable<any>{\n        return from(this._pushActionLog());\n    }\n\n    private async _pushErrorLog() {\n        try {\n            //GET DB DATA\n            console.log(\"into pushErrorLog()\");\n            let dao = this.DaoFactory.getDao(\"Profile\");\n            let ErrorLogTable = this.DaoFactory.getTable(\"Profile\", \"TW_LH_SD_Error_Log\");\n            if (ErrorLogTable) {\n                ErrorLogTable.addRestriction(new NotEqualRestriction(\"IsSend\", ['Y']))\n                let resp: SQLiteResponse = await dao.queryByTable(ErrorLogTable).toPromise();\n                if (resp.Header[\"status\"]) {\n                    console.log(\"error log table data:\", resp.Body);\n                    let errorList = resp.Body;\n                    let pushErrorLogAPI = this.APIFactory.getAPI(\"PushErrorLog\");\n                    (<PushErrorLogAPI>pushErrorLogAPI).errorList = errorList;\n                    let pushResp = await this.dispatcher.dispatch(pushErrorLogAPI).toPromise();\n                    console.log(\"push error Log resp:\", pushResp);\n                    if (pushResp[\"success\"]) {\n                        // let deleteResp = dao.excuteSqlCommand([new SQLCommand('delete from TW_LH_SD_Error_Log where 1=1', [])]);\n                        ErrorLogTable = this.DaoFactory.getTable(\"Profile\", \"TW_LH_SD_Error_Log\");\n                        let deleteResp = await dao.deleteByTable(ErrorLogTable).toPromise();\n\n                        // let errorIds = resp.Body.map(x => x.ErrorID);\n                        // ErrorLogTable = this.DaoFactory.getTable(\"Profile\", \"TW_LH_SD_Error_Log\");\n                        // ErrorLogTable.addRestriction(new InRestriction(\"ErrorID\", errorIds));\n                        // ErrorLogTable.setValue('IsSend', 'Y');\n                        // let updateResp = await dao.updateByTable(ErrorLogTable).toPromise();\n                        console.log(\"deleteResp:\", deleteResp);\n                    }\n                }\n            }\n        }catch (error){\n            this.errorHandler.handleError(new Error('pushErrorLog fail!'));\n        }\n        \n    }\n\n    private async _pushActionLog() {\n        try{\n            console.log(\"into pushActionLog()\");\n            let dao = this.DaoFactory.getDao(\"Profile\");\n            let ActionLogTable = this.DaoFactory.getTable(\"Profile\", \"TW_LH_SD_Action_Log\");\n            ActionLogTable.addRestriction(new NotEqualRestriction(\"IsSend\", ['Y']));\n            let resp = await dao.queryByTable(ActionLogTable).toPromise();\n            if (resp.Header[\"status\"]) {\n                console.log(\"Action log table data:\", resp.Body);\n                let actionList = resp.Body;\n                let pushActionLogAPI = this.APIFactory.getAPI(\"PushActionLog\");\n                (<PushActionLogAPI>pushActionLogAPI).actionList = actionList;\n                let pushResp = await this.dispatcher.dispatch(pushActionLogAPI).toPromise();\n                console.log(\"push action Log resp:\", pushResp);\n                if (pushResp[\"success\"]) {\n                    // let deleteResp = dao.excuteSqlCommand([new SQLCommand('delete from TW_LH_SD_Action_Log where 1=1', [])]);\n                    ActionLogTable = this.DaoFactory.getTable(\"Profile\", \"TW_LH_SD_Action_Log\");\n                    let deleteResp = await dao.deleteByTable(ActionLogTable).toPromise();\n                    // let actionIds = resp.Body.map(x => x.ActionID);\n                    // ActionLogTable = this.DaoFactory.getTable(\"Profile\", \"TW_LH_SD_Action_Log\");\n                    // ActionLogTable.addRestriction(new InRestriction(\"ActionID\", actionIds));\n                    // ActionLogTable.setValue('IsSend', 'Y');\n                    // let updateResp = await dao.updateByTable(ActionLogTable).toPromise();\n                    console.log(\"deleteResp:\", deleteResp);\n                }\n            }\n\n        }catch (error){\n            this.errorHandler.handleError(new Error('pushActionLog fail!'));\n        }\n\n    }\n\n\n}","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { APIFactory } from '../../api/APIFactory';\nimport { APIDispatch } from '../../api/APIDispatch';\nimport { TranslateService } from '../../language/translate.service';\nimport { ProfileCode } from '../../bean/ProfileCode';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProfileCodeService {\n\n  public profileCodeTypeMap = new Map<string,Array<ProfileCode>>();\n  public profileCodeMap = new Map<string,ProfileCode>();\n\n  constructor(private dispatcher: APIDispatch,private translateService : TranslateService,private APIFactory: APIFactory) {\n  }\n\n  public getCodeArray(typeId : string) {\n    if(this.profileCodeTypeMap.size != 0) {\n      let codeArray : Array<ProfileCode> = this.profileCodeTypeMap.get(typeId);\n      if(codeArray == undefined) codeArray = new Array<ProfileCode>();\n      return [...codeArray];\n    }\n    return new Array<ProfileCode>();\n  }\n\n  public convertCode2Text(typeID : string,code : string) : string {\n    if(this.profileCodeMap.size != 0 && code != undefined) {\n      let profileCode : ProfileCode = this.profileCodeMap.get(typeID + '_' + code);\n      if(profileCode != undefined) {\n        let mappingID : string = profileCode.getMappingID();\n        let text = this.translateService.translate(mappingID);\n        return text;\n      }\n    }\n\n    return code;\n  }\n\n  public getArgumentsByCode(typeID : string , code : string) : string {\n    if(this.profileCodeMap.size != 0) {\n      let profileCode : ProfileCode = this.profileCodeMap.get(typeID + '_' + code);\n      if(profileCode != undefined) {\n        return profileCode.getArguments();\n      }\n    }\n    return null;\n  }\n\n  public _fetchCodeData() {\n    let profileCodeAPI : any = this.APIFactory.getAPI('getProfileCode');\n\n    console.debug('profile-code.service fetchCodeData',profileCodeAPI);\n    return Observable.create((observer)=>{\n      this.dispatcher.dispatch(profileCodeAPI).subscribe((data)=>{\n        this.profileCodeTypeMap.clear();\n        this.profileCodeMap.clear();\n\n        let bodyDatas = data['Body'];\n        console.log('<--- Datas --->');\n        console.log(data);\n        for (let i = 0 ; i < bodyDatas.length ; i++){\n          let json = bodyDatas[i];\n          let profileCode = Object.create(ProfileCode.prototype);\n          profileCode = Object.assign(profileCode,json);\n\n          let typeId = profileCode.getTypeId();\n          let code = profileCode.getCode();\n          let mappingID = profileCode.getMappingID();\n          let text = this.translateService.translate(mappingID);\n          profileCode.setDisplayText(text);\n\n          let codeArray : Array<ProfileCode> = this.profileCodeTypeMap.get(typeId);\n          if(codeArray == undefined) {\n            codeArray = new Array<ProfileCode>();\n          }\n\n          codeArray.push(profileCode);\n          this.profileCodeMap.set(typeId + '_' + code,profileCode);\n          this.profileCodeTypeMap.set(typeId,codeArray);\n        }\n\n        console.debug('profileCodeMap',this.profileCodeMap);\n        console.debug('profileCodeTypeMap',this.profileCodeTypeMap);\n        observer.next(true);\n        observer.complete();\n\n      })\n    })\n  }\n\n}\n","import { Injectable, Optional, Inject } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { LoadingApp } from './LoadingApp.interface';\nimport { VersionCheckService } from '../../dataSync/version-check.service';\nimport { DataSyncService } from '../../dataSync/data-sync.service';\nimport { LogService } from '../../service/log/log.service';\nimport { ProfileCodeService } from '../../service/profile/profile-code.service';\nimport { NotificationMgr } from '../../notification/NotificationMgr';\nimport { NotificationType } from '../../notification/INotificationProvider.interface';\nimport { PushIDMgrToken } from '../../injectionToken/injection-token';\nimport { PushIDMgr } from './PushIDMgr.interface';\nimport { SettingService } from '../../service/setting/setting.service';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DefaultLoadingApp implements LoadingApp {\n    constructor(\n        private versionCheck: VersionCheckService,\n        private syncService: DataSyncService,\n        private logService: LogService,\n        private profileCodeService: ProfileCodeService,\n        private notificationMgr: NotificationMgr,\n        private settingService: SettingService,\n        @Optional() @Inject(PushIDMgrToken) private pushIDMgr: PushIDMgr\n    ) {\n        this.loadedSubject = new Subject<number>();\n    }\n    private loadedSubject: Subject<number>;\n    loading(): void {\n        this._loading();\n    }\n\n    onLoaded(): Observable<number> {\n        return this.loadedSubject.asObservable();\n    }\n\n    private async _loading() {\n        await this.syncService.syncAllFunc(true);\n        this.loadedSubject.next(50);\n        await this.profileCodeService._fetchCodeData().toPromise();\n        this.loadedSubject.next(60);\n        await this.logService.pushActionLog().toPromise();\n        this.loadedSubject.next(70);\n        await this.logService.pushErrorLog().toPromise();\n        this.loadedSubject.next(80);\n        await this.notificationMgr.init();\n        this.loadedSubject.next(85);\n        await this.settingService.deviceChange(this.pushIDMgr.getPushID());\n        this.loadedSubject.next(88);\n        //after sync finish ,check version\n        let versionResp = await this.versionCheck.checkVersion().toPromise();\n        if (versionResp.isSuccess) {\n            this.loadedSubject.next(95);\n            if (versionResp.newVersion) {\n                this.notificationMgr.pushNotification(NotificationType.NewVersionLogin, versionResp.appVersion);\n            }\n            else {\n                setTimeout(() => {\n                    this.loadedSubject.next(100);\n                }, 800);\n            }\n        }\n        else {\n            console.log(\"Check version error!!\");\n            this.loadedSubject.next(100);\n        }\n    }\n\n\n\n\n\n}","export class RouteObject {\n    private url: string;\n    public getUrl() {\n        return this.url;\n    }\n    constructor(url) {\n        this.url = url;\n    }\n}","import { IFunctionSync, FUNC_STATE } from \"./IFunctionSync\";\nimport { GreaterRestriction } from \"../../device/sqlite/restrictions/GreaterRestriction\";\nimport { DaoFactory } from \"../../device/sqlite/DaoFactory\";\nimport { EqualRestriction } from \"../../device/sqlite/restrictions/EqualRestriction\";\nimport { v4 as uuid } from 'uuid';\nimport { parseISO } from 'date-fns';\nimport { ISyncAOP } from \"./SyncAOP.interface\";\nimport { SQLiteResponse } from \"../../device/sqlite/SQLiteResponse\";\n\n\n\nexport class CalendarSync implements IFunctionSync {\n    private state: number;\n    private tmpPushData = null;\n    constructor(private DaoFactory: DaoFactory, private PushAOP: ISyncAOP = null, private PullAOP: ISyncAOP = null) {\n        this.state = FUNC_STATE.AVAILABLE;\n    }\n\n    getState(): FUNC_STATE {\n        return this.state;\n    }\n\n    getName(): string {\n        return 'CALENDAR'\n    }\n\n    async getPushJson(frontendTime) {\n        // Do check data clientTime > frontendTime;\n        let dao = this.DaoFactory.getDefaultDao();\n        let calendarExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Calendar_Extension');\n        let returnJson = [];\n        let customerIDMap = await this.getCustomerIDMap();\n        let pushData = await this.getPushData(frontendTime);\n        let extCols = calendarExtObj.getColumns().filter(x => x.getName() !== 'ClientID' && x.getName() !== 'CalendarID');\n\n        returnJson = pushData.map(calendarObj => {\n            let extensions = extCols\n                .map(col => {\n                    return {\n                        id: col.getName(),\n                        type: col.getType(),\n                        value: calendarObj[col.getName()]\n                    }\n                });\n            return {\n                \"appointmentId\": calendarObj.CalendarID,\n                \"name\": calendarObj.Title,\n                \"meetingLocation\": calendarObj.Location,\n                \"appointmentType\": calendarObj.CalendarType,\n                \"allDay\": calendarObj.IsAllDay === 'Y' ? true : false,\n                \"startDateTime\": new Date(calendarObj.StartTime).toISOString(),\n                \"endDateTime\": new Date(calendarObj.EndTime).toISOString(),\n                \"alertTimes\": [calendarObj.Alert1, calendarObj.Alert2, calendarObj.Alert3].filter(x => x != null && x != \"\"),\n                \"personId\": customerIDMap[calendarObj.CustomerClientID] ? customerIDMap[calendarObj.CustomerClientID] : '',\n                \"description\": calendarObj.Remark,\n                \"isChangeable\": calendarObj.DataSource !== 'OPUS',\n                \"extensions\": extensions,\n                \"synchDetail\": {\n                    \"clientTime\": new Date(calendarObj.ClientTime).toISOString(),\n                    \"lastUpdateDateTimeBackend\": new Date(calendarObj.DataTime).toISOString(),\n                    \"toDelete\": calendarObj.IsDelete === 'Y'\n                }\n            }\n        });\n\n        if (this.PushAOP) {\n            returnJson = await this.PullAOP.execute(returnJson);\n        }\n        return returnJson;\n    }\n\n    async pullData(resp) {\n        if (this.PullAOP) {\n            resp = await this.PullAOP.execute(resp);\n        }\n        if (resp.appointments.length > 0 || resp.deletedAppointmentIds.length > 0) {\n            let dao = this.DaoFactory.getDefaultDao();\n            let calendarObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Calendar');\n            let calendarExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Calendar_Extension');\n            let customerIDMap = await this.getCustomerIDMap(true);\n            let calendarDatas = await dao.queryByTable(calendarObj).toPromise().then((res) => res.Body);\n            let calendarIdArr = calendarDatas.map(x => x.CalendarID);\n            let calendarClientIdArr = calendarDatas.map(x => x.ClientID);\n            console.log('calendar ID array:', calendarIdArr);\n            console.log('calendar Client ID array:', calendarClientIdArr)\n            for (let data of resp.appointments) {\n                let IsAlert = data.alertTimes.length > 0 ? 'Y' : 'N';\n                calendarObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Calendar');\n                calendarExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Calendar_Extension');\n                calendarObj.setValue(\"CalendarID\", data.appointmentId);\n                calendarObj.setValue(\"Title\", data.name);\n                calendarObj.setValue(\"Location\", data.meetingLocation);\n                calendarObj.setValue(\"CalendarType\", data.appointmentType);\n                calendarObj.setValue(\"IsAllDay\", data.allDay ? 'Y' : 'N');\n                calendarObj.setValue(\"StartTime\", parseISO(data.startDateTime).getTime());\n                calendarObj.setValue(\"EndTime\", parseISO(data.endDateTime).getTime());\n                calendarObj.setValue(\"CustomerClientID\", customerIDMap[data.personId]);\n                calendarObj.setValue(\"IsAlert\", IsAlert);\n                if (IsAlert)\n                    calendarObj.setValue(\"Alert1\", data.alertTimes[0]);\n                if (data.alertTimes.length > 1)\n                    calendarObj.setValue(\"Alert2\", data.alertTimes[1]);\n                if (data.alertTimes.length > 2)\n                    calendarObj.setValue(\"Alert3\", data.alertTimes[2]);\n                calendarObj.setValue(\"Remark\", data.description);\n                calendarObj.setValue(\"IsDelete\", 'N');\n                calendarObj.setValue(\"DataSource\", data.isChangeable ? \"APP\" : \"OPUS\");\n                calendarObj.setValue(\"DataTime\", parseISO(data.synchDetail.lastUpdateDateTimeBackend).getTime());\n                calendarObj.setValue(\"ClientTime\", Date.now());\n\n                let extensions = data.extensions;\n                calendarObj.setValue(\"CalendarID\", data.appointmentId);\n                calendarExtObj.setValue(\"CalendarID\", data.appointmentId);\n                if (extensions != null) {\n                    extensions.forEach(extension => {\n                        calendarExtObj.setValue(extension.id, extension.value);\n                    });\n                }\n\n                if (calendarIdArr.includes(data.appointmentId)) {\n                    calendarObj.addRestriction(new EqualRestriction('CalendarID', [data.appointmentId]));\n                    calendarExtObj.addRestriction(new EqualRestriction('CalendarID', [data.appointmentId]));\n                    dao.transactionUpdate(calendarObj);\n                    dao.transactionUpdate(calendarExtObj);\n                }\n                else {\n                    let clientID = uuid();\n                    calendarObj.setValue(\"ClientID\", clientID);\n                    calendarExtObj.setValue(\"ClientID\", clientID);\n                    dao.transactionInsert(calendarObj);\n                    dao.transactionInsert(calendarExtObj);\n                }\n            }\n\n            for (let id of resp.deletedAppointmentIds) {\n                calendarObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Calendar');\n                calendarExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Calendar_Extension');\n                calendarObj.addRestriction(new EqualRestriction('CalendarID', [id]));\n                calendarExtObj.addRestriction(new EqualRestriction('CalendarID', [id]));\n                dao.transactionDelete(calendarObj);\n                dao.transactionDelete(calendarExtObj);\n            }\n\n            return await dao.runTransaction().toPromise();\n        }\n        else {\n            return new SQLiteResponse({ status: true }, []);\n        }\n    }\n\n    setState(state: FUNC_STATE) {\n        this.state = state;\n    }\n\n    async getSequentialIDNeeded(frontendTime: number): Promise<number> {\n        let pushData = await this.getPushData(frontendTime);\n        this.tmpPushData = pushData.filter(x => x.CalendarID === null);\n        return this.tmpPushData.length;\n\n    }\n\n    async setSequentialID(ids: Array<string>) {\n        if (this.tmpPushData != null) {\n            //set to tmpData && Sqlite\n            let dataWithoutIds = this.tmpPushData;\n\n            let dao = this.DaoFactory.getDefaultDao();\n            for (let [index, data] of dataWithoutIds.entries()) {\n                let calendarObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Calendar');\n                let calendarExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Calendar_Extension');\n                calendarObj.setValue(\"CalendarID\", ids[index]);\n                calendarObj.addRestriction(new EqualRestriction('ClientID', [data.ClientID]));\n                dao.transactionUpdate(calendarObj);\n                calendarExtObj.setValue(\"CalendarID\", ids[index]);\n                calendarExtObj.addRestriction(new EqualRestriction('ClientID', [data.ClientID]));\n                dao.transactionUpdate(calendarExtObj);\n            }\n            await dao.runTransaction().toPromise();\n            this.tmpPushData = null;\n        }\n\n    }\n\n    private async getPushData(frontendTime: number) {\n        let datas = [];\n        let dao = this.DaoFactory.getDefaultDao();\n        let calendarObj = this.DaoFactory.getDefaultTable('TW_LH_SD_VW_Calendar');\n        if (dao && calendarObj) {\n            calendarObj.addRestriction(new GreaterRestriction('ClientTime', [frontendTime]));\n            let resp = await dao.queryByTable(calendarObj).toPromise();\n            console.log('query calendar obj:', resp);\n            if (resp.Body.length > 0)\n                datas = resp.Body;\n        }\n        return datas;\n    }\n\n    private async getCustomerIDMap(reverse = false) {\n        let dao = this.DaoFactory.getDefaultDao();\n        let customerObj = this.DaoFactory.getDefaultTable('TW_LH_SD_VW_Customer');\n        if (dao && customerObj) {\n            let resp = await dao.queryByTable(customerObj).toPromise();\n            console.log('query customer obj:', resp);\n            if (resp.Body.length > 0) {\n                let customerList = resp.Body;\n                //if reverse ,set key as CustomerID ,val as ClientID\n                if (reverse)\n                    customerList = customerList.map(x => { return { key: x.CustomerID, val: x.ClientID } })\n                else\n                    customerList = customerList.map(x => { return { key: x.ClientID, val: x.CustomerID } })\n                return customerList.reduce((map, obj) => {\n                    map[obj.key] = obj.val;\n                    return map;\n                }, {});\n            }\n        }\n        return {};\n    }\n}","import { IFunctionSync, FUNC_STATE } from \"./IFunctionSync\";\nimport { DaoFactory } from \"../../device/sqlite/DaoFactory\";\nimport { EqualRestriction } from \"../../device/sqlite/restrictions/EqualRestriction\";\nimport { GreaterRestriction } from \"../../device/sqlite/restrictions/GreaterRestriction\";\nimport { InRestriction } from \"../../device/sqlite/restrictions/InRestriction\";\nimport { v4 as uuid } from 'uuid';\nimport { parseISO } from 'date-fns';\nimport { ISyncAOP } from \"./SyncAOP.interface\";\nimport { SQLiteResponse } from \"../../device/sqlite/SQLiteResponse\";\n\n\nexport class ContactSync implements IFunctionSync {\n    private state: number;\n    private tmpPushData = null;\n    private customerData = null;\n    constructor(private DaoFactory: DaoFactory, private PushAOP: ISyncAOP = null, private PullAOP: ISyncAOP = null) {\n        this.state = FUNC_STATE.AVAILABLE;\n    }\n\n    getState(): FUNC_STATE {\n        return this.state;\n    }\n\n    getName(): string {\n        return 'CUSTOMER_CONTACT'\n    }\n\n    async getPushJson(frontendTime) {\n        // Do check data clientTime > frontendTime;\n        let returnJson = [];\n        let pushData = await this.getPushData(frontendTime);\n\n        let customerContactExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Contact_Extension');\n        let extCols = customerContactExtObj.getColumns().filter(x => x.getName() !== 'ClientID' && x.getName() !== 'CustomerClientID' && x.getName() !== 'ContactID');\n\n        returnJson = pushData.map(contact => {\n\n            let extensions = extCols\n                .map(col => {\n                    return {\n                        id: col.getName(),\n                        type: col.getType(),\n                        value: contact[col.getName()]\n                    }\n                });\n\n            return {\n                \"noteId\": contact.ContactID,\n                \"personId\": contact.CustomerID,\n                \"text\": contact.Note,\n                \"origin\": \"\",\n                \"creationDateTime\": new Date(contact.NoteTime).toISOString(),\n                \"extensions\": extensions,\n                \"synchDetail\": {\n                    \"lastUpdateDateTimeBackend\": new Date(contact.DataTime).toISOString(),\n                    \"toDelete\": contact.IsDelete === 'Y'\n                }\n            }\n        });\n        if (this.PushAOP) {\n            returnJson = await this.PullAOP.execute(returnJson);\n        }\n        return returnJson;\n    }\n\n    async pullData(resp) {\n        if (this.PullAOP) {\n            resp = await this.PullAOP.execute(resp);\n        }\n        if (resp.notes.length > 0 || resp.deletedNoteIds.length > 0) {\n            let dao = this.DaoFactory.getDefaultDao();\n            let contactObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Contact');\n            let contactExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Contact_Extension');\n            let customerObj = this.DaoFactory.getDefaultTable('TW_LH_SD_VW_Customer');\n            let contactIdArr = await dao.queryByTable(contactObj).toPromise().then((res) => res.Body.map(x => x.ContactID));\n            // let customerResp = await dao.queryByTable(customerObj).toPromise();\n            let customerResp = this.customerData;\n            let CustomerClientIDArr = customerResp.Body.map(x => x.ClientID);\n            let CustomerIdArr = customerResp.Body.map(x => x.CustomerID);\n            for (let data of resp.notes) {\n                contactObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Contact');\n                contactExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Contact_Extension');\n                contactObj.setValue(\"CustomerClientID\", CustomerClientIDArr[CustomerIdArr.indexOf(data.personId)]);\n                contactObj.setValue(\"ContactID\", data.noteId);\n                contactObj.setValue(\"Note\", data.text);\n                contactObj.setValue(\"NoteTime\", parseISO(data.creationDateTime).getTime());\n                contactObj.setValue(\"DataTime\", parseISO(data.synchDetail.lastUpdateDateTimeBackend).getTime());\n                contactObj.setValue(\"IsDelete\", 'N');\n                contactObj.setValue(\"ClientTime\", Date.now());\n\n                // save extendion data\n                let extensions = data.extensions;\n                contactObj.setValue(\"CustomerClientID\", CustomerClientIDArr[CustomerIdArr.indexOf(data.personId)]);\n                contactObj.setValue(\"ContactID\", data.noteId);\n\n                contactExtObj.setValue(\"CustomerClientID\", CustomerClientIDArr[CustomerIdArr.indexOf(data.personId)]);\n                contactExtObj.setValue(\"ContactID\", data.noteId);\n                if (extensions != null) {\n                    extensions.forEach(extension => {\n                        contactExtObj.setValue(extension.id, extension.value);\n                    });\n                }\n\n                if (contactIdArr.includes(data.noteId)) {\n                    contactObj.addRestriction(new EqualRestriction('ContactID', [data.noteId]));\n                    contactExtObj.addRestriction(new EqualRestriction('ContactID', [data.noteId]));\n                    dao.transactionUpdate(contactObj);\n                    dao.transactionUpdate(contactExtObj);\n                }\n                else {\n                    let cliendID = uuid();\n                    contactObj.setValue(\"ClientID\", cliendID);\n                    contactExtObj.setValue(\"ClientID\", cliendID);\n                    dao.transactionInsert(contactObj);\n                    dao.transactionInsert(contactExtObj);\n                }\n\n            }\n            if (resp.deletedNoteIds.length > 0) {\n                contactObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Contact');\n                contactExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Contact_Extension');\n                contactObj.addRestriction(new InRestriction('ContactID', resp.DeleteIds));\n                contactExtObj.addRestriction(new InRestriction('ContactID', resp.DeleteIds));\n                dao.transactionDelete(contactObj);\n                dao.transactionDelete(contactExtObj);\n            }\n\n            return await dao.runTransaction().toPromise();\n        }\n        else {\n            return new SQLiteResponse({ status: true }, []);\n        }\n    }\n\n\n    setState(state: FUNC_STATE) {\n        this.state = state;\n    }\n\n    async getSequentialIDNeeded(frontendTime: number): Promise<number> {\n        let pushData = await this.getPushData(frontendTime);\n        this.tmpPushData = pushData.filter(x => x.ContactID === null);\n        return this.tmpPushData.length;\n\n    }\n    async setSequentialID(ids: Array<string>) {\n        if (this.tmpPushData != null) {\n            //set to tmpData && Sqlite\n            let dataWithoutIds = this.tmpPushData;\n\n            let dao = this.DaoFactory.getDefaultDao();\n            for (let [index, data] of dataWithoutIds.entries()) {\n                let contactObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Contact');\n                let contactExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Contact_Extension');\n                contactObj.setValue(\"ContactID\", ids[index]);\n                contactExtObj.setValue(\"ContactID\", ids[index]);\n                contactObj.addRestriction(new EqualRestriction('ClientID', [data.ClientID]));\n                contactExtObj.addRestriction(new EqualRestriction('ClientID', [data.ClientID]));\n                dao.transactionUpdate(contactObj);\n                dao.transactionUpdate(contactExtObj);\n            }\n            await dao.runTransaction().toPromise();\n            this.tmpPushData = null;\n        }\n    }\n\n    private async getPushData(frontendTime: number) {\n\n        let datas = [];\n        let dao = this.DaoFactory.getDefaultDao();\n        let customerObj = this.DaoFactory.getDefaultTable('TW_LH_SD_VW_Customer');\n        let contactObj = this.DaoFactory.getDefaultTable('TW_LH_SD_VW_Customer_Contact');\n        let customerResp = await dao.queryByTable(customerObj).toPromise();\n        this.customerData = customerResp;\n        let customerArr = customerResp.Body;\n        if (dao && contactObj) {\n            contactObj.addRestriction(new GreaterRestriction('ClientTime', [frontendTime]));\n            let resp = await dao.queryByTable(contactObj).toPromise();\n            console.log('query contact obj:', resp);\n            console.log('customer array:', customerArr);\n            if (resp.Body.length > 0) {\n                for (let data of resp.Body) {\n                    let customer = customerArr.filter(x => x.ClientID == data.CustomerClientID);\n                    if (customer.length > 0)\n                        data.CustomerID = customer[0].CustomerID;\n                }\n                datas = resp.Body;\n            }\n        }\n        return datas;\n    }\n}","import { IFunctionSync, FUNC_STATE } from \"./IFunctionSync\";\nimport { DaoFactory } from \"../../device/sqlite/DaoFactory\";\nimport { EqualRestriction } from \"../../device/sqlite/restrictions/EqualRestriction\";\nimport { GreaterRestriction } from \"../../device/sqlite/restrictions/GreaterRestriction\";\nimport { InRestriction } from \"../../device/sqlite/restrictions/InRestriction\";\nimport { v4 as uuid } from 'uuid';\nimport { parseISO } from 'date-fns';\nimport { ISyncAOP } from \"./SyncAOP.interface\";\nimport { SQLiteResponse } from \"../../device/sqlite/SQLiteResponse\";\n\n\nexport class CustomerSync implements IFunctionSync {\n    private state: number;\n    private tmpPushData = null;\n    constructor(private DaoFactory: DaoFactory, private PushAOP: ISyncAOP = null, private PullAOP: ISyncAOP = null) {\n        this.state = FUNC_STATE.AVAILABLE;\n    }\n\n    getState(): FUNC_STATE {\n        return this.state;\n    }\n\n    getName(): string {\n        return 'CUSTOMER'\n    }\n\n    async getPushJson(frontendTime) {\n        // Do check data clientTime > frontendTime;\n        let returnJson = [];\n        let pushData = await this.getPushData(frontendTime);\n\n        //get extension column informance\n        let customerExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Extension');\n        let customerTelExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Tel_Extension');\n        let customerEmailExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Email_Extension');\n        let customerAddressExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Address_Extension');\n        let customerExtCols = customerExtObj.getColumns().filter(x => x.getName() !== 'ClientID' && x.getName() !== 'CustomerID');\n        let customerTelExtCols = customerTelExtObj.getColumns().filter(x => x.getName() !== 'ClientID' && x.getName() !== 'CustomerClientID');\n        let customerEmailExtCols = customerEmailExtObj.getColumns().filter(x => x.getName() !== 'ClientID' && x.getName() !== 'CustomerClientID');\n        let customerAddressExtCols = customerAddressExtObj.getColumns().filter(x => x.getName() !== 'ClientID' && x.getName() !== 'CustomerClientID');\n\n        returnJson = pushData.map(customer => {\n\n            let Extensions = customerExtCols\n                .map(col => {\n                    return {\n                        id: col.getName(),\n                        type: col.getType(),\n                        value: customer[col.getName()]\n                    }\n                });\n\n            return {\n                \"customerID\": customer.CustomerID,\n                \"firstName\": customer.FirstName,\n                \"middleName\": \"\",\n                \"lastName\": customer.LastName,\n                \"alternateName\": \"\",\n                \"marritalStatus\": customer.Marriage,\n                \"occupation\": customer.Occupation,\n                \"employer\": customer.Company,\n                \"birthDate\": customer.BirthdayYear === 'null' || customer.BirthdayYear === null ? null : `${customer.BirthdayYear}-${customer.BirthdayMonth}-${customer.BirthdayDate}`,\n                \"ageRange\": customer.AgeRange,\n                \"gender\": customer.Gender,\n                \"numberOfChildren\": customer.Children,\n                \"addresses\": customer.Address.map(addr => {\n\n                    let addressesExtensions = customerAddressExtCols\n                        .map(col => {\n                            return {\n                                id: col.getName(),\n                                type: col.getType(),\n                                value: addr[col.getName()]\n                            }\n                        });\n\n                    return {\n                        \"addressType\": addr.AddressType,\n                        \"countryCode\": addr.Country,\n                        \"city\": addr.City,\n                        \"area\": addr.Area,\n                        \"postCode\": addr.Zipcode,\n                        \"line1\": addr.Address,\n                        \"line2\": \"\",\n                        \"line3\": \"\",\n                        \"line4\": \"\",\n                        \"isChangeable\": addr.DataSource !== 'OPUS',\n                        \"extensions\": addressesExtensions\n                    }\n                }),\n                \"phoneChannels\": customer.Tel.map(tel => {\n\n                    let telExtensions = customerTelExtCols\n                        .map(col => {\n                            return {\n                                id: col.getName(),\n                                type: col.getType(),\n                                value: tel[col.getName()]\n                            }\n                        });\n\n                    return {\n                        \"usageType\": tel.TelType,\n                        \"phoneNumber\": tel.Tel,\n                        \"isChangeable\": tel.DataSource !== 'OPUS',\n                        \"extensions\": telExtensions\n                    }\n                }),\n                \"emailContacts\": customer.Email.map(email => {\n\n                    let emailExtensions = customerEmailExtCols\n                        .map(col => {\n                            return {\n                                id: col.getName(),\n                                type: col.getType(),\n                                value: email[col.getName()]\n                            }\n                        });\n\n                    return {\n                        \"emailType\": email.EmailType,\n                        \"email\": email.Email,\n                        \"isChangeAble\": email.DataSource !== 'OPUS',\n                        \"extensions\": emailExtensions\n                    }\n                }),\n                \"annualIncomeRange\": customer.Income,\n                \"contactLink\": customer.Source,\n                \"familiarity\": customer.Familiarity,\n                \"touchPointFrequency\": customer.ContactFrequancy,\n                \"leadProbability\": customer.Possibility,\n                \"isFollowed\": customer.IsFollow === 'Y',\n                \"isOverTimeAlert\": customer.IsOverTimeAlert === 'Y',\n                \"isChangeable\": customer.DataSource !== 'OPUS',\n                \"profileCompletion\": customer.Completeness,\n                \"extensions\": Extensions,\n                \"synchDetail\": {\n                    \"clientTime\": new Date(customer.ClientTime).toISOString(),\n                    \"lastUpdateDateTimeBackend\": new Date(customer.DataTime).toISOString(),\n                    \"toDelete\": customer.IsDelete === 'Y'\n                }\n            }\n        });\n\n        console.log('customer getPushJson:', returnJson);\n        if (this.PushAOP) {\n            returnJson = await this.PullAOP.execute(returnJson);\n        }\n        return returnJson;\n    }\n\n    async pullData(resp) {\n        if (this.PullAOP) {\n            resp = await this.PullAOP.execute(resp);\n        }\n        if (resp.customerInfos.length > 0 || resp.deletedPersonIds.length > 0) {\n            let dao = this.DaoFactory.getDefaultDao();\n            let customerObj = this.DaoFactory.getDefaultTable('TW_LH_SD_VW_Customer');\n            let telObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Tel');\n            let emailObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Email');\n            let addressObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Address');\n            let customerExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Extension');\n            let emailExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Email_Extension');\n            let addressExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Address_Extension');\n            let telExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Tel_Extension');\n            let customerResp = await dao.queryByTable(customerObj).toPromise();\n            let CustomerClientIDArr = customerResp.Body.map(x => x.ClientID);\n            let CustomerIdArr = customerResp.Body.map(x => x.CustomerID);\n            // delete tel,email,address first\n            let customerInfoIds = resp.customerInfos.map(x => x.customerID);\n            let ToDeleteCustomerClientIDs = customerResp.Body.filter(x => customerInfoIds.indexOf(x.CustomerID) > -1).map(x => x.ClientID);\n            telObj.addRestriction(new InRestriction('CustomerClientID', ToDeleteCustomerClientIDs));\n            emailObj.addRestriction(new InRestriction('CustomerClientID', ToDeleteCustomerClientIDs));\n            addressObj.addRestriction(new InRestriction('CustomerClientID', ToDeleteCustomerClientIDs));\n            telExtObj.addRestriction(new InRestriction('CustomerClientID', ToDeleteCustomerClientIDs));\n            emailExtObj.addRestriction(new InRestriction('CustomerClientID', ToDeleteCustomerClientIDs));\n            addressExtObj.addRestriction(new InRestriction('CustomerClientID', ToDeleteCustomerClientIDs));\n            dao.transactionDelete(telObj);\n            dao.transactionDelete(emailObj);\n            dao.transactionDelete(addressObj);\n            dao.transactionDelete(telExtObj);\n            dao.transactionDelete(emailExtObj);\n            dao.transactionDelete(addressExtObj);\n\n\n            for (let data of resp.customerInfos) {\n                let clientID = '';\n                customerObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer');\n                customerExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Extension');\n                emailExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Email_Extension');\n                addressExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Address_Extension');\n                telExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Tel_Extension');\n                customerObj.setValue(\"CustomerID\", data.customerID);\n                customerObj.setValue(\"FirstName\", data.firstName);\n                customerObj.setValue(\"LastName\", data.lastName);\n                customerObj.setValue(\"Occupation\", data.occupation);\n                customerObj.setValue(\"Company\", data.employer);\n                customerObj.setValue(\"BirthdayYear\", data.birthDate === null || data.birthDate.indexOf('null') >= 0 ? null : data.birthDate.split('-')[0]);\n                customerObj.setValue(\"BirthdayMonth\", data.birthDate === null || data.birthDate.indexOf('null') >= 0 ? null : data.birthDate.split('-')[1]);\n                customerObj.setValue(\"BirthdayDate\", data.birthDate === null || data.birthDate.indexOf('null') >= 0 ? null : data.birthDate.split('-')[2]);\n                customerObj.setValue(\"AgeRange\", data.ageRange);\n                customerObj.setValue(\"Gender\", data.gender);\n                customerObj.setValue(\"Income\", data.annualIncomeRange);\n                customerObj.setValue(\"Source\", data.contactLink);\n                customerObj.setValue(\"Marriage\", data.marritalStatus);\n                customerObj.setValue(\"Children\", data.numberOfChildren);\n                customerObj.setValue(\"Familiarity\", data.familiarity);\n                customerObj.setValue(\"ContactFrequancy\", data.touchPointFrequency);\n                customerObj.setValue(\"Possibility\", data.leadProbability);\n                customerObj.setValue(\"IsFollow\", data.isFollowed ? 'Y' : 'N');\n                customerObj.setValue(\"IsDelete\", 'N');\n                customerObj.setValue(\"Completeness\", data.profileCompletion);\n                customerObj.setValue(\"DataSource\", data.isChangeable ? \"APP\" : \"OPUS\");\n                customerObj.setValue(\"DataTime\", parseISO(data.synchDetail.lastUpdateDateTimeBackend).getTime());\n                customerObj.setValue('IsOverTimeAlert', data.isOverTimeAlert);\n                customerObj.setValue(\"ClientTime\", Date.now());\n\n                //save email extension data\n                let Extensions = data.extensions;\n                customerExtObj.setValue(\"CustomerID\", data.customerID);\n                console.log('customer Extensions', Extensions);\n                if (Extensions != null) {\n                    Extensions.forEach(extension => {\n                        customerExtObj.setValue(extension.id, extension.value);\n                    });\n                }\n\n                if (CustomerIdArr.includes(data.customerID)) {\n                    clientID = CustomerClientIDArr[CustomerIdArr.indexOf(data.customerID)];\n                    customerObj.addRestriction(new EqualRestriction('CustomerID', [data.customerID]));\n                    customerExtObj.addRestriction(new EqualRestriction('CustomerID', [data.customerID]));\n                    dao.transactionUpdate(customerObj);\n                    dao.transactionUpdate(customerExtObj);\n\n                }\n                else {\n                    clientID = uuid();\n                    customerObj.setValue(\"ClientID\", clientID);\n                    customerExtObj.setValue(\"ClientID\", clientID);\n                    dao.transactionInsert(customerObj);\n                    dao.transactionInsert(customerExtObj);\n                }\n                for (let email of data.emailContacts) {\n                    let email_clientID = uuid();\n                    emailObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Email');\n                    emailObj.setValue('ClientID', email_clientID);\n                    emailObj.setValue('CustomerClientID', clientID);\n                    emailObj.setValue('EmailType', email.emailType);\n                    emailObj.setValue('Email', email.email);\n                    emailObj.setValue('DataSource', email.isChangeAble ? 'APP' : 'OPUS');\n\n                    //save email extension data\n                    let emailExtensions = email.extensions;\n                    emailExtObj.setValue('ClientID', email_clientID);\n                    emailExtObj.setValue('CustomerClientID', clientID);\n                    console.log('emailExtensions', emailExtensions);\n                    if (emailExtensions != null) {\n                        emailExtensions.forEach(extension => {\n                            emailExtObj.setValue(extension.id, extension.value);\n                        });\n                    }\n                    dao.transactionInsert(emailExtObj);\n                    dao.transactionInsert(emailObj);\n                }\n                for (let address of data.addresses) {\n                    let address_clientID = uuid();\n                    addressObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Address');\n                    addressObj.setValue('ClientID', address_clientID);\n                    addressObj.setValue('CustomerClientID', clientID);\n                    addressObj.setValue('AddressType', address.addressType);\n                    addressObj.setValue('Country', address.countryCode);\n                    addressObj.setValue('City', address.city);\n                    addressObj.setValue('Area', address.area);\n                    addressObj.setValue('Zipcode', address.postCode);\n                    addressObj.setValue('Address', address.line1);\n                    addressObj.setValue('DataSource', address.isChangeAble ? 'APP' : 'OPUS');\n\n                    //save email extension data\n                    let addressExtensions = address.extensions;\n                    addressExtObj.setValue('ClientID', address_clientID);\n                    addressExtObj.setValue('CustomerClientID', clientID);\n                    console.log('addressExtensions', addressExtensions);\n                    if (addressExtensions != null) {\n                        addressExtensions.forEach(extension => {\n                            addressExtObj.setValue(extension.id, extension.value);\n                        });\n                    }\n                    dao.transactionInsert(addressExtObj);\n                    dao.transactionInsert(addressObj);\n                }\n                for (let tel of data.phoneChannels) {\n                    let tel_clientID = uuid();\n                    telObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Tel');\n                    telObj.setValue('ClientID', tel_clientID);\n                    telObj.setValue('CustomerClientID', clientID);\n                    telObj.setValue('TelType', tel.usageType);\n                    telObj.setValue('Tel', tel.phoneNumber);\n                    telObj.setValue('DataSource', tel.isChangeable ? 'APP' : 'OPUS');\n\n                    //save email extension data\n                    let telExtensions = tel.extensions;\n                    telExtObj.setValue('ClientID', tel_clientID);\n                    telExtObj.setValue('CustomerClientID', clientID);\n                    console.log('telExtensions', telExtensions);\n                    if (telExtensions != null) {\n                        telExtensions.forEach(extension => {\n                            telExtObj.setValue(extension.id, extension.value);\n                        });\n                    }\n                    dao.transactionInsert(telExtObj);\n                    dao.transactionInsert(telObj);\n                }\n            }\n\n            let DeleteCustomerClientIds = resp.deletedPersonIds.map(x => {\n                let filtered = customerResp.Body.filter(y => y.CustomerID === x);\n                return filtered.length > 0 ? filtered[0].ClientID : null\n            }).filter(x => x !== null);\n            if (DeleteCustomerClientIds.length > 0) {\n                customerObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer');\n                emailObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Email');\n                addressObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Address');\n                telObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Tel');\n                emailExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Email_Extension');\n                addressExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Address_Extension');\n                telExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer_Tel_Extension');\n                customerObj.addRestriction(new InRestriction('CustomerID', resp.deletedPersonIds));\n                emailObj.addRestriction(new InRestriction('CustomerClientID', DeleteCustomerClientIds));\n                addressObj.addRestriction(new InRestriction('CustomerClientID', DeleteCustomerClientIds));\n                telObj.addRestriction(new InRestriction('CustomerClientID', DeleteCustomerClientIds));\n                emailExtObj.addRestriction(new InRestriction('CustomerClientID', DeleteCustomerClientIds));\n                addressExtObj.addRestriction(new InRestriction('CustomerClientID', DeleteCustomerClientIds));\n                telExtObj.addRestriction(new InRestriction('CustomerClientID', DeleteCustomerClientIds));\n                dao.transactionDelete(customerObj);\n                dao.transactionDelete(emailObj);\n                dao.transactionDelete(addressObj);\n                dao.transactionDelete(telObj);\n                dao.transactionDelete(emailExtObj);\n                dao.transactionDelete(addressExtObj);\n                dao.transactionDelete(telExtObj);\n            }\n\n            return await dao.runTransaction().toPromise();\n        }\n        else {\n            return new SQLiteResponse({ status: true }, []);\n        }\n    }\n\n    setState(state: FUNC_STATE) {\n        this.state = state;\n    }\n\n    async getSequentialIDNeeded(frontendTime: number): Promise<number> {\n        let num: number = 0;\n        let dao = this.DaoFactory.getDefaultDao();\n        let customerObj = this.DaoFactory.getDefaultTable('TW_LH_SD_VW_Customer');\n        if (dao && customerObj) {\n            customerObj.addRestriction(new GreaterRestriction('ClientTime', [frontendTime]));\n            let resp = await dao.queryByTable(customerObj).toPromise();\n            console.log('query customer obj:', resp);\n            this.tmpPushData = resp.Body.filter(x => x.CustomerID === null);\n            num = this.tmpPushData.length;\n        }\n        return num;\n    }\n\n    async setSequentialID(ids: Array<string>) {\n        if (this.tmpPushData != null) {\n            let dataWithoutIds = this.tmpPushData;\n            let dao = this.DaoFactory.getDefaultDao();\n            for (let [index, data] of dataWithoutIds.entries()) {\n                let customerObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Customer');\n                customerObj.setValue(\"CustomerID\", ids[index]);\n                customerObj.addRestriction(new EqualRestriction('ClientID', [data.ClientID]));\n                dao.transactionUpdate(customerObj);\n            }\n            await dao.runTransaction().toPromise();\n            this.tmpPushData = null;\n        }\n    }\n\n    private async getPushData(frontendTime: number) {\n        let datas = [];\n        let dao = this.DaoFactory.getDefaultDao();\n        let customerObj = this.DaoFactory.getDefaultTable('TW_LH_SD_VW_Customer');\n        if (dao && customerObj) {\n            customerObj.addRestriction(new GreaterRestriction('ClientTime', [frontendTime]));\n            let resp = await dao.queryByTable(customerObj).toPromise();\n            console.log('query customer obj:', resp);\n            if (resp.Body.length > 0) {\n                let customerArray = resp.Body;\n                let clientIDArray = customerArray.map(x => x.ClientID);\n                dao = this.DaoFactory.getDefaultDao();\n                let telObj = this.DaoFactory.getDefaultTable('TW_LH_SD_VW_Customer_Tel');\n                let emailObj = this.DaoFactory.getDefaultTable('TW_LH_SD_VW_Customer_Email');\n                let addressObj = this.DaoFactory.getDefaultTable('TW_LH_SD_VW_Customer_Address');\n                telObj.addRestriction(new InRestriction('CustomerClientID', clientIDArray));\n                emailObj.addRestriction(new InRestriction('CustomerClientID', clientIDArray));\n                addressObj.addRestriction(new InRestriction('CustomerClientID', clientIDArray));\n                let telResp = await dao.queryByTable(telObj).toPromise();\n                let emailResp = await dao.queryByTable(emailObj).toPromise();\n                let addressResp = await dao.queryByTable(addressObj).toPromise();\n                for (let customer of customerArray) {\n                    customer.Tel = telResp.Body.filter(x => x.CustomerClientID == customer.ClientID);\n                    customer.Email = emailResp.Body.filter(x => x.CustomerClientID == customer.ClientID);\n                    customer.Address = addressResp.Body.filter(x => x.CustomerClientID == customer.ClientID);\n                    datas.push(customer);\n                }\n            }\n        }\n        return datas;\n    }\n}","import { IFunctionSync, FUNC_STATE } from \"./IFunctionSync\";\nimport { DaoFactory } from \"../../device/sqlite/DaoFactory\";\nimport { EqualRestriction } from \"../../device/sqlite/restrictions/EqualRestriction\";\nimport { GreaterRestriction } from \"../../device/sqlite/restrictions/GreaterRestriction\";\nimport { v4 as uuid } from 'uuid';\nimport { parseISO } from 'date-fns';\nimport { ISyncAOP } from \"./SyncAOP.interface\";\nimport { SQLiteResponse } from \"../../device/sqlite/SQLiteResponse\";\n\n\nexport class MessageSync implements IFunctionSync {\n    private state: number;\n    constructor(private DaoFactory: DaoFactory, private PushAOP: ISyncAOP = null, private PullAOP: ISyncAOP = null) {\n        this.state = FUNC_STATE.AVAILABLE;\n    }\n\n    getState(): FUNC_STATE {\n        return this.state;\n    }\n\n    getName(): string {\n        return 'MESSAGE'\n    }\n\n    async getPushJson(frontendTime) {\n        // Do check data clientTime > frontendTime;\n        //TODO: Add extension column\n        let returnJson = [];\n\n        let dao = this.DaoFactory.getDefaultDao();\n        let messageObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Message');\n        if (dao && messageObj) {\n            messageObj.addRestriction(new GreaterRestriction('ClientTime', [frontendTime]));\n            let resp = await dao.queryByTable(messageObj).toPromise();\n            console.log('query message obj:', resp);\n            if (resp.Body.length > 0) {\n                let messageArray = resp.Body;\n                let updatedIDs = messageArray.filter(x => x.Status === 'Reading').map(x => x.MessageID);\n                returnJson = updatedIDs;\n            }\n        }\n        if (this.PushAOP) {\n            returnJson = await this.PullAOP.execute(returnJson);\n        }\n        return returnJson;\n    }\n\n    async pullData(resp) {\n        if (this.PullAOP) {\n            resp = await this.PullAOP.execute(resp);\n        }\n        if (resp.messageInfos.length > 0 || resp.deletedMessageIds.length > 0) {\n            let dao = this.DaoFactory.getDefaultDao();\n            let messageObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Message');\n            let messageExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Message_Extension');\n            let messageIDList = await dao.queryByTable(messageObj).toPromise().then((res) => res.Body);\n            messageIDList = messageIDList.map(x => x.MessageID);\n            for (let data of resp.messageInfos) {\n                let isExist = messageIDList.includes(data.messageID);\n                messageObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Message');\n                messageExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Message_Extension');\n                messageObj.setValue(\"MessageID\", data.messageID);\n                messageObj.setValue(\"MessageCategory\", data.messageCategory);\n                messageObj.setValue(\"MessageType\", data.messageType);\n                messageObj.setValue(\"Title\", data.title);\n                messageObj.setValue(\"Description\", data.description);\n                messageObj.setValue(\"Arguments\", data.arguments);\n                messageObj.setValue(\"Status\", data.status);\n                messageObj.setValue(\"IsClick\", data.isClick ? \"Y\" : \"N\");\n                messageObj.setValue(\"IsPopup\", data.isPopup ? \"Y\" : \"N\");\n                messageObj.setValue(\"IsShow\", data.isShow ? \"Y\" : \"N\");\n                messageObj.setValue(\"LinkStatus\", data.linkStatus);\n                messageObj.setValue(\"MessageTime\", parseISO(data.messageTime).getTime());\n                messageObj.setValue(\"ClientTime\", Date.now());\n                messageObj.setValue(\"IsDelete\", 'N');\n                messageObj.setValue(\"DataTime\", parseISO(data.synchDetail.lastUpdateDateTimeBackend).getTime());\n\n                //Extension\n                messageExtObj.setValue(\"MessageID\", data.messageID);\n\n\n                if (isExist) {\n                    messageObj.addRestriction(new EqualRestriction('MessageID', [data.messageID]));\n                    messageExtObj.addRestriction(new EqualRestriction('MessageID', [data.messageID]));\n                    dao.transactionUpdate(messageObj);\n                    dao.transactionUpdate(messageExtObj);\n                }\n                else {\n                    let clientID = uuid();\n                    messageObj.setValue(\"ClientID\", clientID);\n                    messageExtObj.setValue(\"ClientID\", clientID);\n                    dao.transactionInsert(messageObj);\n                    dao.transactionInsert(messageExtObj);\n                }\n\n            }\n\n            for (let id of resp.deletedMessageIds) {\n                messageObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Message');\n                messageExtObj = this.DaoFactory.getDefaultTable('TW_LH_SD_Message_Extension');\n                messageObj.addRestriction(new EqualRestriction('MessageID', [id]));\n                messageExtObj.addRestriction(new EqualRestriction('MessageID', [id]));\n                dao.transactionDelete(messageObj);\n                dao.transactionDelete(messageExtObj);\n            }\n\n            return await dao.runTransaction().toPromise();\n        }\n        else {\n            return new SQLiteResponse({ status: true }, []);\n        }\n    }\n\n    setState(state: FUNC_STATE) {\n        this.state = state;\n    }\n\n    async getSequentialIDNeeded(): Promise<number> {\n        return -1;\n    }\n\n    async setSequentialID(ids: Array<string>) {\n\n    }\n}","import { IFunctionSync, FUNC_STATE } from \"./IFunctionSync\";\nimport { DaoFactory } from \"../../device/sqlite/DaoFactory\";\nimport { GreaterRestriction } from \"../../device/sqlite/restrictions/GreaterRestriction\";\nimport { EqualRestriction } from \"../../device/sqlite/restrictions/EqualRestriction\";\nimport { parseISO } from 'date-fns';\nimport { v4 as uuid } from 'uuid';\nimport { ISyncAOP } from \"./SyncAOP.interface\";\nimport { SQLiteResponse } from '../../device/sqlite/SQLiteResponse';\n\nexport class GoalExpectedSync implements IFunctionSync {\n\n    private state: number;\n    constructor(private DaoFactory: DaoFactory, private PushAOP: ISyncAOP = null, private PullAOP: ISyncAOP = null) {\n        this.state = FUNC_STATE.AVAILABLE;\n    }\n\n    getName(): string {\n        return 'GOAL_EXPECTED'\n    }\n    getState(): FUNC_STATE {\n        return this.state;\n    }\n    setState(state: FUNC_STATE) {\n        this.state = state;\n    }\n    async getPushJson(frontendTime: number): Promise<any> {\n        // Do check data clientTime > frontendTime;\n        //TODO: Add extension column\n        let returnJson = [];\n        let pushData = await this.getPushData(frontendTime);\n\n        pushData.forEach(GoalExpectedObj => {\n            let Recruitments = [];\n            for (let i = 1; i <= 4; i++) {\n                let Recruitment = {\n                    \"Qarter\": i,\n                    \"Value\": GoalExpectedObj['Q' + i]\n                }\n                Recruitments.push(Recruitment);\n            }\n            let jsonObj = {\n                \"DataYear\": GoalExpectedObj.DataYear,\n                \"FYFC\": GoalExpectedObj.FYFC,\n                \"ANP\": GoalExpectedObj.ANP,\n                \"Recruitments\": Recruitments,\n                \"synchDetail\": {\n                    \"lastUpdateDateTimeBackend\": new Date(GoalExpectedObj.DataTime).toISOString()\n                },\n                \"extensions\": []\n            };\n            returnJson.push(jsonObj);\n        });\n        if (this.PushAOP) {\n            returnJson = await this.PullAOP.execute(returnJson);\n        }\n        return returnJson;\n    }\n\n    async pullData(resp: any): Promise<any> {\n        if (this.PullAOP) {\n            resp = await this.PullAOP.execute(resp);\n        }\n        if (resp.GoalExpected && resp.GoalExpected.length > 0) {\n            let dao = this.DaoFactory.getDefaultDao();\n            //dao = new ClientCustomDao(dao);\n            let GoalSettingExpected = this.DaoFactory.getDefaultTable('TW_LH_SD_Goal_Setting_Expected');\n            let GoalSettingExpected_ext = this.DaoFactory.getDefaultTable('TW_LH_SD_Goal_Setting_Expected_Extension');\n            console.log('GoalSettingExpected', GoalSettingExpected);\n            if (resp.GoalExpected != null) {\n                let GoalExpectedDatas = resp.GoalExpected;\n                console.log('GoalExpectedDatas', GoalExpectedDatas);\n\n                GoalExpectedDatas.forEach(GoalExpectedData => {\n                    console.log('GoalExpectedData', GoalExpectedData);\n                    //delete the data that needs to be updated \n                    let ToDeleteGoalExpectedYears = GoalExpectedData.DataYear;\n                    console.log('ToDeleteGoalExpectedYears', ToDeleteGoalExpectedYears);\n\n                    if (ToDeleteGoalExpectedYears != null) {\n\n                        GoalSettingExpected.addRestriction(new EqualRestriction('DataYear', [ToDeleteGoalExpectedYears]));\n                        dao.transactionDelete(GoalSettingExpected);\n                        //update all date \n                        let clientID = uuid();\n                        GoalSettingExpected = this.DaoFactory.getDefaultTable('TW_LH_SD_Goal_Setting_Expected');\n                        GoalSettingExpected.setValue(\"ClientID\", clientID);\n                        GoalSettingExpected.setValue(\"DataYear\", GoalExpectedData.DataYear);\n                        GoalSettingExpected.setValue(\"FYFC\", GoalExpectedData.FYFC);\n                        GoalSettingExpected.setValue(\"ANP\", GoalExpectedData.ANP);\n                        GoalSettingExpected.setValue(\"DataTime\", parseISO(GoalExpectedData.synchDetail.lastUpdateDateTimeBackend).getTime());\n                        GoalSettingExpected.setValue(\"ClientTime\", Date.now());\n\n                        GoalSettingExpected_ext.setValue(\"ClientID\", clientID);\n\n                        let Recruitments: Array<any> = GoalExpectedData.Recruitments;\n                        for (let data of Recruitments) {\n                            GoalSettingExpected.setValue(\"Q\" + data.Qarter, data.Value);\n                        }\n                        console.log(\"GoalSettingExpected 2\", GoalSettingExpected);\n                        dao.transactionInsert(GoalSettingExpected);\n                        dao.transactionInsert(GoalSettingExpected_ext);\n                    }\n                });\n            }\n            return await dao.runTransaction().toPromise();\n        }\n        else {\n            return new SQLiteResponse({ status: true }, []);\n        }\n    }\n\n    async getSequentialIDNeeded(): Promise<number> {\n        return -1;\n    }\n\n    async setSequentialID(ids: Array<string>) {\n\n    }\n\n    private async getPushData(frontendTime: number) {\n        let datas = [];\n        let dao = this.DaoFactory.getDefaultDao();\n        let GoalExpectedObj = this.DaoFactory.getDefaultTable('TW_LH_SD_VW_Goal_Setting_Expected');\n        if (dao && GoalExpectedObj) {\n            GoalExpectedObj.addRestriction(new GreaterRestriction('ClientTime', [frontendTime]));\n            let resp = await dao.queryByTable(GoalExpectedObj).toPromise();\n            console.log('query GoalExpected obj:', resp);\n            if (resp.Body.length > 0) {\n                // let GoalExpectedArray = resp.Body;\n                datas = resp.Body;\n            }\n        }\n        return datas;\n    }\n\n}","import { IFunctionSync, FUNC_STATE } from \"./IFunctionSync\";\nimport { ISyncAOP } from \"./SyncAOP.interface\";\nimport { APIFactory } from \"../../api/APIFactory\";\nimport { APIDispatch } from \"../../api/APIDispatch\";\nimport { saveGoalAPI } from '../../api/register/saveGoalAPI';\nimport { SQLiteResponse } from \"../../device/sqlite/SQLiteResponse\";\n\n\nexport class GoalSync implements IFunctionSync {\n    private state: number;\n    constructor(private apiFactory: APIFactory, private dispatcher: APIDispatch, private PushAOP: ISyncAOP = null, private PullAOP: ISyncAOP = null) {\n        this.state = FUNC_STATE.AVAILABLE;\n    }\n\n    getState(): FUNC_STATE {\n        return this.state;\n    }\n\n    getName(): string {\n        return 'GOAL'\n    }\n\n    async getPushJson(frontendTime) {\n        return [];\n    }\n\n    async pullData(resp) {\n        if (this.PullAOP) {\n            resp = await this.PullAOP.execute(resp);\n        }\n        if (resp.Goals.length > 0) {\n            let saveGoal = this.apiFactory.getAPI(\"saveGoal\");\n            (<saveGoalAPI>saveGoal).GoalDatas = resp.Goals;\n            let saveResp = await this.dispatcher.dispatch(saveGoal).toPromise();\n\n            return saveResp;\n        }\n        else {\n            return new SQLiteResponse({ status: true }, []);\n        }\n    }\n\n    setState(state: FUNC_STATE) {\n        this.state = state;\n    }\n\n    async getSequentialIDNeeded(): Promise<number> {\n        return -1;\n    }\n\n    async setSequentialID(ids: Array<string>) {\n\n    }\n}","import { IFunctionSync, FUNC_STATE } from \"./IFunctionSync\";\nimport { ISyncAOP } from \"./SyncAOP.interface\";\nimport { APIFactory } from \"../../api/APIFactory\";\nimport { APIDispatch } from \"../../api/APIDispatch\";\nimport { saveActualAPI } from '../../api/register/saveActual';\nimport { SQLiteResponse } from \"../../device/sqlite/SQLiteResponse\";\n\n\nexport class ActualSync implements IFunctionSync {\n    private state: number;\n    constructor(private apiFactory: APIFactory, private dispatcher: APIDispatch, private PushAOP: ISyncAOP = null, private PullAOP: ISyncAOP = null) {\n        this.state = FUNC_STATE.AVAILABLE;\n    }\n\n    getState(): FUNC_STATE {\n        return this.state;\n    }\n\n    getName(): string {\n        return 'ACTUAL'\n    }\n\n    async getPushJson(frontendTime) {\n        return [];\n    }\n\n    async pullData(resp) {\n        if (this.PullAOP) {\n            resp = await this.PullAOP.execute(resp);\n        }\n        if (resp.Actual.length > 0) {\n            let saveActual = this.apiFactory.getAPI(\"saveActual\");\n            (<saveActualAPI>saveActual).ActualDatas = resp.Actual;\n            let saveResp = await this.dispatcher.dispatch(saveActual).toPromise();\n            return saveResp;\n        }\n        else {\n            return new SQLiteResponse({ status: true }, []);\n        }\n    }\n\n    setState(state: FUNC_STATE) {\n        this.state = state;\n    }\n\n    async getSequentialIDNeeded(): Promise<number> {\n        return -1;\n    }\n\n    async setSequentialID(ids: Array<string>) {\n\n    }\n}","import { IFunctionSync, FUNC_STATE } from \"./IFunctionSync\";\nimport { ISyncAOP } from \"./SyncAOP.interface\";\nimport { APIFactory } from \"../../api/APIFactory\";\nimport { APIDispatch } from \"../../api/APIDispatch\";\nimport { saveAgencyPlanAPI } from '../../api/register/saveAgencyPlanAPI';\nimport { SQLiteResponse } from \"../../device/sqlite/SQLiteResponse\";\n\n\nexport class AgencyPlanSync implements IFunctionSync {\n    private state: number;\n    constructor(private apiFactory: APIFactory, private dispatcher: APIDispatch, private PushAOP: ISyncAOP = null, private PullAOP: ISyncAOP = null) {\n        this.state = FUNC_STATE.AVAILABLE;\n    }\n\n    getState(): FUNC_STATE {\n        return this.state;\n    }\n\n    getName(): string {\n        return 'AGENCY_PLAN'\n    }\n\n    async getPushJson(frontendTime) {\n        return [];\n    }\n\n    async pullData(resp) {\n        if (this.PullAOP) {\n            resp = await this.PullAOP.execute(resp);\n        }\n        if (resp.AgencyPlans.length > 0) {\n            let saveAgencyPlan = this.apiFactory.getAPI(\"saveAgencyPlan\");\n            (<saveAgencyPlanAPI>saveAgencyPlan).AgencyPlanDatas = resp.AgencyPlans;\n            let saveResp = await this.dispatcher.dispatch(saveAgencyPlan).toPromise();\n\n            return saveResp;\n        }\n        else {\n            return new SQLiteResponse({ status: true }, []);\n        }\n    }\n\n    setState(state: FUNC_STATE) {\n        this.state = state;\n    }\n\n    async getSequentialIDNeeded(): Promise<number> {\n        return -1;\n    }\n\n    async setSequentialID(ids: Array<string>) {\n\n    }\n}","import { IFunctionSync, FUNC_STATE } from \"./IFunctionSync\";\nimport { ISyncAOP } from \"./SyncAOP.interface\";\nimport { APIFactory } from \"../../api/APIFactory\";\nimport { APIDispatch } from \"../../api/APIDispatch\";\nimport { saveProgressAPI } from '../../api/register/saveProgressAPI';\nimport { SQLiteResponse } from \"../../device/sqlite/SQLiteResponse\";\n\n\nexport class ProgressSync implements IFunctionSync {\n    private state: number;\n    constructor(private apiFactory: APIFactory, private dispatcher: APIDispatch, private PushAOP: ISyncAOP = null, private PullAOP: ISyncAOP = null) {\n        this.state = FUNC_STATE.AVAILABLE;\n    }\n\n    getState(): FUNC_STATE {\n        return this.state;\n    }\n\n    getName(): string {\n        return 'PROGRESS'\n    }\n\n    async getPushJson(frontendTime) {\n        return [];\n    }\n\n    async pullData(resp) {\n        if (this.PullAOP) {\n            resp = await this.PullAOP.execute(resp);\n        }\n        if (resp.Progress.length > 0) {\n            let saveProgress = this.apiFactory.getAPI(\"saveProgress\");\n            (<saveProgressAPI>saveProgress).ProgressDatas = resp.Progress;\n            let saveResp = await this.dispatcher.dispatch(saveProgress).toPromise();\n\n            return saveResp;\n        }\n        else {\n            return new SQLiteResponse({ status: true }, []);\n        }\n    }\n\n    setState(state: FUNC_STATE) {\n        this.state = state;\n    }\n\n    async getSequentialIDNeeded(): Promise<number> {\n        return -1;\n    }\n\n    async setSequentialID(ids: Array<string>) {\n\n    }\n}","import { IFunctionSync, FUNC_STATE } from \"./IFunctionSync\";\nimport { ISyncAOP } from \"./SyncAOP.interface\";\nimport { APIFactory } from \"../../api/APIFactory\";\nimport { APIDispatch } from \"../../api/APIDispatch\";\nimport { saveYearConfigAPI } from \"../../api/register/saveYearConfigAPI\";\nimport { SQLiteResponse } from \"../../device/sqlite/SQLiteResponse\";\n\n\nexport class YearConfigSync implements IFunctionSync {\n    private state: number;\n    constructor(private apiFactory: APIFactory, private dispatcher: APIDispatch, private PushAOP: ISyncAOP = null, private PullAOP: ISyncAOP = null) {\n        this.state = FUNC_STATE.AVAILABLE;\n    }\n\n    getState(): FUNC_STATE {\n        return this.state;\n    }\n\n    getName(): string {\n        return 'YEAR_CONFIG'\n    }\n\n    async getPushJson(frontendTime) {\n        return [];\n    }\n\n    async pullData(resp) {\n        if (this.PullAOP) {\n            resp = await this.PullAOP.execute(resp);\n        }\n        if (resp.Configurations.length > 0) {\n            let saveYearConfig = this.apiFactory.getAPI(\"saveYearConfig\");\n            (<saveYearConfigAPI>saveYearConfig).FirstUseAPP = resp.FirstUseAPP;\n            (<saveYearConfigAPI>saveYearConfig).yearConfigs = resp.Configurations;\n            let saveResp = await this.dispatcher.dispatch(saveYearConfig).toPromise();\n            return saveResp;\n        }\n        else {\n            return new SQLiteResponse({ status: true }, []);\n        }\n    }\n\n    setState(state: FUNC_STATE) {\n        this.state = state;\n    }\n\n    async getSequentialIDNeeded(): Promise<number> {\n        return -1;\n    }\n\n    async setSequentialID(ids: Array<string>) {\n\n    }\n}","import { IFunctionSync, FUNC_STATE } from \"./IFunctionSync\";\nimport { DaoFactory } from \"../../device/sqlite/DaoFactory\";\nimport { EqualRestriction } from \"../../device/sqlite/restrictions/EqualRestriction\";\nimport { endOfDay } from 'date-fns';\nimport { v4 as uuid } from 'uuid';\nimport { parse } from 'date-fns';\nimport { ISyncAOP } from \"./SyncAOP.interface\";\nimport { SQLiteResponse } from \"../../device/sqlite/SQLiteResponse\";\n\n\nexport class ProfileCodeSync implements IFunctionSync {\n    private state: number;\n    constructor(private DaoFactory: DaoFactory, private PushAOP: ISyncAOP = null, private PullAOP: ISyncAOP = null) {\n        this.state = FUNC_STATE.AVAILABLE;\n    }\n\n    getState(): FUNC_STATE {\n        return this.state;\n    }\n\n    getName(): string {\n        return 'PROFILE_CODE'\n    }\n\n    async getPushJson(frontendTime) {\n        return [];\n    }\n\n    async pullData(resp) {\n        if (this.PullAOP) {\n            resp = await this.PullAOP.execute(resp);\n        }\n        let dao = this.DaoFactory.getDao(\"Profile\");\n        let profileCodeObj = this.DaoFactory.getTable(\"Profile\", \"TW_LH_SD_Code\");\n        if (resp.datalist.length > 0) {\n            dao.transactionDelete(profileCodeObj);\n            for (let data of resp.datalist) {\n                for (let code of data.values) {\n                    profileCodeObj = this.DaoFactory.getTable(\"Profile\", \"TW_LH_SD_Code\");\n                    profileCodeObj.setValue(\"TypeID\", data.datalistId);\n                    profileCodeObj.setValue(\"Code\", code.value);\n                    profileCodeObj.setValue(\"MappingID\", code.label);\n                    profileCodeObj.setValue(\"Orders\", code.orders);\n                    profileCodeObj.setValue(\"Arguments\", code.arguments);\n                    profileCodeObj.setValue(\"ValidityPeriod\", endOfDay(new Date(code.validityPeriod)).getTime());\n                    dao.transactionInsert(profileCodeObj);\n                }\n            }\n            return await dao.runTransaction().toPromise();\n        }\n        else{\n            return new SQLiteResponse({ status: true }, []);\n        }\n    }\n\n    setState(state: FUNC_STATE) {\n        this.state = state;\n    }\n\n    async getSequentialIDNeeded(): Promise<number> {\n        return -1;\n    }\n\n    async setSequentialID(ids: Array<string>) {\n\n    }\n}","import { RouteReuseStrategy, ActivatedRouteSnapshot, DetachedRouteHandle } from '@angular/router';\nimport { ComponentRef } from '@angular/core';\n\nexport class CustomRouterReuseStrategy implements RouteReuseStrategy {\n\n    public handlers: { [key: string]: DetachedRouteHandle } = {};\n\n    public deleteRouteSnapshot(): void {\n        console.log('delete snapshot!!');\n        Object.keys(this.handlers).forEach((key) => {\n            let componentRef = null;\n            if (this.handlers[key])\n                componentRef = this.handlers[key]['componentRef'];\n            if (componentRef) {\n                componentRef.destroy();\n            }\n        })\n        this.handlers = {};\n    }\n\n    shouldDetach(route: ActivatedRouteSnapshot): boolean {\n        console.debug('shouldDetach======>', route);\n        return this.isReuseRoute(route);\n    }\n\n    store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle): void {\n        console.debug('store======>', route, handle);\n        console.log(\"this.getRouteUrl:\", this.getRouteUrl(route));\n        this.handlers[this.getRouteUrl(route)] = handle;\n    }\n\n    shouldAttach(route: ActivatedRouteSnapshot): boolean {\n        // console.debug('shouldAttach======>', route);\n        return this.isReuseRoute(route) && (!!this.handlers[this.getRouteUrl(route)]);\n    }\n\n    retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle {\n        // console.debug('retrieve======>', route);\n        if (!this.handlers[this.getRouteUrl(route)]) {\n            return null;\n        }\n\n        return this.handlers[this.getRouteUrl(route)];\n    }\n\n    shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n        // console.debug('shouldReuseRoute======>', future, curr);\n        return future.routeConfig === curr.routeConfig;\n    }\n\n    private getRouteUrl(route: ActivatedRouteSnapshot) {\n        let next = this.getTruthRoute(route);\n        let segments = [];\n        while (next) {\n            segments.push(next.url.join('/'));\n            next = next.parent;\n        }\n        let /** @type {?} */ url = segments\n            .filter(function (i) {\n                return i;\n            })\n            .reverse()\n            .join('/');\n        return url;\n    }\n\n    getTruthRoute(route: ActivatedRouteSnapshot) {\n        let next = route;\n        while (next.firstChild) {\n            next = next.firstChild;\n        }\n        return next;\n    }\n\n    private isReuseRoute(route: ActivatedRouteSnapshot) {\n        //default is true;\n        let shouldReuse = true;\n        let next = route;\n        while (next) {\n            if (next.data.hasOwnProperty(\"cache\")) {\n                shouldReuse = next.data.cache;\n            }\n            next = next.firstChild;\n        }\n        console.debug('isReuseRoute', shouldReuse);\n        return shouldReuse;\n    }\n\n}","import { ErrorHandler, Injectable, Injector, Inject } from '@angular/core';\nimport * as stacktrace from 'stacktrace-js';\nimport { APIFactory } from '../api/APIFactory';\nimport { APIDispatch } from '../api/APIDispatch';\nimport { logErrorAPI } from '../api/register/logErrorAPI';\nimport { DeviceService } from '../device/device.service';\nimport { ConfigToken } from '../injectionToken/injection-token';\nimport { SettingService } from '../service/setting/setting.service';\n\n@Injectable()\nexport class ErrorsHandler implements ErrorHandler {\n\n    private isDebug: boolean = false;\n\n    constructor(\n        private APIFactory: APIFactory,\n        private dispatcher: APIDispatch,\n        private deviceService: DeviceService,\n        private settingService: SettingService,\n        private injector: Injector,\n        @Inject(ConfigToken) private APP_CONFIG: any\n    ) {\n        this.settingService.getDebugMode().subscribe(debug => {\n            this.isDebug = debug;\n        })\n    }\n\n    async handleError(error: Error) {\n        let env = this.APP_CONFIG.ENV;\n        let APIFactory = this.getAPIFactory();\n        let dispatcher = this.getAPIDispatcher();\n        // Log the error anyway\n        console.error(error);\n        if (this.isDebug)\n            alert('error:' + error.message);\n        let stack = await stacktrace.fromError(error, { offline: true });\n        stack = stack.map(x => x.source);\n        let logErrorAPI = APIFactory.getAPI(\"LogError\");\n        if (logErrorAPI) {\n            (<logErrorAPI>logErrorAPI).time = new Date();\n            (<logErrorAPI>logErrorAPI).message = error.message;\n            (<logErrorAPI>logErrorAPI).stack = stack;\n            (<logErrorAPI>logErrorAPI).DeviceModel = this.deviceService.getDeviceManufacturer();\n            (<logErrorAPI>logErrorAPI).DeviceSystem = this.deviceService.getDevicePlatform();\n            dispatcher.dispatch(logErrorAPI).toPromise().then((resp) => {\n                console.log(\"log error resp:\", resp);\n            })\n        }\n    }\n\n    private getAPIFactory() {\n        return this.APIFactory || this.injector.get(APIFactory);\n    }\n\n    private getAPIDispatcher() {\n        return this.dispatcher || this.injector.get(APIDispatch);\n    }\n}","import { Injectable, Injector } from \"@angular/core\";\nimport { APIFactory } from \"../api/APIFactory\";\nimport { APIDispatch } from \"../api/APIDispatch\";\nimport { SelectOption } from \"../bean/SelectOption\";\nimport { DaoFactory } from \"../device/sqlite/DaoFactory\";\nimport { AOPTokenService } from \"../injectionToken/AOPToken.service\";\nimport { ProfileCodeService } from \"../service/profile/profile-code.service\";\nimport { MetaConfigAPI } from \"../api/register/MetaConfigAPI\";\nimport { SQLiteTable } from \"../device/sqlite/SQLiteTable\";\nimport { MetaAOP } from \"./MetaAOP.interface\";\nimport { ClientCustomDao } from \"../device/sqlite/ClientCustomDao\";\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class MetaService {\n\n    constructor(\n        private injector: Injector,\n        private AOPTokenService: AOPTokenService,\n        private APIFactory: APIFactory,\n        private dispatcher: APIDispatch,\n        private DaoFactory: DaoFactory,\n        private profileCodeService: ProfileCodeService\n    ) {\n\n    }\n\n    //Get Meta setting by id\n    public getMetaJson(id: string): Promise<any> {\n        let configAPI = this.APIFactory.getAPI(\"getMetaConfig\");\n        (<MetaConfigAPI>configAPI).configName = id;\n        return this.dispatcher.dispatch(configAPI).toPromise();\n    }\n\n    // public async getData(meta: any, params: any): Promise<any> {\n    //     let AOP = meta[\"AOP\"];\n    //     let codeArray = this.getCodeArray(meta);\n    //     let source = meta.source;\n    //     let data = null;\n    //     if (source.type === 'API') {\n    //         let API = this.APIFactory.getAPI(source.read);\n    //         if (params) {\n    //             Object.keys(params).forEach((key) => {\n    //                 API[key] = params[key];\n    //             })\n    //         }\n    //         let api_resp = await this.dispatcher.dispatch(API).toPromise();\n    //         data = api_resp[\"Body\"][0];\n    //     }\n    //     else if (source.type === 'TABLE') {\n    //         //QUERY TABLE\n    //         let beforeAOP = null;\n    //         let afterAOP = null;\n    //         if (AOP) {\n    //             let beforeAOPName = AOP[\"ReadBefore\"];\n    //             let afterAOPName = AOP[\"ReadAfter\"];\n    //             //If has AOP, use Injector to find interface\n    //             let beforeToken = this.AOPTokenService.getToken(beforeAOPName);\n    //             let afterToken = this.AOPTokenService.getToken(afterAOPName);\n    //             beforeAOP = this.injector.get(beforeToken);\n    //             afterAOP = this.injector.get(afterToken);\n    //         }\n    //         let table = this.DaoFactory.getDefaultTable(source.table);\n    //         data = await this.queryTable(table, params, beforeAOP, afterAOP);\n    //     }\n    //     if (codeArray.length > 0) {\n    //         //Add Ref Options\n    //         data = this.convertCodeArrayToData(codeArray, data);\n    //     }\n    //     //Add Btn option\n    //     meta.footer.forEach(ele => {\n    //         if (ele.type === 'submit' || ele.type === 'button')\n    //             data[ele.id + \"Btn\"] = Object.assign({\n    //                 disable: false\n    //             }, ele);\n    //     });\n\n    //     return data;\n    // }\n\n    // public async saveData(meta: any, data: any, params?: any): Promise<any> {\n    //     let resp = null;\n    //     let source = meta.source;\n    //     let AOP = meta[\"AOP\"];\n    //     if (source.type === 'API' || source.type === 'INPUT') {\n    //         let API = this.APIFactory.getAPI(source.write);\n    //         API[\"Data\"] = data;\n    //         if (params) {\n    //             Object.keys(params).forEach((key) => {\n    //                 API[key] = params[key];\n    //             })\n    //         }\n    //         resp = await this.dispatcher.dispatch(API).toPromise();\n    //     }\n    //     else if (source.type === 'TABLE') {\n    //         //QUERY TABLE\n    //         let beforeAOP = null;\n    //         let afterAOP = null;\n    //         if (AOP) {\n    //             let beforeAOPName = AOP[\"WriteBefore\"];\n    //             let afterAOPName = AOP[\"WriteAfter\"];\n    //             //If has AOP, use Injector to find interface\n    //             let beforeToken = this.AOPTokenService.getToken(beforeAOPName);\n    //             let afterToken = this.AOPTokenService.getToken(afterAOPName);\n    //             beforeAOP = this.injector.get(beforeToken);\n    //             afterAOP = this.injector.get(afterToken);\n    //         }\n    //         let table = this.DaoFactory.getDefaultTable(source.table);\n    //         resp = await this.saveTable(data, table, params, beforeAOP, afterAOP);\n    //     }\n    //     return resp;\n    // }\n\n    // public getCodeArray(meta: any): Array<any> {\n    //     return meta.columns.filter(x => x.ref && x.ref.length > 0).map(x => {\n    //         return {\n    //             key: x.id,\n    //             val: this.profileCodeService.getCodeArray(x.ref),\n    //             type: x.type\n    //         }\n    //     });\n    // }\n\n    // public convertCodeArrayToData(codeArray, data) {\n    //     codeArray.forEach(ele => {\n    //         if (ele.type === 'Select')\n    //             data[ele.key + \"Option\"] = ele.val.map(x => new SelectOption(x.getCode(), x.displayText));\n    //         else\n    //             data[ele.key + \"Option\"] = ele.val.map(x => {\n    //                 return {\n    //                     id: x.getCode(),\n    //                     name: x.displayText,\n    //                     arguments: JSON.parse(x.getArguments())\n    //                 }\n    //             });\n    //     });\n    //     return data;\n    // }\n\n    // public async queryTable(tableObj: SQLiteTable, params: any = null, beforeAOP: MetaAOP, afterAOP: MetaAOP) {\n    //     if (beforeAOP) {\n    //         let conditions = await beforeAOP.run({ params });\n    //         if (conditions.length > 0) {\n    //             conditions.forEach(element => {\n    //                 tableObj.addRestriction(conditions);\n    //             });\n    //         }\n    //     }\n    //     let dao = this.DaoFactory.getDefaultDao();\n    //     let data = null;\n    //     let resp = await dao.queryByTable(tableObj).toPromise();\n    //     if (resp.Header['status']) {\n    //         data = resp.Body[0];\n    //     }\n    //     if (afterAOP) {\n    //         data = await afterAOP.run(data);\n    //     }\n    //     return data;\n    // }\n\n\n    // public async saveTable(data: any, tableObj: SQLiteTable, params: any = null, beforeAOP: MetaAOP, afterAOP: MetaAOP) {\n    //     let commonCols = ['IsDelete', 'ClientTime', 'DataTime'];\n    //     if (beforeAOP) {\n    //         data = await beforeAOP.run({ params, data });\n    //     }\n    //     let dao = this.DaoFactory.getDefaultDao();\n    //     dao = new ClientCustomDao(dao);\n    //     let columns = tableObj ? tableObj.getColumns().map(x => x.getName()) : [];\n    //     // Set value if data exist the column\n    //     columns.filter(x => !!data[x]).filter(x => commonCols.indexOf(x) === -1).forEach(columnName => {\n    //         tableObj.setValue(columnName, data[columnName]);\n    //     });\n    //     if (data[\"EditType\"] === 'add') {\n    //         await dao.insertByTable(tableObj).toPromise();\n    //     }\n    //     else {\n    //         await dao.updateByTable(tableObj).toPromise();\n    //     }\n    //     if (afterAOP) {\n    //         await afterAOP.run({ params, data });\n    //     }\n    // }\n}","import { MetaController } from \"./MetaController.interface\";\n\nexport abstract class DisplayMetaController implements MetaController {\n\n    onValueChange(column: string, value: any, groupId: string, index: number, data: any, vaildResult: any): void {\n\n    };\n    onValidateAll(data: any, vaildResult: any): boolean {\n        return true;\n    };\n    btnClick(type: string, id: string, data: any): void {\n\n    };\n    public abstract onDataUpdated(data: any): void;\n\n}","import { IMetaExecutor } from \"../MetaExecutor.interface\";\nimport { MetaConfig } from \"../../parser/bean/MetaConfig\";\nimport { Injectable, ErrorHandler } from \"@angular/core\";\nimport { APPError } from \"../../../errorHandler/APPError\";\nimport { APIFactory } from \"../../../api/APIFactory\";\nimport { APIDispatch } from \"../../../api/APIDispatch\";\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class APIExecutor implements IMetaExecutor {\n\n    constructor(\n        private errorHandler: ErrorHandler,\n        private APIFactory: APIFactory,\n        private dispatcher: APIDispatch\n    ) { }\n\n    public async getData(config: MetaConfig, params: any = null) {\n        try {\n            let API = this.APIFactory.getAPI(config.source.read);\n            if (params)\n                Object.keys(params).forEach((key) => {\n                    API[key] = params[key];\n                })\n            let resp = await this.dispatcher.dispatch(API).toPromise();\n            return resp[\"Body\"][0];\n\n        } catch (error) {\n            this.errorHandler.handleError(new APPError(\"F00802\", error.message));\n            return null;\n        }\n    }\n\n    public async saveData(config: MetaConfig, data: any, params: any = null) {\n        try {\n\n            let API = this.APIFactory.getAPI(config.source.write);\n            if (params)\n                Object.keys(params).forEach((key) => {\n                    API[key] = params[key];\n                })\n            API[\"Data\"] = data;\n            return await this.dispatcher.dispatch(API).toPromise();\n\n        } catch (error) {\n            this.errorHandler.handleError(new APPError(\"F00803\", error.message));\n            return null;\n        }\n    }\n}","import { IMetaExecutor } from \"../MetaExecutor.interface\";\nimport { MetaConfig } from \"../../parser/bean/MetaConfig\";\nimport { Injectable } from \"@angular/core\";\nimport { APIExecutor } from \"./APIExecutor\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class InputExecutor extends APIExecutor implements IMetaExecutor {\n\n    public async getData(config: MetaConfig, params: any) {\n        return null;\n    }\n    public async saveData(config: MetaConfig, data: any, params: any) {\n        if (config.source.write)\n            return super.saveData(config, data, params);\n        else\n            return null;\n    }\n}","import { MetaGrid } from './MetaGrid';\nexport class MetaColumn {\n    constructor(id: string, name: string, type: string) {\n        this.id = id;\n        this.name = name;\n        this.type = type;\n    }\n    public id: string = null;\n    public name: string = null;\n    public type: string = null;\n    public optionRef: string = null;\n    public showTitle: boolean = null;\n    public required: boolean = null;\n    public readonly: boolean = null;\n    public inline: boolean = null;\n    public grid: MetaGrid = null;\n    public order: number = null;\n    public default: any = null;\n    public maxLength: number = null;\n    public placeholder: string = null;\n    //For Group\n    public groupColumns: Array<MetaColumn> = [];\n    public groupRows: Array<Array<MetaColumn>> = [];\n    public icon: string = null;\n    public canAdd: boolean = null;\n    public maxNumber: number = null;\n    public showDefaultOption: boolean = null;\n    public rowTitle: string = null;\n}","import { MetaSource } from './MetaSource';\nimport { MetaColumn } from './MetaColumn';\nimport * as _ from 'lodash';\n\nexport class MetaConfig {\n    constructor() { }\n\n    public source: MetaSource = null;\n    public Rows: Array<Array<MetaColumn>> = [];\n    public Columns: Array<MetaColumn> = [];\n    public Footer: Array<MetaColumn> = [];\n\n    public setColumn(columnList: Array<any>, groupList: Array<any>) {\n        console.log(\"MetaConfig setColumn:\", columnList, groupList);\n        // Set Column MetaConfig\n        columnList = columnList.map(x => this.createColumnObject(x));\n        if (groupList.length > 0) {\n            let colsInGroup = _.flatMap(groupList, x => x.columns);\n            groupList = groupList.map(x => this.createGroupColumnObject(x, columnList));\n            columnList = columnList.filter(x => !colsInGroup.includes(x.id));\n            groupList.forEach((ele: MetaColumn) => {\n                ele.groupRows = this.convertColumns2Row(ele.groupColumns);\n                columnList.splice(ele.order, 0, ele);\n            });\n            columnList.forEach((ele: MetaColumn, index: number) => {\n                ele.order = index;\n            })\n        }\n        this.Columns = columnList;\n        this.Rows = this.convertColumns2Row(columnList);\n    }\n\n    public setFooter(footerList: Array<any>) {\n        this.Footer = footerList.map(x => {\n            return new MetaColumn(x.id, x.name, x.type);\n        })\n    }\n\n    private createColumnObject(column: any): MetaColumn {\n        let columnObj = new MetaColumn(column.id, column.name, column.type);\n        columnObj.optionRef = column.ref;\n        columnObj.showTitle = column.showTitle;\n        columnObj.required = column.required;\n        columnObj.readonly = column.readonly;\n        columnObj.grid = column.grid;\n        columnObj.inline = column.inline;\n        columnObj.order = column.order;\n        columnObj.default = column.default;\n        columnObj.maxLength = column.maxLength;\n        columnObj.groupColumns = column.groupColumns;\n        columnObj.icon = column.icon;\n        columnObj.canAdd = column.canAdd;\n        columnObj.maxNumber = column.maxNumber;\n        columnObj.placeholder = column.placeholder;\n        columnObj.showDefaultOption = column.showDefaultOption;\n        columnObj.rowTitle = column.rowTitle;\n        return columnObj;\n    }\n\n    private createGroupColumnObject(groupColumn: any, coulmnList: Array<MetaColumn>): MetaColumn {\n        let columnIDs = groupColumn.columns;\n        let groupColumnObj = this.createColumnObject(groupColumn);\n        groupColumnObj.groupColumns = columnIDs.map(x => coulmnList.filter(y => y.id === x)[0]);\n        return groupColumnObj;\n    }\n\n    private convertColumns2Row(columnList: Array<MetaColumn>): Array<Array<MetaColumn>> {\n        console.log(\"MetaConfig convertColumns2Row:\", columnList);\n        let tmpArray = [];\n        let rowArray = [];\n        for (var i = 0; i < columnList.length; i++) {\n            tmpArray.push(columnList[i]);\n            if (columnList[i].inline === false || i === (columnList.length - 1)) {\n                rowArray.push([...tmpArray]);\n                tmpArray = [];\n            }\n        }\n        return rowArray;\n    }\n}","export class MetaSource {\n    constructor(type: string, read: string, write: string) {\n        this.type = type;\n        this.read = read;\n        this.write = write;\n    }\n\n    public type;\n    public read;\n    public write;\n}","export class MetaGrid {\n    constructor(pc: number, nb?: number, pad?: number, mobile?: number) {\n        this.pc = pc;\n        this.nb = nb ? nb : pc;\n        this.pad = pad ? pad : pc;\n        this.mobile = mobile ? mobile : pc;\n    }\n\n    public pc: number;\n    public nb: number;\n    public pad: number;\n    public mobile: number;\n}","import { IMetaParser } from \"./MetaParser.interface\";\nimport { MetaConfig } from \"./bean/MetaConfig\";\nimport { MetaSource } from \"./bean/MetaSource\";\nimport { APPError } from \"../../errorHandler/APPError\";\nimport { MetaGrid } from \"./bean/MetaGrid\";\nimport { Injectable } from \"@angular/core\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DefaultMetaParser implements IMetaParser {\n\n    public parse(json: any): MetaConfig {\n        console.log(\"Default Meta Parser parse:\", json);\n        json.columns = this.fillDefaultColumnSetting(json.columns);\n        let group = json.group ? json.group : [];\n        group = this.fillDefaultColumnSetting(group);\n        let metaConfig = new MetaConfig();\n\n        console.log(\"DefaultMetaParser parse:\", json, group);\n        metaConfig.source = this.getSource(json);\n        metaConfig.setColumn(json.columns, group);\n        metaConfig.setFooter(json.footer);\n        console.log(\"After Parse:\", metaConfig);\n        return metaConfig;\n    }\n\n    private getSource(json): MetaSource {\n        try {\n            let type = json.source.type;\n            let read = json.source.read;\n            let write = json.source.write;\n            read = read ? read : null;\n            write = write ? write : null;\n            return new MetaSource(type, read, write);\n        } catch (error) {\n            throw new APPError(\"F00801\", error.message);\n        }\n    }\n\n    private fillDefaultColumnSetting(columnList): any {\n        return columnList.map(x => this._defaultSetting(x));\n    }\n\n    private _defaultSetting(column: any): any {\n        let grid = column.grid;\n        if (!grid) {\n            grid = new MetaGrid(12);\n        }\n        else if (typeof (grid) === 'number')\n            grid = new MetaGrid(grid);\n        else {\n            grid = new MetaGrid(grid.pc, grid.nb, grid.pad, grid.mobile);\n        }\n        return Object.assign({\n            type: 'Group',\n            ref: '',\n            showTitle: true,\n            required: false,\n            readonly: false,\n            inline: false,\n            order: 0,\n            default: '',\n            maxLength: 999,\n            showDefaultOption: true,\n            groupColumns: [],\n            icon: null,\n            canAdd: false,\n            maxNumber: 999,\n            placeholder: '',\n            rowTitle: null\n        }, column, { grid });\n    }\n}","export class MetaValid {\n    public isValid: boolean;\n    public message: string;\n    public colID: string;\n    constructor(colID: string, isValid: boolean, message: string) {\n        this.colID = colID;\n        this.isValid = isValid;\n        this.message = message;\n    }\n}","import { MetaService } from \"../Meta.service\";\nimport { IMetaExecutor } from \"../executor/MetaExecutor.interface\";\nimport { IMetaParser } from \"../parser/MetaParser.interface\";\nimport { MetaConfig } from \"../parser/bean/MetaConfig\";\nimport { APPError } from \"../../errorHandler/APPError\";\nexport abstract class BaseMetaComponent {\n\n    constructor(\n        protected metaService: MetaService,\n        protected parser: IMetaParser,\n        protected executor: IMetaExecutor\n    ) {\n        this.metaID = this.getMetaID();\n    }\n\n    protected metaID: string = null;\n    protected metaLoaded: boolean = false;\n\n\n    protected metaConfig: MetaConfig = null;\n    protected _data: any = null;\n\n    protected abstract getMetaID(): string;\n    protected abstract getMetaParams(): any;\n\n    public ngOnInit() {\n        console.log(\"MetaComponent ngOninit!\");\n        this.init();\n    }\n\n    private async init() {\n        try {\n            let metaJSON = await this.metaService.getMetaJson(this.metaID);\n            this.metaConfig = this.parser.parse(metaJSON);\n            await this.loadData();\n            this.metaLoaded = true;\n        } catch (error) {\n            throw new APPError(\"F00800\", error.message);\n        }\n    }\n\n    protected async loadData() {\n        let executed_data = await this.executor.getData(this.metaConfig, this.getMetaParams());\n        if (executed_data) {\n            this._data = executed_data;\n            this.onDataUpdated();\n        }\n    }\n\n    protected waitUntilMetaLoaded(): Promise<any> {\n        return new Promise((res, rej) => {\n            let checkInterval = setInterval(() => {\n                if (this.metaLoaded) {\n                    clearInterval(checkInterval);\n                    res();\n                }\n            }, 100);\n        });\n    }\n\n    public isMetaLoaded() {\n        return this.metaLoaded;\n    }\n\n    protected abstract onDataUpdated();\n\n}","import { BaseMetaComponent } from './BaseMetaComponent';\nimport { MetaService } from '../Meta.service';\nimport { ProfileCodeService } from '../../service/profile/profile-code.service';\nimport { IMetaParser } from '../parser/MetaParser.interface';\nimport { IMetaExecutor } from '../executor/MetaExecutor.interface';\n\nexport abstract class DisplayMetaComponent extends BaseMetaComponent {\n\n    constructor(\n        metaService: MetaService,\n        protected profileCodeService: ProfileCodeService,\n        parser: IMetaParser,\n        executor: IMetaExecutor\n    ) {\n        super(metaService, parser, executor);\n    }\n\n    public ngOnInit() {\n        console.log(\"DisplayMetaComponent ngOninit!\");\n        super.ngOnInit();\n    }\n\n\n    protected onDataUpdated() {\n        this.convertCodeToDisplay();\n    }\n\n    private convertCodeToDisplay() {\n        let needToConvert = this.metaConfig.Columns.filter(x => x.type === 'Label' && !!x.optionRef);\n        needToConvert.forEach((col) => {\n            if (this._data[col.id])\n                this._data[col.id] = this.profileCodeService.convertCode2Text(col.optionRef, this._data[col.id]);\n        })\n\n        this.metaConfig.Columns.filter(x => x.type === 'Group').forEach(group => {\n            let colsNeedConvert = group.groupColumns.filter(x => x.type === 'Label' && !!x.optionRef);\n            console.log(\"colsNeedConvert:\", colsNeedConvert);\n            if (colsNeedConvert.length > 0 && this._data[group.id]) {\n                this._data[group.id].forEach((groupData, index) => {\n                    let extendedObj = colsNeedConvert.map(x => {\n                        return {\n                            key: x.id,\n                            value: this.profileCodeService.convertCode2Text(x.optionRef, this._data[group.id][index][x.id])\n                        }\n                    }).reduce((acc, cur) => { acc[cur.key] = cur.value; return acc; }, {});\n                    console.log(\"extendedObj:\", extendedObj);\n                    groupData = Object.assign(groupData, extendedObj);\n                });\n            }\n        })\n\n    }\n}","import { BaseMetaComponent } from './BaseMetaComponent';\nimport { MetaService } from '../Meta.service';\nimport { ValidationResult } from '../../utils/ValidationResult';\nimport { MetaValid } from '../parser/bean/MetaValid';\nimport { MetaColumn } from '../parser/bean/MetaColumn';\nimport { ProfileCodeService } from '../../service/profile/profile-code.service';\nimport { SelectOption } from '../../bean/SelectOption';\nimport { ProfileCode } from '../../bean/ProfileCode';\nimport { IMetaExecutor } from '../executor/MetaExecutor.interface';\nimport { IMetaParser } from '../parser/MetaParser.interface';\nimport * as _ from 'lodash';\n\n\nexport abstract class FormMetaComponent extends BaseMetaComponent {\n\n\n    public validationResult: ValidationResult = new ValidationResult();\n\n    constructor(\n        metaService: MetaService,\n        protected profileCodeService: ProfileCodeService,\n        parser: IMetaParser,\n        executor: IMetaExecutor\n    ) {\n        super(metaService, parser, executor);\n    }\n\n    public ngOnInit() {\n        console.log(\"FormMetaComponent ngOninit!\");\n        super.ngOnInit();\n    }\n\n\n    protected abstract onValueChange(column: string, value: any, groupId: string, index: number): void;\n    protected abstract onValidateAll(): boolean;\n    protected abstract btnClick(type: string, id: string): void;\n\n    public onChange(column: string, value: any, groupID: string = null, index: number = -1) {\n        console.log(\"onChange:\", column, value, groupID, index);\n        let isGroup = (groupID && index >= 0);\n        let columnID = isGroup ? column : (column + index.toString());\n        let validResp = this.valid(column, value, isGroup);\n        console.log(\"validResp:\", validResp);\n\n        if (validResp)\n            this.validationResult.deleteError(columnID);\n        else\n            this.validationResult.setErrorMap(columnID, validResp.message);\n\n        this.onValueChange(column, value, groupID, index);\n\n    }\n\n    private valid(column: string, value: any, isGroup: boolean = false) {\n        console.log(\"valid:\", column, value, isGroup);\n        let resp = new MetaValid(column, true, \"\");\n        let col: MetaColumn;\n        if (isGroup) {\n            let groupCol = this.metaConfig.Columns\n                .filter(x => x.type === 'Group')\n                .map(x => x.groupColumns);\n            col = _.flatten(groupCol).filter(x => x.id === column)[0];\n        }\n        else\n            col = this.metaConfig.Columns.filter(x => x.id === column)[0];\n        console.log(\"valid col:\", col);\n        if (col.type === 'Input') {\n            if (col.required && !value) {\n                resp.isValid = false;\n                resp.message = col.id + \"_required\";\n            }\n        }\n        else if (col.type === 'Select') {\n            if (col.required && (value === '' || !value)) {\n                resp.isValid = false;\n                resp.message = col.id + \"_required\";\n            }\n        }\n        return resp;\n    }\n\n    private validAll() {\n        //Column Result\n        let validResult = this.metaConfig.Columns.filter(x => x.type !== \"Group\")\n            .map((col: MetaColumn) => this.valid(col.id, this._data[col.id]))\n            .filter(x => !x.isValid);\n\n        this.metaConfig.Columns.filter(x => x.type === \"Group\")\n            .forEach(group => {\n                let groupId = group.id;\n                this._data[groupId].forEach((ele, index) => {\n                    validResult = validResult.concat(group.groupColumns.map(col => {\n                        let validResp = this.valid(col.id, ele[col.id], true);\n                        validResp.colID = col.id + index.toString();\n                        return validResp;\n                    }).filter(x => !x.isValid));\n                });\n            });\n        console.log(\"validAll result:\", validResult);\n        return validResult;\n    }\n\n    public async onBtnClick(type: string, id: string) {\n        if (this._data[id + 'Btn'])\n            this._data[id + 'Btn'].disable = true;\n        if (type === 'submit') {\n            this.validationResult.clearErrorMap();\n            let result = this.validAll();\n            result.forEach((err) => {\n                this.validationResult.setErrorMap(err.colID, err.message);\n            })\n            if (this.onValidateAll() && result.length === 0) {\n                //CALL SAVE API\n                let resp = await this.saveData();\n                console.log(\"save data resp:\", resp);\n                this.btnClick(type, id);\n                if (this._data[id + 'Btn'])\n                    this._data[id + 'Btn'].disable = true;\n            }\n            else {\n                this._data[id + 'Btn'].disable = false;\n            }\n        }\n        else\n            this.btnClick(type, id);\n    }\n\n    protected async saveData() {\n        return await this.executor.saveData(this.metaConfig, this._data, this.getMetaParams());\n    }\n\n    public onGroupRemove(groupName: string, index: number) {\n        this._data[groupName] = this._data[groupName].filter((x, i) => i != index);\n        let group_col = this.metaConfig.Columns.filter(x => x.id === groupName)[0].groupColumns;\n        group_col.forEach(col => {\n            this.validationResult.deleteError(col.id + index.toString());\n        });\n\n    }\n\n    public onGroupAdd(groupName: string) {\n        let group_col = this.metaConfig.Columns.filter(x => x.id === groupName)[0].groupColumns;\n        let keys = group_col.map(x => x.id);\n        console.log(\"keys:\", keys);\n        let newObj = keys.map(x => {\n            let y = {};\n            let defaultVal = group_col.filter(z => z.id === x)[0].default;\n            y[x] = defaultVal;\n            return y\n        }).reduce((acc, current) => {\n            return Object.assign(acc, current);\n        }, {})\n        console.log(\"GroupAdd newObj:\", newObj);\n        this._data[groupName] = [...this._data[groupName], newObj];\n\n    }\n\n    protected onDataUpdated() {\n        this.addBtnAttr();\n        this.fetchOptions();\n    }\n\n    private fetchOptions() {\n        this.metaConfig.Columns\n            .filter(x => x.optionRef && x.optionRef.length > 0)\n            .map(x => this.createOption(x))\n            .forEach((option) => {\n                this._data[option.key] = option.val;\n            })\n\n        let groupCol = this.metaConfig.Columns\n            .filter(x => x.type === 'Group')\n            .map(x => x.groupColumns.filter(y => y.optionRef && y.optionRef.length > 0));\n\n        let groupOpt = _.flatMap(groupCol, x => x.map(y => this.createOption(y)));\n        groupOpt.forEach((option) => {\n            this._data[option.key] = option.val;\n        })\n\n    }\n\n    private addBtnAttr() {\n        this.metaConfig.Footer.forEach(ele => {\n            if (ele.type === 'submit' || ele.type === 'button')\n                this._data[ele.id + \"Btn\"] = Object.assign({\n                    disable: false\n                }, ele);\n        });\n    }\n\n    private createOption(column: MetaColumn) {\n        let resp = {\n            key: column.id + 'Option',\n            val: []\n        }\n        let codeArray = this.profileCodeService.getCodeArray(column.optionRef);\n        if (column.type === 'Select')\n            resp.val = codeArray\n                .map((x: ProfileCode) => new SelectOption(x.getCode(), this.profileCodeService.convertCode2Text(column.optionRef, x.getCode())));\n        else\n            resp.val = codeArray.map((x: ProfileCode) => {\n                return {\n                    id: x.getCode(),\n                    name: this.profileCodeService.convertCode2Text(column.optionRef, x.getCode()),\n                    arguments: JSON.parse(x.getArguments())\n                }\n            })\n\n        return resp;\n    }\n\n}","import { ValidBean } from './ValidBean';\nimport { ValidCondition } from './condition/ValidCondition.interface';\n\nexport class ValidController {\n    public static beanPool: Array<ValidBean> = [];\n\n    public static addBean(bean: ValidBean): void {\n        if (this.beanPool.filter(x => x.name === bean.name).length === 0)\n            this.beanPool.push(bean);\n    }\n\n    public static validObject(data: any, name: string): boolean {\n        try {\n            console.log(\"validObject:\", name, data);\n            let bean = this.getBean(name);\n            if (bean) {\n                let validResult = bean.validSelf(data);\n                if (validResult.length > 0) {\n                    this.errorHandler(validResult, name);\n                }\n                return validResult.length === 0;\n            }\n            else {\n                throw new Error(`Cannot find Bean ${name}.`);\n            }\n        } catch (error) {\n            console.error('Valid Object error', error);\n            return true;\n        }\n    }\n\n    public static addCondition(objectName: string, propertyName: string, condition: ValidCondition): void {\n        let bean = this.getBean(objectName);\n        let property = bean.getOrCreateProperty(propertyName);\n        console.log(\"addCondition:\", bean, property);\n        property.addCondition(condition);\n    }\n\n    private static getBean(name: string): ValidBean {\n        if (this.beanPool.filter(x => x.name === name).length > 0)\n            return this.beanPool.filter(x => x.name === name)[0]\n        else\n            return null;\n    }\n\n    private static errorHandler(validResult: Array<string>, name: string) {\n        console.error(validResult.reduce((x, y) => `${x}\\n${y}`, `Class ${name} valid error:`));\n    }\n}\n\n\n\n\n\n","import { ValidCondition } from \"./condition/ValidCondition.interface\";\n\nexport class ValidProperty {\n    private _name: string;\n    public get name(): string {\n        return this._name;\n    }\n    public set name(value: string) {\n        this._name = value;\n    }\n    private conditionList: Array<ValidCondition>;\n\n    constructor(name: string) {\n        this.name = name;\n        this.conditionList = [];\n    }\n    public addCondition(condition: ValidCondition) {\n        this.conditionList.push(condition);\n    }\n\n    public validProperty(value): Array<string> {\n        return this.conditionList.filter(x => !x.valid(value)).map(x => x.getErrorMsg(this.name));\n    }\n}","import { ValidProperty } from \"./ValidProperty\";\nimport * as _ from 'lodash';\n\nexport class ValidBean {\n    private _name: string;\n    private _type: any;\n    private propertyList: Array<ValidProperty>;\n\n    public get name(): string {\n        return this._name;\n    }\n    public set name(value: string) {\n        this._name = value;\n    }\n\n    public get type(): any {\n        return this._type;\n    }\n    public set type(value: any) {\n        this._type = value;\n    }\n\n    constructor(name: string, type: any) {\n        this.name = name;\n        this.type = type;\n        this.propertyList = [];\n    }\n\n    public getOrCreateProperty(name: string): ValidProperty {\n        let filtered = this.propertyList.filter(x => x.name === name);\n        if (filtered.length > 0) {\n            return filtered[0];\n        } else {\n            let property = new ValidProperty(name);\n            this.addProperty(property);\n            return property;\n        }\n    }\n\n    public validSelf(data: any): Array<string> {\n        let validResult = _.flatMap(this.propertyList, x => x.validProperty(data[x.name]));\n        console.log(\"validSelf result:\", validResult);\n        return validResult;\n    }\n\n    private addProperty(property: ValidProperty) {\n        this.propertyList.push(property);\n    }\n\n}","export interface ValidCondition {\n    valid(value: any): boolean;\n    getType(): ValidType;\n    getErrorMsg(column: string): string;\n}\n\nexport enum ValidType {\n    Required,\n    Max,\n    Min\n}","import { ValidCondition, ValidType } from \"./ValidCondition.interface\";\nimport { ValidController } from \"../ValidController\";\n\nexport class RequiredCondition implements ValidCondition {\n    private type: ValidType;\n    private value: any;\n    private baseTypes = ['string', 'undefined', 'number', 'boolean'];\n\n    constructor() {\n        this.type = ValidType.Required;\n    }\n\n    getType(): ValidType {\n        return this.type;\n    }\n    valid(value): boolean {\n        this.value = value;\n        console.log('RequiredCondition valid:', value, this.baseTypes.indexOf(typeof value) === -1);\n        let isBaseType = this.baseTypes.indexOf(typeof value) !== -1 || value === null;\n        if (isBaseType)\n            return value !== null && value !== undefined;\n        else if (value instanceof Array)\n            return value.length > 0;\n        else if (typeof value === 'object')\n            return ValidController.validObject(value, value.beanName);\n    }\n\n    getErrorMsg(column: string): string {\n        return `${column} is ${this.value} but expect required.`;\n    }\n}","import { ValidController } from \"../ValidController\";\nimport { Observable, isObservable, of } from \"rxjs\";\n\nexport function Valid(type?: any): MethodDecorator {\n    console.log(\"valid type:\", type);\n    return function (\n        target: Function,\n        propertyName: string,\n        propertyDesciptor: PropertyDescriptor) {\n        const method = propertyDesciptor.value;\n        propertyDesciptor.value = function (...args) {\n            console.log('pool:', ValidController.beanPool);\n            let result = method.apply(this, args);\n            console.log('valid result: ', result);\n            if (isObservable(result)) {\n                console.log('isObservable(result)');\n                return handleObservable(result);\n            }\n            else if (result instanceof Promise) {\n                console.log('result instanceof Promise');\n                return handlePromise(result);\n            }\n            else {\n                console.log('not Observable, not instanceof Promise');\n                validObject(result);\n                return result;\n            }\n        }\n        return propertyDesciptor;\n    }\n}\n\nfunction handleObservable(result: Observable<any>): Observable<any> {\n    return new Observable((observer) => {\n        result.subscribe(\n            {\n                next(x) {\n                    validObject(x);\n                    observer.next(x);\n                },\n                error(err) { observer.error(err); },\n                complete() { observer.complete(); }\n            })\n    });\n}\n\nasync function handlePromise(result: Promise<any>): Promise<any> {\n    let resolved = await result;\n    validObject(resolved);\n    return resolved;\n}\n\nfunction validObject(data: any) {\n    console.log(\"Valid.ts validObject:\", data);\n    if (data instanceof Array)\n        data.forEach(x => validObject(x));\n    else\n        ValidController.validObject(data, data.beanName);\n}","import { ValidController } from \"../ValidController\";\nimport { ValidBean } from \"../ValidBean\";\n\n\n\nexport function Bean(name: string) {\n    return function Bean<T extends { new(...args: any[]): {} }>(constructor: T) {\n        ValidController.addBean(new ValidBean(name, constructor));\n        return class extends constructor {\n            beanName = name;\n        }\n    }\n}","import { ValidController } from \"../ValidController\";\nimport { ValidBean } from \"../ValidBean\";\nimport { RequiredCondition } from \"../condition/RequiredCondition\";\n\nexport function Required(target: Object, propertyName: string) {\n    ValidController.addBean(new ValidBean(target.constructor.name, target));\n    ValidController.addCondition(target.constructor.name, propertyName, new RequiredCondition());\n}"]}