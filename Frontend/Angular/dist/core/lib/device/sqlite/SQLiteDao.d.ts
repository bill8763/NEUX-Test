import { IDao } from "./Dao.interface";
import { SQLiteTable } from "./SQLiteTable";
import { Observable } from "rxjs";
import { SQLiteResponse } from "./SQLiteResponse";
import { SQLCommand } from "./SQLCommand";
import { SQLiteDatabase } from "./SQLiteDatabase";
export declare class SQLiteDao implements IDao {
    protected connection: any;
    protected transactionArr: Array<any>;
    protected config: SQLiteDatabase;
    constructor(config: SQLiteDatabase);
    openDataBase(): Promise<any>;
    queryByTable(tableObject: SQLiteTable): Observable<SQLiteResponse>;
    insertByTable(tableObject: SQLiteTable): Observable<SQLiteResponse>;
    updateByTable(tableObject: SQLiteTable): Observable<SQLiteResponse>;
    deleteByTable(tableObject: SQLiteTable): Observable<SQLiteResponse>;
    transactionInsert(tableObject: SQLiteTable): void;
    transactionUpdate(tableObject: SQLiteTable): void;
    transactionDelete(tableObject: SQLiteTable): void;
    transactionSqlCommand(command: SQLCommand): void;
    excuteSqlCommand(sql_command: Array<SQLCommand>): any;
    getSchema(): any;
    runTransaction(): any;
    clearTransaction(): void;
    protected getColumns(tx: any, schema: any, table_name: any, table_sql: any): void;
    private runSqlCommand;
    private runQuerySqlcommand;
    private transformInsert;
    private transformUpdate;
    private transformDelete;
    private addTransactionCommand;
}
