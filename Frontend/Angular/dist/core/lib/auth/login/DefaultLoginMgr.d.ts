import { Injector } from "@angular/core";
import { ILoginMgr } from "./LoginMgr.interface";
import { LoginInfo } from "./LoginInfo";
import { Observable } from "rxjs";
import { LoginResponse } from "./LoginResponse";
import { DeviceService } from "../../device/device.service";
import { APIFactory } from "../../api/APIFactory";
import { APIDispatch } from "../../api/APIDispatch";
import { PushIDMgr } from "./PushIDMgr.interface";
import { LoginTokenStore } from "./LoginTokenStore";
import { AppRouter } from "../../route/AppRouter";
export declare class DefaultLoginMgr implements ILoginMgr {
    private deviceService;
    private APIFactory;
    private dispatcher;
    private injector;
    private tokenStore;
    private router;
    private APP_CONFIG;
    private customLoginMgr;
    private pushIDMgr;
    private appMode;
    private token;
    private loginInfo;
    private infoSubject;
    private logoutSubject;
    constructor(deviceService: DeviceService, APIFactory: APIFactory, dispatcher: APIDispatch, injector: Injector, tokenStore: LoginTokenStore, router: AppRouter, APP_CONFIG: any, customLoginMgr: ILoginMgr, pushIDMgr: PushIDMgr);
    getLoginInfo(): Observable<LoginInfo>;
    getToken(): Observable<string>;
    checkLogin(): boolean;
    subscribeLogout(): Observable<any>;
    login(payload: any): Observable<LoginResponse>;
    private _login;
    logout(): void;
    updateToken(token: string): void;
    private getAPIFactory;
    private getAPIDispatch;
}
