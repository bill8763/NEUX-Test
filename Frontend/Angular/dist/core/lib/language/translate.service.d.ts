import { HttpClient } from '@angular/common/http';
import { Observable, Subject } from 'rxjs';
import { LanguageCode } from '../bean/LanguageCode';
import { APIFactory } from '../api/APIFactory';
import { APIDispatch } from '../api/APIDispatch';
import { ILanguageAccess } from './ILanguageAccess';
import { ILanguageUpdate } from './ILanguageUpdate';
import { DeviceService } from '../device/device.service';
export declare class TranslateService {
    private httpService;
    private dispatcher;
    private APIFactory;
    private deviceService;
    private LanguageAccess;
    private LanguageUpdate;
    private language_map;
    private languageMap;
    private current_language;
    private updateLanguageSubject;
    constructor(httpService: HttpClient, dispatcher: APIDispatch, APIFactory: APIFactory, deviceService: DeviceService, LanguageAccess: ILanguageAccess, LanguageUpdate: ILanguageUpdate);
    init(): Promise<void>;
    loadJson(): Promise<{}>;
    translate(key: any): any;
    translateWithVariable(mappingID: string, map: any): any;
    _fetchCurrentLanguage(): Observable<any>;
    _fetchCodeData(): Observable<any>;
    getCodeArray(): LanguageCode[];
    updateLanguage(newLanguage: string): Observable<any>;
    getCurrentLanguage(): string;
    getUpdateSubject(): Subject<any>;
}
