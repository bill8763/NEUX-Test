/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from "@angular/core";
import { ProfileCodeAPI } from "../../api/register/ProfileCode";
import { SettingAPI } from '../../api/register/SettingAPI';
import { ExtensionConfigAPI } from "../../api/register/ExtensionConfigAPI";
import { APIFactory } from "../../api/APIFactory";
import { DaoFactory } from "../../device/sqlite/DaoFactory";
import { DeviceFactory } from "../../device/DeviceFactory";
import { OfflineAuthAPI } from "../../api/register/offineAuthAPI";
import { saveLoginTokenAPI } from "../../api/register/loginTokenAPI";
import { CheckVersionAPI } from '../../api/register/CheckVersionAPI';
import { MenuAPI } from "../../api/register/menuAPI";
import { SettingUpdateAPI, } from "../../api/register/SettingUpdateAPI";
import { ContactsSearchAPI } from '../../api/register/ContactsSearchAPI';
import { SyncPushAPI } from "../../api/register/SyncPushAPI";
import { SyncPullAPI } from "../../api/register/SyncPullAPI";
import { CurrentLanguageListAPI } from '../../api/register/CurrentLanguageListAPI';
import { BindingAccountAPI } from "../../api/register/BindingAccountAPI";
import { DeviceAccountAPI } from "../../api/register/DeviceAccountAPI";
import { UpdatePushIDAPI } from "../../api/register/UpdatePushIDAPI";
import { syncSequenceIDAPI } from "../../api/register/syncSequenceIDAPI";
import { logErrorAPI } from "../../api/register/logErrorAPI";
import { logActionAPI } from "../../api/register/logActionAPI";
import { PushErrorLogAPI } from "../../api/register/pushErrorLogAPI";
import { PushActionLogAPI } from "../../api/register/PushActionLogAPI";
import { RouterMapAPI } from "../../api/register/RouterMapAPI";
import { getYearConfigAPI } from "../../api/register/getYearConfigAPI";
import { saveYearConfigAPI } from "../../api/register/saveYearConfigAPI";
import { getAgencyPlanAPI } from "../../api/register/getAgencyPlanAPI";
import { saveAgencyPlanAPI } from "../../api/register/saveAgencyPlanAPI";
import { saveProgressAPI } from "../../api/register/saveProgressAPI";
import { getProgressAPI } from "../../api/register/getProgressAPI";
import { MetaConfigAPI } from "../../api/register/MetaConfigAPI";
import { SettingValueAPI } from "../../api/register/SettingValueAPI";
import { TranslateService } from "../../language/translate.service";
import { DeviceService } from "../../device/device.service";
import { getGoalAPI } from "../../api/register/getGoalAPI";
import { saveGoalAPI } from "../../api/register/saveGoalAPI";
import { saveActualAPI } from "../../api/register/saveActual";
import { getActualAPI } from "../../api/register/getActual";
import { pushGoalSettingDataAPI } from "../../api/register/pushGoalSettingDataAPI";
import { pushApproveGoalAPI } from "../../api/register/pushApproveGoalAPI";
import { ConfigToken } from "../../injectionToken/injection-token";
import { GetDeviceInfoAPI } from "../../api/register/GetDeviceInfoAPI";
import { LoginAPI } from "../../api/register/LoginAPI";
import { DashboardGetMessageListAPI } from "../../api/register/DashboardGetMessageListAPI";
import { DashboardUpdateMessageStatusAPI } from "../../api/register/DashboardUpdateMessageStatusAPI";
import { ChangeMessageStatusAPI } from "../../api/register/changeMessageStatusAPI";
import { UnbindDeviceAPI } from "../../api/register/UnbindDeviceAPI";
import { UpdateTimeListAPI } from "../../api/register/UpdateTimeListAPI";
import * as i0 from "@angular/core";
import * as i1 from "../../api/APIFactory";
import * as i2 from "../../device/sqlite/DaoFactory";
import * as i3 from "../../device/DeviceFactory";
import * as i4 from "../../language/translate.service";
import * as i5 from "../../device/device.service";
import * as i6 from "../../injectionToken/injection-token";
export class RegisterAPITask {
    /**
     * @param {?} APIFactory
     * @param {?} DAOFactory
     * @param {?} deviceFactory
     * @param {?} translateService
     * @param {?} deviceService
     * @param {?} APP_CONFIG
     */
    constructor(APIFactory, DAOFactory, deviceFactory, translateService, deviceService, APP_CONFIG) {
        this.APIFactory = APIFactory;
        this.DAOFactory = DAOFactory;
        this.deviceFactory = deviceFactory;
        this.translateService = translateService;
        this.deviceService = deviceService;
        this.APP_CONFIG = APP_CONFIG;
    }
    /**
     * @return {?}
     */
    doTask() {
        return new Promise((/**
         * @param {?} res
         * @param {?} rej
         * @return {?}
         */
        (res, rej) => {
            console.log('register API');
            //register Setting API
            this.APIFactory.registerAPI(new SettingAPI(this.DAOFactory));
            this.APIFactory.registerAPI(new SettingUpdateAPI(this.DAOFactory));
            //register Config API
            this.APIFactory.registerAPI(new ExtensionConfigAPI());
            //register Profile API
            this.APIFactory.registerAPI(new ProfileCodeAPI(this.DAOFactory));
            //register Device API
            this.APIFactory.registerAPI(new CurrentLanguageListAPI(this.DAOFactory));
            //register Login API
            this.APIFactory.registerAPI(new saveLoginTokenAPI(this.DAOFactory));
            this.APIFactory.registerAPI(new OfflineAuthAPI(this.DAOFactory, this.APP_CONFIG));
            //register getMenu API
            this.APIFactory.registerAPI(new MenuAPI());
            //register checkversion API
            this.APIFactory.registerAPI(new CheckVersionAPI());
            //register datasync API
            this.APIFactory.registerAPI(new SyncPushAPI());
            this.APIFactory.registerAPI(new SyncPullAPI());
            //register UpdatePushID API
            this.APIFactory.registerAPI(new UpdatePushIDAPI());
            //register getSyncSequence API
            this.APIFactory.registerAPI(new syncSequenceIDAPI());
            //register account binding API
            this.APIFactory.registerAPI(new BindingAccountAPI(this.DAOFactory));
            this.APIFactory.registerAPI(new DeviceAccountAPI(this.DAOFactory));
            this.APIFactory.registerAPI(new ContactsSearchAPI(this.deviceFactory));
            this.APIFactory.registerAPI(new logErrorAPI(this.DAOFactory));
            this.APIFactory.registerAPI(new logActionAPI(this.DAOFactory));
            this.APIFactory.registerAPI(new PushErrorLogAPI());
            this.APIFactory.registerAPI(new PushActionLogAPI());
            this.APIFactory.registerAPI(new RouterMapAPI());
            this.APIFactory.registerAPI(new getYearConfigAPI(this.APP_CONFIG));
            this.APIFactory.registerAPI(new saveYearConfigAPI(this.DAOFactory));
            this.APIFactory.registerAPI(new getAgencyPlanAPI(this.APP_CONFIG));
            this.APIFactory.registerAPI(new saveAgencyPlanAPI(this.DAOFactory));
            this.APIFactory.registerAPI(new getProgressAPI(this.APP_CONFIG));
            this.APIFactory.registerAPI(new saveProgressAPI(this.DAOFactory));
            this.APIFactory.registerAPI(new getGoalAPI(this.APP_CONFIG));
            this.APIFactory.registerAPI(new saveGoalAPI(this.DAOFactory));
            this.APIFactory.registerAPI(new getActualAPI(this.APP_CONFIG));
            this.APIFactory.registerAPI(new saveActualAPI(this.DAOFactory));
            this.APIFactory.registerAPI(new pushGoalSettingDataAPI());
            this.APIFactory.registerAPI(new pushApproveGoalAPI());
            this.APIFactory.registerAPI(new GetDeviceInfoAPI(this.DAOFactory));
            this.APIFactory.registerAPI(new MetaConfigAPI());
            this.APIFactory.registerAPI(new SettingValueAPI(this.translateService, this.deviceService));
            this.APIFactory.registerAPI(new LoginAPI());
            this.APIFactory.registerAPI(new DashboardGetMessageListAPI(this.DAOFactory));
            this.APIFactory.registerAPI(new DashboardUpdateMessageStatusAPI(this.DAOFactory));
            this.APIFactory.registerAPI(new ChangeMessageStatusAPI(this.DAOFactory));
            this.APIFactory.registerAPI(new UnbindDeviceAPI(this.APP_CONFIG));
            this.APIFactory.registerAPI(new UpdateTimeListAPI(this.DAOFactory));
            res("register API tasks Done!");
        }));
    }
}
RegisterAPITask.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
RegisterAPITask.ctorParameters = () => [
    { type: APIFactory },
    { type: DaoFactory },
    { type: DeviceFactory },
    { type: TranslateService },
    { type: DeviceService },
    { type: undefined, decorators: [{ type: Inject, args: [ConfigToken,] }] }
];
/** @nocollapse */ RegisterAPITask.ngInjectableDef = i0.defineInjectable({ factory: function RegisterAPITask_Factory() { return new RegisterAPITask(i0.inject(i1.APIFactory), i0.inject(i2.DaoFactory), i0.inject(i3.DeviceFactory), i0.inject(i4.TranslateService), i0.inject(i5.DeviceService), i0.inject(i6.ConfigToken)); }, token: RegisterAPITask, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    RegisterAPITask.prototype.APIFactory;
    /**
     * @type {?}
     * @private
     */
    RegisterAPITask.prototype.DAOFactory;
    /**
     * @type {?}
     * @private
     */
    RegisterAPITask.prototype.deviceFactory;
    /**
     * @type {?}
     * @private
     */
    RegisterAPITask.prototype.translateService;
    /**
     * @type {?}
     * @private
     */
    RegisterAPITask.prototype.deviceService;
    /**
     * @type {?}
     * @private
     */
    RegisterAPITask.prototype.APP_CONFIG;
}
//# sourceMappingURL=data:application/json;base64,