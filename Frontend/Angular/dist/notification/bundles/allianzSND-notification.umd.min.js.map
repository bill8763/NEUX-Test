{"version":3,"sources":["ng://@allianzSND/notification/lib/components/notification/notification.component.ts","ng://@allianzSND/notification/lib/components/notification-ui/notification-ui.component.ts","ng://@allianzSND/notification/lib/notification.module.ts","ng://@allianzSND/notification/lib/service/NotificationUtils.ts"],"names":["NotificationComponent","notificationMgr","changeDetector","this","notificationList","prototype","ngOnInit","_this","console","log","getNotificationList","subscribe","notifications","detectChanges","dissmiss","notification","popNotification","Component","args","selector","template","NotificationMgr","ChangeDetectorRef","NotificationUiComponent","injector","translateService","isCheck","translateMap","Map","NotificationType","_notification","onConfirm","EventEmitter","onCancel","type","data","language","Language","Object","defineProperty","value","_doTranslate","_translateWithVariable","set","translate","onCancelHandler","action","emit","onConfirmHandler","Need_To_Goal_Setting_Body","Pending_Review_Body","Goal_Period_Is_Begin_Title","Goal_Period_Is_Begin_Body","Need_To_Goal_Setting_Remaining","Logout_Message","days","years","appointments","minutes","year","length","mappingID","translateWithVariable","_translateVariable","Injector","TranslateService","Input","Output","NotificationModule","NgModule","imports","CoreModule","CommonModule","UIModule","declarations","exports","NotificationUtils","deviceService","checkNetworkBeforeAction","isOnline","getNetworkState","pushNotification","OnlineCheck","Injectable","providedIn","DeviceService"],"mappings":"6dAAA,IAAAA,EAAA,WAUE,SAAAA,EACUC,EACAC,GADAC,KAAAF,gBAAAA,EACAE,KAAAD,eAAAA,EAGVC,KAAAC,iBAAmB,GAgBrB,OAdEJ,EAAAK,UAAAC,SAAA,WAAA,IAAAC,EAAAJ,KACEK,QAAQC,IAAI,gCACZN,KAAKF,gBAAgBS,sBAAsBC,UAAS,SAAEC,GACpDL,EAAKH,iBAAmBQ,EACxBJ,QAAQC,IAAI,uBAAwBG,GACpCL,EAAKL,eAAeW,mBAKxBb,EAAAK,UAAAS,SAAA,SAASC,GACPZ,KAAKF,gBAAgBe,gBAAgBD,wBAzBxCE,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,mBACVC,SAAA,uiWAJOC,EAAAA,uBADqCC,EAAAA,qBA+B9CtB,EA/BA,GCAAuB,EAAA,WAqBE,SAAAA,EACUC,EACAC,GADAtB,KAAAqB,SAAAA,EACArB,KAAAsB,iBAAAA,EAGDtB,KAAAuB,SAAU,EAEZvB,KAAAwB,aAAoC,IAAIC,IACxCzB,KAAA0B,iBAAmBA,EAAAA,iBAElB1B,KAAA2B,cAAoC,KAelC3B,KAAA4B,UAAY,IAAIC,EAAAA,aAChB7B,KAAA8B,SAAW,IAAID,EAAAA,aAElB7B,KAAA+B,KAAO,KAEP/B,KAAAgC,KAAO,KACPhC,KAAAiC,SAAW,IAAIC,EAAAA,SAgFxB,OApGEC,OAAAC,eACWhB,EAAAlB,UAAA,eAAY,KADvB,WAEE,OAAOF,KAAK2B,mBAEd,SAAwBU,GACtBhC,QAAQC,IAAI,oBAAqB+B,GAC7BA,IACFrC,KAAK2B,cAAgBU,EACrBrC,KAAK+B,KAAO/B,KAAK2B,cAAcI,KAC/B/B,KAAKgC,KAAOK,EAAML,KAClBhC,KAAKsC,iDAkBTH,OAAAC,eAAWhB,EAAAlB,UAAA,yBAAsB,KAAjC,WACE,OAAOF,KAAKuC,uBACV,2DAKJnB,EAAAlB,UAAAC,SAAA,WACEH,KAAKwB,aAAagB,IAAI,YAAaxC,KAAKsB,iBAAiBmB,UAAU,cACnEzC,KAAKwB,aAAagB,IAAI,UAAWxC,KAAKsB,iBAAiBmB,UAAU,aAGnErB,EAAAlB,UAAAwC,gBAAA,WACM1C,KAAKY,aAAa+B,OACH3C,KAAKY,aAAa+B,OAAOb,SAAS9B,KAAKgC,OAEtDhC,KAAK8B,SAASc,OAIhB5C,KAAK8B,SAASc,QAElBxB,EAAAlB,UAAA2C,iBAAA,WACM7C,KAAKY,aAAa+B,OACH3C,KAAKY,aAAa+B,OAAOf,UAAU5B,KAAKgC,OAEvDhC,KAAK4B,UAAUgB,OAGjB5C,KAAK4B,UAAUgB,QAIXxB,EAAAlB,UAAAoC,aAAR,WACEtC,KAAK8C,0BAA4B9C,KAAKuC,uBACpC,6BAEFvC,KAAK+C,oBAAsB/C,KAAKuC,uBAC9B,uBAEFvC,KAAKgD,2BAA6BhD,KAAKuC,uBACrC,8BAEFvC,KAAKiD,0BAA4BjD,KAAKuC,uBACpC,6BAEFvC,KAAKkD,+BAAiClD,KAAKuC,uBACzC,kCAEFvC,KAAKmD,eAAiBnD,KAAKuC,uBAAuB,mBAGpDJ,OAAAC,eAAYhB,EAAAlB,UAAA,qBAAkB,KAA9B,eACMkD,EAAOpD,KAAKgC,KAAOhC,KAAKgC,KAAW,KAAI,KACvCqB,EAAQrD,KAAKgC,KAAOhC,KAAKgC,KAAW,KAAI,KACxCsB,EAAetD,KAAKgC,KAAOhC,KAAKgC,KAAgB,UAAI,KACpDuB,EAAUvD,KAAKgC,KAAOhC,KAAKgC,KAAc,QAAI,KAEjD,MAAO,CACLoB,KAAMA,GAAc,GACpBI,KAAMH,GAAgB,GACtBC,aAAcA,EAAeA,EAAaG,OAAS,GACnDF,QAASA,GAAoB,qCAIzBnC,EAAAlB,UAAAqC,uBAAR,SAA+BmB,GAC7B,OAAO1D,KAAKsB,iBAAiBqC,sBAC3BD,EACA1D,KAAK4D,yCAlHV9C,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,sBACVC,SAAA,mpnCAXA4C,EAAAA,gBAKAC,EAAAA,qDAeCC,EAAAA,4BAMAA,EAAAA,yBAcAC,EAAAA,yBACAA,EAAAA,UAqFH5C,EApIA,GCAA6C,EAAA,WAOA,SAAAA,KASkC,2BATjCC,EAAAA,SAAQnD,KAAA,CAAC,CACRoD,QAAS,CACPC,EAAAA,WACAC,EAAAA,aACAC,EAAAA,UAEFC,aAAc,CAAC1E,EAAuBuB,GACtCoD,QAAS,CAAC3E,OAEsBoE,EAhBlC,GCAAQ,EAAA,WASI,SAAAA,EACYC,EACA5E,GADAE,KAAA0E,cAAAA,EACA1E,KAAAF,gBAAAA,SAIL2E,EAAAvE,UAAAyE,yBAAP,eACQC,EAAW5E,KAAK0E,cAAcG,kBAKlC,OAJKD,GACD5E,KAAKF,gBAAgBgF,iBAAiBpD,EAAAA,iBAAiBqD,YAAa,IAGjEH,uBAlBdI,EAAAA,WAAUjE,KAAA,CAAC,CACRkE,WAAY,oDAHPC,EAAAA,qBAAmChE,EAAAA,+KAD5C","sourcesContent":["import { Component, OnInit, Optional, Inject, ChangeDetectorRef } from '@angular/core';\nimport { NotificationMgr, NotificationObject } from '@allianzSND/core';\n\n@Component({\n  selector: 'snd-notification',\n  templateUrl: './notification.component.html',\n  styleUrls: ['./notification.component.scss']\n})\nexport class NotificationComponent implements OnInit {\n\n  constructor(\n    private notificationMgr: NotificationMgr,\n    private changeDetector: ChangeDetectorRef\n  ) { }\n\n  notificationList = [];\n\n  ngOnInit() {\n    console.log(\"NotificationComponent OnInit\");\n    this.notificationMgr.getNotificationList().subscribe((notifications) => {\n      this.notificationList = notifications;\n      console.log(\"getNotificationList:\", notifications);\n      this.changeDetector.detectChanges();\n    })\n\n  }\n\n  dissmiss(notification: NotificationObject) {\n    this.notificationMgr.popNotification(notification);\n  }\n\n}\n","import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n  Injector\n} from \"@angular/core\";\nimport {\n  NotificationObject,\n  Language,\n  TranslateService,\n  NotificationType\n} from \"@allianzSND/core\";\n\n@Component({\n  selector: \"snd-notification-ui\",\n  templateUrl: \"./notification-ui.component.html\",\n  styleUrls: [\"./notification-ui.component.scss\"]\n})\nexport class NotificationUiComponent implements OnInit {\n  constructor(\n    private injector: Injector,\n    private translateService: TranslateService\n  ) { }\n\n  @Input() isCheck = true;\n\n  public translateMap: Map<string, string> = new Map();\n  public NotificationType = NotificationType;\n\n  private _notification: NotificationObject = null;\n  @Input()\n  public get notification(): NotificationObject {\n    return this._notification;\n  }\n  public set notification(value: NotificationObject) {\n    console.log(\"set notification:\", value);\n    if (value) {\n      this._notification = value;\n      this.type = this._notification.type;\n      this.data = value.data;\n      this._doTranslate();\n    }\n  }\n\n  @Output() onConfirm = new EventEmitter();\n  @Output() onCancel = new EventEmitter();\n\n  public type = null;\n  //@Input() type = null; // tmp for ui\n  public data = null;\n  public language = new Language();\n\n  public Need_To_Goal_Setting_Body: string;\n  public Need_To_Goal_Setting_Remaining: string;\n  public Pending_Review_Body: string;\n  public Goal_Period_Is_Begin_Title: string;\n  public Goal_Period_Is_Begin_Body: string;\n  public Logout_Message: string;\n  public get You_Have_N_Appointment(): string {\n    return this._translateWithVariable(\n      \"You_Have_N_Appointment\"\n    );\n  }\n\n\n  ngOnInit() {\n    this.translateMap.set(\"Cross_Day\", this.translateService.translate(\"Cross_Day\"));\n    this.translateMap.set(\"All_Day\", this.translateService.translate(\"All_Day\"));\n  }\n\n  onCancelHandler() {\n    if (this.notification.action) {\n      let actionResp = this.notification.action.onCancel(this.data);\n      if (actionResp)\n        this.onCancel.emit();\n\n    }\n    else\n      this.onCancel.emit();\n  }\n  onConfirmHandler() {\n    if (this.notification.action) {\n      let actionResp = this.notification.action.onConfirm(this.data);\n      if (actionResp)\n        this.onConfirm.emit();\n    }\n    else\n      this.onConfirm.emit();\n  }\n\n\n  private _doTranslate() {\n    this.Need_To_Goal_Setting_Body = this._translateWithVariable(\n      \"Need_To_Goal_Setting_Body\"\n    );\n    this.Pending_Review_Body = this._translateWithVariable(\n      \"Pending_Review_Body\"\n    );\n    this.Goal_Period_Is_Begin_Title = this._translateWithVariable(\n      \"Goal_Period_Is_Begin_Title\"\n    );\n    this.Goal_Period_Is_Begin_Body = this._translateWithVariable(\n      \"Goal_Period_Is_Begin_Body\"\n    );\n    this.Need_To_Goal_Setting_Remaining = this._translateWithVariable(\n      \"Need_To_Goal_Setting_Remaining\"\n    );\n    this.Logout_Message = this._translateWithVariable(\"Logout_Message\");\n  }\n\n  private get _translateVariable() {\n    let days = this.data ? this.data[\"days\"] : null;\n    let years = this.data ? this.data[\"year\"] : null;\n    let appointments = this.data ? this.data[\"calendars\"] : null;\n    let minutes = this.data ? this.data[\"minutes\"] : null;\n\n    return {\n      days: days ? days : \"\", //Need_To_Goal_Setting_Body, Pending_Review_Body\n      year: years ? years : \"\", //Goal_Period_Is_Begin_Title, Goal_Period_Is_Begin_Body\n      appointments: appointments ? appointments.length : \"\", //You_Have_N_Appointment\n      minutes: minutes ? minutes : \"\" //Logout_Message\n    };\n  }\n\n  private _translateWithVariable(mappingID: string) {\n    return this.translateService.translateWithVariable(\n      mappingID,\n      this._translateVariable\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NotificationComponent } from './components/notification/notification.component';\nimport { NotificationUiComponent } from './components/notification-ui/notification-ui.component';\nimport { UIModule } from '@allianzSND/ui';\nimport { CommonModule } from '@angular/common';\nimport { CoreModule } from '@allianzSND/core';\n\n@NgModule({\n  imports: [\n    CoreModule,\n    CommonModule,\n    UIModule\n  ],\n  declarations: [NotificationComponent, NotificationUiComponent],\n  exports: [NotificationComponent]\n})\nexport class NotificationModule { }\n","import { Injectable } from \"@angular/core\";\nimport { DeviceService, NotificationObject, NotificationMgr, NotificationType } from \"@allianzSND/core\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NotificationUtils {\n\n\n    constructor(\n        private deviceService: DeviceService,\n        private notificationMgr: NotificationMgr\n    ) {\n    }\n\n    public checkNetworkBeforeAction() {\n        let isOnline = this.deviceService.getNetworkState();\n        if (!isOnline) {\n            this.notificationMgr.pushNotification(NotificationType.OnlineCheck, {});\n        }\n\n        return isOnline;\n\n    }\n\n\n}"]}