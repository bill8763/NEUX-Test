{"version":3,"sources":["ng://@allianzSND/goal/lib/injectionToken/injection-token.ts","ng://@allianzSND/goal/lib/goal.module.ts","ng://@allianzSND/goal/lib/api/GoalSettingGetGoalSettingAPI.ts","ng://@allianzSND/goal/lib/api/GoalSettingGetYearConfigAPI.ts","ng://@allianzSND/goal/lib/api/AgencyPlanGetMainAPI.ts","ng://@allianzSND/goal/lib/api/AgencyPlanGetDetailAPI.ts","ng://@allianzSND/goal/lib/api/GoalSettingGetExpectedAPI.ts","ng://@allianzSND/goal/lib/api/GoalSettingGetValue.ts","node_modules/tslib/tslib.es6.js","ng://@allianzSND/goal/lib/api/GoalSettingSetExpectedAPI.ts","ng://@allianzSND/goal/lib/api/GoalSettingGetPlanAPI.ts","ng://@allianzSND/goal/lib/api/GoalSettingGetActualAPI.ts","ng://@allianzSND/goal/lib/service/model/GoalSettingCommon.ts","ng://@allianzSND/goal/lib/service/model/GoalSettingStep1.ts","ng://@allianzSND/goal/lib/service/model/GoalSettingStep2.ts","ng://@allianzSND/goal/lib/service/model/GoalSettingStep3.ts","ng://@allianzSND/goal/lib/service/model/GoalSettingStep4.ts","ng://@allianzSND/goal/lib/service/model/GoalSettingStep5.ts","ng://@allianzSND/goal/lib/service/model/GoalSettingYearConfig.ts","ng://@allianzSND/goal/lib/service/model/ActivityValue.ts","ng://@allianzSND/goal/lib/service/model/GoalSettingGoalStatus.ts","ng://@allianzSND/goal/lib/service/model/GoalSettingStepData.ts","ng://@allianzSND/goal/lib/service/model/IsApproveInfo.ts","ng://@allianzSND/goal/lib/service/model/MonthlyPlanFYFCData.ts","ng://@allianzSND/goal/lib/service/model/AgencyPlanAgentInfo.ts","ng://@allianzSND/goal/lib/service/model/AgencyPlanDetail.ts","ng://@allianzSND/goal/lib/service/model/AgencyPlanGoalExpected.ts","ng://@allianzSND/goal/lib/service/model/GoalSettingPlanPopup.ts","ng://@allianzSND/goal/lib/service/model/AgencyPlanDirectUnitDetail.ts","ng://@allianzSND/goal/lib/service/model/AgencyPlanMainData.ts","ng://@allianzSND/goal/lib/service/model/AgencyPlanDataForOverview.ts","ng://@allianzSND/goal/lib/service/model/SettingChangeEvent.ts","ng://@allianzSND/goal/lib/service/model/GoalSettingTranslate.ts","ng://@allianzSND/goal/lib/service/model/CombineStep5AndAgecyPlanData.ts","ng://@allianzSND/goal/lib/service/model/GoalSettingStep3ForTabChange.ts","ng://@allianzSND/goal/lib/service/model/VaildError.ts","ng://@allianzSND/goal/lib/service/model/ApproveInfo.ts","ng://@allianzSND/goal/lib/service/model/GoalSettingStepDataParams.ts","ng://@allianzSND/goal/lib/service/model/AgencyPlanStatus.ts","ng://@allianzSND/goal/lib/service/model/AgencyPlanMainInfo.ts","ng://@allianzSND/goal/lib/service/goal-store.service.ts","ng://@allianzSND/goal/lib/service/goal-setting.service.ts","ng://@allianzSND/goal/lib/service/goal-valid.service.ts","ng://@allianzSND/goal/lib/service/agencyPlanStore-service.ts","ng://@allianzSND/goal/lib/components/goal-ui-title-list/goa-ui-title-list-item.ts","ng://@allianzSND/goal/lib/utils/goal-setting-util.service.ts"],"names":["goalSettingStepToken","InjectionToken","goalValidToken","goalSettingShowRuleToken","GoalSubmitExtensionToken","GoalModule","NgModule","args","imports","CommonModule","CoreModule","UIModule","declarations","exports","GoalSettingGetGoalSettingAPI","daoFactory","this","_dataYear","prototype","setDataYear","dataYear","getAPIName","getMockPath","console","warn","executeSQL","_this","log","Observable","create","observer","dao","getDefaultDao","undefined","goalSettingObj","getDefaultTable","addRestriction","EqualRestriction","ClientCustomDao","queryByTable","subscribe","resp","JSON","stringify","next","complete","GoalSettingGetYearConfigAPI","yearConfigObj","OrderByRestriction","column","order","AgencyPlanGetMainAPI","agencyMainObj","AgencyPlanGetDetailAPI","agencyDetailObj","GoalSettingGetExpectedAPI","goalExpectedObj","GoalSettingGetValueAPI","goalSettingValue","__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","push","__read","o","m","ar","error","GoalSettingSetExpectedAPI","_expectedRecruitment","_indirectRecruitment","setExpectedRecruitment","expectedRecruitment","setIndirectRecruitment","indirectRecruitment","goalExpectedExtObj","setValue","toPromise","goalExpectedResp","_a","Body","transactionUpdate","clientID","uuid","transactionInsert","runTransaction","GoalSettingGetPlanAPI","year","GoalSettingGetActualAPI","DAILY","WEEKLY","MONTHLY","STEP1","STEP2","STEP3","STEP4","STEP5","SET_NEXT_YESR","ADGUST_GOAL","ValidationState","_step","_isDataLegal","isDataLegal","tslib_1.__decorate","Required","Bean","PlanFYFCPopupInfo","state","data","_state","_data","GoalSettingStep1","_FYFC","_AnnualConvention","_MDRT","_PromotionPlan","_Actual","_FYFCNowToYearEnd","_ActivityFYFC","_ActivityDays","GoalSettingStep2","_PerCase","GoalSettingStep3","_ActivityValues","_Activity","Array","GoalSettingStep4","_MonthList","_Forecast","_Shortfall","clone","cloneGoalSettingStep4","GoalSettingStep4_1","Forecast","Shortfall","MonthList","map","x","Actual","GoalSettingStep5","_TeamFYFC","_TeamANP","_Manpower","_Recruitment","_TeamFYFCActual","_TeamANPActual","_TeamFYFCNowToYearEnd","_TeamANPNowToYearEnd","GoalSettingYearConfig","getExtension","_Extension","setExtension","extension","_IsCurrent","_DataYear","_QuarterStartMonth","_QuarterEndMonth","_GoalSettingActivityProcMode","_GoalAndPlanDifferenceLimit","_PerformanceSettlementMonth","_WorkingMonth","_WorkingQuarter","_MonthQuantityOfYear","_FyfcCovertAnpRate","_InforceConvertSubmitRate","_InforceConvertMeetRate","_InforceConvertScheduleRate","_InforceConvertFindRate","_NowToYearEndDays","ActivityValue","TimeBase","Find","Schedule","Meet","Submit","Inforce","_TimeBase","_Schedule","_Find","_Meet","_Submit","_Inforce","GoalSettingGoalStatus","_PersonnelGoalApplicableYM","_TeamGoalApplicableYM","_GoalSetMonth","_ApproveStatus","_IsFirstTime","_IsNeedSetting","_RemainingDays","_SupervisorComment","GoalSettingStepData","DataYear","_ActualList","_YearConfig","_GoalStatus","_Step1","_Step2","_Step3","_Step4","_Step5","_AgencyPlan","IsApproveInfo","IsNeedApprove","IsPopup","_IsNeedApprove","_IsPopup","_PopupType","MonthlyPlanFYFCData","Month","Plan","_Month","_Plan","MonthlyPlanFYFCData_1","AgencyPlanAgentInfo","AgentID","AgentName","AppUseMode","_AgentID","_AgentName","_AppUseMode","AgencyPlanDetail","_JobGrade","_CaseCount","_ClientID","_DataType","_DirectUnitType","_Drilldown","_Goal","_IsApprove","_MonthPlan","_Orders","_IsHasDot","_TextColor","AgencyPlanGoalExpected","_ANP","_Q1","_Q2","_Q3","_Q4","_RecruitmentTotal","_FYFCConvertANPRate","cloneAgencyPlanGoalExpected","AgencyPlanGoalExpected_1","WorkingQuarter","ANP","FYFC","Q1","Q2","Q3","Q4","RecruitmentTotal","FYFCConvertANPRate","GoalSettingPlanPopup","FYFCgoal","actual","performanceMonthStart","performanceMonthEnd","monthPlanList","_eachMonthPlan","_FYFCGoal","_actual","_performanceMonthStart","_performanceMonthEnd","_monthPlanList","_approveThreshold","approveThreshold","eachMonthPlan","GoalSettingPlanPopup_1","AgencyPlanDirectUnitDetail","AgencyPlanMainData","AgencyPlanDataForOverview","_FYFCForecast","_ANPForecast","_ManpowerPlan","_RecruitmentPlan","_CompletionRate","CompletionRate","SettingChangeEvent","_column","_value","GoalSettingTranslate","_TeamGoalEffectiveMonthTitle","_PersonalGoalEffectiveMonthTitle","_NowToYearEndTitle","_FYFCNowToYearEndTitle","_ANPNowToYearEndTitle","_PersonalFYFCActualVariableTitle","_TeamFYFCActualVariableTitle","_TeamANPActualVariableTitle","_FYFCActualDashTitle","CombineStep5AndAgecyPlanData","Step5ItemList","AgencyPlanItemList","ItemTextIsRedList","_Step5ItemList","_AgencyPlanItemList","_ItemTextIsRedList","GoalSettingStep3ForTabChange","Unit","_ActivityValue","_Unit","String","ValidError","Step","ColId","Msg","_Step","_ColId","_Msg","ApproveInfo","IsApprove","Comment","_Comment","GoalSettingStepDataParams","isAdjust","_isAdjust","DISPLAY","ACCEPT","REJECT","FIRST","AgencyPlanStatus","agentID","_agentID","AgencyPlanMainInfo","_AgencyMainDataList","GoalStoreService","loginMgr","syncGoalDatas","settingYear","isPromo","canSkip","planFYFCPopupInfo","PLAN_FYFC_POPUP_STATE","CLOSE","landingStatus","GOAL_LANDING_STATUS","FIRST_INIT","yearSubject","BehaviorSubject","statusSubject","isPromoSubject","canSkipSubject","planFYFCPopupInfoSubject","syncGoalDatasSubject","goalPopupResponseSubject","Subject","subscribeLogout","setSyncGoalDatas","setGoalLandingStatus","setSettingYear","setIsPromo","setCanSkip","setPlanFYFCPopupInfo","getSyncGoalDatas","asObservable","status","getGoalLandingStatus","getSettingYear","getIsPromo","val","getCanSkip","setPopupResp","getPopupResp","info","Step4","getPlanFYFCPopupInfo","Injectable","providedIn","DefaultLoginMgr","GoalPopupResponse","SETTING_SUBMITTED","FIRST_SET","ADJUST_GOAL","NEEDAPPROVESUBMIT","NOTNEEDAPPROVESUBMIT","SYNC","FINISH","GoalSettingService","dispatcher","APIFactory","goalStore","errorHandler","goalSettingStep","yearConfigExtension","goalSettingExtension","dataSyncService","profileCodeService","TextConvertStep1Map","Map","TextConvertStep2Map","TextConvertStep5Map","StepTextConvertMap","ColMapToProfile","ColMapToProfileCodeMap","DASH","_isPopup","set","forEach","code","col","getCodeArray","getGoalSettingStep1_5Data","from","_getGoalSettingStep1_5Data","returnData","actualResp","goalSettingValueResp","goalSettingResp","yearConfigResp","yearConfig","getAPI","goalSetting","all","dispatch","_b","Header","yearConfigMap","yearJsonToMap","goalSettingMap","yearConfigObj_1","get","goalSettingValueObj_1","DataType","Value","allYearActual_1","teamANPActual","teamFYFCActual_1","monthOfYear","MonthQuantityOfYear","actuallist_1","fill","actualBody","FYFCActuals","filter","PerformanceType","PERFORMANCETYPE","PERSONAL","PerformanceSettlementMonth","TeamFYFCActuals","TEAM","numberToFix","FyfcCovertAnpRate","YearConfig","GoalStatus","Step1","Step2","Step3","Step5","IsCurrent","QuarterStartMonth","QuarterEndMonth","GoalSettingActivityProcMode","GoalAndPlanDifferenceLimit","InforceConvertSubmitRate","InforceConvertMeetRate","InforceConvertScheduleRate","InforceConvertFindRate","NowToYearEndDays","WorkingMonth","yearConfigExtData","getExtensionData","source","PersonnelGoalApplicableYM","TeamGoalApplicableYM","GoalSetMonth","ApproveStatus","IsFirstTime","IsNeedSetting","SupervisorComment","goalSettingExtData","PERSON_FYFC","AnnualConvention","ANNUAL_CONVENTION","MDRT","PromotionPlan","PROMOTION_PLAN","changeToDash","FYFCNowToYearEnd","calculateNowToYearEndGoal","ActivityFYFC","ACTIVITY_FYFC","ActivityDays","ACTIVITY_DAYS","PerCase","PER_CASE_FYFC","calculateActivityData","_getMonthActualPlanBySQL","calculateShortfall","calculateMonthActualPlan","TeamFYFC","TEAM_FYFC","TeamANP","TEAM_ANP","Manpower","TEAM_MANPOWER","Recruitment","TEAM_RECRUITMENT","TeamFYFCActual","TeamANPActual","TeamFYFCNowToYearEnd","TeamANPNowToYearEnd","calculateANPFromFYFC","ActualList","handleError","APPError","error_1","message","goal","perCase","activityDays","returnObj","activityValues","numGoal","Number","numPerCase","NumberUtils","isNumber","days","StringUtils","isEmpty","daysInMonth","dayInforce","weekInforce","monthInforce","tabs","name","TIMEBASE","DAY","inforce","WEEK","MONTH","calculateOtherRuleActivityInforce","activity","Activity","ActivityValues","tabNum","time","actualList","Step4Datas","MonthActualPlanList","forecast","calculateForecast","shortfall","calulateSumByArray","calculateActual","reduce","pre","cur","toString","getActualPlanFromMonthList","monthList","isDash","returnNum","getShortfall","tempresult","isNeedApprove","SubmitType","adjustDatas","_isNeedApprove","originDatas","isApproveInfo","error_2","isNeedApprove_plan","of","submitGoal","submitType","submitData","_submitGoal","GoalSettingValue","GoalPlan","SubmitGoalPlan","SubmitInfo","SubmitGoalInfo","returnResp","SuccessStatus","SUBMITGOALTYPE","ALL","SubmitGoalSettingValue","Values","SubmitGoalPlanInfo","ActivityGoalBase","YESNO","YES","NO","Extensions","SubmitDatas","SubmitGoalData","_pushGoalSetting","isSuccess","error_3","getIsFirstUse","DeviceInfo","setDataType","Datas","CategoryVal","getSettingStatus","_getSettingStatus","returnDatas","GoalSettingResp","yearConfigMap_1","goalStatus","RemainingDays","Remainingdays","error_4","yearJson","getOverviewData","performanceType","_getOverviewDataBySQL","_getOverviewDataByRestful","goalStepDatas","actualPlanData","agencyPlanObj","activityGoal","getAgencyPlanMainData","agencyPlanMainInfo","AgencyMainDataList","agencyPlanMainList","FYFCForecast","ANPForecast","ManpowerPlan","MonthPlan","RecruitmentPlan","AgencyPlan","_converSelectCode","changeEmptyToDash","error_5","goalSettingValueObj","getGoalapi","setAgentID","getYearConfigapi","GetGoalResp","GetYearConfigResp","GoalMap","Goals","YearConfigMap","Configurations","GoalObj","GoalSetting","GoalValues","GoalValue","monthQuantityOfYear","_getMonthActualPlanByRestful","allYearActual","Status","getAgencyPlanMainDataByRestful","mainDataList","error_6","parse","getMonthActualPlan","getActualapi","GoalResp","ActualResp","GoalPlanMap_1","ActuallMap_1","thisActual","Goal","plan","error_7","goalPlanResp","goalPlanList_1","actualList_1","goalPlan","msg","error_8","getAgencyPlanMainDataBySQL","getOtherParameterAPI","agencyPlanGetMainAPI","SetYear","api","otherParaResp","agencyPlanResp","respFilterCompletionRate","MappingID","completionRate","SetValue","returnList","AgencyPlanMainList","main","_agencyPlanMainDataObjToBean","error_9","object","agencyPlanMainData","MainList","getAgencyPlanAPI_1","AgencyPlans","agencyPlanMap","tempAgencyPlanList","error_10","getAgencyPlanDetailData","agencyPlanGetDetailAPI","item","_agencyPlanDetailObjToBean","agencyPlanDetail","JobGrade","CaseCount","ClientID","DirectUnitType","Drilldown","TextColor","IsHasDot","Orders","getGoalExpected","goalSettingYearConfigAPI","goalSettingGetExpectedAPI","expectedRespBody","yearConfigRespBody","returnAgencyPlanGoalExpected","_agencyPlanGoalExpectedObjToBean","error_11","goalExpected","numberRecruitmentTotal","calculaRecruitmentSum","total","each","saveGoalExpected","goalSettingSetExpectedAPI","toFix","fix10","Math","pow","round","strip","num","precision","toPrecision","caculeteActual","calculateAllYearGoal","NowToYearEnd","isPopup","list","actualMonth","index","rate","calculateFYFCFromANP","SYNC_STATUS","syncFunc","syncAgencyPlan","syncYearConfig","pushApproveGoal","approveInfo","_pushApproveGoal","param","approveInfoData","isApprove","comment","mainData","pushApproveData","getResp","success","error_12","submitDatas","pushGoalSettingData","error_13","StepData","profileCodes","colVal_1","getCode","getMappingID","APIDispatch","ErrorHandler","Optional","type","Inject","yearConfigExtensionDataToken","goalSettingExtensionDataToken","DataSyncService","ProfileCodeService","Valid","GoalValidService","goalSettingService","goalValid","numberValid","requiredValid","getNumberArray","getRequiredArray","onChangeValid","colId","validDatas","errorResult","isPageValid","isDecimalResult","PlanEmpty","indexOf","RequiredEmpty","numberPositive","isPositive","vaildEmptyResult","requiredErrorMsg","_setError","isDecimal","_validShortfall","FYFCSmallValid","FYFCNowToYearEndIsPositive","TeamFYFCSmallValid","TeamFYFCNowToYearEndIsPositive","unitPageValid","pageValid","stepNum","stepColMap","step1Cols","step5Cols","performanceSettlementMonth_1","obj","errorType","validresult","errorMsg","setp4Obj","validateGoal_Forecast","AgencyPlanStoreService","_agencyState","AGENCY_STATE","_stateBehaviorSubject","_detailBehaviorSubject","_agencyDetail","setState","getState","setCurrentAgencyDetail","agentInfo","getCurrentAgencyDetail","GoalTitleListItem","title","getTitle","setTitle","getDesc","setDesc","GoalSettingUtilService","translateService","getStep3TabOptionList","daily","DWM_DATETYPE","weekly","monthly","tabOptionList","transformTeamStep5Data","step5Data","agencyPlanData","step5ItemList","translate","agencyPlanItemList","itemTextIsRedList","isNaN","getTabChangeStep3","currentType","goalSettingStep3","activityValue","unit","translateByStepData","stepData","translateByYearConfigAndGoaslStatus","variable","_getTranslateVariable","translateOnject","TeamGoalEffectiveMonthTitle","translateWithVariable","effectiveMonthWithUnit","PersonalGoalEffectiveMonthTitle","NowToYearEndTitle","FYFCNowToYearEndTitle","ANPNowToYearEndTitle","_isHasEffectiveMonthAndSettlementMonth","effectiveMonth","settlementMonth","PersonalFYFCActualVariableTitle","TeamFYFCActualVariableTitle","TeamANPActualVariableTitle","workingMonth","theLastMonth","_isNotEmpty","isNotEmpty","_isNumber","_isGreaterThanZero","TranslateService","AGENT","AGENTLEADER","ZONEHEAD","CAO","PENDING","WAINTING","NONE","APPROVE","SQLITE","RESTFUL","MOCK"],"mappings":"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","sourcesContent":["import { InjectionToken } from \"@angular/core\";\nimport { goalSettingStep } from \"../interface/goalSettingStep\";\nimport { goalSettingShowRule } from '../interface/goalSettingShowRule';\nimport { GoalSubmitExtension } from '../interface/GoalSubmitExtension';\nimport { GoalValidExtension } from \"../interface/goalValidExtension\";\n\nexport const goalSettingStepToken = new InjectionToken<goalSettingStep>('goalSettingStep');\nexport const goalValidToken = new InjectionToken<GoalValidExtension>('GoalValidExtension');\nexport const goalSettingShowRuleToken = new InjectionToken<goalSettingShowRule>('goalSettingShowRule');\nexport const GoalSubmitExtensionToken = new InjectionToken<GoalSubmitExtension>(\"GoalSubmitExtension\");\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CoreModule } from '@allianzSND/core';\nimport { UIModule } from '@allianzSND/ui';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CoreModule,\n    UIModule\n  ],\n  declarations: [\n  ],\n  exports: [\n  ]\n})\nexport class GoalModule { }\n","import { IAPI, IMockAPI, DaoFactory, SQLiteTable, ISQLiteAPI, EqualRestriction, StringUtils, ClientCustomDao, PageInfo, LimitRestriction, OffsetRestriction } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\n\nexport class GoalSettingGetGoalSettingAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n\n    private _dataYear: number = -1\n    setDataYear(dataYear: number) {\n        this._dataYear = dataYear;\n    }\n\n    getAPIName(): string {\n        return 'getGoalSettingGoalSetting';\n    }\n\n    getMockPath(): string {\n      \n        if(this._dataYear == 2019) {\n            return './assets/mock/getGoalSettingGoalSetting_2019.json';\n        }\n\n        else if(this._dataYear == 2020) {\n            return './assets/mock/getGoalSettingGoalSetting_2020.json';\n        }\n\n        else if(this._dataYear == -1) {\n            return './assets/mock/getGoalSettingGoalSetting_all.json';\n        }\n\n        else {\n            //todo throw error\n            console.warn(\"yearStatus dataYear not match\");\n            return ''\n        }\n    }\n\n    executeSQL(): Observable<any> {\n        console.log(\"queryByTable: getGoalSettingGoalSetting this._dataYear:\", this._dataYear);\n        return Observable.create((observer) => {\n            let dao = this.daoFactory.getDefaultDao();\n            if (dao != undefined) {\n\n\n                let goalSettingObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_VW_Goal_Setting\");\n                if (goalSettingObj) {\n\n                    if(this._dataYear != -1) {\n                        goalSettingObj.addRestriction(new EqualRestriction('DataYear',[this._dataYear]));\n                    }\n\n                    dao = new ClientCustomDao(dao);\n\n\n                    dao.queryByTable(goalSettingObj).subscribe((resp) => {\n                        console.log(\"queryByTable overviewYearStatus: \", JSON.stringify(resp));\n                        observer.next(resp);\n                        observer.complete();\n                    });\n                }\n                else {\n                    observer.next(false);\n                    observer.complete();\n                }\n\n            }\n            else {\n                observer.next(false);\n                observer.complete();\n            }\n        });\n    }\n}\n","import { IAPI, IMockAPI, DaoFactory, SQLiteTable, ISQLiteAPI, EqualRestriction, StringUtils, ClientCustomDao, PageInfo, LimitRestriction, OffsetRestriction, OrderByRestriction } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\n\nexport class GoalSettingGetYearConfigAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n\n    private _dataYear: number = -1\n    setDataYear(dataYear: number) {\n        this._dataYear = dataYear;\n    }\n\n    getAPIName(): string {\n        return 'getGoalSettingYearConfig';\n    }\n\n    getMockPath(): string {\n        if(this._dataYear == 2019) {\n            return './assets/mock/getGoalSettingYearConfig_2019.json';\n        }\n\n        else if(this._dataYear == 2020) {\n            return './assets/mock/getGoalSettingYearConfig_2020.json';\n        }\n\n        else if(this._dataYear == -1) {\n            return './assets/mock/getGoalSettingYearConfig_all.json';\n        }\n\n        else {\n            console.warn(\"yearConfig dataYear not match\");\n            return ''\n        }\n    }\n\n    executeSQL(): Observable<any> {\n        return Observable.create((observer) => {\n            let dao = this.daoFactory.getDefaultDao();\n            if (dao != undefined) {\n\n                let yearConfigObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_VW_Year_Config\");\n                if (yearConfigObj) {\n\n                    if(this._dataYear != -1) {\n                        yearConfigObj.addRestriction(new EqualRestriction('DataYear',[this._dataYear]));\n                    }\n\n                    yearConfigObj.addRestriction(new OrderByRestriction([{ column: 'DataYear', order: 'ASC' }]));\n\n                    dao = new ClientCustomDao(dao);           \n                    \n                    \n                    dao.queryByTable(yearConfigObj).subscribe((resp) => {\n                        console.warn(\"queryByTable yearConfig: \", JSON.stringify(resp));\n                        observer.next(resp);\n                        observer.complete();\n                    });\n                }\n                else {\n                    observer.next(false);\n                    observer.complete();\n                }\n\n            }\n            else {\n                observer.next(false);\n                observer.complete();\n            }\n        });\n    }\n}\n","import { IMockAPI, IAPI, ISQLiteAPI, DaoFactory, ClientCustomDao, EqualRestriction } from '@allianzSND/core';\nimport { Observable } from 'rxjs';\n\nexport class AgencyPlanGetMainAPI implements IMockAPI, IAPI, ISQLiteAPI {\n  private _dataYear: number;\n\n  setDataYear(dataYear: number) {\n    this._dataYear = dataYear\n  }\n\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n\n  getAPIName(): string {\n    return \"getAgencyPlanMain\";\n  }\n\n  getMockPath(): string {\n    return \"./assets/mock/getAgencyPlanMainMock.json\";\n  }\n\n  executeSQL(): Observable<any> {\n    console.log(\"dataYear\", this._dataYear);\n    return Observable.create((observer) => {\n      let agencyMainObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_VW_Agency_Plan_Main\");\n      let dao = this.daoFactory.getDefaultDao();\n      if (agencyMainObj != undefined && dao != undefined) {\n        dao = new ClientCustomDao(dao);\n        agencyMainObj.addRestriction(new EqualRestriction('DataYear', [this._dataYear]));\n        dao.queryByTable(agencyMainObj).subscribe((resp) => {\n          console.log(\"resp\", resp);\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n}\n","import { IMockAPI, IAPI, ISQLiteAPI, DaoFactory, ClientCustomDao, EqualRestriction} from '@allianzSND/core';\nimport { Observable } from 'rxjs';\n\nexport class AgencyPlanGetDetailAPI implements IMockAPI, IAPI, ISQLiteAPI{\n  private _dataYear: number;\n\n  setDataYear(dataYear: number) {\n    this._dataYear = dataYear;\n  }\n\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n\n  getAPIName(): string {\n    return \"getAgencyPlanDetail\";\n  }\n\n  getMockPath(): string {\n    return \"./assets/mock/getAgencyPlanDetail.json\";\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let agencyDetailObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_VW_Agency_Detail_Data\");\n      let dao = this.daoFactory.getDefaultDao();\n      if (agencyDetailObj != undefined && dao != undefined) {\n\n        dao = new ClientCustomDao(dao);\n        agencyDetailObj.addRestriction(new EqualRestriction('DataYear', [this._dataYear]));\n        dao.queryByTable(agencyDetailObj).subscribe((resp) => {\n          console.log(resp);\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n}\n","import { IMockAPI, IAPI, ISQLiteAPI, DaoFactory, ClientCustomDao, EqualRestriction} from '@allianzSND/core';\nimport { Observable } from 'rxjs';\n\nexport class GoalSettingGetExpectedAPI implements IMockAPI, IAPI, ISQLiteAPI{\n  private _dataYear: number;\n\n  setDataYear(dataYear: number) {\n    this._dataYear = dataYear\n  }\n\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n\n  getAPIName(): string {\n    return \"getGoalSettingExpected\";\n  }\n\n  getMockPath(): string {\n    return \"./assets/mock/getGoalSettingExpected.json\";\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let goalExpectedObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_VW_Goal_Setting_Expected\");\n      let dao = this.daoFactory.getDefaultDao();\n      if (goalExpectedObj != undefined && dao != undefined) {\n        dao = new ClientCustomDao(dao);\n        goalExpectedObj.addRestriction(new EqualRestriction('DataYear', [this._dataYear]));\n        dao.queryByTable(goalExpectedObj).subscribe((resp) => {\n          console.log(resp);\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n}\n","import { IAPI, IMockAPI, DaoFactory, ISQLiteAPI, EqualRestriction, ClientCustomDao } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\n\nexport class GoalSettingGetValueAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n\n    private _dataYear: number = -1;\n    setDataYear(dataYear: number) {\n        this._dataYear = dataYear;\n    }\n\n    getAPIName(): string {\n        return 'getGoalSettingValue';\n    }\n\n    getMockPath(): string {\n        if (this._dataYear == 2019) {\n            return './assets/mock/getGoalSettingValue_2019.json';\n        }\n        else if (this._dataYear == 2020) {\n            return './assets/mock/getGoalSettingValue_2020.json';\n        }\n        else {\n            console.warn(\"GoalSettingGetValueAPI mock path not found\");\n            return '';\n        }\n\n    }\n\n    executeSQL(): Observable<any> {\n        /*\n            \"FYFC\": 200,\n            \"FYFC_Actual\": 30,\n            \"FYFC_Now_To_Year_End\": 170,\n            \"Manpower\": 70,\n            \"Recruitment\": 40\n         */\n        return Observable.create((observer) => {\n            console.log(\"queryByTable: goalSettingValue this._dataYear:\", this._dataYear);\n            let dao = this.daoFactory.getDefaultDao();\n            if (dao != undefined) {\n\n\n                let goalSettingValue = this.daoFactory.getDefaultTable(\"TW_LH_SD_Goal_Setting_Value\");\n                if (goalSettingValue) {\n\n\n                    dao = new ClientCustomDao(dao);\n                    if (this._dataYear != -1) {\n                        goalSettingValue.addRestriction(new EqualRestriction('DataYear', [this._dataYear]));\n                    }\n\n\n                    //todo!\n                    dao.queryByTable(goalSettingValue).subscribe((resp) => {\n                        console.log(\"queryByTable: goalSettingValue\", resp);\n\n\n\n\n\n\n                        // console.warn(\"goalSettingValue========: \",data);\n                        observer.next(resp);\n                        observer.complete();\n\n                    });\n\n                }\n\n\n                else {\n                    observer.next(false);\n                    observer.complete();\n                }\n\n            }\n            else {\n                observer.next(false);\n                observer.complete();\n            }\n        });\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { IMockAPI, IAPI, ISQLiteAPI, DaoFactory, ClientCustomDao, EqualRestriction, SQLiteResponse } from '@allianzSND/core';\nimport { Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nexport class GoalSettingSetExpectedAPI implements IMockAPI, IAPI, ISQLiteAPI {\n  private _expectedRecruitment: object = {};\n  private _indirectRecruitment: number = 0;\n\n  setExpectedRecruitment(expectedRecruitment: object) {\n    this._expectedRecruitment = expectedRecruitment;\n  }\n\n  setIndirectRecruitment(indirectRecruitment: number) {\n    this._indirectRecruitment = indirectRecruitment;\n  }\n\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n\n  getAPIName(): string {\n    return \"setGoalSettingExpected\";\n  }\n\n  getMockPath(): string {\n    return \"./assets/mock/saveSuccess.json\";\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create(async (observer) => {\n      let goalExpectedObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Goal_Setting_Expected\");\n      let goalExpectedExtObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Goal_Setting_Expected_Extension\");\n      let agencyMainObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Agency_Plan_Main\");\n      let dao = this.daoFactory.getDefaultDao();\n      if (goalExpectedObj != undefined && agencyMainObj != undefined && dao != undefined) {\n        dao = new ClientCustomDao(dao);\n\n        agencyMainObj.addRestriction(new EqualRestriction('DataYear', [this._expectedRecruitment['DataYear']]));\n        agencyMainObj.addRestriction(new EqualRestriction('DataType', ['Recruitment']));\n        agencyMainObj.setValue('MonthPlan', [this._expectedRecruitment['RecruitmentTotal'] + this._indirectRecruitment]);\n\n\n        goalExpectedObj.setValue('Q1', this._expectedRecruitment['Q1']);\n        goalExpectedObj.setValue('Q2', this._expectedRecruitment['Q2']);\n        goalExpectedObj.setValue('Q3', this._expectedRecruitment['Q3']);\n        goalExpectedObj.setValue('Q4', this._expectedRecruitment['Q4']);\n        goalExpectedObj.setValue('FYFC', this._expectedRecruitment['FYFC']);\n        goalExpectedObj.setValue('ANP', this._expectedRecruitment['ANP']);\n        goalExpectedObj.setValue('DataYear', this._expectedRecruitment['DataYear']);\n\n        goalExpectedObj.addRestriction(new EqualRestriction('DataYear', [this._expectedRecruitment['DataYear']]));\n        let goalExpectedResp = await dao.queryByTable(goalExpectedObj).toPromise();\n        console.log('dataYear: ', this._expectedRecruitment['DataYear'], ' goalExpectedResp:', goalExpectedResp);\n        if (goalExpectedResp.Body.length > 0) {\n          //sqlite has data;\n          dao.transactionUpdate(goalExpectedObj);\n        }\n        else {\n          //sqlite not has data;\n          let clientID = uuid();\n          goalExpectedObj.setValue('ClientID', clientID);\n          goalExpectedExtObj.setValue('ClientID', clientID);\n          dao.transactionInsert(goalExpectedObj);\n          dao.transactionInsert(goalExpectedExtObj);\n        }\n\n\n        // dao.transactionUpdate(goalExpectedObj);\n        dao.transactionUpdate(agencyMainObj);\n        dao.runTransaction().subscribe((resp) => {\n          observer.next(resp);\n          observer.complete();\n        });\n\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n}\n","import { IAPI, DaoFactory, ClientCustomDao, EqualRestriction } from \"@allianzSND/core\";\nimport { IMockAPI } from \"@allianzSND/core\";\nimport { ISQLiteAPI } from '@allianzSND/core';\nimport { Observable, from } from 'rxjs';\n\n\n\nexport class GoalSettingGetPlanAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n  private _dataYear: number = -1;\n\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n\n\n  setDataYear(year: number) {\n    this._dataYear = year;\n  }\n\n\n  getAPIName(): string {\n    return 'getGoalSettingPlan';\n  }\n\n  getMockPath(): string {\n    //alert(\"personal progress mock data\");\n    if (this._dataYear == 2019) {\n      return './assets/mock/getGoalSettingPlan_2019.json';\n    }\n    else if (this._dataYear == 2020) {\n      return './assets/mock/getGoalSettingPlan_2020.json';\n    }\n    else {\n      console.warn(\"datYear not match mock path\");\n      return '';\n    }\n  }\n\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let dao = this.daoFactory.getDefaultDao();\n      if (dao != undefined) {\n\n\n        let goalSettingObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_VW_Goal_Setting_Plan_Value\");\n        if (goalSettingObj) {\n\n          if (this._dataYear != -1) {\n            goalSettingObj.addRestriction(new EqualRestriction('DataYear', [this._dataYear]));\n          }\n\n          dao = new ClientCustomDao(dao);\n\n\n          dao.queryByTable(goalSettingObj).subscribe((resp) => {\n            console.warn(\"queryByTable Goal_Setting_Plan_Value: \", JSON.stringify(resp));\n            observer.next(resp);\n            observer.complete();\n          });\n        }\n        else {\n          observer.next(false);\n          observer.complete();\n        }\n\n      }\n      else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n\n\n\n}","import { IAPI, EqualRestriction, ClientCustomDao } from \"@allianzSND/core\";\nimport { IMockAPI } from \"@allianzSND/core\";\nimport { ISQLiteAPI } from '@allianzSND/core';\nimport { Observable, from } from 'rxjs';\nimport { DaoFactory } from '@allianzSND/core';\n\n\n\nexport class GoalSettingGetActualAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n\n  private _dataYear: number = -1;\n\n\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n  setDataYear(year: number) {\n    this._dataYear = year;\n  }\n\n\n\n  getAPIName(): string {\n    return 'getGoalSettingActualValue';\n  }\n\n  getMockPath(): string {\n    //alert(\"personal progress mock data\");\n    if (this._dataYear == 2019) {\n      return './assets/mock/getGoalSettingActualValue_2019.json';\n    }\n    else if (this._dataYear == 2020) {\n      return './assets/mock/getGoalSettingActualValue_2020.json';\n    }\n    else {\n      //todo throw error\n      console.warn('dataYear not match mock path');\n      return '';\n    }\n  }\n\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let dao = this.daoFactory.getDefaultDao();\n      if (dao != undefined) {\n\n\n        let goalSettingObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_VW_Actual_Value\");\n        if (goalSettingObj) {\n\n          if (this._dataYear != -1) {\n            goalSettingObj.addRestriction(new EqualRestriction('DataYear', [this._dataYear]));\n          }\n\n          dao = new ClientCustomDao(dao);\n\n\n          dao.queryByTable(goalSettingObj).subscribe((resp) => {\n            console.warn(\"queryByTable Goal_Setting_Actual_Value: \", resp);\n            observer.next(resp);\n            observer.complete();\n          });\n        }\n        else {\n          observer.next(false);\n          observer.complete();\n        }\n\n      }\n      else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n\n}","import { GoalSettingStep4 } from \"./GoalSettingStep4\";\nimport { GoalSettingPlanPopup } from \"./GoalSettingPlanPopup\";\nimport { GoalSettingStepData } from \"./GoalSettingStepData\";\nimport { Bean, Required } from \"@allianzSND/core\";\n\nexport enum DWM_DATETYPE {\n    DAILY = 'Daily',\n    WEEKLY = 'Weekly',\n    MONTHLY = 'Monthly'\n}\n\nexport enum GOALSETTINGSTEP {\n    STEP1 = 1,\n    STEP2 = 2,\n    STEP3 = 3,\n    STEP4 = 4,\n    STEP5 = 5\n}\n\nexport enum GOALSETTINGSETMODE {\n    SET_NEXT_YESR,\n    ADGUST_GOAL\n}\n\nexport enum ROLE {\n    // FEMALEAGENT = '01',\n    // FEMALEAGENTLEADER = '02',\n    // MALEAGENT = '03',\n    // MALEAGENTLEADER = '04',\n\n    // AGENT = 'AG',\n    // AGENTLEADER = 'AL',\n    // CAO = 'Manager',\n    // ZONEHEAD = 'Supervisor'\n    AGENT = 'AG',\n    AGENTLEADER = 'AL',\n    ZONEHEAD = 'Manager',\n    CAO = 'Supervisor'\n}\n\nexport enum APPROVESTATUS {\n    PENDING = 'P',\n    WAINTING = 'W',\n    NONE = 'N',\n    APPROVE = 'A',\n}\n\nexport enum APITYPE {\n    SQLITE = 'SQLITE',\n    RESTFUL = 'RESTFUL',\n    MOCK = 'MOCK'\n}\n\n@Bean('ValidationState')\nexport class ValidationState {\n\n    @Required\n    private _step: number;\n\n    @Required\n    private _isDataLegal: boolean;\n    \n    constructor() {\n    }\n\n    set step(step: number) {\n        this._step = step;\n    }\n\n    set isDataLegal(isDataLegal: boolean) {\n        this._isDataLegal = isDataLegal;\n    }\n\n    get step() {\n        return this._step;\n    }\n\n    get isDataLegal() {\n        return this._isDataLegal;\n    }\n}\n\nexport class PlanFYFCPopupInfo {\n    private _state: number;\n    private _data: GoalSettingStepData;\n\n    constructor(state: number, data: GoalSettingStepData) {\n        this._state = state;\n        this._data = data;\n    }\n\n    public set state(state: number) {\n        this._state = state;\n    }\n\n    public set data(data: GoalSettingStepData) {\n        this._data = data;\n    }\n\n    public get state(): number {\n        return this._state;\n    }\n\n    public get data(): GoalSettingStepData {\n        return this._data;\n    }\n}\n\n\n\n","import { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('GoalSettingStep1')\nexport class GoalSettingStep1 {\n\n    @Required\n    private _FYFC: string;\n\n    @Required\n    private _AnnualConvention: string;\n\n    @Required\n    private _MDRT: string;\n\n    @Required\n    private _PromotionPlan: string;\n\n    @Required\n    private _Actual: string;\n\n    @Required\n    private _FYFCNowToYearEnd: string;\n\n    private _ActivityFYFC: string;\n\n    private _ActivityDays: string;\n\n    constructor() {\n\n    }\n\n    public get FYFC(): string {\n        return this._FYFC;\n    }\n    public set FYFC(value: string) {\n        this._FYFC = value;\n    }\n    public get AnnualConvention(): string {\n        return this._AnnualConvention;\n    }\n    public set AnnualConvention(value: string) {\n        this._AnnualConvention = value;\n    }\n    public get MDRT(): string {\n        return this._MDRT;\n    }\n    public set MDRT(value: string) {\n        this._MDRT = value;\n    }\n    public get PromotionPlan(): string {\n        return this._PromotionPlan;\n    }\n    public set PromotionPlan(value: string) {\n        this._PromotionPlan = value;\n    }\n    public get Actual(): string {\n        return this._Actual;\n    }\n    public set Actual(value: string) {\n        this._Actual = value;\n    }\n    public get FYFCNowToYearEnd(): string {\n        return this._FYFCNowToYearEnd;\n    }\n    public set FYFCNowToYearEnd(value: string) {\n        this._FYFCNowToYearEnd = value;\n    }\n    public get ActivityFYFC(): string {\n        return this._ActivityFYFC;\n    }\n    public set ActivityFYFC(value: string) {\n        this._ActivityFYFC = value;\n    }\n    public get ActivityDays(): string {\n        return this._ActivityDays;\n    }\n    public set ActivityDays(value: string) {\n        this._ActivityDays = value;\n    }\n\n}\n","import { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('GoalSettingStep2')\nexport class GoalSettingStep2 {\n\n    @Required\n    private _PerCase: string;\n\n    constructor() {\n    }\n\n    public get PerCase(): string {\n        return this._PerCase;\n    }\n    public set PerCase(value: string) {\n        this._PerCase = value;\n    }\n\n}\n","import { ActivityValue } from \"./ActivityValue\";\nimport { TIMEBASE, Bean, Required } from \"@allianzSND/core\";\n\n@Bean('GoalSettingStep3')\nexport class GoalSettingStep3 {\n\n    @Required\n    private _ActivityValues: Array<ActivityValue> = [];\n\n    @Required\n    private _Activity: TIMEBASE;\n\n    constructor() {\n    }\n\n    public get Activity(): TIMEBASE {\n        return this._Activity;\n    }\n    public set Activity(value: TIMEBASE) {\n        this._Activity = value;\n    }\n    public get ActivityValues(): Array<ActivityValue> {\n        return this._ActivityValues;\n    }\n    public set ActivityValues(value: Array<ActivityValue>) {\n        this._ActivityValues = value;\n    }\n\n\n}\n","import { MonthlyPlanFYFCData } from \"./MonthlyPlanFYFCData\";\nimport { Required, Bean } from \"@allianzSND/core\";\n\n@Bean('GoalSettingStep4')\nexport class GoalSettingStep4 {\n\n    @Required\n    private _Forecast: string;\n\n    @Required\n    private _Shortfall: string;\n\n    @Required\n    private _Actual: string;\n\n    @Required\n    private _MonthList: Array<MonthlyPlanFYFCData> = [];\n\n    constructor() {\n    }\n\n    public get Forecast(): string {\n        return this._Forecast;\n    }\n    public set Forecast(value: string) {\n        this._Forecast = value;\n    }\n    public get Shortfall(): string {\n        return this._Shortfall;\n    }\n    public set Shortfall(value: string) {\n        this._Shortfall = value;\n    }\n    public get Actual(): string {\n        return this._Actual;\n    }\n    public set Actual(value: string) {\n        this._Actual = value;\n    }\n    public get MonthList(): Array<MonthlyPlanFYFCData> {\n        return this._MonthList;\n    }\n    public set MonthList(value: Array<MonthlyPlanFYFCData>) {\n        this._MonthList = value;\n    }\n\n    public clone() {\n        const cloneGoalSettingStep4 = new GoalSettingStep4();\n        cloneGoalSettingStep4.Forecast = this._Forecast;\n        cloneGoalSettingStep4.Shortfall = this._Shortfall;\n        cloneGoalSettingStep4.MonthList = this._MonthList.map(x => x.clone());\n        cloneGoalSettingStep4.Actual = this._Actual;\n        return cloneGoalSettingStep4;\n    }\n}\n","import { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('GoalSettingStep5')\nexport class GoalSettingStep5 {\n\n    @Required\n    private _TeamFYFC: string;\n\n    @Required\n    private _TeamANP: string;\n\n    @Required\n    private _Manpower: string;\n\n    @Required\n    private _Recruitment: string;\n\n    @Required\n    private _TeamFYFCActual: string;\n\n    @Required\n    private _TeamANPActual: string;\n\n    @Required\n    private _TeamFYFCNowToYearEnd: string;\n\n    @Required\n    private _TeamANPNowToYearEnd: string;\n\n\n    constructor() {\n    }\n\n    public get TeamFYFC(): string {\n        return this._TeamFYFC;\n    }\n    public set TeamFYFC(value: string) {\n        this._TeamFYFC = value;\n    }\n    public get TeamANP(): string {\n        return this._TeamANP;\n    }\n    public set TeamANP(value: string) {\n        this._TeamANP = value;\n    }\n    public get Manpower(): string {\n        return this._Manpower;\n    }\n    public set Manpower(value: string) {\n        this._Manpower = value;\n    }\n    public get Recruitment(): string {\n        return this._Recruitment;\n    }\n    public set Recruitment(value: string) {\n        this._Recruitment = value;\n    }\n    public get TeamFYFCActual(): string {\n        return this._TeamFYFCActual;\n    }\n    public set TeamFYFCActual(value: string) {\n        this._TeamFYFCActual = value;\n    }\n    public get TeamANPActual(): string {\n        return this._TeamANPActual;\n    }\n    public set TeamANPActual(value: string) {\n        this._TeamANPActual = value;\n    }\n    public get TeamFYFCNowToYearEnd(): string {\n        return this._TeamFYFCNowToYearEnd;\n    }\n    public set TeamFYFCNowToYearEnd(value: string) {\n        this._TeamFYFCNowToYearEnd = value;\n    }\n    public get TeamANPNowToYearEnd(): string {\n        return this._TeamANPNowToYearEnd;\n    }\n    public set TeamANPNowToYearEnd(value: string) {\n        this._TeamANPNowToYearEnd = value;\n    }\n\n\n}\n","import { ExtensionData, Bean, Required } from \"@allianzSND/core\";\n\n@Bean('GoalSettingYearConfig')\nexport class GoalSettingYearConfig {\n\n    private _IsCurrent: string;\n\n    @Required\n    private _DataYear: number;\n\n    private _QuarterStartMonth: number;\n\n    private _QuarterEndMonth: number;\n\n    private _GoalSettingActivityProcMode: string;\n\n    @Required\n    private _GoalAndPlanDifferenceLimit: number;\n\n    @Required\n    private _PerformanceSettlementMonth: number;\n\n    @Required\n    private _WorkingMonth: number;\n\n    private _WorkingQuarter: number;\n\n    @Required\n    private _MonthQuantityOfYear: number;\n\n    private _FyfcCovertAnpRate: number;\n\n    @Required\n    private _InforceConvertSubmitRate: number;\n\n    @Required\n    private _InforceConvertMeetRate: number;\n\n    @Required\n    private _InforceConvertScheduleRate: number;\n\n    @Required\n    private _InforceConvertFindRate: number;\n\n    @Required\n    private _NowToYearEndDays: number;\n\n    private _Extension: ExtensionData;\n\n    // constructor(IsCurrent: string, DataYear: number,  QuarterStartMonth: number, QuarterEndMonth: number, GoalSettingActivityProcMode: string, GoalAndPlanDifferenceLimit: number, PerformanceSettlementMonth: number, WorkingMonth: number, MonthQuantityOfYear: number, FyfcCovertAnpRate: number, InforceConvertSubmitRate: number, InforceConvertMeetRate: number, InforceConvertScheduleRate: number, InforceConvertFindRate: number, NowToYearEndDays: number) {\n    //     this._IsCurrent = IsCurrent;\n    //     this._DataYear = DataYear;\n    //     this._QuarterStartMonth = QuarterStartMonth;\n    //     this._QuarterEndMonth = QuarterEndMonth;\n    //     this._GoalSettingActivityProcMode = GoalSettingActivityProcMode;\n    //     this._GoalAndPlanDifferenceLimit = GoalAndPlanDifferenceLimit;\n    //     this._PerformanceSettlementMonth = PerformanceSettlementMonth;\n    //     this._WorkingMonth = WorkingMonth;\n    //     this._MonthQuantityOfYear = MonthQuantityOfYear;\n    //     this._FyfcCovertAnpRate = FyfcCovertAnpRate;\n    //     this._InforceConvertSubmitRate = InforceConvertSubmitRate;\n    //     this._InforceConvertMeetRate = InforceConvertMeetRate;\n    //     this._InforceConvertScheduleRate = InforceConvertScheduleRate;\n    //     this._InforceConvertFindRate = InforceConvertFindRate;\n    //     this._NowToYearEndDays = NowToYearEndDays;\n \n    // }\n\n    constructor() {\n\n    }\n\n    public getExtension(){\n        return this._Extension;\n    }\n    public setExtension(extension){\n        this._Extension = extension;\n    }\n    \n    public get IsCurrent(): string {\n        return this._IsCurrent;\n    }\n    public get DataYear(): number {\n        return this._DataYear;\n    }\n    public get QuarterStartMonth(): number {\n        return this._QuarterStartMonth;\n    }\n    public get QuarterEndMonth(): number {\n        return this._QuarterEndMonth;\n    }\n    public get GoalSettingActivityProcMode(): string {\n        return this._GoalSettingActivityProcMode;\n    }\n    public get GoalAndPlanDifferenceLimit(): number {\n        return this._GoalAndPlanDifferenceLimit;\n    }\n    public get PerformanceSettlementMonth(): number {\n        return this._PerformanceSettlementMonth;\n    }\n    public get WorkingMonth(): number {\n        return this._WorkingMonth;\n    }\n    public get WorkingQuarter(): number {\n        return this._WorkingQuarter;\n    }\n    public get MonthQuantityOfYear(): number {\n        return this._MonthQuantityOfYear;\n    }\n    public get FyfcCovertAnpRate(): number {\n        return this._FyfcCovertAnpRate;\n    }\n    public get InforceConvertSubmitRate(): number {\n        return this._InforceConvertSubmitRate;\n    }\n    public get InforceConvertMeetRate(): number {\n        return this._InforceConvertMeetRate;\n    }\n    public get InforceConvertScheduleRate(): number {\n        return this._InforceConvertScheduleRate;\n    }\n    public get InforceConvertFindRate(): number {\n        return this._InforceConvertFindRate;\n    }\n    public get NowToYearEndDays(): number {\n        return this._NowToYearEndDays;\n    }\n\n\n    public set IsCurrent(value: string) {\n        this._IsCurrent = value;\n    }\n    public set DataYear(value: number) {\n        this._DataYear = value;\n    }\n    public set QuarterStartMonth(value: number) {\n        this._QuarterStartMonth = value;\n    }\n    public set QuarterEndMonth(value: number) {\n        this._QuarterEndMonth = value;\n    }\n    public set GoalSettingActivityProcMode(value: string) {\n        this._GoalSettingActivityProcMode = value;\n    }\n    public set GoalAndPlanDifferenceLimit(value: number) {\n        this._GoalAndPlanDifferenceLimit = value;\n    }\n    public set PerformanceSettlementMonth(value: number) {\n        this._PerformanceSettlementMonth = value;\n    }\n    public set WorkingMonth(value: number) {\n        this._WorkingMonth = value;\n    }\n    public set WorkingQuarter(value: number) {\n        this._WorkingQuarter = value;\n    }\n    public set MonthQuantityOfYear(value: number) {\n        this._MonthQuantityOfYear = value;\n    }\n    public set FyfcCovertAnpRate(value: number) {\n        this._FyfcCovertAnpRate = value;\n    }\n    public set InforceConvertSubmitRate(value: number) {\n        this._InforceConvertSubmitRate = value;\n    }\n    public set InforceConvertMeetRate(value: number) {\n        this._InforceConvertMeetRate = value;\n    }\n    public set InforceConvertScheduleRate(value: number) {\n        this._InforceConvertScheduleRate = value;\n    }\n    public set InforceConvertFindRate(value: number) {\n        this._InforceConvertFindRate = value;\n    }\n    public set NowToYearEndDays(value: number) {\n        this._NowToYearEndDays = value;\n    }\n\n  \n\n}\n","import { TIMEBASE, Bean, Required } from \"@allianzSND/core\";\n\n@Bean('ActivityValue')\nexport class ActivityValue{\n\n    @Required\n    private _TimeBase: TIMEBASE;\n\n    @Required\n    private _Find: string;\n\n    @Required\n    private _Schedule: string;\n\n    @Required\n    private _Meet: string;\n\n    @Required\n    private _Submit: string;\n    \n    @Required\n    private _Inforce: string;\n    \n    constructor(TimeBase, Find, Schedule, Meet, Submit, Inforce) {\n        this._TimeBase = TimeBase;\n        this._Schedule = Schedule;\n        this._Find = Find;\n        this._Meet = Meet;\n        this._Submit = Submit;\n        this._Inforce = Inforce;\n    }\n\n    public get TimeBase(): TIMEBASE {\n        return this._TimeBase;\n    }\n    public get Find(): string {\n        return this._Find;\n    }\n    public get Schedule(): string {\n        return this._Schedule;\n    }\n    public get Meet(): string {\n        return this._Meet;\n    }\n    public get Submit(): string {\n        return this._Submit;\n    }\n    public get Inforce(): string {\n        return this._Inforce;\n    }\n\n}","import { APPROVESTATUS } from \"./GoalSettingCommon\";\nimport { ExtensionData, Bean, Required } from \"@allianzSND/core\";\n\n@Bean('GoalSettingGoalStatus')\nexport class GoalSettingGoalStatus {\n\n    @Required\n    private _DataYear: number;\n\n    private _IsCurrent: string;\n\n    @Required\n    private _PersonnelGoalApplicableYM: number;\n\n    @Required\n    private _TeamGoalApplicableYM: number;\n\n    @Required\n    private _GoalSetMonth: number;\n\n    @Required\n    private _ApproveStatus: APPROVESTATUS;\n\n    private _IsFirstTime: boolean;\n\n    private _IsNeedSetting: boolean;\n\n    private _RemainingDays: number;\n\n    private _SupervisorComment: string;\n\n    private _Extension: ExtensionData;\n\n    constructor() {\n\n    }\n\n    public getExtension() {\n        return this._Extension;\n    }\n    public setExtension(extension) {\n        this._Extension = extension;\n    }\n\n    public get PersonnelGoalApplicableYM(): number {\n        return this._PersonnelGoalApplicableYM;\n    }\n    public get TeamGoalApplicableYM(): number {\n        return this._TeamGoalApplicableYM;\n    }\n    public get GoalSetMonth(): number {\n        return this._GoalSetMonth;\n    }\n    public get ApproveStatus(): APPROVESTATUS {\n        return this._ApproveStatus;\n    }\n    public get IsFirstTime(): boolean {\n        return this._IsFirstTime;\n    }\n    public get IsNeedSetting(): boolean {\n        return this._IsNeedSetting;\n    }\n    public get RemainingDays(): number {\n        return this._RemainingDays;\n    }\n    public get DataYear(): number {\n        return this._DataYear;\n    }\n    public get IsCurrent(): string {\n        return this._IsCurrent;\n    }\n    public get SupervisorComment(): string {\n        return this._SupervisorComment;\n    }\n\n\n\n    public set IsCurrent(value: string) {\n        this._IsCurrent = value;\n    }\n    public set DataYear(value: number) {\n        this._DataYear = value;\n    }\n    public set PersonnelGoalApplicableYM(value: number) {\n        this._PersonnelGoalApplicableYM = value;\n    }\n    public set TeamGoalApplicableYM(value: number) {\n        this._TeamGoalApplicableYM = value;\n    }\n    public set GoalSetMonth(value: number) {\n        this._GoalSetMonth = value;\n    }\n    public set ApproveStatus(value: APPROVESTATUS) {\n        this._ApproveStatus = value;\n    }\n    public set IsFirstTime(value: boolean) {\n        this._IsFirstTime = value;\n    }\n    public set IsNeedSetting(value: boolean) {\n        this._IsNeedSetting = value;\n    }\n    public set RemainingDays(value: number) {\n        this._RemainingDays = value;\n    }\n    public set SupervisorComment(value: string) {\n        this._SupervisorComment = value;\n    }\n\n}","import { GoalSettingYearConfig } from \"./GoalSettingYearConfig\";\nimport { GoalSettingGoalStatus } from \"./GoalSettingGoalStatus\";\nimport { GoalSettingStep1 } from \"./GoalSettingStep1\";\nimport { GoalSettingStep2 } from \"./GoalSettingStep2\";\nimport { GoalSettingStep3 } from \"./GoalSettingStep3\";\nimport { GoalSettingStep4 } from \"./GoalSettingStep4\";\nimport { GoalSettingStep5 } from \"./GoalSettingStep5\";\nimport { AgencyPlanDetail } from \"./AgencyPlanDetail\";\nimport { AgencyPlanDataForOverview } from \"./AgencyPlanDataForOverview\";\nimport { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('GoalSettingStepData')\nexport class GoalSettingStepData{\n\n    @Required\n    private _DataYear: number;\n\n    @Required\n    private _YearConfig: GoalSettingYearConfig;\n\n    @Required\n    private _GoalStatus: GoalSettingGoalStatus;\n\n    private _Step1: GoalSettingStep1;\n\n    private _Step2: GoalSettingStep2;\n\n    private _Step3: GoalSettingStep3;\n\n    @Required\n    private _Step4: GoalSettingStep4;\n\n    private _Step5: GoalSettingStep5;\n\n    private _AgencyPlan: AgencyPlanDataForOverview;\n\n    private _ActualList: Array<string> = [];\n\n    constructor(DataYear) {\n        this._DataYear = DataYear;\n    }\n    \n    public get DataYear(): number {\n        return this._DataYear;\n    }\n    public get YearConfig(): GoalSettingYearConfig {\n        return this._YearConfig;\n    }\n    public set YearConfig(value: GoalSettingYearConfig) {\n        this._YearConfig = value;\n    }\n    public get GoalStatus(): GoalSettingGoalStatus {\n        return this._GoalStatus;\n    }\n    public set GoalStatus(value: GoalSettingGoalStatus) {\n        this._GoalStatus = value;\n    }\n    public get Step1(): GoalSettingStep1 {\n        return this._Step1;\n    }\n    public set Step1(value: GoalSettingStep1) {\n        this._Step1 = value;\n    }\n    public get Step2(): GoalSettingStep2 {\n        return this._Step2;\n    }\n    public set Step2(value: GoalSettingStep2) {\n        this._Step2 = value;\n    }\n    public get Step3(): GoalSettingStep3 {\n        return this._Step3;\n    }\n    public set Step3(value: GoalSettingStep3) {\n        this._Step3 = value;\n    }\n    public get Step4(): GoalSettingStep4 {\n        return this._Step4;\n    }\n    public set Step4(value: GoalSettingStep4) {\n        this._Step4 = value;\n    }\n    public get Step5(): GoalSettingStep5 {\n        return this._Step5;\n    }\n    public set Step5(value: GoalSettingStep5) {\n        this._Step5 = value;\n    }\n    public get AgencyPlan(): AgencyPlanDataForOverview {\n        return this._AgencyPlan;\n    }\n    public set AgencyPlan(value: AgencyPlanDataForOverview) {\n        this._AgencyPlan = value;\n    }\n    public get ActualList(): Array<string> {\n        return this._ActualList;\n    }\n    public set ActualList(value: Array<string>) {\n        this._ActualList = value;\n    }\n\n\n\n\n}","import { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('IsApproveInfo')\nexport class IsApproveInfo{\n    \n    @Required\n    private _IsNeedApprove: boolean;\n\n    @Required\n    private _IsPopup: boolean;\n\n    private _PopupType: string;\n\n\n    constructor(IsNeedApprove, IsPopup){\n        this._IsNeedApprove = IsNeedApprove;\n        this._IsPopup = IsPopup;\n    }\n\n    public get IsNeedApprove(): boolean {\n        return this._IsNeedApprove;\n    }\n    public set IsNeedApprove(value: boolean) {\n        this._IsNeedApprove = value;\n    }\n    public get IsPopup(): boolean {\n        return this._IsPopup;\n    }\n    public set IsPopup(value: boolean) {\n        this._IsPopup = value;\n    }\n    public get PopupType(): string {\n        return this._PopupType;\n    }\n    public set PopupType(value: string) {\n        this._PopupType = value;\n    }\n\n}","import { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('MonthlyPlanFYFCData')\nexport class MonthlyPlanFYFCData {\n\n    @Required\n    private _Month: number;\n\n    @Required\n    private _Plan: string;\n\n    @Required\n    private _Actual: string;\n\n    constructor(Month:number, Plan:string, Actual:string){\n        this._Month = Month;\n        this._Plan = Plan;\n        this._Actual = Actual;\n    }\n\n    public get Month(): number {\n        return this._Month;\n    }\n\n    public get Actual(): string {\n        return this._Actual;\n    }\n\n    public get Plan(): string {\n        return this._Plan;\n    }\n    \n    public set Plan(value: string) {\n        this._Plan = value;\n    }\n\n    public clone(): MonthlyPlanFYFCData{\n        return new MonthlyPlanFYFCData(this._Month, this._Plan, this._Actual);\n    }\n}","import { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('AgencyPlanAgentInfo')\nexport class AgencyPlanAgentInfo {\n\n    @Required\n    private _AgentID: string;\n\n    @Required\n    private _AgentName: string;\n\n    @Required\n    private _DataYear: number;\n    \n    @Required\n    private _AppUseMode: string;\n\n    constructor(AgentID: string, AgentName: string, DataYear: number, AppUseMode: string) {\n        this._AgentID = AgentID;\n        this._AgentName = AgentName;\n        this._DataYear = DataYear;\n        this._AppUseMode = AppUseMode;\n    }\n\n    public get AgentID(): string {\n        return this._AgentID;\n    }\n\n    public get AgentName(): string {\n        return this._AgentName;\n    }\n    \n    public get DataYear(): number {\n        return this._DataYear;\n    }\n    \n    public get AppUseMode(): string {\n        return this._AppUseMode;\n    }\n\n}\n","import { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('AgencyPlanDetail')\nexport class AgencyPlanDetail {\n\n    @Required\n    private _AgentID: string;\n\n    @Required\n    private _AgentName: string;\n\n    @Required\n    private _DataYear: number;\n\n    @Required\n    private _AppUseMode: string;\n\n    @Required\n    private _JobGrade: string;\n\n    @Required\n    private _Actual: string;\n\n    @Required\n    private _CaseCount: string;\n\n    @Required\n    private _ClientID: string;\n\n    @Required\n    private _DataType: string;\n\n    @Required\n    private _DirectUnitType: string;\n    \n    @Required\n    private _Drilldown: string;\n\n    @Required\n    private _Forecast: string;\n\n    @Required\n    private _Goal: string;\n\n    @Required\n    private _IsApprove: string;\n\n    @Required\n    private _Manpower: number;\n\n    @Required\n    private _MonthPlan: string;\n\n    @Required\n    private _Orders: number;\n\n    @Required\n    private _PerCase: string;\n\n    @Required\n    private _Recruitment: number;\n\n    @Required\n    private _IsHasDot: boolean;\n    \n    @Required\n    private _TextColor: string;\n\n    constructor(){\n\n    }\n\n    public get AgentID(): string {\n        return this._AgentID;\n    }\n    public set AgentID(value: string) {\n        this._AgentID = value;\n    }\n  \n    public get AgentName(): string {\n        return this._AgentName;\n    }\n    public set AgentName(value: string) {\n        this._AgentName = value;\n    }\n    \n    public get DataYear(): number {\n        return this._DataYear;\n    }\n    public set DataYear(value: number) {\n        this._DataYear = value;\n    }\n   \n    public get AppUseMode(): string {\n        return this._AppUseMode;\n    }\n    public set AppUseMode(value: string) {\n        this._AppUseMode = value;\n    }\n\n    public get JobGrade(): string {\n        return this._JobGrade;\n    }\n    public set JobGrade(value: string) {\n        this._JobGrade = value;\n    }\n\n    public get Actual(): string {\n        return this._Actual;\n    }\n    public set Actual(value: string) {\n        this._Actual = value;\n    }\n    \n    public get CaseCount(): string {\n        return this._CaseCount;\n    }\n    public set CaseCount(value: string) {\n        this._CaseCount = value;\n    }\n    \n    public get ClientID(): string {\n        return this._ClientID;\n    }\n    public set ClientID(value: string) {\n        this._ClientID = value;\n    }\n    \n    public get DataType(): string {\n        return this._DataType;\n    }\n    public set DataType(value: string) {\n        this._DataType = value;\n    }\n    \n    public get DirectUnitType(): string {\n        return this._DirectUnitType;\n    }\n    public set DirectUnitType(value: string) {\n        this._DirectUnitType = value;\n    }\n   \n    public get Drilldown(): string {\n        return this._Drilldown;\n    }\n    public set Drilldown(value: string) {\n        this._Drilldown = value;\n    }\n    \n    public get Forecast(): string {\n        return this._Forecast;\n    }\n    public set Forecast(value: string) {\n        this._Forecast = value;\n    }\n    \n    public get Goal(): string {\n        return this._Goal;\n    }\n    public set Goal(value: string) {\n        this._Goal = value;\n    }\n    \n    public get IsApprove(): string {\n        return this._IsApprove;\n    }\n    public set IsApprove(value: string) {\n        this._IsApprove = value;\n    }\n    \n    public get Manpower(): number {\n        return this._Manpower;\n    }\n    public set Manpower(value: number) {\n        this._Manpower = value;\n    }\n  \n    public get MonthPlan(): string {\n        return this._MonthPlan;\n    }\n    public set MonthPlan(value: string) {\n        this._MonthPlan = value;\n    }\n    \n    public get Orders(): number {\n        return this._Orders;\n    }\n    public set Orders(value: number) {\n        this._Orders = value;\n    }\n  \n    public get PerCase(): string {\n        return this._PerCase;\n    }\n    public set PerCase(value: string) {\n        this._PerCase = value;\n    }\n    \n    public get Recruitment(): number {\n        return this._Recruitment;\n    }\n    public set Recruitment(value: number) {\n        this._Recruitment = value;\n    }\n\n    public get IsHasDot(): boolean {\n        return this._IsHasDot;\n    }\n    public set IsHasDot(value: boolean) {\n        this._IsHasDot = value;\n    }\n\n    public get TextColor(): string {\n        return this._TextColor;\n    }\n    public set TextColor(value: string) {\n        this._TextColor = value;\n    }\n\n}","import { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('AgencyPlanGoalExpected')\nexport class AgencyPlanGoalExpected {\n\n    @Required\n    private _ANP: string = '0';\n\n    @Required\n    private _DataYear: number = 0;\n\n    @Required\n    private _WorkingQuarter: number = 0;\n\n    @Required\n    private _FYFC: string = '0';\n\n    @Required\n    private _Q1: string = '0';\n\n    @Required\n    private _Q2: string = '0';\n\n    @Required\n    private _Q3: string = '0';\n\n    @Required\n    private _Q4: string = '0';\n\n    @Required\n    private _RecruitmentTotal: number = 0;\n    \n    @Required\n    private _FYFCConvertANPRate: number;\n\n    constructor(dataYear: number) {\n        this._DataYear = dataYear;\n    }\n\n    public get ANP(): string {\n        return this._ANP;\n    }\n    public set ANP(value: string) {\n        this._ANP = value;\n    }\n\n    public get DataYear(): number {\n        return this._DataYear;\n    }\n\n    public get WorkingQuarter(): number {\n        return this._WorkingQuarter;\n    }\n    public set WorkingQuarter(value: number) {\n        this._WorkingQuarter = value;\n    }\n\n    public get FYFC(): string {\n        return this._FYFC;\n    }\n    public set FYFC(value: string) {\n        this._FYFC = value;\n    }\n   \n    public get Q1(): string {\n        return this._Q1;\n    }\n    public set Q1(value: string) {\n        this._Q1 = value;\n    }\n    \n    public get Q2(): string {\n        return this._Q2;\n    }\n    public set Q2(value: string) {\n        this._Q2 = value;\n    }\n    \n    public get Q3(): string {\n        return this._Q3;\n    }\n    public set Q3(value: string) {\n        this._Q3 = value;\n    }\n  \n    public get Q4(): string {\n        return this._Q4;\n    }\n    public set Q4(value: string) {\n        this._Q4 = value;\n    }\n   \n    public get RecruitmentTotal(): number {\n        return this._RecruitmentTotal;\n    }\n    public set RecruitmentTotal(value: number) {\n        this._RecruitmentTotal = value;\n    }\n\n    public get FYFCConvertANPRate(): number {\n        return this._FYFCConvertANPRate;\n    }\n    public set FYFCConvertANPRate(value: number) {\n        this._FYFCConvertANPRate = value;\n    }\n\n    public clone(): AgencyPlanGoalExpected {\n        let cloneAgencyPlanGoalExpected: AgencyPlanGoalExpected = new AgencyPlanGoalExpected(this._DataYear);\n        cloneAgencyPlanGoalExpected.WorkingQuarter = this._WorkingQuarter;\n        cloneAgencyPlanGoalExpected.ANP = this._ANP;\n        cloneAgencyPlanGoalExpected.FYFC = this._FYFC;\n        cloneAgencyPlanGoalExpected.Q1 = this._Q1;\n        cloneAgencyPlanGoalExpected.Q2 = this._Q2;\n        cloneAgencyPlanGoalExpected.Q3 = this._Q3;\n        cloneAgencyPlanGoalExpected.Q4 = this._Q4;\n        cloneAgencyPlanGoalExpected.RecruitmentTotal = this._RecruitmentTotal;\n        cloneAgencyPlanGoalExpected.FYFCConvertANPRate = this._FYFCConvertANPRate;\n       \n        return cloneAgencyPlanGoalExpected;\n\n    }\n\n    \n\n}","import { MonthlyPlanFYFCData } from \"./MonthlyPlanFYFCData\";\nimport { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('GoalSettingPlanPopup')\nexport class GoalSettingPlanPopup {\n\n    @Required\n    private _FYFCGoal: number;\n\n    @Required\n    private _actual: number;\n\n    @Required\n    private _performanceMonthStart: number;\n\n    @Required\n    private _performanceMonthEnd: number;\n\n    @Required\n    private _monthPlanList: Array<MonthlyPlanFYFCData>;\n\n    @Required\n    private _approveThreshold: number;\n    \n    @Required\n    private _eachMonthPlan: Array<string> =[];\n\n    constructor(FYFCgoal, actual, performanceMonthStart, performanceMonthEnd, monthPlanList) {\n        this._FYFCGoal = FYFCgoal;\n        this._actual = actual;\n        this._performanceMonthStart = performanceMonthStart;\n        this._performanceMonthEnd = performanceMonthEnd;\n        this._monthPlanList = monthPlanList;\n    }\n\n\n    set FYFCGoal(FYFCgoal: number) {\n        this._FYFCGoal = FYFCgoal;\n    }\n\n    set actual(value: number) {\n        this._actual = value;\n    }\n\n    set performanceMonthStart(performanceMonthStart: number) {\n        this._performanceMonthStart = performanceMonthStart;\n    }\n\n    set performanceMonthEnd(performanceMonthEnd: number) {\n        this._performanceMonthEnd = performanceMonthEnd;\n    }\n\n    set monthPlanList(monthPlanList: Array<MonthlyPlanFYFCData>) {\n        this._monthPlanList = monthPlanList;\n    }\n\n    set approveThreshold(approveThreshold: number) {\n        this._approveThreshold = approveThreshold;\n    }\n\n    set eachMonthPlan(eachMonthPlan: Array<string>) {\n        this._eachMonthPlan = eachMonthPlan;\n    }\n\n    get FYFCGoal() {\n        return this._FYFCGoal;\n    }\n\n    get actual(): number {\n        return this._actual;\n    }\n\n    get performanceMonthStart() {\n        return this._performanceMonthStart;\n    }\n\n    get performanceMonthEnd() {\n        return this._performanceMonthEnd;\n    }\n\n    get monthPlanList() {\n        return this._monthPlanList;\n    }\n\n    get approveThreshold() {\n        return this._approveThreshold;\n    }\n\n    get eachMonthPlan() {\n        return this._eachMonthPlan;\n    }\n\n    public clone() {\n        const cloneGoalSettingStep4 = new GoalSettingPlanPopup(this._FYFCGoal, this._actual, this._performanceMonthStart, this._performanceMonthEnd, this.monthPlanList.map(x => x.clone()));\n        cloneGoalSettingStep4._eachMonthPlan = this.eachMonthPlan.map(x => x);\n        cloneGoalSettingStep4._approveThreshold = this._approveThreshold;\n\n        return cloneGoalSettingStep4;\n    }\n}","import { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('AgencyPlanDirectUnitDetail')\nexport class AgencyPlanDirectUnitDetail {\n\n    @Required\n    private _Manpower: string = '';\n    \n    @Required\n    private _Recruitment: number = 0;\n    \n    constructor() {\n    }\n\n    public get Manpower(): string {\n        return this._Manpower;\n    }\n    public set Manpower(value: string) {\n        this._Manpower = value;\n    }\n\n    public get Recruitment(): number {\n        return this._Recruitment;\n    }\n    public set Recruitment(value: number) {\n        this._Recruitment = value;\n    }\n\n    \n}\n\n","import { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('AgencyPlanMainData')\nexport class AgencyPlanMainData {\n\n    @Required\n    private _DataYear: number;\n\n    @Required\n    private _DataType: string;\n\n    @Required\n    private _Forecast: string;\n\n    @Required\n    private _Actual: string;\n    \n    @Required\n    private _MonthPlan: string;\n\n    constructor() {\n    }\n\n    public get DataYear(): number {\n        return this._DataYear;\n    }\n    public set DataYear(value: number) {\n        this._DataYear = value;\n    }\n\n    public get DataType(): string {\n        return this._DataType;\n    }\n    public set DataType(value: string) {\n        this._DataType = value;\n    }\n\n    public get Forecast(): string {\n        return this._Forecast;\n    }\n    public set Forecast(value: string) {\n        this._Forecast = value;\n    }\n\n    public get Actual(): string {\n        return this._Actual;\n    }\n    public set Actual(value: string) {\n        this._Actual = value;\n    }\n\n    public get MonthPlan(): string {\n        return this._MonthPlan;\n    }\n    public set MonthPlan(value: string) {\n        this._MonthPlan = value;\n    }\n}","import { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('AgencyPlanDataForOverview')\nexport class AgencyPlanDataForOverview {\n\n    @Required\n    private _FYFCForecast: string;\n\n    @Required\n    private _ANPForecast: string;\n\n    @Required\n    private _ManpowerPlan: string;\n\n    @Required\n    private _RecruitmentPlan: string;\n    \n    @Required\n    private _CompletionRate: string;\n\n    constructor() {       \n    }\n\n    public get FYFCForecast(): string {\n        return this._FYFCForecast;\n    }\n    public set FYFCForecast(value: string) {\n        this._FYFCForecast = value;\n    }\n\n    public get ANPForecast(): string {\n        return this._ANPForecast;\n    }\n    public set ANPForecast(value: string) {\n        this._ANPForecast = value;\n    }\n   \n    public get ManpowerPlan(): string {\n        return this._ManpowerPlan;\n    }\n    public set ManpowerPlan(value: string) {\n        this._ManpowerPlan = value;\n    }\n   \n    public get RecruitmentPlan(): string {\n        return this._RecruitmentPlan;\n    }\n    public set RecruitmentPlan(value: string) {\n        this._RecruitmentPlan = value;\n    }\n\n    public get CompletionRate(): string {\n        return this._CompletionRate;\n    }\n    public set CompletionRate(CompletionRate: string) {\n        this._CompletionRate = CompletionRate;\n    }\n    \n    \n\n\n}","import { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('SettingChangeEvent')\nexport class SettingChangeEvent {\n\n    @Required\n    private _step: number;\n\n    @Required\n    private _column: string;\n\n    @Required\n    private _value: any;\n\n    constructor(step: number, column: string, value: any) {\n        this._step = step;\n        this._column = column;\n        this._value = value;\n    }\n\n\n    public get step(): number {\n        return this._step;\n    }\n    public set step(value: number) {\n        this._step = value;\n    }\n\n    public get column(): string {\n        return this._column;\n    }\n    public set column(value: string) {\n        this._column = value;\n    }\n\n    public get value(): any {\n        return this._value;\n    }\n    public set value(value: any) {\n        this._value = value;\n    }\n}","import { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('GoalSettingTranslate')\nexport class GoalSettingTranslate {\n\n    @Required\n    private _TeamGoalEffectiveMonthTitle: string = '';\n\n    @Required\n    private _PersonalGoalEffectiveMonthTitle: string = '';\n\n    @Required\n    private _NowToYearEndTitle: string = '';\n\n    @Required\n    private _FYFCNowToYearEndTitle: string = '';\n\n    @Required\n    private _ANPNowToYearEndTitle: string = '';\n\n    @Required\n    private _PersonalFYFCActualVariableTitle: string = '';\n\n    @Required\n    private _TeamFYFCActualVariableTitle: string = '';\n\n    @Required\n    private _TeamANPActualVariableTitle: string = '';\n\n    @Required\n    private _FYFCActualDashTitle: string = '';\n    \n    constructor() {       \n    }\n\n    public get TeamGoalEffectiveMonthTitle(): string {\n        return this._TeamGoalEffectiveMonthTitle;\n    }\n    public set TeamGoalEffectiveMonthTitle(value: string) {\n        this._TeamGoalEffectiveMonthTitle = value;\n    }\n   \n    public get PersonalGoalEffectiveMonthTitle(): string {\n        return this._PersonalGoalEffectiveMonthTitle;\n    }\n    public set PersonalGoalEffectiveMonthTitle(value: string) {\n        this._PersonalGoalEffectiveMonthTitle = value;\n    }\n   \n    public get NowToYearEndTitle(): string {\n        return this._NowToYearEndTitle;\n    }\n    public set NowToYearEndTitle(value: string) {\n        this._NowToYearEndTitle = value;\n    }\n    \n    public get FYFCNowToYearEndTitle(): string {\n        return this._FYFCNowToYearEndTitle;\n    }\n    public set FYFCNowToYearEndTitle(value: string) {\n        this._FYFCNowToYearEndTitle = value;\n    }\n    \n    public get ANPNowToYearEndTitle(): string {\n        return this._ANPNowToYearEndTitle;\n    }\n    public set ANPNowToYearEndTitle(value: string) {\n        this._ANPNowToYearEndTitle = value;\n    }\n  \n    public get PersonalFYFCActualVariableTitle(): string {\n        return this._PersonalFYFCActualVariableTitle;\n    }\n    public set PersonalFYFCActualVariableTitle(value: string) {\n        this._PersonalFYFCActualVariableTitle = value;\n    }\n    \n    public get TeamFYFCActualVariableTitle(): string {\n        return this._TeamFYFCActualVariableTitle;\n    }\n    public set TeamFYFCActualVariableTitle(value: string) {\n        this._TeamFYFCActualVariableTitle = value;\n    }\n  \n    public get TeamANPActualVariableTitle(): string {\n        return this._TeamANPActualVariableTitle;\n    }\n    public set TeamANPActualVariableTitle(value: string) {\n        this._TeamANPActualVariableTitle = value;\n    }\n    \n    public get FYFCActualDashTitle(): string {\n        return this._FYFCActualDashTitle;\n    }\n    public set FYFCActualDashTitle(value: string) {\n        this._FYFCActualDashTitle = value;\n    }\n}","import { GoalTitleListItem } from \"../../components/goal-ui-title-list/goa-ui-title-list-item\";\nimport { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('CombineStep5AndAgecyPlanData')\nexport class CombineStep5AndAgecyPlanData {\n\n    @Required\n    private _Step5ItemList: Array<GoalTitleListItem> = [];\n\n    @Required\n    private _AgencyPlanItemList: Array<GoalTitleListItem> = [];\n    \n    @Required\n    private _ItemTextIsRedList: Array<boolean> = [];\n\n    constructor(Step5ItemList: Array<GoalTitleListItem>, AgencyPlanItemList: Array<GoalTitleListItem>, ItemTextIsRedList: Array<boolean>) {\n        this._Step5ItemList = Step5ItemList;\n        this._AgencyPlanItemList = AgencyPlanItemList;\n        this._ItemTextIsRedList = ItemTextIsRedList;\n    }\n\n    public get Step5ItemList() {\n        return this._Step5ItemList;\n    }\n\n    public get AgencyPlanItemList() {\n        return this._AgencyPlanItemList;\n    }\n\n    public get ItemTextIsRedList() {\n        return this._ItemTextIsRedList;\n    }\n\n\n}","import { ActivityValue } from \"./ActivityValue\";\nimport { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('GoalSettingStep3ForTabChange')\nexport class GoalSettingStep3ForTabChange {\n\n    @Required\n    private _ActivityValue: ActivityValue = null;\n\n    @Required\n    private _Unit: string = '';\n    \n    constructor(ActivityValue: ActivityValue, Unit: string) {\n        this._ActivityValue = ActivityValue;\n        this._Unit = Unit;\n    }\n\n    public get ActivityValue() {\n        return this._ActivityValue;\n    }\n\n    public get Unit() {\n        return this._Unit;\n    }\n}","import { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('ValidError')\nexport class ValidError{\n\n    @Required\n    private _Step: number;\n\n    @Required\n    private _ColId: string;\n\n    @Required\n    private _Msg: string;\n\n    constructor(Step: number, ColId: string, Msg:string){\n        this._Step = Step;\n        this._ColId = ColId;\n        this._Msg = Msg;\n    }\n\n    public get Step(): number {\n        return this._Step;\n    }\n    public get ColId(): string {\n        return this._ColId;\n    }\n    public get Msg(): string {\n        return this._Msg;\n    }\n\n}","import { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('ApproveInfo')\nexport class ApproveInfo{\n\n    @Required\n    private _DataYear: number;\n\n    @Required\n    private _AgentID: string;\n\n    @Required\n    private _IsApprove: boolean;\n    \n    @Required\n    private _Comment: string;\n\n\n    constructor(DataYear:number, AgentID: string, IsApprove:boolean, Comment:string){\n        this._DataYear = DataYear;\n        this._AgentID = AgentID;\n        this._IsApprove = IsApprove;\n        this._Comment = Comment;\n    }\n\n    public get Comment(): string {\n        return this._Comment;\n    }\n    public get IsApprove(): boolean {\n        return this._IsApprove;\n    }\n    public get AgentID(): string {\n        return this._AgentID;\n    }\n    public get DataYear(): number {\n        return this._DataYear;\n    }\n\n}","import { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('GoalSettingStepDataParams')\nexport class GoalSettingStepDataParams{\n\n    @Required\n    private _DataYear: number;\n\n    @Required\n    private _isAdjust: boolean;\n\n    constructor(DataYear: number, isAdjust: boolean){\n        this._DataYear = DataYear;\n        this._isAdjust = isAdjust;\n    }\n\n    public get DataYear(): number {\n        return this._DataYear;\n    }\n    public set DataYear(value: number) {\n        this._DataYear = value;\n    }\n    public get isAdjust(): boolean {\n        return this._isAdjust;\n    }\n    public set isAdjust(value: boolean) {\n        this._isAdjust = value;\n    }\n\n\n}","import { Bean, Required } from \"@allianzSND/core\";\n\nexport enum AGENCY_STATE {\n    DISPLAY = 'display',\n    ACCEPT = 'accept',\n    REJECT = 'reject',\n    FIRST = 'first'\n}\n\n@Bean('AgencyPlanStatus')\nexport class AgencyPlanStatus {\n\n    @Required\n    private _state: AGENCY_STATE;\n\n    @Required\n    private _agentID: string;\n\n    constructor(state, agentID) {\n        this.state = state;\n        this.agentID = agentID;\n    }\n\n   \n    public get state(): AGENCY_STATE {\n        return this._state;\n    }\n    public set state(value: AGENCY_STATE) {\n        this._state = value;\n    }\n    \n    public get agentID(): string {\n        return this._agentID;\n    }\n    public set agentID(value: string) {\n        this._agentID = value;\n    }\n}","import { AgencyPlanMainData } from \"./AgencyPlanMainData\";\nimport { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('AgencyPlanMainInfo')\nexport class AgencyPlanMainInfo {\n\n    @Required\n    private _CompletionRate: string;\n    \n    @Required\n    private _AgencyMainDataList: Array<AgencyPlanMainData>;\n\n    constructor(){\n\n    }\n    \n    public get CompletionRate(): string {\n        return this._CompletionRate;\n    }\n    public set CompletionRate(value: string) {\n        this._CompletionRate = value;\n    }\n    public get AgencyMainDataList(): Array<AgencyPlanMainData> {\n        return this._AgencyMainDataList;\n    }\n    public set AgencyMainDataList(value: Array<AgencyPlanMainData>) {\n        this._AgencyMainDataList = value;\n    }\n\n\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { PlanFYFCPopupInfo } from './model/GoalSettingCommon';\nimport { DefaultLoginMgr, NotificationType } from '@allianzSND/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class GoalStoreService {\n\n    constructor(\n        private loginMgr: DefaultLoginMgr\n    ) {\n        this.loginMgr.subscribeLogout().subscribe(() => {\n            //reset to init\n            this.setSyncGoalDatas(null);\n            this.setGoalLandingStatus(GOAL_LANDING_STATUS.FIRST_INIT);\n            this.setSettingYear(null);\n            this.setIsPromo(false);\n            this.setCanSkip(true);\n            this.setPlanFYFCPopupInfo(new PlanFYFCPopupInfo(PLAN_FYFC_POPUP_STATE.CLOSE, null));\n        })\n    }\n\n    private syncGoalDatas: SYNC_STATUS = null;\n    private settingYear: number = null;\n    private isPromo = false;\n    private canSkip = true;\n    private planFYFCPopupInfo: PlanFYFCPopupInfo = new PlanFYFCPopupInfo(PLAN_FYFC_POPUP_STATE.CLOSE, null);\n    private landingStatus: GOAL_LANDING_STATUS = GOAL_LANDING_STATUS.FIRST_INIT;\n    private yearSubject: BehaviorSubject<number> = new BehaviorSubject(this.settingYear);\n    private statusSubject: BehaviorSubject<GOAL_LANDING_STATUS> = new BehaviorSubject(this.landingStatus);\n    private isPromoSubject: BehaviorSubject<boolean> = new BehaviorSubject(this.isPromo);\n    private canSkipSubject: BehaviorSubject<boolean> = new BehaviorSubject(this.canSkip);\n    private planFYFCPopupInfoSubject: BehaviorSubject<PlanFYFCPopupInfo> = new BehaviorSubject(this.planFYFCPopupInfo);\n    private syncGoalDatasSubject: BehaviorSubject<SYNC_STATUS> = new BehaviorSubject(this.syncGoalDatas);\n    private goalPopupResponseSubject: Subject<GoalPopupResponse> = new Subject();\n\n\n    public getSyncGoalDatas(): Observable<SYNC_STATUS> {\n        return this.syncGoalDatasSubject.asObservable();\n    }\n\n    public setSyncGoalDatas(status: SYNC_STATUS): void {\n        this.syncGoalDatas = status;\n        this.syncGoalDatasSubject.next(this.syncGoalDatas);\n    }\n\n    public getGoalLandingStatus(): Observable<GOAL_LANDING_STATUS> {\n        return this.statusSubject.asObservable();\n    }\n\n    public setGoalLandingStatus(status: GOAL_LANDING_STATUS): void {\n        this.landingStatus = status;\n        this.statusSubject.next(this.landingStatus);\n    }\n\n    public getSettingYear(): Observable<number> {\n        return this.yearSubject.asObservable();\n    }\n\n    public setSettingYear(year: number): void {\n        this.settingYear = year;\n        this.yearSubject.next(this.settingYear);\n    }\n\n    public getIsPromo(): Observable<boolean> {\n        return this.isPromoSubject.asObservable();\n    }\n\n    public setIsPromo(val: boolean): void {\n        this.isPromo = val;\n        this.isPromoSubject.next(this.isPromo);\n    }\n\n    public getCanSkip(): Observable<boolean> {\n        return this.canSkipSubject.asObservable();\n    }\n\n    public setCanSkip(val: boolean): void {\n        this.canSkip = val;\n        this.canSkipSubject.next(this.canSkip);\n    }\n\n    public setPopupResp(resp: GoalPopupResponse): void {\n        this.goalPopupResponseSubject.next(resp);\n    }\n\n    public getPopupResp(): Observable<GoalPopupResponse> {\n        return this.goalPopupResponseSubject.asObservable();\n    }\n\n    // for edit personal popup\n\n    public setPlanFYFCPopupInfo(info: PlanFYFCPopupInfo) {\n        console.log(\"Set info\");\n        this.planFYFCPopupInfo = info;\n        if (info.data) {\n            this.planFYFCPopupInfo.data.Step4 = this.planFYFCPopupInfo.data.Step4.clone();\n        }\n        this.planFYFCPopupInfoSubject.next(this.planFYFCPopupInfo);\n    }\n\n    public getPlanFYFCPopupInfo() {\n        return this.planFYFCPopupInfoSubject.asObservable();\n    }\n\n    // end of for edit personal popup\n\n}\n\nexport class GoalPopupResponse {\n    public response: boolean;\n    public type: NotificationType;\n}\n\nexport enum GOAL_LANDING_STATUS {\n    SETTING_SUBMITTED,\n    FIRST_INIT, // from landing\n    FIRST_SET, // from overview and isn't adjsut\n    ADJUST_GOAL // from overview and is adjust\n}\n\nexport enum PLAN_FYFC_POPUP_STATE {\n    DISPLAY,\n    NEEDAPPROVESUBMIT,\n    NOTNEEDAPPROVESUBMIT,\n    CLOSE\n}\n\nexport enum SYNC_STATUS {\n    SYNC,\n    FINISH\n}\n\n\n\n","import { Injectable, Optional, Inject, ErrorHandler } from \"@angular/core\";\nimport { Observable, of, from } from \"rxjs\";\nimport { APIDispatch, APIFactory, pushApproveGoalAPI, StringUtils, getAgencyPlanAPI, getGoalAPI, getActualAPI, getYearConfigAPI, APPError, NumberUtils, DataSyncService, SubmitGoalSettingValue, SubmitGoalInfo, SubmitGoalPlanInfo, GetDeviceInfoAPI, SuccessStatus, YESNO, TIMEBASE, SUBMITGOALTYPE, SubmitGoalPlan, PERFORMANCETYPE, SubmitGoalData, ExtensionData, yearConfigExtensionDataToken, goalSettingExtensionDataToken, ExtensionFactory, pushGoalSettingDataAPI, ProfileCodeService, ProfileCode, Valid } from \"@allianzSND/core\";\nimport { goalSettingStepToken } from '../injectionToken';\nimport { goalSettingStep } from '../interface/goalSettingStep';\nimport { AgencyPlanGetMainAPI } from '../api/AgencyPlanGetMainAPI';\nimport { AgencyPlanGetDetailAPI } from '../api/AgencyPlanGetDetailAPI';\nimport { GoalSettingSetExpectedAPI } from '../api/GoalSettingSetExpectedAPI';\nimport { GoalSettingGetExpectedAPI } from '../api/GoalSettingGetExpectedAPI';\nimport { GoalSettingGetValueAPI } from '../api/GoalSettingGetValue';\nimport { GoalSettingGetActualAPI } from '../api/GoalSettingGetActualAPI';\nimport { GoalSettingGetPlanAPI } from '../api/GoalSettingGetPlanAPI';\nimport { GoalSettingGetYearConfigAPI } from '../api/GoalSettingGetYearConfigAPI'\nimport { GoalSettingStep4 } from './model/GoalSettingStep4';\nimport { GoalStoreService, SYNC_STATUS } from './goal-store.service';\nimport { AgencyPlanDetail } from './model/AgencyPlanDetail';\nimport { AgencyPlanGoalExpected } from './model/AgencyPlanGoalExpected';\nimport { AgencyPlanMainData } from './model/AgencyPlanMainData';\nimport { AgencyPlanDataForOverview } from './model/AgencyPlanDataForOverview';\nimport { GoalSettingYearConfig } from './model/GoalSettingYearConfig';\nimport { GoalSettingStep2 } from './model/GoalSettingStep2';\nimport { MonthlyPlanFYFCData } from './model/MonthlyPlanFYFCData';\nimport { GoalSettingStepData } from './model/GoalSettingStepData';\nimport { GoalSettingStep5 } from './model/GoalSettingStep5';\nimport { GoalSettingStep3 } from './model/GoalSettingStep3';\nimport { GoalSettingStep1 } from './model/GoalSettingStep1';\nimport { GoalSettingGoalStatus } from './model/GoalSettingGoalStatus';\nimport { IsApproveInfo } from './model/IsApproveInfo';\nimport { ActivityValue } from './model/ActivityValue';\nimport { ValidError } from './model/VaildError';\nimport { ApproveInfo } from './model/ApproveInfo';\nimport { GetOtherParameterAPI } from \"@allianzSND/core\";\nimport { AgencyPlanMainInfo } from \"./model/AgencyPlanMainInfo\";\n\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class GoalSettingService {\n  private TextConvertStep1Map = new Map<string, string>();\n  private TextConvertStep2Map = new Map<string, string>();\n  private TextConvertStep5Map = new Map<string, string>();\n  private StepTextConvertMap = new Map<string, Map<string, string>>();\n\n  private ColMapToProfile: Map<string, string> = new Map<string, string>();\n  private ColMapToProfileCodeMap: Map<string, Array<ProfileCode>> = new Map<string, Array<ProfileCode>>();\n\n  public readonly DASH = '--';\n\n  constructor(\n    private dispatcher: APIDispatch,\n    private APIFactory: APIFactory,\n    private goalStore: GoalStoreService,\n    private errorHandler: ErrorHandler,\n    @Optional()\n    @Inject(goalSettingStepToken)\n    private goalSettingStep: goalSettingStep,\n    @Optional()\n    @Inject(yearConfigExtensionDataToken)\n    private yearConfigExtension: ExtensionFactory,\n    @Optional()\n    @Inject(goalSettingExtensionDataToken)\n    private goalSettingExtension: ExtensionFactory,\n    private dataSyncService: DataSyncService,\n    private profileCodeService: ProfileCodeService\n  ) {\n    this.TextConvertStep1Map.set(\"FYFC\", \"PERSON_FYFC\");\n    // this.TextConvertStep1Map.set(\"ANP\", \"PERSON_ANP\");\n    this.TextConvertStep1Map.set(\"AnnualConvention\", \"ANNUAL_CONVENTION\");\n    this.TextConvertStep1Map.set(\"MDRT\", \"MDRT\");\n    this.TextConvertStep1Map.set(\"PromotionPlan\", \"PROMOTION_PLAN\");\n    this.TextConvertStep1Map.set(\"ActivityFYFC\", \"ACTIVITY_FYFC\");\n    this.TextConvertStep1Map.set(\"ActivityDays\", \"ACTIVITY_DAYS\");\n    this.TextConvertStep2Map.set(\"PerCase\", \"PER_CASE_FYFC\");\n    this.TextConvertStep5Map.set(\"TeamFYFC\", \"TEAM_FYFC\");\n    this.TextConvertStep5Map.set(\"TeamANP\", \"TEAM_ANP\");\n    this.TextConvertStep5Map.set(\"Manpower\", \"TEAM_MANPOWER\");\n    this.TextConvertStep5Map.set(\"Recruitment\", \"TEAM_RECRUITMENT\");\n    this.StepTextConvertMap.set(\"Step1\", this.TextConvertStep1Map);\n    this.StepTextConvertMap.set(\"Step2\", this.TextConvertStep2Map);\n    this.StepTextConvertMap.set(\"Step5\", this.TextConvertStep5Map);\n\n    this.ColMapToProfile.set(\"AnnualConvention\", \"GoalSetting_AnnualConvention\");\n    this.ColMapToProfile.set(\"MDRT\", \"GoalSetting_MDRT\");\n    this.ColMapToProfile.set(\"PromotionPlan\", \"Promotion_Plan\");\n    this.ColMapToProfile.forEach((code, col) => {\n      this.ColMapToProfileCodeMap.set(col, this.profileCodeService.getCodeArray(code));\n    });\n  }\n\n  //-----------\n\n  //#region  goalStepDatas\n\n  // GoalSettingService\n  @Valid('GoalSettingStepData')\n  public getGoalSettingStep1_5Data(year: number, isAdjust: boolean): Observable<GoalSettingStepData> {\n    return from(this._getGoalSettingStep1_5Data(year, isAdjust));\n  }\n\n  private async _getGoalSettingStep1_5Data(year: number, isAdjust: boolean): Promise<GoalSettingStepData> {\n    console.log('into _getGoalSettingStep1_5Data year:', year, 'isAdjust', isAdjust);\n\n    let returnData: GoalSettingStepData = new GoalSettingStepData(year);\n    try {\n      let yearConfigResp: any;\n      let goalSettingResp: any;\n      let goalSettingValueResp: any;\n      let actualResp: any;\n\n      let yearConfig = this.APIFactory.getAPI(\"getGoalSettingYearConfig\");\n      let goalSetting = this.APIFactory.getAPI(\"getGoalSettingGoalSetting\");\n      let goalSettingValue = this.APIFactory.getAPI(\"getGoalSettingValue\");\n      let actual = this.APIFactory.getAPI(\"getGoalSettingActualValue\");\n\n      (<GoalSettingGetValueAPI>goalSettingValue).setDataYear(year);\n      (<GoalSettingGetActualAPI>actual).setDataYear(year);\n\n      [yearConfigResp, goalSettingResp, goalSettingValueResp, actualResp] = await Promise.all([\n        this.dispatcher.dispatch(yearConfig).toPromise(),\n        this.dispatcher.dispatch(goalSetting).toPromise(),\n        this.dispatcher.dispatch(goalSettingValue).toPromise(),\n        this.dispatcher.dispatch(actual).toPromise()\n      ]);\n      console.log(\"yearConfigResp\", yearConfigResp);\n      console.log(\"goalSettingResp\", goalSettingResp);\n      console.log(\"goalSettingValueResp\", goalSettingValueResp);\n      console.log(\"actualResp\", actualResp);\n      //call GetYearConfigAPI\n\n\n      if (yearConfigResp.Header[\"status\"]\n        && goalSettingResp.Header[\"status\"]\n        && goalSettingValueResp.Header[\"status\"]\n        && actualResp.Header[\"status\"]) {\n\n        let yearConfigMap = this.yearJsonToMap(yearConfigResp[\"Body\"]);\n        let goalSettingMap = this.yearJsonToMap(goalSettingResp[\"Body\"]);\n\n        let yearConfigObj = yearConfigMap.get(year);\n        let goalSettingObj = goalSettingMap.get(year);\n        console.log(\"yearConfigObj\", yearConfigObj);\n        console.log(\"goalSettingObj\", goalSettingObj);\n\n        if (yearConfigObj != undefined && goalSettingObj != undefined) {\n\n          // call GetGoalSettingValue\n          let goalSettingValueObj: any = {};\n          goalSettingValueResp[\"Body\"].forEach(data => {\n            goalSettingValueObj[data.DataType] = data.Value;\n          });\n          console.log(\"goalSettingValueObj\", goalSettingValueObj);\n\n          // call GetActualValue\n          let teamFYFCActual = -1;\n          let teamANPActual = -1;\n          let allYearActual = -1;\n          let monthOfYear = yearConfigObj.MonthQuantityOfYear;\n          let actuallist: Array<string> = Array(monthOfYear).fill(this.DASH, 0);\n\n          let actualBody = actualResp[\"Body\"];\n          let FYFCActuals = actualBody.filter(x => x.DataYear == year && x.PerformanceType == PERFORMANCETYPE.PERSONAL && x.DataType == \"FYFC\");\n          if (FYFCActuals.length > 0) {\n            allYearActual = 0;\n            FYFCActuals.forEach(x => {\n              if (x.Month <= yearConfigObj.PerformanceSettlementMonth) {\n                actuallist[x.Month - 1] = x.Value;\n                allYearActual += x.Value;\n              }\n            });\n          }\n\n          let TeamFYFCActuals = actualBody.filter(x => x.DataYear == year && x.PerformanceType == PERFORMANCETYPE.TEAM && x.DataType == \"FYFC\");\n          if (TeamFYFCActuals.length) {\n            teamFYFCActual = 0;\n            teamANPActual = 0;\n            TeamFYFCActuals.forEach(x => {\n              teamFYFCActual += (x.Month <= yearConfigObj.PerformanceSettlementMonth) ? x.Value : 0;\n            });\n            teamANPActual = this.numberToFix(teamFYFCActual * yearConfigObj.FyfcCovertAnpRate, 0);\n          }\n          console.log(\"actuallist\", actuallist);\n\n          let YearConfig: GoalSettingYearConfig = new GoalSettingYearConfig();\n          let GoalStatus: GoalSettingGoalStatus = new GoalSettingGoalStatus();\n          let Step1: GoalSettingStep1 = new GoalSettingStep1();\n          let Step2: GoalSettingStep2 = new GoalSettingStep2();\n          let Step3: GoalSettingStep3 = new GoalSettingStep3();\n          let Step4: GoalSettingStep4 = new GoalSettingStep4();\n          let Step5: GoalSettingStep5 = new GoalSettingStep5();\n\n          YearConfig.DataYear = yearConfigObj.DataYear;\n          YearConfig.IsCurrent = yearConfigObj.IsCurrent;\n          YearConfig.QuarterStartMonth = yearConfigObj.QuarterStartMonth;\n          YearConfig.QuarterEndMonth = yearConfigObj.QuarterEndMonth;\n          YearConfig.GoalSettingActivityProcMode = yearConfigObj.GoalSettingActivityProcMode;\n          YearConfig.GoalAndPlanDifferenceLimit = yearConfigObj.GoalAndPlanDifferenceLimit;\n          YearConfig.FyfcCovertAnpRate = yearConfigObj.FyfcCovertAnpRate;\n          YearConfig.InforceConvertSubmitRate = yearConfigObj.InforceConvertSubmitRate;\n          YearConfig.InforceConvertMeetRate = yearConfigObj.InforceConvertMeetRate;\n          YearConfig.InforceConvertScheduleRate = yearConfigObj.InforceConvertScheduleRate;\n          YearConfig.InforceConvertFindRate = yearConfigObj.InforceConvertFindRate;\n          YearConfig.NowToYearEndDays = yearConfigObj.NowToYearEndDays;\n          YearConfig.PerformanceSettlementMonth = yearConfigObj.PerformanceSettlementMonth;\n          YearConfig.MonthQuantityOfYear = yearConfigObj.MonthQuantityOfYear;\n          YearConfig.WorkingMonth = yearConfigObj.WorkingMonth;\n          if (this.yearConfigExtension) {\n            let yearConfigExtData: ExtensionData = this.yearConfigExtension.getExtensionData(yearConfigObj, { source: \"SQL\" });\n            YearConfig.setExtension(yearConfigExtData);\n          }\n\n          GoalStatus.DataYear = year;\n          GoalStatus.PersonnelGoalApplicableYM = goalSettingObj.PersonnelGoalApplicableYM;\n          GoalStatus.TeamGoalApplicableYM = goalSettingObj.TeamGoalApplicableYM;\n          GoalStatus.GoalSetMonth = goalSettingObj.GoalSetMonth;\n          GoalStatus.ApproveStatus = goalSettingObj.ApproveStatus;\n          GoalStatus.IsFirstTime = goalSettingObj.IsFirstTime == \"Y\";\n          GoalStatus.IsNeedSetting = goalSettingObj.IsNeedSetting == \"Y\";\n          GoalStatus.SupervisorComment = goalSettingObj.SupervisorComment;\n          if (this.goalSettingExtension) {\n            let goalSettingExtData: ExtensionData = this.goalSettingExtension.getExtensionData(goalSettingObj, { source: \"SQL\" });\n            GoalStatus.setExtension(goalSettingExtData);\n          }\n\n          Step1.FYFC = goalSettingValueObj.PERSON_FYFC;\n          Step1.AnnualConvention = goalSettingValueObj.ANNUAL_CONVENTION;\n          Step1.MDRT = goalSettingValueObj.MDRT;\n          Step1.PromotionPlan = goalSettingValueObj.PROMOTION_PLAN;\n          Step1.Actual = this.changeToDash(allYearActual);\n          Step1.FYFCNowToYearEnd = this.calculateNowToYearEndGoal(goalSettingValueObj.PERSON_FYFC, Step1.Actual);\n          Step1.ActivityFYFC = goalSettingValueObj.ACTIVITY_FYFC;\n          Step1.ActivityDays = goalSettingValueObj.ACTIVITY_DAYS;\n\n          Step2.PerCase = goalSettingValueObj.PER_CASE_FYFC;\n\n          let ActivityFYFC = isAdjust ? Step1.FYFCNowToYearEnd : Step1.FYFC;\n          Step3 = this.calculateActivityData(ActivityFYFC, Step2.PerCase, YearConfig);\n\n          if (isAdjust) {\n            Step4 = await this._getMonthActualPlanBySQL(PERFORMANCETYPE.PERSONAL, year, YearConfig.MonthQuantityOfYear, YearConfig.PerformanceSettlementMonth);\n            Step4.Shortfall = this.calculateShortfall(Step1.FYFC, Step4.Forecast);\n          } else {\n            Step4 = this.calculateMonthActualPlan(YearConfig, Step1.FYFC, actuallist);\n            Step4.Shortfall = this.calculateShortfall(Step1.FYFC, Step4.Forecast);\n          }\n\n          Step5.TeamFYFC = goalSettingValueObj.TEAM_FYFC;\n          Step5.TeamANP = goalSettingValueObj.TEAM_ANP;\n          Step5.Manpower = goalSettingValueObj.TEAM_MANPOWER;\n          Step5.Recruitment = goalSettingValueObj.TEAM_RECRUITMENT;\n          Step5.TeamFYFCActual = this.changeToDash(teamFYFCActual);\n          Step5.TeamANPActual = this.changeToDash(teamANPActual);\n          Step5.TeamFYFCNowToYearEnd = this.calculateNowToYearEndGoal(goalSettingValueObj.TEAM_FYFC, Step5.TeamFYFCActual);\n          Step5.TeamANPNowToYearEnd = this.calculateANPFromFYFC(Step5.TeamFYFCNowToYearEnd, YearConfig.FyfcCovertAnpRate);\n\n          returnData.YearConfig = YearConfig;\n          returnData.GoalStatus = GoalStatus;\n          returnData.Step1 = Step1;\n          returnData.Step2 = Step2;\n          returnData.Step3 = Step3;\n          returnData.Step4 = Step4;\n          returnData.Step5 = Step5;\n          returnData.ActualList = actuallist;\n        }\n      }\n\n    } catch (error) {\n      this.errorHandler.handleError(new APPError('F00400', 'getGoalSettingStep1_5Data fail!' + error.message));\n    }\n\n    console.log(\"getGoalSettingStep1_5Data returnData\", returnData);\n    return returnData;\n  }\n\n  @Valid('GoalSettingStep3')\n  public calculateActivityData(goal: string, perCase: string, yearConfig: GoalSettingYearConfig, activityDays: string = ''): GoalSettingStep3 {\n    console.log(\"calculateActivityData:\", goal, perCase, yearConfig, activityDays);\n\n    let returnObj: GoalSettingStep3 = new GoalSettingStep3();\n    let activityValues: Array<ActivityValue> = [];\n    try {\n\n      let numGoal = Number(goal);\n      let numPerCase = Number(perCase)\n      if (NumberUtils.isNumber(goal) && NumberUtils.isNumber(perCase) && numPerCase > 0) {\n        console.warn(\"calculateActivityData on service: \", goal, perCase, yearConfig);\n        let days: number = (StringUtils.isEmpty(activityDays)) ? Number(yearConfig.NowToYearEndDays) : Number(activityDays);\n\n        let daysInweek: number = 7;\n        let daysInMonth: number = 365 / Number(yearConfig.MonthQuantityOfYear);\n\n        let dayInforce: number = numGoal / numPerCase / days;\n        let weekInforce: number = dayInforce * daysInweek;\n        let monthInforce: number = dayInforce * daysInMonth;\n        dayInforce = dayInforce;\n\n        let tabs = [{ name: TIMEBASE.DAY, inforce: dayInforce }, { name: TIMEBASE.WEEK, inforce: weekInforce }, { name: TIMEBASE.MONTH, inforce: monthInforce }];\n\n        if (this.goalSettingStep) {\n          activityValues = this.goalSettingStep.calculateOtherRuleActivityInforce(tabs, yearConfig);\n        }\n\n        let activity: TIMEBASE = activityValues[0].TimeBase;\n\n        returnObj.Activity = activity;\n        returnObj.ActivityValues = activityValues;\n\n      } else {\n        let tabNum = [TIMEBASE.DAY, TIMEBASE.WEEK, TIMEBASE.MONTH];\n        returnObj.Activity = TIMEBASE.DAY;\n        tabNum.forEach(time => {\n          let activity: ActivityValue = new ActivityValue(time, this.DASH, this.DASH, this.DASH, this.DASH, this.DASH);\n          activityValues.push(activity);\n        });\n        returnObj.ActivityValues = activityValues;\n      }\n    } catch (error) {\n      this.errorHandler.handleError(new APPError('F00401', 'calculateActivityData fail!' + error.message));\n    }\n\n    console.log(\"calculateActivityData return obj: \", JSON.stringify(returnObj));\n    return returnObj;\n  }\n\n  // step 4 function\n  @Valid('GoalSettingStep4')\n  public calculateMonthActualPlan(yearConfig: GoalSettingYearConfig, goal: string, actualList: Array<string>): GoalSettingStep4 {\n\n    //actualList example : [100,100,200,0,100,1]\n    console.log(\"calculateMonthActualPlan goal:\", goal);\n    let Step4Datas: GoalSettingStep4 = new GoalSettingStep4();\n    let MonthActualPlanList: Array<MonthlyPlanFYFCData> = [];\n    try {\n      if (NumberUtils.isNumber(goal)) {\n        if (this.goalSettingStep) {\n          MonthActualPlanList = this.goalSettingStep.calculateMonthActualPlan(yearConfig, Number(goal), actualList);\n        }\n        let forecast = this.calculateForecast(yearConfig.PerformanceSettlementMonth, MonthActualPlanList);\n        let shortfall = this.calculateShortfall(goal, forecast);\n        let actual = this.calulateSumByArray(actualList);\n        Step4Datas.MonthList = MonthActualPlanList;\n        Step4Datas.Forecast = forecast;\n        Step4Datas.Shortfall = shortfall;\n        Step4Datas.Actual = actual;\n      } else {\n        //å¨é¨é½dash\n        for (let i = 0; i < yearConfig.MonthQuantityOfYear; i++) {\n          let data: MonthlyPlanFYFCData = new MonthlyPlanFYFCData(i, this.DASH, this.DASH);\n          MonthActualPlanList.push(data);\n        }\n        Step4Datas.Actual = this.DASH;\n        Step4Datas.Forecast = this.DASH;\n        Step4Datas.Shortfall = this.DASH;\n        Step4Datas.MonthList = MonthActualPlanList;\n      }\n    } catch (error) {\n      this.errorHandler.handleError(new APPError('F00402', 'calculateMonthActualPlan fail!' + error.message));\n    }\n\n    console.log(\"calculateMonthActualPlan:\", MonthActualPlanList);\n\n    return Step4Datas;\n\n  }\n  public calculateActual(PerformanceSettlementMonth: number, MonthActualPlanList: Array<MonthlyPlanFYFCData>): string {\n    if (PerformanceSettlementMonth > 0) {\n      return MonthActualPlanList.map(x => (Number(x.Actual) < 0 || x.Actual == this.DASH || x.Month > PerformanceSettlementMonth) ? 0 : Number(x.Actual)).reduce((pre, cur) => pre + Number(cur), 0).toString();\n    } else {\n      return this.DASH;\n    }\n  }\n  public calculateForecast(PerformanceSettlementMonth: number, MonthActualPlanList: Array<MonthlyPlanFYFCData>): string {\n    return this.calulateSumByArray(this.getActualPlanFromMonthList(MonthActualPlanList, PerformanceSettlementMonth));\n  }\n\n  public calulateSumByArray(monthList: Array<any>): string {\n    let isDash = true;\n    monthList.forEach(data => {\n      if (data != this.DASH) {\n        isDash = false;\n      }\n    });\n    let returnNum = this.DASH;\n    if (!isDash) {\n      returnNum = monthList.map(x => (Number(x) < 0 || x == this.DASH || StringUtils.isEmpty(x)) ? 0 : x).reduce((pre, cur) => pre + Number(cur), 0).toString();\n    }\n    return returnNum;\n  }\n\n  public calculateShortfall(goal, forecast): string {\n    let result = this.DASH;\n    if (NumberUtils.isNumber(goal) && NumberUtils.isNumber(forecast)) {\n      if (this.goalSettingStep) {\n        result = this.goalSettingStep.getShortfall(goal, forecast).toString();\n      } else {\n        let tempresult = (Number(goal) - Number(forecast));\n        result = (tempresult < 0) ? \"0\" : tempresult.toString();\n      }\n    }\n    return result;\n  }\n\n  //#endregion  goalStepDatas\n\n\n  //#region Submit & Approve function\n  @Valid('IsApproveInfo')\n  public isNeedApprove(SubmitType: SUBMITGOALTYPE, DataYear: number, adjustDatas: GoalSettingStepData): Observable<IsApproveInfo> {\n    return from(this._isNeedApprove(SubmitType, DataYear, adjustDatas));\n  }\n\n  private async _isNeedApprove(SubmitType: SUBMITGOALTYPE, DataYear: number, adjustDatas: GoalSettingStepData): Promise<IsApproveInfo> {\n    console.log(\"_isNeedApprove adjustDatas\", adjustDatas, SubmitType, DataYear);\n\n    let isApproveInfo: IsApproveInfo;\n    try {\n      if (this.goalSettingStep) {\n        //taiwan\n        let originDatas: GoalSettingStepData = await this._getGoalSettingStep1_5Data(DataYear, true);\n        isApproveInfo = this.goalSettingStep.isNeedApprove(adjustDatas, originDatas);\n      } else {\n        isApproveInfo = new IsApproveInfo(true, false);\n      }\n\n    } catch (error) {\n      this.errorHandler.handleError(new APPError('F00403', 'isNeedApprove fail!' + error.message));\n    }\n\n    console.log(\"isNeedApprove\", isApproveInfo);\n    return isApproveInfo;\n  }\n\n  @Valid('IsApproveInfo')\n  public isNeedApprove_plan(FYFC: string, Forecast: string, GoalAndPlanDifferenceLimit: number): Observable<IsApproveInfo> {\n    console.log('isNeedApprove_plan FYFC', FYFC, 'Forecast', Forecast, 'GoalAndPlanDifferenceLimit', GoalAndPlanDifferenceLimit)\n\n    let isApproveInfo: IsApproveInfo;\n\n    try {\n      if (this.goalSettingStep) {\n        isApproveInfo = this.goalSettingStep.isNeedApprove_plan(Number(FYFC), Number(Forecast), GoalAndPlanDifferenceLimit);\n      } else {\n        isApproveInfo = new IsApproveInfo(true, false);\n      }\n    } catch (error) {\n      this.errorHandler.handleError(new APPError('F00404', 'isNeedApprove_plan fail!' + error.message));\n    }\n\n    console.log(\"isNeedApprove_plan isApproveInfo:\", isApproveInfo);\n    return of(isApproveInfo);\n  }\n\n  @Valid('SuccessStatus')\n  public submitGoal(submitType: SUBMITGOALTYPE, IsNeedApprove: boolean, submitData: GoalSettingStepData): Observable<SuccessStatus> {\n    return from(this._submitGoal(submitType, IsNeedApprove, submitData));\n  }\n\n  private async _submitGoal(submitType: SUBMITGOALTYPE, IsNeedApprove: boolean, submitData: GoalSettingStepData): Promise<SuccessStatus> {\n    console.log(\"[_submitGoal] submitData\", submitData);\n\n    let Activity: TIMEBASE;\n    let GoalSettingValue: Array<SubmitGoalSettingValue> = [];\n    let GoalPlan: SubmitGoalPlan = new SubmitGoalPlan();\n    let SubmitInfo: SubmitGoalInfo = new SubmitGoalInfo();\n    let SubmitDatas: SubmitGoalData;\n    let returnResp: SuccessStatus = new SuccessStatus(false);\n    try {\n      if (submitType == SUBMITGOALTYPE.ALL) {\n        let GoalSettingType = [\"Step1\", \"Step2\", \"Step5\"];\n\n        GoalSettingType.forEach(step => {\n          let stepMap = this.StepTextConvertMap.get(step);\n          stepMap.forEach((val, key) => {\n            if (submitData[step][key]) {\n              GoalSettingValue.push(new SubmitGoalSettingValue(val, submitData[step][key], []));\n            }\n          });\n        });\n        Activity = submitData.Step3.Activity;\n      }\n\n      console.log(\"GoalSettingValue\", GoalSettingValue);\n      GoalPlan.TimeBase = TIMEBASE.MONTH;\n      GoalPlan.Values = submitData.Step4.MonthList.filter(x => x.Plan != this.DASH).map(x => {\n        return new SubmitGoalPlanInfo(PERFORMANCETYPE.PERSONAL, x.Month, Number(x.Plan), []);\n      });\n      console.log(\"GoalPlan\", GoalPlan);\n\n      SubmitInfo.DataYear = submitData.DataYear;\n      SubmitInfo.SubmitType = submitType;\n      SubmitInfo.ActivityGoalBase = Activity;\n      SubmitInfo.IsNeedApprove = IsNeedApprove ? YESNO.YES : YESNO.NO;\n      SubmitInfo.Extensions = [];\n\n      console.log(\"SubmitInfo\", SubmitInfo);\n\n      SubmitDatas = new SubmitGoalData(SubmitInfo, GoalSettingValue, GoalPlan);\n      let Resp = await this._pushGoalSetting(SubmitDatas);\n      if (Resp.isSuccess) {\n        await this.syncGoalDatas();\n        returnResp.isSuccess = true;\n      } else {\n        throw \"submit goal fail! \";\n      }\n\n    } catch (error) {\n      this.errorHandler.handleError(new APPError('F00405', 'submitGoal fail!' + error.message));\n      returnResp.isSuccess = false;\n    }\n\n    console.log(\"_submitGoal resp2\", returnResp);\n\n    return returnResp;\n  }\n\n  //#endregion Submit & Approve\n\n  //#region LANDING status\n  public getIsFirstUse(): Observable<boolean> {\n    // get DeviceInfo table\n\n    return Observable.create(observer => {\n      let DeviceInfo = this.APIFactory.getAPI(\"getDeviceInfo\");\n      (<GetDeviceInfoAPI>DeviceInfo).setDataType(\"FirstUseAPP\");\n      try {\n        this.dispatcher.dispatch(DeviceInfo).toPromise().then(Datas => {\n          console.log(\"getIsFirstUse\", Datas[\"Body\"][0].CategoryVal == \"Y\" ? true : false)\n          observer.next(Datas[\"Body\"][0].CategoryVal == \"Y\" ? true : false);\n          observer.complete();\n        });\n      } catch (error) {\n        this.errorHandler.handleError(new APPError('F00408', 'getIsFirstUse fail!' + error.message));\n      }\n    });\n  }\n\n\n  // @Valid('GoalSettingGoalStatus')\n  public getSettingStatus(): Observable<Array<GoalSettingGoalStatus>> {\n    return from(this._getSettingStatus());\n  }\n\n  private async _getSettingStatus(): Promise<Array<GoalSettingGoalStatus>> {\n    let GoalSettingResp: any;\n    let yearConfigResp: any;\n    let returnDatas: Array<GoalSettingGoalStatus> = [];\n\n    try {\n\n      let goalSetting = this.APIFactory.getAPI(\"getGoalSettingGoalSetting\");\n      let yearConfig = this.APIFactory.getAPI(\"getGoalSettingYearConfig\");\n\n      [GoalSettingResp, yearConfigResp] = await Promise.all([\n        this.dispatcher.dispatch(goalSetting).toPromise(),\n        this.dispatcher.dispatch(yearConfig).toPromise()\n      ]);\n\n      //getGoalSetting\n      let goalSettingMap = new Map<number, any>();\n      let yearConfigMap = new Map<number, any>();\n      if (GoalSettingResp.Header[\"status\"] && yearConfigResp.Header[\"status\"]) {\n        goalSettingMap = this.yearJsonToMap(GoalSettingResp[\"Body\"]);\n        yearConfigMap = this.yearJsonToMap(yearConfigResp[\"Body\"]);\n\n        returnDatas = [];\n        goalSettingMap.forEach((data, key) => {\n          let goalStatus = new GoalSettingGoalStatus();\n          goalStatus.DataYear = key;\n          goalStatus.IsCurrent = yearConfigMap.get(key).IsCurrent;\n          goalStatus.IsNeedSetting = data.IsNeedSetting == YESNO.YES;\n          goalStatus.IsFirstTime = data.IsFirstTime == YESNO.YES;\n          goalStatus.ApproveStatus = data.ApproveStatus;\n          goalStatus.RemainingDays = data.Remainingdays;\n          returnDatas.push(goalStatus);\n        });\n      }\n    } catch (error) {\n      this.errorHandler.handleError(new APPError('F00409', 'getSettingStatus fail!' + error.message));\n    }\n\n    console.log(\"getSettingStatus returnDatas\", returnDatas);\n    return returnDatas;\n  }\n\n  private yearJsonToMap(yearJson): Map<number, any> {\n    console.log(\"yearJson\", yearJson);\n    let map = new Map<number, any>();\n    if (yearJson != null) {\n      yearJson.forEach(data => {\n        if (data.DataYear != undefined) {\n          map.set(data.DataYear, data);\n        }\n      });\n    }\n    return map;\n  }\n\n  //#endregion LANDING status\n\n\n  //#region GoalSetting overview\n  @Valid('GoalSettingStepData')\n  public getOverviewData(performanceType: PERFORMANCETYPE, DataYear: number = -1, AgentID: string = \"\"): Observable<GoalSettingStepData> {\n    if (StringUtils.isEmpty(AgentID)) {\n      return from(this._getOverviewDataBySQL(performanceType, DataYear));\n    } else {\n      return from(this._getOverviewDataByRestful(performanceType, DataYear, AgentID));\n    }\n  }\n\n  private async _getOverviewDataBySQL(performanceType: PERFORMANCETYPE, year: number = -1) {\n\n    let goalStepDatas: GoalSettingStepData = new GoalSettingStepData(year);\n    try {\n      goalStepDatas = await this._getGoalSettingStep1_5Data(year, true);\n      console.log(\"_getOverviewDataBySQL goalStepDatas\", JSON.stringify(goalStepDatas));\n      if (goalStepDatas != null) {\n        let actualPlanData = await this._getMonthActualPlanBySQL(performanceType, year, goalStepDatas[\"YearConfig\"][\"MonthQuantityOfYear\"], goalStepDatas[\"YearConfig\"][\"PerformanceSettlementMonth\"]);\n        if (actualPlanData != null) {\n          goalStepDatas.Step4 = actualPlanData;\n          goalStepDatas.Step4.Shortfall = this.calculateShortfall(goalStepDatas.Step1.FYFC, goalStepDatas.Step4.Forecast).toString();\n        } else {\n          throw \"get MonthActualPlan data fail.\";\n        }\n        let agencyPlanObj: AgencyPlanDataForOverview = new AgencyPlanDataForOverview();\n        if (performanceType == PERFORMANCETYPE.PERSONAL) {\n          let perCase: string = goalStepDatas.Step2.PerCase ? goalStepDatas.Step2.PerCase : '1';\n          let activityGoal: string = goalStepDatas.Step1.ActivityFYFC ? goalStepDatas.Step1.ActivityFYFC : goalStepDatas.Step1.FYFC;\n          let activityDays: string = goalStepDatas.Step1.ActivityDays ? goalStepDatas.Step1.ActivityDays : goalStepDatas.YearConfig.NowToYearEndDays.toString();\n          goalStepDatas.Step3 = this.calculateActivityData(activityGoal, perCase, goalStepDatas.YearConfig, activityDays);\n        } else if (performanceType == PERFORMANCETYPE.TEAM) {\n          let agencyPlanMainInfo: AgencyPlanMainInfo = await this.getAgencyPlanMainData(year).toPromise();\n\n          if (agencyPlanMainInfo && agencyPlanMainInfo.AgencyMainDataList.length) {\n            let agencyPlanMainList = agencyPlanMainInfo.AgencyMainDataList;\n            console.warn(\"agencyPlanMainList: \", JSON.stringify(agencyPlanMainList));\n            console.log(agencyPlanMainList.filter(x => x.DataType == \"FYFC\")[0].Forecast);\n\n            console.log(\"agencyPlanObj\", agencyPlanObj);\n            agencyPlanObj.FYFCForecast = agencyPlanMainList.filter(x => x.DataType == \"FYFC\")[0].Forecast;\n            agencyPlanObj.ANPForecast = agencyPlanMainList.filter(x => x.DataType == \"ANP\")[0].Forecast;\n            agencyPlanObj.ManpowerPlan = this.changeToDash(agencyPlanMainList.filter(x => x.DataType == \"Manpower\")[0].MonthPlan);\n            agencyPlanObj.RecruitmentPlan = agencyPlanMainList.filter(x => x.DataType == \"Recruitment\")[0].MonthPlan;\n            agencyPlanObj.CompletionRate = agencyPlanMainInfo.CompletionRate;\n          } else {\n            throw \"get agencyPlan data fail.\";\n          }\n          goalStepDatas.AgencyPlan = agencyPlanObj;\n        }\n      } else {\n        throw \"get 1_5Data Fail. goalStepDatas:\" + goalStepDatas\n      }\n\n      goalStepDatas = this._converSelectCode(goalStepDatas);\n      if (this.goalSettingStep) {\n        goalStepDatas = this.goalSettingStep.changeEmptyToDash(goalStepDatas);\n      }\n\n    } catch (error) {\n      this.errorHandler.handleError(new APPError('F00504', 'getOverviewDataBySQL fail!' + error));\n    }\n\n    console.log(\"_getOverviewDataBySQL goalStepDatas\", goalStepDatas, JSON.stringify(goalStepDatas));\n    return goalStepDatas;\n  }\n\n  private async _getOverviewDataByRestful(performanceType: PERFORMANCETYPE, DataYear: number = -1, AgentID: string = \"\"): Promise<GoalSettingStepData> {\n\n    console.warn(\"performanceType: \", performanceType, \" DataYear: \", DataYear, \" AgentID: \", AgentID);\n\n    let GetGoalResp: any;\n    let GetYearConfigResp: any;\n\n    let goalSettingObj: any;\n    let GoalValues: any;\n    let goalSettingValueObj: any = {};\n\n    let YearConfig: GoalSettingYearConfig = new GoalSettingYearConfig();\n    let GoalStatus: GoalSettingGoalStatus = new GoalSettingGoalStatus();\n    let Step1: GoalSettingStep1 = new GoalSettingStep1();\n    let Step2: GoalSettingStep2 = new GoalSettingStep2();\n    let Step3: GoalSettingStep3 = new GoalSettingStep3();\n    let Step4: GoalSettingStep4 = new GoalSettingStep4();\n    let Step5: GoalSettingStep5 = new GoalSettingStep5();\n    let AgencyPlan: AgencyPlanDataForOverview = new AgencyPlanDataForOverview();\n\n    YearConfig.DataYear = DataYear;\n    GoalStatus.DataYear = DataYear;\n    let returnDatas: GoalSettingStepData = new GoalSettingStepData(DataYear);\n\n    try {\n      let getGoalapi = this.APIFactory.getAPI(\"getGoal\");\n      (<getGoalAPI>getGoalapi).setAgentID(AgentID);\n      let getYearConfigapi = this.APIFactory.getAPI(\"getYearConfig\");\n      (<getYearConfigAPI>getYearConfigapi).setAgentID(AgentID);\n\n      [GetGoalResp, GetYearConfigResp] = await Promise.all([\n        this.dispatcher.dispatch(getGoalapi).toPromise(),\n        this.dispatcher.dispatch(getYearConfigapi).toPromise()\n      ]);\n\n      console.log(\"_getOverviewDataByRestful GetGoalResp\", GetGoalResp);\n      console.log(\"_getOverviewDataByRestful GetYearConfigResp\", GetYearConfigResp);\n\n      let GoalMap = this.yearJsonToMap(GetGoalResp.Goals);\n      let YearConfigMap = this.yearJsonToMap(GetYearConfigResp.Configurations);\n\n      let GoalObj = GoalMap.get(DataYear);\n      let yearConfigObj = YearConfigMap.get(DataYear);\n      if (GoalObj != undefined && yearConfigObj != undefined) {\n        goalSettingObj = GoalMap.get(DataYear).GoalSetting;\n        GoalValues = GoalMap.get(DataYear).GoalValue;\n\n        console.log(\"_getOverviewDataByRestful goalSettingObj\", goalSettingObj);\n        console.log(\"_getOverviewDataByRestful GoalValues\", GoalValues);\n\n        GoalValues.forEach(GoalValue => {\n          goalSettingValueObj[GoalValue.DataType] = GoalValue.Value;\n        });\n\n        let monthQuantityOfYear = yearConfigObj.MonthQuantityOfYear;\n        let PerformanceSettlementMonth = yearConfigObj.PerformanceSettlementMonth;\n        Step4 = await this._getMonthActualPlanByRestful(performanceType, DataYear, monthQuantityOfYear, PerformanceSettlementMonth, AgentID);\n        Step4.Shortfall = this.calculateShortfall(Step1.FYFC, Step4.Forecast);\n        let allYearActual: string = this.calculateActual(yearConfigObj.PerformanceSettlementMonth, Step4.MonthList);\n\n        YearConfig.InforceConvertSubmitRate = yearConfigObj.InforceConvertSubmitRate;\n        YearConfig.InforceConvertMeetRate = yearConfigObj.InforceConvertMeetRate;\n        YearConfig.InforceConvertScheduleRate = yearConfigObj.InforceConvertScheduleRate;\n        YearConfig.InforceConvertFindRate = yearConfigObj.InforceConvertFindRate;\n        YearConfig.NowToYearEndDays = yearConfigObj.NowToYearEndDays;\n        YearConfig.PerformanceSettlementMonth = yearConfigObj.PerformanceSettlementMonth;\n        YearConfig.MonthQuantityOfYear = yearConfigObj.MonthQuantityOfYear;\n        YearConfig.WorkingMonth = yearConfigObj.WorkingMonth;\n        YearConfig.GoalAndPlanDifferenceLimit = yearConfigObj.GoalAndPlanDifferenceLimit;\n        if (this.yearConfigExtension) {\n          let yearConfigExtData: ExtensionData = this.yearConfigExtension.getExtensionData(yearConfigObj, { source: \"Restful\" });\n          YearConfig.setExtension(yearConfigExtData);\n        }\n\n\n        GoalStatus.PersonnelGoalApplicableYM = goalSettingObj.PersonnelGoalApplicableYM;\n        GoalStatus.TeamGoalApplicableYM = goalSettingObj.TeamGoalApplicableYM;\n        GoalStatus.GoalSetMonth = goalSettingObj.GoalSetMonth;\n        GoalStatus.ApproveStatus = goalSettingObj.Status;\n        if (this.goalSettingExtension) {\n          let goalSettingExtData: ExtensionData = this.goalSettingExtension.getExtensionData(goalSettingObj, { source: \"Restful\" });\n          GoalStatus.setExtension(goalSettingExtData);\n        }\n\n        if (performanceType == PERFORMANCETYPE.PERSONAL) {\n          Step1.FYFC = goalSettingValueObj.PERSON_FYFC;\n          Step1.AnnualConvention = goalSettingValueObj.ANNUAL_CONVENTION;\n          Step1.MDRT = goalSettingValueObj.MDRT;\n          Step1.PromotionPlan = goalSettingValueObj.PROMOTION_PLAN;\n          Step1.Actual = allYearActual;\n          Step1.FYFCNowToYearEnd = this.calculateNowToYearEndGoal(goalSettingValueObj.PERSON_FYFC, allYearActual);\n\n          Step2.PerCase = goalSettingValueObj.PER_CASE_FYFC;\n\n          let perCase = goalSettingValueObj.PER_CASE_FYFC;\n          let activityGoal = goalSettingValueObj.ACTIVITY_FYFC ? goalSettingValueObj.ACTIVITY_FYFC : goalSettingValueObj.PERSON_FYFC;\n          let activityDays = goalSettingValueObj.ACTIVITY_DAYS ? goalSettingValueObj.ACTIVITY_DAYS : yearConfigObj.NowToYearEndDays;\n          Step3 = this.calculateActivityData(activityGoal, perCase, YearConfig, activityDays);\n\n          returnDatas.YearConfig = YearConfig;\n          returnDatas.GoalStatus = GoalStatus;\n          returnDatas.Step1 = Step1;\n          returnDatas.Step2 = Step2;\n          returnDatas.Step3 = Step3;\n          returnDatas.Step4 = Step4;\n\n        } else {\n          Step5.TeamFYFC = goalSettingValueObj.TEAM_FYFC;\n          Step5.TeamANP = goalSettingValueObj.TEAM_ANP;\n          Step5.Manpower = goalSettingValueObj.TEAM_MANPOWER;\n          Step5.Recruitment = goalSettingValueObj.TEAM_RECRUITMENT;\n\n          let agencyPlanObj = await this.getAgencyPlanMainDataByRestful(DataYear, AgentID);\n\n          if (agencyPlanObj != null) {\n            let mainDataList = agencyPlanObj.AgencyMainDataList;\n            AgencyPlan.FYFCForecast = mainDataList.filter(x => x.DataType == \"FYFC\")[0].Forecast;\n            AgencyPlan.ANPForecast = mainDataList.filter(x => x.DataType == \"ANP\")[0].Forecast\n            AgencyPlan.ManpowerPlan = this.changeToDash(mainDataList.filter(x => x.DataType == \"Manpower\")[0].MonthPlan);\n            AgencyPlan.RecruitmentPlan = mainDataList.filter(x => x.DataType == \"Recruitment\")[0].MonthPlan;\n            AgencyPlan.CompletionRate = agencyPlanObj.CompletionRate;\n          } else {\n            throw \"get agencyPlan fail.\"\n          }\n          returnDatas.YearConfig = YearConfig;\n          returnDatas.GoalStatus = GoalStatus;\n          returnDatas.Step4 = Step4;\n          returnDatas.Step5 = Step5;\n\n          //todo get completionRate \n          // AgencyPlan.CompletionRate = ? ;\n          returnDatas.AgencyPlan = AgencyPlan;\n        }\n      }\n      returnDatas = this._converSelectCode(returnDatas);\n      if (this.goalSettingStep) {\n        returnDatas = this.goalSettingStep.changeEmptyToDash(returnDatas);\n      }\n    } catch (error) {\n      this.errorHandler.handleError(new APPError('F00505', 'getOverviewDataByRestful fail!' + error.message));\n    }\n\n    console.log(\"_getOverviewDataByRestful returnDatas\", returnDatas, JSON.parse(JSON.stringify(returnDatas)));\n    return returnDatas;\n  }\n\n  //#endregion GoalSetting overview\n\n\n  //#region get month actual & plan\n  @Valid('GoalSettingStep4')\n  public getMonthActualPlan(performanceType: PERFORMANCETYPE, DataYear: number, monthQuantityOfYear: number = 12, PerformanceSettlementMonth: number = 99, AgentID: string = \"\"): Observable<GoalSettingStep4> {\n    if (StringUtils.isEmpty(AgentID)) {\n      return from(this._getMonthActualPlanBySQL(performanceType, DataYear, monthQuantityOfYear, PerformanceSettlementMonth));\n    } else {\n      return from(this._getMonthActualPlanByRestful(performanceType, DataYear, monthQuantityOfYear, PerformanceSettlementMonth, AgentID));\n    }\n  }\n\n  private async _getMonthActualPlanByRestful(performanceType: string, DataYear: number, monthQuantityOfYear: number, PerformanceSettlementMonth: number, AgentID: string): Promise<GoalSettingStep4> {\n    // call GetGoalAPI (Restful set AgentID)\n    let GoalResp: any;\n    let ActualResp: any;\n    let returnDatas: GoalSettingStep4 = new GoalSettingStep4();\n    let MonthActualPlanList: Array<MonthlyPlanFYFCData> = [];\n\n    try {\n      let getGoalapi = this.APIFactory.getAPI(\"getGoal\");\n      let getActualapi = this.APIFactory.getAPI(\"getActual\");\n      (<getGoalAPI>getGoalapi).setAgentID(AgentID);\n      (<getActualAPI>getActualapi).setAgentID(AgentID);\n\n      [GoalResp, ActualResp] = await Promise.all([\n        this.dispatcher.dispatch(getGoalapi).toPromise(),\n        this.dispatcher.dispatch(getActualapi).toPromise()\n      ]);\n\n      console.log(\"GoalResp\", GoalResp);\n      console.log(\"ActualResp\", ActualResp);\n\n      let GoalPlanMap = new Map<number, string>();\n      let ActuallMap = new Map<number, string>();\n      let thisActual: Array<any> = [];\n\n      if (GoalResp.Goals != null && ActualResp.Actual != null) {\n        GoalResp.Goals.forEach(Goal => {\n          if (Goal.DataYear == DataYear && Goal.GoalPlan.Values != null) {\n            Goal.GoalPlan.Values.forEach(plan => {\n              if (plan.PerformanceType == performanceType) {\n                GoalPlanMap.set(plan.Month, plan.Value.toString());\n              }\n            });\n          }\n        });\n\n        thisActual = ActualResp.Actual.filter(Actual => Actual.DataYear == DataYear).map(x => x.Values);\n        console.log(\"thisActual\", thisActual);\n        thisActual.forEach(Actual => {\n          Actual.forEach(value => {\n            if (value.DataType == \"FYFC\" && value.PerformanceType == performanceType) {\n              ActuallMap.set(value.Month, value.Value.toString());\n            }\n          });\n        });\n      } else {\n        throw \"get Goal fail. GoalResp:\" + GoalResp;\n      }\n\n      for (let i = 1; i <= monthQuantityOfYear; i++) {\n        MonthActualPlanList.push(new MonthlyPlanFYFCData(\n          i,\n          this.changeToDash(GoalPlanMap.get(i)),\n          ActuallMap.get(i) == null || i > PerformanceSettlementMonth ? this.DASH : ActuallMap.get(i)));\n      }\n      returnDatas.MonthList = MonthActualPlanList;\n      returnDatas.Actual = this.calculateActual(PerformanceSettlementMonth, MonthActualPlanList).toString();\n      returnDatas.Forecast = this.calculateForecast(PerformanceSettlementMonth, MonthActualPlanList).toString();\n      returnDatas.Shortfall = null;\n    } catch (error) {\n      this.errorHandler.handleError(new APPError('F00410', 'getMonthActualPlanByRestful fail!' + error.message));\n    }\n\n    console.log(\"_getMonthActualPlanByRestful Datas\", returnDatas);\n    return returnDatas;\n  }\n\n  private async _getMonthActualPlanBySQL(performanceType: string, DataYear: number, monthQuantityOfYear: number, PerformanceSettlementMonth: number): Promise<GoalSettingStep4> {\n\n    console.log('_getMonthActualPlanBySQL performanceType', performanceType, 'DataYear', DataYear, 'monthQuantityOfYear', monthQuantityOfYear, 'PerformanceSettlementMonth', PerformanceSettlementMonth)\n    let returnData: GoalSettingStep4 = new GoalSettingStep4();\n    let MonthActualPlanList: Array<MonthlyPlanFYFCData> = [];\n    try {\n      let actualResp, goalPlanResp;\n      // call GetGoalSettingValue       // call GetActualValue\n      let goalPlanList: string[] = Array(monthQuantityOfYear).fill(this.DASH, 0);\n      let actualList: string[] = Array(monthQuantityOfYear).fill(this.DASH, 0);\n      let goalPlan = this.APIFactory.getAPI(\"getGoalSettingPlan\");\n      let actual = this.APIFactory.getAPI(\"getGoalSettingActualValue\");\n      (<GoalSettingGetPlanAPI>goalPlan).setDataYear(DataYear);\n      (<GoalSettingGetActualAPI>actual).setDataYear(DataYear);\n\n      [goalPlanResp, actualResp] = await Promise.all([\n        this.dispatcher.dispatch(goalPlan).toPromise(),\n        this.dispatcher.dispatch(actual).toPromise()\n      ]);\n      console.log(\"goalPlanResp\", goalPlanResp);\n      console.log(\"actualResp\", actualResp);\n\n      if (goalPlanResp.Header[\"status\"] && actualResp.Header[\"status\"]) {\n        goalPlanResp[\"Body\"].filter(x => x.PerformanceType == performanceType).map(x => {\n          goalPlanList[x.Month - 1] = x.Value.toString();\n        });\n        actualResp[\"Body\"].filter(x => x.PerformanceType == performanceType && x.DataType == \"FYFC\" && x.Month <= PerformanceSettlementMonth).map(x => {\n          actualList[x.Month - 1] = x.Value.toString();\n        });\n      } else {\n        throw \"get GoalSetting fail. goalPlanResp\" + goalPlanResp.Header.msg + 'actualResp:' + actualResp.Header.msg;\n      }\n      console.log(\"goalPlanList\", goalPlanList);\n      console.log(\"actuallist\", actualList);\n\n      for (let i = 1; i <= monthQuantityOfYear; i++) {\n        MonthActualPlanList.push(new MonthlyPlanFYFCData(\n          i,\n          goalPlanList[i - 1],\n          actualList[i - 1]));\n      }\n      returnData.MonthList = MonthActualPlanList;\n      returnData.Actual = this.calculateActual(PerformanceSettlementMonth, MonthActualPlanList).toString();\n      returnData.Forecast = this.calculateForecast(PerformanceSettlementMonth, MonthActualPlanList).toString();\n      returnData.Shortfall = null;\n    } catch (error) {\n      this.errorHandler.handleError(new APPError('F00411', 'getMonthActualPlanBySQL fail!' + error.message));\n    }\n    console.log(\"_getMonthActualPlanBySQL returnData\", returnData);\n    return returnData;\n  }\n\n  //#endregion get month actual & plan\n\n\n  //#region AgencyPlan Datas\n  public getAgencyPlanMainData(dataYear: number, AgentID: string = \"\"): Observable<AgencyPlanMainInfo> {\n    if (AgentID == \"\") {\n      return from(this.getAgencyPlanMainDataBySQL(dataYear));\n    } else if (AgentID != \"\") {\n      return from(this.getAgencyPlanMainDataByRestful(dataYear, AgentID));\n    }\n  }\n\n  private async getAgencyPlanMainDataBySQL(dataYear: number): Promise<AgencyPlanMainInfo> {\n    console.log('getAgencyPlanMainDataBySQL DataYear', dataYear);\n\n    let returnData: AgencyPlanMainInfo = new AgencyPlanMainInfo();\n\n    let otherParaResp;\n    let agencyPlanResp;\n\n    try {\n      //get completionRate \n      let getOtherParameterAPI: GetOtherParameterAPI = <GetOtherParameterAPI>this.APIFactory.getAPI('getOtherParameter');\n      let agencyPlanGetMainAPI: AgencyPlanGetMainAPI = <AgencyPlanGetMainAPI>(this.APIFactory.getAPI(\"getAgencyPlanMain\"));\n      getOtherParameterAPI.SetYear(dataYear);\n      agencyPlanGetMainAPI.setDataYear(dataYear);\n\n      [otherParaResp, agencyPlanResp] = await Promise.all(\n        [getOtherParameterAPI, agencyPlanGetMainAPI].map(api => this.dispatcher.dispatch(api).toPromise()));\n      console.log('otherParaResp: ', otherParaResp, \"agencyPlanResp\", agencyPlanResp);\n\n      if (otherParaResp.Header[\"status\"] && agencyPlanResp.Header[\"status\"]) {\n        let respFilterCompletionRate = otherParaResp['Body'].filter(x => x.MappingID === \"CompletionRate\");\n        let completionRate: string = respFilterCompletionRate.length > 0 ? respFilterCompletionRate[0].SetValue : '';\n\n        let returnList: Array<AgencyPlanMainData> = [];\n        let AgencyPlanMainList = agencyPlanResp[\"Body\"];\n        console.log(\"getAgencyPlanMainDataBySQL AgencyPlanMainList\", AgencyPlanMainList);\n        if (AgencyPlanMainList) {\n          returnList = (<Array<any>>AgencyPlanMainList).map(main => this._agencyPlanMainDataObjToBean(main));\n        } else {\n          throw \"get AgencyPlanMainList fail.\"\n        }\n        console.log('getAgencyPlanMainDataBySQL returnList:', returnList);\n\n        console.log('completionRate:', completionRate);\n        returnData.CompletionRate = completionRate;\n        returnData.AgencyMainDataList = returnList;\n\n      }\n    } catch (error) {\n      this.errorHandler.handleError(new APPError('F00300', 'getAgencyPlanMainDataBySQL fail!' + error));\n    }\n\n    console.log(\"getAgencyPlanMainDataBySQL returnData\", returnData);\n    return returnData;\n  }\n\n  private _agencyPlanMainDataObjToBean(object: any): AgencyPlanMainData {\n    let agencyPlanMainData: AgencyPlanMainData = new AgencyPlanMainData();\n    agencyPlanMainData.Actual = object.Actual;\n    agencyPlanMainData.DataType = object.DataType;\n    agencyPlanMainData.DataYear = object.DataYear;\n    agencyPlanMainData.Forecast = object.Forecast;\n    agencyPlanMainData.MonthPlan = this.changeToDash(object.MonthPlan);\n    return agencyPlanMainData;\n  }\n\n  private async getAgencyPlanMainDataByRestful(dataYear: number, AgentID: string): Promise<AgencyPlanMainInfo> {\n\n    console.log('getAgencyPlanMainDataByRestful dataYear', dataYear, 'AgentID', AgentID);\n    let returnData: AgencyPlanMainInfo = new AgencyPlanMainInfo();\n    let MainList: Array<AgencyPlanMainData> = [];\n\n    try {\n      let getAgencyPlanAPI: getAgencyPlanAPI = <getAgencyPlanAPI>(this.APIFactory.getAPI(\"getAgencyPlan\"));\n      getAgencyPlanAPI.setAgentID(AgentID);\n      let agencyPlanResp = await this.dispatcher.dispatch(getAgencyPlanAPI).toPromise();\n\n      console.log(\"getAgencyPlanMainDataByRestful agencyPlanResp \", agencyPlanResp);\n      if (agencyPlanResp.AgencyPlans != null) {\n        let agencyPlanMap = this.yearJsonToMap(agencyPlanResp.AgencyPlans);\n        let completionRate = agencyPlanMap.get(dataYear).CompletionRate;\n        let tempAgencyPlanList = agencyPlanMap.get(dataYear).Values;\n        (<Array<any>>tempAgencyPlanList).forEach(plan => {\n          plan['MonthPlan'] = plan['Plan'];\n          plan['DataYear'] = dataYear;\n        });\n\n        MainList = (<Array<any>>tempAgencyPlanList).map(plan => this._agencyPlanMainDataObjToBean(plan));\n        returnData.AgencyMainDataList = MainList;\n        returnData.CompletionRate = completionRate;\n      } else {\n        throw \"get AgencyPlan fail. agencyPlanResp:\" + agencyPlanResp;\n      }\n\n    } catch (error) {\n      this.errorHandler.handleError(new APPError('F00301', 'getAgencyPlanMainDataByRestful fail!' + error.message));\n    }\n\n    console.log(\"getAgencyPlanMainDataByRestful returnData \", returnData);\n    return returnData;\n\n  }\n\n  @Valid('AgencyPlanDetail')\n  public getAgencyPlanDetailData(dataYear: number): Observable<Array<AgencyPlanDetail>> {\n\n    let agencyPlanGetDetailAPI: AgencyPlanGetDetailAPI = <AgencyPlanGetDetailAPI>this.APIFactory.getAPI(\"getAgencyPlanDetail\");\n    agencyPlanGetDetailAPI.setDataYear(dataYear);\n    return Observable.create(observer => {\n      try {\n        this.dispatcher.dispatch(agencyPlanGetDetailAPI).subscribe(resp => {\n          if (resp[\"Body\"]) {\n            let returnList: Array<AgencyPlanDetail> = [];\n            // let AgencyPlanDetailList: Array<AgencyPlanDetail> = resp[\"Body\"];\n            returnList = (<Array<any>>resp[\"Body\"]).map(item => this._agencyPlanDetailObjToBean(item));\n            console.log(\"returnList in service: \", returnList);\n            observer.next(returnList);\n            observer.complete();\n          }\n          else {\n            throw \"get agencyPlanGetDetail fail. resp:\" + resp;\n          }\n        });\n      } catch (error) {\n        this.errorHandler.handleError(new APPError('F00302', 'getAgencyPlanDetailData fail!' + error.message));\n      }\n    });\n  }\n\n  private _agencyPlanDetailObjToBean(object: any): AgencyPlanDetail {\n    let agencyPlanDetail = new AgencyPlanDetail();\n\n    agencyPlanDetail.AgentID = object.AgentID;\n    agencyPlanDetail.AgentName = object.AgentName;\n    agencyPlanDetail.DataYear = object.DataYear;\n    agencyPlanDetail.AppUseMode = object.AppUseMode;\n    agencyPlanDetail.JobGrade = object.JobGrade;\n    agencyPlanDetail.Actual = this.changeToDash(object.Actual);\n    agencyPlanDetail.CaseCount = this.changeToDash(object.CaseCount);\n    agencyPlanDetail.ClientID = object.ClientID;\n    agencyPlanDetail.DataType = object.DataType;\n    agencyPlanDetail.DirectUnitType = object.DirectUnitType;\n    agencyPlanDetail.Drilldown = object.Drilldown;\n    agencyPlanDetail.TextColor = agencyPlanDetail.Drilldown == 'Y' ? 'blue' : 'default';\n    agencyPlanDetail.Forecast = this.changeToDash(object.Forecast);\n    agencyPlanDetail.Goal = this.changeToDash(object.Goal);\n    agencyPlanDetail.IsApprove = object.IsApprove;\n    agencyPlanDetail.IsHasDot = agencyPlanDetail.IsApprove === 'Y';\n    agencyPlanDetail.Manpower = object.Manpower;\n    agencyPlanDetail.MonthPlan = this.changeToDash(object.MonthPlan);\n    agencyPlanDetail.Orders = object.Orders;\n    agencyPlanDetail.PerCase = this.changeToDash(object.PerCase);\n    agencyPlanDetail.Recruitment = object.Recruitment;\n\n    return agencyPlanDetail;\n\n  }\n\n  @Valid('AgencyPlanGoalExpected')\n  public async getGoalExpected(dataYear: number): Promise<AgencyPlanGoalExpected> {\n\n    let returnAgencyPlanGoalExpected: AgencyPlanGoalExpected;\n    let goalSettingYearConfigAPI: GoalSettingGetYearConfigAPI = <GoalSettingGetYearConfigAPI>this.APIFactory.getAPI(\"getGoalSettingYearConfig\");\n    goalSettingYearConfigAPI.setDataYear(dataYear);\n    let goalSettingGetExpectedAPI: GoalSettingGetExpectedAPI = <GoalSettingGetExpectedAPI>this.APIFactory.getAPI(\"getGoalSettingExpected\");\n    goalSettingGetExpectedAPI.setDataYear(dataYear);\n    try {\n      let yearConfigResp;\n      let goalExpectedResp;\n\n      [yearConfigResp, goalExpectedResp] = await Promise.all([\n        this.dispatcher.dispatch(goalSettingYearConfigAPI).toPromise(),\n        this.dispatcher.dispatch(goalSettingGetExpectedAPI).toPromise()\n      ])\n\n      if (goalExpectedResp && yearConfigResp) {\n        let expectedRespBody: Array<any> = goalExpectedResp[\"Body\"];\n        let yearConfigRespBody: Array<any> = yearConfigResp[\"Body\"];\n\n        returnAgencyPlanGoalExpected = expectedRespBody.length > 0 ? this._agencyPlanGoalExpectedObjToBean(expectedRespBody[0]) : new AgencyPlanGoalExpected(dataYear);\n        returnAgencyPlanGoalExpected.FYFCConvertANPRate = yearConfigRespBody[0]['FyfcCovertAnpRate'];\n        returnAgencyPlanGoalExpected.WorkingQuarter = yearConfigRespBody[0]['WorkingQuarter'];\n\n        console.log(\"getGoalExpected trans\", returnAgencyPlanGoalExpected);\n      } else {\n        throw \"get goal expected and yearConfigfail.\";\n      }\n\n      return returnAgencyPlanGoalExpected;\n\n    } catch (error) {\n      this.errorHandler.handleError(new APPError('F00303', 'getGoalExpected fail!' + error.message));\n    }\n\n  }\n\n  private _agencyPlanGoalExpectedObjToBean(object: any): AgencyPlanGoalExpected {\n\n    let goalExpected: AgencyPlanGoalExpected = new AgencyPlanGoalExpected(object.DataYear);\n\n    goalExpected.ANP = object.ANP.toString();\n    goalExpected.FYFC = object.FYFC.toString();\n    goalExpected.Q1 = object.Q1.toString();\n    goalExpected.Q2 = object.Q2.toString();\n    goalExpected.Q3 = object.Q3.toString();\n    goalExpected.Q4 = object.Q4.toString();\n    let numberRecruitmentTotal = NumberUtils.isNumber(object.RecruitmentTotal) ? Number(object.RecruitmentTotal) : 0;\n    goalExpected.RecruitmentTotal = numberRecruitmentTotal;\n    return goalExpected;\n  }\n\n  public calculaRecruitmentSum(goalExpected: AgencyPlanGoalExpected): number {\n    return [goalExpected.Q1, goalExpected.Q2, goalExpected.Q3, goalExpected.Q4].reduce((total, each) => {\n      let numberQ = NumberUtils.isNumber(each) ? Number(each) : 0;\n      return total + numberQ;\n    }, 0);\n  }\n\n  public saveGoalExpected(expectedRecruitment: object, indirectRecruitment: number): Observable<any> {\n\n    let goalSettingSetExpectedAPI: GoalSettingSetExpectedAPI = <GoalSettingSetExpectedAPI>this.APIFactory.getAPI(\"setGoalSettingExpected\");\n    goalSettingSetExpectedAPI.setExpectedRecruitment(expectedRecruitment);\n    goalSettingSetExpectedAPI.setIndirectRecruitment(indirectRecruitment);\n    return Observable.create(observer => {\n      try {\n        this.dispatcher.dispatch(goalSettingSetExpectedAPI).subscribe(resp => {\n          observer.next(resp[\"Header\"]);\n          observer.complete();\n        });\n      } catch (error) {\n        this.errorHandler.handleError(new APPError('F00304', 'saveGoalExpected fail!' + error.message));\n      }\n    });\n  }\n\n  //#endregion AgencyPlan Datas\n\n\n  //#region other function\n  public numberToFix(n: number, toFix: number): number {\n    let fix10 = Math.pow(10, toFix);\n    let returnData = Math.round(this.strip(n) * fix10) / fix10;\n    return returnData;\n  }\n\n  public strip(num, precision = 12) {\n    return Number(num.toPrecision(precision));\n  }\n\n  public calculateNowToYearEndGoal(FYFC: any, actual: any): string {\n    console.log(\"calculateNowToYearEndGoal FYFC:\", FYFC, \"actual:\", actual);\n    let caculeteActual = NumberUtils.isNumber(actual) ? Number(actual) : 0;\n    if (!NumberUtils.isNumber(FYFC)) {\n      return this.DASH;\n    } else {\n      let result = Number(FYFC) - caculeteActual < 0 ? 0 : Number(FYFC) - caculeteActual;\n      return result.toString();\n    }\n  }\n\n  public calculateAllYearGoal(NowToYearEnd: any, actual: any): string {\n    console.log(\"calculateNowToYearEndGoal NowToYearEnd:\", NowToYearEnd, \"actual:\", actual);\n    let caculeteActual = NumberUtils.isNumber(actual) ? Number(actual) : 0;\n    if (!NumberUtils.isNumber(NowToYearEnd)) {\n      return this.DASH;\n    } else {\n      return (Number(NowToYearEnd) + caculeteActual).toString();\n    }\n  }\n\n\n  private _isPopup: boolean = false;\n\n  public get saveFeedbackState() {\n    return this._isPopup;\n  }\n\n  public set saveFeedbackState(isPopup: boolean) {\n    this._isPopup = isPopup;\n  }\n\n  public getActualPlanFromMonthList(list: Array<MonthlyPlanFYFCData>, actualMonth: number) {\n    console.log(\"getActualPlanFromMonthList:\", list, actualMonth);\n    return list.map((x, index) => (index + 1 < actualMonth || index + 1 === actualMonth ? x.Actual : x.Plan));\n  }\n\n  public calculateANPFromFYFC(FYFC, rate): string {\n    if (StringUtils.isEmpty(FYFC) || FYFC == this.DASH) {\n      return this.DASH;\n    } else {\n      return this.numberToFix(Number(FYFC) * Number(rate), 0).toString();\n    }\n  }\n\n  public calculateFYFCFromANP(ANP, rate): string {\n    if (StringUtils.isEmpty(ANP) || ANP == this.DASH) {\n      return this.DASH;\n    } else {\n      return this.numberToFix(Number(ANP) / Number(rate), 0).toString();\n    }\n  }\n\n  //#endregion other function\n\n\n  //#region Sync Datas \n  public async syncGoalDatas() {\n    this.goalStore.setSyncGoalDatas(SYNC_STATUS.SYNC);\n    await this.dataSyncService.syncFunc([\"GOAL\", \"PROGRESS\"], true);\n    this.goalStore.setSyncGoalDatas(SYNC_STATUS.FINISH);\n  }\n\n  public async syncAgencyPlan() {\n    return this.dataSyncService.syncFunc([\"AGENCY_PLAN\"], true);\n  }\n\n  public async syncYearConfig() {\n    return this.dataSyncService.syncFunc([\"YEAR_CONFIG\"], true);\n  }\n\n  @Valid('SuccessStatus')\n  public async pushApproveGoal(approveInfo: ApproveInfo): Promise<SuccessStatus> {\n    return this._pushApproveGoal(approveInfo);\n  }\n\n  public changeToDash(param: any): string {\n    return (param === -1 || param === null || param === \"\") ? this.DASH : param.toString();\n  }\n  //#endregion Sync Datas \n\n  private async _pushApproveGoal(approveInfo: ApproveInfo): Promise<SuccessStatus> {\n    let returnResp: SuccessStatus = new SuccessStatus(false);\n    let approveInfoData = {\n      \"AgentID\": approveInfo.AgentID,\n      \"DataYear\": approveInfo.DataYear,\n      \"isApprove\": approveInfo.IsApprove,\n      \"comment\": approveInfo.Comment\n    }\n    try {\n      let mainData = approveInfoData;\n      let pushApproveData = this.APIFactory.getAPI(\"pushApproveGoal\");\n      (<pushApproveGoalAPI>pushApproveData).mainData = mainData;\n      console.log('pushApproveGoal mainData', mainData);\n      let getResp = await this.dispatcher.dispatch(pushApproveData).toPromise();\n      console.log('getResp', getResp);\n      if (getResp.success) {\n        await this.dataSyncService.syncFunc([\"DASHBOARD\", \"GOAL\", \"PROGRESS\"]);\n        returnResp.isSuccess = true;\n      } else {\n        throw \"Approve Goal fail.\";\n      }\n    } catch (error) {\n      this.errorHandler.handleError(new APPError('F00100', 'pushApproveGoal fail!' + error.message));\n    }\n    console.log(\"[_pushApproveGoal] returnResp:\", returnResp);\n    return returnResp;\n\n  }\n\n  private async _pushGoalSetting(submitDatas: SubmitGoalData): Promise<SuccessStatus> {\n\n    let returnResp: SuccessStatus = new SuccessStatus(false);\n    try {\n\n      console.log('pushGoalSettingDataAPI mainData', submitDatas);\n      let pushGoalSettingData = this.APIFactory.getAPI(\"pushGoalSettingData\");\n      (<pushGoalSettingDataAPI>pushGoalSettingData).mainData = submitDatas;\n      let getResp = await this.dispatcher.dispatch(pushGoalSettingData).toPromise();\n\n      if (getResp.success) {\n        returnResp.isSuccess = true;\n      } else {\n        throw \"push Goal failed,\" + getResp.Header.msg;\n      }\n\n    } catch (error) {\n      this.errorHandler.handleError(new APPError('F00101', error));\n    }\n    return returnResp;\n  }\n\n  private _converSelectCode(StepData: GoalSettingStepData): GoalSettingStepData {\n    this.ColMapToProfile.forEach((code, col) => {\n      let profileCodes: Array<ProfileCode> = this.ColMapToProfileCodeMap.get(col);\n      if (profileCodes.length && StepData.Step1 && StepData.Step1[col]) {\n        let colVal = StepData.Step1[col];\n        profileCodes = profileCodes.filter(x => x.getCode() == colVal);\n        StepData.Step1[col] = profileCodes.length ? profileCodes[0].getMappingID() : this.DASH;\n      }\n    });\n    return StepData;\n  }\n\n}","import { Injectable, ErrorHandler, Optional, Inject } from \"@angular/core\";\nimport { StringUtils, NumberUtils, APPError } from \"@allianzSND/core\";\nimport { GoalSettingStepData, ValidError, GoalSettingStep4 } from \"./model\";\nimport { GoalSettingService } from \"./goal-setting.service\";\nimport { goalSettingStep, GoalValidExtension } from \"../interface\";\nimport { goalSettingStepToken, goalValidToken } from \"../injectionToken\";\n\n\n@Injectable({\n    providedIn: \"root\"\n  })\n  \n  export class GoalValidService {\n\n    private numberValid: Array<string> = [];\n    private requiredValid: Array<string> = [];\n\n    constructor(\n        private errorHandler: ErrorHandler,\n        private goalSettingService: GoalSettingService,\n        @Optional()\n        @Inject(goalSettingStepToken)\n        private goalSettingStep: goalSettingStep,\n        @Optional()\n        @Inject(goalValidToken)\n        private goalValid: GoalValidExtension,\n    ){\n        if(this.goalValid){\n            this.numberValid = this.goalValid.getNumberArray();\n            this.requiredValid = this.goalValid.getRequiredArray();\n        }else{\n            this.numberValid = [\"FYFC\", \"FYFCNowToYearEnd\", \"PerCase\", \"TeamFYFC\", \"TeamFYFCNowToYearEnd\", \"Recruitment\", \"Manpower\"];\n            this.requiredValid = [\"FYFC\", \"FYFCNowToYearEnd\", \"AnnualConvention\", \"MDRT\", \"PerCase\", \"TeamFYFC\", \"TeamFYFCNowToYearEnd\", \"Manpower\", \"Recruitment\"];    \n        }\n    }\n\n   //#region Vaild function\n   public onChangeValid(step: number, colId: string, val: string, validDatas: GoalSettingStepData, isAdjust: boolean, errorResult: Array<ValidError>, isPageValid: boolean = false): Array<ValidError> {\n\n    console.log(\"onChangeValid colId\", colId, \"val\", val, 'validDatas', validDatas, errorResult, 'isPageValid', isPageValid);\n    try {\n      let isDecimalResult: boolean;\n      let PlanEmpty = colId.indexOf(\"Plan_\") != -1 && StringUtils.isEmpty(val);\n      let RequiredEmpty: boolean = this.requiredValid.indexOf(colId) != -1 && StringUtils.isEmpty(val);\n      let numberPositive: boolean = this.numberValid.indexOf(colId) != -1 && !NumberUtils.isPositive(val);\n      let vaildEmptyResult: boolean = RequiredEmpty || numberPositive || PlanEmpty; //è² æ¸çerror msg ä¹æ¯_required\n\n      let requiredErrorMsg = (colId.indexOf(\"Plan_\") != -1) ? \"Plan_required\" : colId + \"_required\";\n      errorResult = this._setError(step, colId, \"_required\", vaildEmptyResult, errorResult, requiredErrorMsg); //å¤æ·æ¯å¦æ¯è² æ¸ææ¯ç©ºå¼\n\n      if (!vaildEmptyResult && (this.numberValid.indexOf(colId) != -1 || colId.indexOf(\"Plan_\") != -1)) { //å¤æ·ä¸æ¯ç©ºå¼æè² æ¸æç¹¼çºå¾ä¸é©è­\n        isDecimalResult = NumberUtils.isDecimal(val);\n        errorResult = this._setError(step, colId, \"_point\", isDecimalResult, errorResult);\n      }\n\n      console.log(\"isDecimalResult\", isDecimalResult, \"vaildEmptyResult\", vaildEmptyResult, \"isPageValid\", isPageValid);\n      if (!isDecimalResult && !vaildEmptyResult && !isPageValid) { //é©è­é½æ²æé¯ææ¹å¼\n        console.log(\"onChangeValid no error\");\n        if (colId.indexOf(\"Plan_\") != -1) {\n          validDatas.Step4.Forecast = this.goalSettingService.calculateForecast(validDatas.YearConfig.PerformanceSettlementMonth, validDatas.Step4.MonthList);\n          validDatas.Step4.Shortfall = this.goalSettingService.calculateShortfall(validDatas.Step1.FYFC, validDatas.Step4.Forecast);\n          errorResult = this._validShortfall(validDatas.Step4, errorResult);\n        }\n\n        if (!isAdjust) { // ç¬¬ä¸æ¬¡è¨­å®goal\n          switch (colId) {\n            case \"TeamFYFC\":\n              validDatas.Step5.TeamANP = this.goalSettingService.calculateANPFromFYFC(val, validDatas.YearConfig.FyfcCovertAnpRate);\n              break;\n            case \"TeamFYFCNowToYearEnd\":\n              validDatas.Step5.TeamANPNowToYearEnd = this.goalSettingService.calculateANPFromFYFC(val, validDatas.YearConfig.FyfcCovertAnpRate);\n              break;\n            case \"FYFC\":\n              validDatas.Step3 = this.goalSettingService.calculateActivityData(val, validDatas.Step2.PerCase, validDatas.YearConfig);\n              validDatas.Step4 = this.goalSettingService.calculateMonthActualPlan(validDatas.YearConfig, val, validDatas.ActualList);\n              validDatas.Step4.Shortfall = this.goalSettingService.calculateShortfall(Number(val), validDatas.Step4.Forecast);\n              errorResult = this.unitPageValid(4, validDatas, false, errorResult);\n              break;\n            case \"PerCase\":\n              validDatas.Step3 = this.goalSettingService.calculateActivityData(validDatas.Step1.FYFC, val, validDatas.YearConfig);\n              break;\n          }\n        } else {\n          let FYFCSmallValid = Number(validDatas.Step1.Actual) > Number(validDatas.Step1.FYFC);\n          let FYFCNowToYearEndIsPositive = NumberUtils.isPositive(validDatas.Step1.FYFCNowToYearEnd);\n          switch (colId) {\n            case \"FYFC\":\n              validDatas.Step1.FYFCNowToYearEnd = this.goalSettingService.calculateNowToYearEndGoal(val, validDatas.Step1.Actual);\n              errorResult = this._setError(1, colId, \"_small\", FYFCSmallValid, errorResult);\n              errorResult = this._setError(1, \"FYFCNowToYearEnd\", \"_required\", !FYFCNowToYearEndIsPositive, errorResult);\n              if (!FYFCSmallValid && FYFCNowToYearEndIsPositive) {\n                validDatas.Step3 = this.goalSettingService.calculateActivityData(validDatas.Step1.FYFCNowToYearEnd, validDatas.Step2.PerCase, validDatas.YearConfig);\n                validDatas.Step4.Forecast = this.goalSettingService.calculateForecast(validDatas.YearConfig.PerformanceSettlementMonth, validDatas.Step4.MonthList);\n                validDatas.Step4.Shortfall = this.goalSettingService.calculateShortfall(Number(val), validDatas.Step4.Forecast);\n                errorResult = this._validShortfall(validDatas.Step4, errorResult);\n              }\n              break;\n            case \"FYFCNowToYearEnd\":\n              validDatas.Step1.FYFC = this.goalSettingService.calculateAllYearGoal(val, validDatas.Step1.Actual);\n              errorResult = this.onChangeValid(1, \"FYFC\", validDatas.Step1.FYFC, validDatas, true, errorResult);\n              break;\n            case \"PerCase\":\n              if (!FYFCSmallValid && FYFCNowToYearEndIsPositive) {\n                validDatas.Step3 = this.goalSettingService.calculateActivityData(validDatas.Step1.FYFCNowToYearEnd, val, validDatas.YearConfig);\n              }\n              break;\n            case \"TeamFYFC\":\n              validDatas.Step5.TeamFYFCNowToYearEnd = this.goalSettingService.calculateNowToYearEndGoal(val, validDatas.Step5.TeamFYFCActual);\n              let TeamFYFCSmallValid = Number(validDatas.Step5.TeamFYFCActual) > Number(validDatas.Step5.TeamFYFC);\n              let TeamFYFCNowToYearEndIsPositive = NumberUtils.isPositive(validDatas.Step5.TeamFYFCNowToYearEnd);\n              validDatas.Step5.TeamANP = this.goalSettingService.calculateANPFromFYFC(validDatas.Step5.TeamFYFC, validDatas.YearConfig.FyfcCovertAnpRate);\n              validDatas.Step5.TeamANPNowToYearEnd = this.goalSettingService.calculateANPFromFYFC(validDatas.Step5.TeamFYFCNowToYearEnd, validDatas.YearConfig.FyfcCovertAnpRate);\n              errorResult = this._setError(5, \"TeamFYFC\", \"_small\", TeamFYFCSmallValid, errorResult);\n              errorResult = this._setError(5, \"TeamFYFCNowToYearEnd\", \"_required\", !TeamFYFCNowToYearEndIsPositive, errorResult);\n              break;\n            case \"TeamFYFCNowToYearEnd\":\n              validDatas.Step5.TeamFYFC = this.goalSettingService.calculateAllYearGoal(val, validDatas.Step5.TeamFYFCActual);\n              errorResult = this.onChangeValid(1, \"TeamFYFC\", validDatas.Step5.TeamFYFC, validDatas, true, errorResult);\n              break;\n          }\n        }\n      }\n    } catch (error) {\n      this.errorHandler.handleError(new APPError('F00406', 'onChangeValid fail!' + error.message));\n    }\n\n    console.log('onChangeValid errorResult', errorResult);\n    return errorResult;\n  }\n\n  public pageValid(step: number, validDatas: GoalSettingStepData, isAdjust: boolean): Array<ValidError> {\n\n    console.log('pageValid step', step, 'validDatas', JSON.stringify(validDatas), isAdjust);\n\n    let errorResult = [];\n    let steplist = [5, 4, 2, 1];\n    try {\n      steplist.forEach(stepNum => {\n        //å¤æ·å³é²ä¾çæ­¥é©å¤§æ¼æç­æ¼é©è­æ­¥é©æé©è­\n        if (step >= stepNum && validDatas[\"Step\" + stepNum] != null && validDatas[\"Step\" + stepNum] != undefined) {\n          errorResult = this.unitPageValid(stepNum, validDatas, isAdjust, errorResult);\n        }\n      });\n\n    } catch (error) {\n      this.errorHandler.handleError(new APPError('F00407', 'pageValid fail!' + error.message));\n    }\n    return errorResult;\n  }\n\n  public unitPageValid(step: number, validDatas: GoalSettingStepData, isAdjust: boolean, errorResult: ValidError[]): ValidError[] {\n\n    let stepColMap = new Map<number, Array<string>>();\n\n    let step1Cols = [\"FYFC\", \"AnnualConvention\", \"MDRT\", \"PromotionPlan\"];\n    let step2Cols = [\"PerCase\"];\n    let step5Cols = [\"TeamFYFC\", \"TeamANP\", \"Manpower\", \"Recruitment\"];\n    stepColMap.set(1, step1Cols);\n    stepColMap.set(2, step2Cols);\n    stepColMap.set(5, step5Cols);\n\n    if (step == 4) {\n      //é©è­ç¬¬4æ­¥\n      let monthList = validDatas.Step4.MonthList;\n      let performanceSettlementMonth = validDatas.YearConfig.PerformanceSettlementMonth;\n      monthList.filter(obj => obj.Month > performanceSettlementMonth).forEach(x => {\n        errorResult = this.onChangeValid(4, \"Plan_\" + x.Month, x.Plan, validDatas, false, errorResult, true);\n      });\n      errorResult = this._validShortfall(validDatas.Step4, errorResult);\n    } else {\n      //å¶ä»æ­¥é©é©è­\n      if (isAdjust) {\n        step5Cols.push(\"TeamFYFCNowToYearEnd\");\n        step1Cols.push(\"FYFCNowToYearEnd\");\n      }\n      let stepCols = stepColMap.get(step);\n      stepCols.forEach(col => {\n        errorResult = this.onChangeValid(step, col, validDatas[\"Step\" + step][col], validDatas, isAdjust, errorResult, true);\n      });\n    }\n\n    return errorResult;\n  }\n\n  private _setError(step: number, colId: string, errorType: string, validresult: boolean, errorResult: Array<ValidError>, errorMsg: string = ''): Array<ValidError> {\n    console.log('step', step, 'colId', colId, 'errorType', errorType, 'validresult', validresult, 'errorResult', errorResult);\n    errorMsg = StringUtils.isEmpty(errorMsg) ? colId + errorType : errorMsg;\n    errorResult = errorResult.filter(x => (x.ColId != colId || (x.ColId == colId && x.Msg.indexOf(errorMsg)))); //ç­æ¼colId && ç­æ¼errortype çåæ¿æ\n    if (validresult) {\n      errorResult.push(new ValidError(step, colId, errorMsg));\n    }\n    console.log('errorResult', errorResult);\n    return errorResult;\n  }\n\n  private _validShortfall(setp4Obj: GoalSettingStep4, errorResult: Array<ValidError>): Array<ValidError> {\n\n    //é©è­Shortfall\n    if (this.goalSettingStep) {\n      let validresult = this.goalSettingStep.validateGoal_Forecast(Number(setp4Obj.Shortfall));\n      errorResult = this._setError(4, \"Shortfall\", \"value\", validresult, errorResult, \"Shortfall_nonZero\");\n    }\n    else {\n      let validresult = Number(setp4Obj.Shortfall) != 0;\n      errorResult = this._setError(4, \"Shortfall\", \"value\", validresult, errorResult, \"Shortfall_nonZero\");\n    }\n\n    return errorResult;\n  }\n\n  //#endregion Vaild\n  }\n","import { Observable, BehaviorSubject, Subject } from \"rxjs\";\nimport { Injectable } from \"@angular/core\";\nimport { AgencyPlanAgentInfo } from \"./model\";\nimport { AgencyPlanStatus, AGENCY_STATE } from \"./model/AgencyPlanStatus\";\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AgencyPlanStoreService {\n\n  private _stateBehaviorSubject: Subject<AgencyPlanStatus>;\n  private _detailBehaviorSubject: Subject<AgencyPlanAgentInfo>;\n\n  private _agencyState: AgencyPlanStatus;\n  private _agencyDetail: AgencyPlanAgentInfo;\n\n  constructor(\n  ) {\n    this._agencyState = new AgencyPlanStatus(AGENCY_STATE.DISPLAY, null);\n    this._stateBehaviorSubject = new BehaviorSubject(this._agencyState);\n    this._detailBehaviorSubject = new BehaviorSubject(this._agencyDetail);\n\n  }\n\n  setState(state: AgencyPlanStatus): void {\n    this._agencyState = state;\n    this._stateBehaviorSubject.next(this._agencyState);\n\n  };\n\n  getState(): Observable<AgencyPlanStatus> {\n    return this._stateBehaviorSubject;\n  };\n\n  // setCurrentAgencyDetail(detail: any): void {\n  //   console.log(\"setCurrentAgencyDetail detail:\",detail);\n  //   this._agencyDetail = detail;\n  //   this._detailBehaviorSubject.next(this._agencyDetail);\n  // };\n\n  setCurrentAgencyDetail(agentInfo: AgencyPlanAgentInfo): void {\n    console.log(\"setCurrentAgencyDetail agentInfo:\", agentInfo);\n    this._agencyDetail = agentInfo;\n    this._detailBehaviorSubject.next(this._agencyDetail);\n  };\n\n  getCurrentAgencyDetail(): Observable<AgencyPlanAgentInfo> {\n    return this._detailBehaviorSubject;\n  };\n\n}\n","\nexport class GoalTitleListItem {\n\n    constructor(private title: string, private desc: string) { }\n\n    public getTitle(): string {\n      return this.title;\n    }\n\n    public setTitle(title: string): void {\n        this.title = title;\n    }\n\n    public getDesc(): string {\n      return this.desc;\n    }\n\n    public setDesc(desc: string): void {\n        this.desc = desc;\n    }\n} // end class GoalTitleListItem\n","import { Injectable } from '@angular/core';\nimport { TranslateService, TIMEBASE, StringUtils } from '@allianzSND/core';\nimport { GoalSettingStep5 } from '../service/model/GoalSettingStep5';\nimport { AgencyPlanDataForOverview } from '../service/model/AgencyPlanDataForOverview';\nimport { GoalTitleListItem } from '../components/goal-ui-title-list/goa-ui-title-list-item';\nimport { GoalSettingStep3 } from '../service/model/GoalSettingStep3';\nimport { ActivityValue } from '../service/model/ActivityValue';\nimport { DWM_DATETYPE } from '../service/model/GoalSettingCommon';\nimport { GoalSettingStepData } from '../service/model/GoalSettingStepData';\nimport { GoalSettingYearConfig } from '../service/model/GoalSettingYearConfig';\nimport { GoalSettingGoalStatus } from '../service/model/GoalSettingGoalStatus';\nimport { GoalSettingTranslate } from '../service/model/GoalSettingTranslate';\nimport { CombineStep5AndAgecyPlanData } from '../service/model/CombineStep5AndAgecyPlanData';\nimport { GoalSettingStep3ForTabChange } from '../service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GoalSettingUtilService {\n\n  constructor(\n    private translateService: TranslateService\n  ) {\n  }\n\n  public getStep3TabOptionList(activity: string): Array<string> {\n\n    let daily = DWM_DATETYPE.DAILY;\n    let weekly = DWM_DATETYPE.WEEKLY;\n    let monthly = DWM_DATETYPE.MONTHLY;\n    let tabOptionList = [];\n    switch (activity) {\n      case 'Day':\n        tabOptionList = [daily, weekly, monthly];\n        break;\n      case 'Week':\n        tabOptionList = [weekly, monthly];\n        break;\n      case 'Month':\n        tabOptionList = [monthly];\n        break;\n      default:\n        break;\n    }\n\n    return tabOptionList;\n  }\n\n\n  public transformTeamStep5Data(step5Data: GoalSettingStep5, agencyPlanData: AgencyPlanDataForOverview): CombineStep5AndAgecyPlanData {\n\n    let step5ItemList = [\n      new GoalTitleListItem(this.translateService.translate('FYFC_Goal'), step5Data.TeamFYFC),\n      new GoalTitleListItem(this.translateService.translate('ANP_Goal'), step5Data.TeamANP),\n      new GoalTitleListItem(this.translateService.translate('Manpower_Goal'), step5Data.Manpower),\n      new GoalTitleListItem(this.translateService.translate('Recruitment_Goal'), step5Data.Recruitment)\n    ];\n\n    let agencyPlanItemList = [\n      new GoalTitleListItem(this.translateService.translate('FYFC_Forecast'), agencyPlanData.FYFCForecast.toString()),\n      new GoalTitleListItem(this.translateService.translate('ANP_Forecast'), agencyPlanData.ANPForecast.toString()),\n      new GoalTitleListItem(this.translateService.translate('Manpower_Plan'), agencyPlanData.ManpowerPlan.toString()),\n      new GoalTitleListItem(this.translateService.translate('Recruitment_Plan'), agencyPlanData.RecruitmentPlan.toString())\n    ];\n\n    let itemTextIsRedList = Array(step5ItemList.length).fill(false).map((value, index) => {\n      if(isNaN(Number(agencyPlanItemList[index].getDesc()))) {\n        return false;\n      }\n      else {\n        return (Number(step5ItemList[index].getDesc()) > Number(agencyPlanItemList[index].getDesc()));\n      }\n    });\n    \n    return new CombineStep5AndAgecyPlanData(step5ItemList, agencyPlanItemList, itemTextIsRedList);\n  }\n\n  public getTabChangeStep3(currentType: string, goalSettingStep3: GoalSettingStep3): GoalSettingStep3ForTabChange {\n\n    let activityValue: ActivityValue;\n    let unit: string;\n\n    if (currentType == DWM_DATETYPE.DAILY) {\n      activityValue = goalSettingStep3.ActivityValues.filter(x => x.TimeBase == TIMEBASE.DAY)[0];\n      unit = 'Goal_Setting_Day';\n    }\n\n    else if (currentType == DWM_DATETYPE.WEEKLY) {\n      activityValue = goalSettingStep3.ActivityValues.filter(x => x.TimeBase == TIMEBASE.WEEK)[0];\n      unit = 'Goal_Setting_Week';\n    }\n\n    else if (currentType == DWM_DATETYPE.MONTHLY) {\n      activityValue = goalSettingStep3.ActivityValues.filter(x => x.TimeBase == TIMEBASE.MONTH)[0];\n      unit = 'Goal_Setting_Month';\n    }\n\n    \n    return new GoalSettingStep3ForTabChange(activityValue, unit);\n  }\n\n\n\n\n  public translateByStepData(stepData: GoalSettingStepData) {\n    return this.translateByYearConfigAndGoaslStatus(stepData.YearConfig, stepData.GoalStatus);\n  }\n\n  public translateByYearConfigAndGoaslStatus(yearConfig: GoalSettingYearConfig, goalStatus: GoalSettingGoalStatus): GoalSettingTranslate {\n    let variable = this._getTranslateVariable(yearConfig, goalStatus);\n    let translateOnject = new GoalSettingTranslate();\n    translateOnject.TeamGoalEffectiveMonthTitle = this.translateService.translateWithVariable('Goal_Effective_Month', { \"effectiveMonthWithUnit\": this.translateService.translate('Month_' + goalStatus.TeamGoalApplicableYM) });\n    translateOnject.PersonalGoalEffectiveMonthTitle = this.translateService.translateWithVariable('Goal_Effective_Month', variable);\n    translateOnject.NowToYearEndTitle = this.translateService.translateWithVariable('Now_To_Year_End', variable);\n    translateOnject.FYFCNowToYearEndTitle = this.translateService.translateWithVariable('FYFC_Now_To_Year_End', variable);\n    translateOnject.ANPNowToYearEndTitle = this.translateService.translateWithVariable('ANP_Now_To_Year_End', variable);\n\n    if(this._isHasEffectiveMonthAndSettlementMonth(variable.effectiveMonth, variable.settlementMonth)) {\n      translateOnject.PersonalFYFCActualVariableTitle = this.translateService.translateWithVariable('FYFC_Actual_Variable', variable);\n    }\n    else {\n      translateOnject.PersonalFYFCActualVariableTitle = this.translateService.translate('FYFC_Actual_Dash');\n    }\n\n    if(this._isHasEffectiveMonthAndSettlementMonth(goalStatus.TeamGoalApplicableYM, yearConfig.PerformanceSettlementMonth)) {\n      translateOnject.TeamFYFCActualVariableTitle = this.translateService.translateWithVariable('FYFC_Actual_Variable', { \"effectiveMonth\": goalStatus.TeamGoalApplicableYM, \"settlementMonth\": yearConfig.PerformanceSettlementMonth });\n      translateOnject.TeamANPActualVariableTitle = this.translateService.translateWithVariable('ANP_Actual_Variable', { \"effectiveMonth\": goalStatus.TeamGoalApplicableYM, \"settlementMonth\": yearConfig.PerformanceSettlementMonth });\n    }\n    else {\n      translateOnject.TeamFYFCActualVariableTitle = this.translateService.translate('FYFC_Actual_Dash');\n      translateOnject.TeamANPActualVariableTitle = this.translateService.translate('ANP_Actual_Dash');\n    }\n\n\n    return translateOnject;\n  }\n\n  private _getTranslateVariable(yearConfig: GoalSettingYearConfig, goalStatus: GoalSettingGoalStatus) {\n    return {\n      //Goal_Effective_Month\n      \"effectiveMonthWithUnit\": this.translateService.translate('Month_' + goalStatus.PersonnelGoalApplicableYM),\n      //end of Goal_Effective_Month\n\n      //Now_To_Year_End\n      \n      \"workingMonth\": yearConfig.WorkingMonth == 0 ? 1 : yearConfig.WorkingMonth,\n      \"theLastMonth\": yearConfig.MonthQuantityOfYear,\n      //end of Now_To_Year_End\n\n      //FYFC_Actual_Variable\n      \"effectiveMonth\": goalStatus.PersonnelGoalApplicableYM,\n      \"settlementMonth\": yearConfig.PerformanceSettlementMonth,\n      //end of  FYFC_Actual_Variable\n    }\n  }\n\n  private _isHasEffectiveMonthAndSettlementMonth(effectiveMonth: number, settlementMonth: number): boolean {\n    let _isNotEmpty = StringUtils.isNotEmpty(effectiveMonth) && StringUtils.isNotEmpty(settlementMonth);\n    let _isNumber = !isNaN(Number(effectiveMonth)) && !isNaN(Number(settlementMonth));\n    let _isGreaterThanZero = Number(effectiveMonth) > 0 && Number(settlementMonth) > 0;\n\n    return _isNotEmpty && _isNumber && _isGreaterThanZero;\n  }\n}\n"]}