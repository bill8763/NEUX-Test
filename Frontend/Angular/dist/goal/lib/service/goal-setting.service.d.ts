import { ErrorHandler } from "@angular/core";
import { Observable } from "rxjs";
import { APIDispatch, APIFactory, DataSyncService, SuccessStatus, SUBMITGOALTYPE, PERFORMANCETYPE, ExtensionFactory, ProfileCodeService } from "@allianzSND/core";
import { goalSettingStep } from '../interface/goalSettingStep';
import { GoalSettingStep4 } from './model/GoalSettingStep4';
import { GoalStoreService } from './goal-store.service';
import { AgencyPlanDetail } from './model/AgencyPlanDetail';
import { AgencyPlanGoalExpected } from './model/AgencyPlanGoalExpected';
import { GoalSettingYearConfig } from './model/GoalSettingYearConfig';
import { MonthlyPlanFYFCData } from './model/MonthlyPlanFYFCData';
import { GoalSettingStepData } from './model/GoalSettingStepData';
import { GoalSettingStep3 } from './model/GoalSettingStep3';
import { GoalSettingGoalStatus } from './model/GoalSettingGoalStatus';
import { IsApproveInfo } from './model/IsApproveInfo';
import { ApproveInfo } from './model/ApproveInfo';
import { AgencyPlanMainInfo } from "./model/AgencyPlanMainInfo";
export declare class GoalSettingService {
    private dispatcher;
    private APIFactory;
    private goalStore;
    private errorHandler;
    private goalSettingStep;
    private yearConfigExtension;
    private goalSettingExtension;
    private dataSyncService;
    private profileCodeService;
    private TextConvertStep1Map;
    private TextConvertStep2Map;
    private TextConvertStep5Map;
    private StepTextConvertMap;
    private ColMapToProfile;
    private ColMapToProfileCodeMap;
    readonly DASH: string;
    constructor(dispatcher: APIDispatch, APIFactory: APIFactory, goalStore: GoalStoreService, errorHandler: ErrorHandler, goalSettingStep: goalSettingStep, yearConfigExtension: ExtensionFactory, goalSettingExtension: ExtensionFactory, dataSyncService: DataSyncService, profileCodeService: ProfileCodeService);
    getGoalSettingStep1_5Data(year: number, isAdjust: boolean): Observable<GoalSettingStepData>;
    private _getGoalSettingStep1_5Data;
    calculateActivityData(goal: string, perCase: string, yearConfig: GoalSettingYearConfig, activityDays?: string): GoalSettingStep3;
    calculateMonthActualPlan(yearConfig: GoalSettingYearConfig, goal: string, actualList: Array<string>): GoalSettingStep4;
    calculateActual(PerformanceSettlementMonth: number, MonthActualPlanList: Array<MonthlyPlanFYFCData>): string;
    calculateForecast(PerformanceSettlementMonth: number, MonthActualPlanList: Array<MonthlyPlanFYFCData>): string;
    calulateSumByArray(monthList: Array<any>): string;
    calculateShortfall(goal: any, forecast: any): string;
    isNeedApprove(SubmitType: SUBMITGOALTYPE, DataYear: number, adjustDatas: GoalSettingStepData): Observable<IsApproveInfo>;
    private _isNeedApprove;
    isNeedApprove_plan(FYFC: string, Forecast: string, GoalAndPlanDifferenceLimit: number): Observable<IsApproveInfo>;
    submitGoal(submitType: SUBMITGOALTYPE, IsNeedApprove: boolean, submitData: GoalSettingStepData): Observable<SuccessStatus>;
    private _submitGoal;
    getIsFirstUse(): Observable<boolean>;
    getSettingStatus(): Observable<Array<GoalSettingGoalStatus>>;
    private _getSettingStatus;
    private yearJsonToMap;
    getOverviewData(performanceType: PERFORMANCETYPE, DataYear?: number, AgentID?: string): Observable<GoalSettingStepData>;
    private _getOverviewDataBySQL;
    private _getOverviewDataByRestful;
    getMonthActualPlan(performanceType: PERFORMANCETYPE, DataYear: number, monthQuantityOfYear?: number, PerformanceSettlementMonth?: number, AgentID?: string): Observable<GoalSettingStep4>;
    private _getMonthActualPlanByRestful;
    private _getMonthActualPlanBySQL;
    getAgencyPlanMainData(dataYear: number, AgentID?: string): Observable<AgencyPlanMainInfo>;
    private getAgencyPlanMainDataBySQL;
    private _agencyPlanMainDataObjToBean;
    private getAgencyPlanMainDataByRestful;
    getAgencyPlanDetailData(dataYear: number): Observable<Array<AgencyPlanDetail>>;
    private _agencyPlanDetailObjToBean;
    getGoalExpected(dataYear: number): Promise<AgencyPlanGoalExpected>;
    private _agencyPlanGoalExpectedObjToBean;
    calculaRecruitmentSum(goalExpected: AgencyPlanGoalExpected): number;
    saveGoalExpected(expectedRecruitment: object, indirectRecruitment: number): Observable<any>;
    numberToFix(n: number, toFix: number): number;
    strip(num: any, precision?: number): number;
    calculateNowToYearEndGoal(FYFC: any, actual: any): string;
    calculateAllYearGoal(NowToYearEnd: any, actual: any): string;
    private _isPopup;
    saveFeedbackState: boolean;
    getActualPlanFromMonthList(list: Array<MonthlyPlanFYFCData>, actualMonth: number): string[];
    calculateANPFromFYFC(FYFC: any, rate: any): string;
    calculateFYFCFromANP(ANP: any, rate: any): string;
    syncGoalDatas(): Promise<void>;
    syncAgencyPlan(): Promise<void>;
    syncYearConfig(): Promise<void>;
    pushApproveGoal(approveInfo: ApproveInfo): Promise<SuccessStatus>;
    changeToDash(param: any): string;
    private _pushApproveGoal;
    private _pushGoalSetting;
    private _converSelectCode;
}
