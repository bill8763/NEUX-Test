/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ProfileCodeService } from "@allianzSND/core";
import { Injectable } from "@angular/core";
import { v4 as uuid } from 'uuid';
import { addHours, addMinutes, getDate, getHours, getMinutes, isSameDay, isAfter, getMonth, getYear, startOfDay, isBefore } from 'date-fns';
import { SelectOption } from "@allianzSND/ui";
import * as i0 from "@angular/core";
import * as i1 from "@allianzSND/core";
export class DefaultCalendarEditMetaController {
    /**
     * @param {?} profileCodeService
     */
    constructor(profileCodeService) {
        this.profileCodeService = profileCodeService;
        this.alertOpt = [];
        this.alertOpt = this.profileCodeService.getCodeArray("Calendar_RemindTime");
    }
    /**
     * @param {?} data
     * @return {?}
     */
    onDataUpdated(data) {
        /** @type {?} */
        let IsAllDay = data['IsAllDay'] === 'Y';
        data["Alert1Option"] = this.getAlertOption(IsAllDay);
        data["Alert2Option"] = this.getAlertOption(IsAllDay);
        data["Alert3Option"] = this.getAlertOption(IsAllDay);
        if (data['StartTime']) {
            data['StartDate'] = startOfDay(new Date(data['StartTime']));
            data['StartTime'] = new Date(data['StartTime']);
        }
        else {
            data['StartDate'] = data["ViewDate"];
            data['StartTime'] = addHours(this.toFiveUnit(this.combineDateTime(data["ViewDate"], new Date())), 1);
            if (!IsAllDay)
                data['StartDate'] = data['StartTime'];
        }
        if (data['EndTime']) {
            data['EndDate'] = startOfDay(new Date(data['EndTime']));
            data['EndTime'] = new Date(data['EndTime']);
        }
        else {
            data['EndDate'] = startOfDay(data['StartDate']);
            data['EndTime'] = addHours(data['StartTime'], 1);
            if (!IsAllDay)
                data['EndDate'] = data['EndTime'];
        }
        if (!data['IsAllDay']) {
            data['IsAllDay'] = 'N';
        }
        if (!data['IsAlert']) {
            data['IsAlert'] = 'Y';
        }
        if (!data['Alert1']) {
            data['Alert1'] = IsAllDay ? "2" : "8";
        }
        if (!data['Alert2']) {
            data['Alert2'] = '';
        }
        console.log("Default controller onDataUpdated:", data);
    }
    /**
     * @param {?} column
     * @param {?} value
     * @param {?} groupId
     * @param {?} index
     * @param {?} data
     * @param {?} validationResult
     * @return {?}
     */
    onValueChange(column, value, groupId, index, data, validationResult) {
        /** @type {?} */
        let IsAllDay = data['IsAllDay'] === 'Y';
        if (column === 'IsAllDay') {
            data[column] = value ? 'Y' : 'N';
            this.checkEndBeforeStartError(data, validationResult);
            data["Alert1Option"] = this.getAlertOption(value);
            data["Alert2Option"] = this.getAlertOption(value);
            data["Alert3Option"] = this.getAlertOption(value);
            data["Alert1"] = value ? "2" : "8";
            data["Alert2"] = "";
            validationResult.deleteError("Alert1");
            validationResult.deleteError("Alert2");
        }
        else if (column === 'IsAlert') {
            data[column] = value ? 'Y' : 'N';
            if (value) {
                if (data['Alert1'] === data['Alert2'] && data['Alert1'])
                    validationResult.setErrorMap('Alert2', 'Wrong_Alert');
                else if (!data['Alert1'] && !data['Alert2'])
                    validationResult.setErrorMap('Alert1', 'Wrong_Alert_Require');
            }
            else {
                validationResult.deleteError("Alert1");
                validationResult.deleteError("Alert1");
            }
        }
        else if (column === 'StartDate') {
            if (!value)
                data["StartDate"] = startOfDay(new Date());
            else
                data["StartDate"] = value;
            if (IsAllDay) {
                data['EndDate'] = data["StartDate"];
            }
            else {
                data['EndDate'] = this.getToDate(data["StartDate"], data["StartTime"]);
                data['EndTime'] = this.getToDate(data["StartDate"], data["StartTime"]);
            }
            this.checkEndBeforeStartError(data, validationResult);
        }
        else if (column === 'StartTime') {
            if (!value)
                data["StartTime"] = this.toFiveUnit(new Date());
            else
                data["StartTime"] = this.toFiveUnit(value);
            data['EndDate'] = this.getToDate(data["StartDate"], data["StartTime"]);
            data['EndTime'] = this.getToDate(data["StartDate"], data["StartTime"]);
            this.checkEndBeforeStartError(data, validationResult);
        }
        else if (column === 'EndDate') {
            //CHECK if to > from+15
            if (!value)
                data["EndDate"] = startOfDay(new Date());
            else
                data["EndDate"] = value;
            this.checkEndBeforeStartError(data, validationResult);
        }
        else if (column === 'EndTime') {
            if (!value)
                data["EndTime"] = this.toFiveUnit(new Date());
            else
                data["EndTime"] = this.toFiveUnit(value);
            this.checkEndBeforeStartError(data, validationResult);
        }
        else if (column === 'Alert1' || column === 'Alert2') {
            if (data['Alert1'] === data['Alert2'] && data['Alert1'])
                validationResult.setErrorMap('Alert2', 'Wrong_Alert');
            else if (data['IsAlert'] === 'Y' && !data['Alert1'] && !data['Alert2'])
                validationResult.setErrorMap("Alert1", "Wrong_Alert_Require");
            else {
                validationResult.deleteError('Alert1');
                validationResult.deleteError('Alert2');
            }
        }
    }
    /**
     * @param {?} data
     * @param {?} validationResult
     * @return {?}
     */
    onValidateAll(data, validationResult) {
        if (data["IsAllDay"] === 'Y') {
            data["StartDateTime"] = startOfDay(data["StartDate"]);
            data["EndDateTime"] = startOfDay(data["EndDate"]);
        }
        else {
            data["StartDateTime"] = this.combineDateTime(data["StartDate"], data["StartTime"]);
            data["EndDateTime"] = this.combineDateTime(data["EndDate"], data["EndTime"]);
        }
        if (!data["ClientID"])
            data["ClientID"] = uuid();
        if (data["IsAlert"] === 'Y' && !data["Alert1"] && !data["Alert2"]) {
            validationResult.setErrorMap("Alert1", "Wrong_Alert_Require");
        }
        return validationResult.isTrue();
    }
    /**
     * @param {?} type
     * @param {?} id
     * @param {?} data
     * @return {?}
     */
    btnClick(type, id, data) { }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    toFiveUnit(date) {
        /** @type {?} */
        let now = date;
        /** @type {?} */
        let minutes = getMinutes(now);
        /** @type {?} */
        let toAdd = minutes % 5 === 0 ? 0 : 5 - (minutes % 5);
        return addMinutes(now, toAdd);
    }
    /**
     * @private
     * @param {?} fromDate
     * @param {?} fromTime
     * @return {?}
     */
    getToDate(fromDate, fromTime) {
        console.log("GetToDate:", fromDate, fromTime);
        console.log("GetMonth:", getMonth(fromDate));
        /** @type {?} */
        let from = new Date(getYear(fromDate), getMonth(fromDate), getDate(fromDate), getHours(fromTime), getMinutes(fromTime));
        from = this.toFiveUnit(from);
        return addHours(from, 1);
    }
    /**
     * @private
     * @param {?} data
     * @param {?} validationResult
     * @return {?}
     */
    checkEndBeforeStartError(data, validationResult) {
        validationResult.deleteError("StartDate");
        validationResult.deleteError("EndDate");
        validationResult.deleteError("StartTime");
        validationResult.deleteError("EndTime");
        /** @type {?} */
        let IsAllDay = data['IsAllDay'] === 'Y';
        if (!(isSameDay(data["StartDate"], data["EndDate"]) || isAfter(data["EndDate"], data["StartDate"]))) {
            validationResult.setErrorMap('StartDate', "Wrong_Start_Time");
            return;
        }
        if (!IsAllDay) {
            /** @type {?} */
            let fromDate = data["StartDate"];
            /** @type {?} */
            let fromTime = data["StartTime"];
            /** @type {?} */
            let EndDate = data["EndDate"];
            /** @type {?} */
            let EndTime = data["EndTime"];
            /** @type {?} */
            let from = this.combineDateTime(fromDate, fromTime);
            /** @type {?} */
            let end = this.combineDateTime(EndDate, EndTime);
            if (isBefore(end, addMinutes(from, 15))) {
                validationResult.setErrorMap('EndDate', "");
                validationResult.setErrorMap('EndTime', "Wrong_End_Time");
            }
        }
    }
    /**
     * @private
     * @param {?} date
     * @param {?} time
     * @return {?}
     */
    combineDateTime(date, time) {
        return new Date(getYear(date), getMonth(date), getDate(date), getHours(time), getMinutes(time));
    }
    /**
     * @private
     * @param {?} IsAllDay
     * @return {?}
     */
    getAlertOption(IsAllDay) {
        return this.alertOpt.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => JSON.parse(x.getArguments()).isAllDay === IsAllDay))
            .map((/**
         * @param {?} x
         * @return {?}
         */
        x => new SelectOption(x.getCode(), this.profileCodeService.convertCode2Text(x.getTypeId(), x.getCode()))));
    }
}
DefaultCalendarEditMetaController.decorators = [
    { type: Injectable, args: [{
                providedIn: "root"
            },] }
];
DefaultCalendarEditMetaController.ctorParameters = () => [
    { type: ProfileCodeService }
];
/** @nocollapse */ DefaultCalendarEditMetaController.ngInjectableDef = i0.defineInjectable({ factory: function DefaultCalendarEditMetaController_Factory() { return new DefaultCalendarEditMetaController(i0.inject(i1.ProfileCodeService)); }, token: DefaultCalendarEditMetaController, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefaultCalendarEditMetaController.prototype.alertOpt;
    /**
     * @type {?}
     * @private
     */
    DefaultCalendarEditMetaController.prototype.profileCodeService;
}
//# sourceMappingURL=data:application/json;base64,