{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@allianzSND/integration-calendar-customer/lib/calendar/injection-token.ts","ng://@allianzSND/integration-calendar-customer/lib/calendar/components/calendar-edit/DefaultCalendarEditMetaController.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/injectionToken/injection-token.ts","ng://@allianzSND/integration-calendar-customer/lib/calendar/components/calendar-edit/calendar-edit.component.ts","ng://@allianzSND/integration-calendar-customer/lib/calendar/components/calendar-detail/DefaultCalendarDetailMetaController.ts","ng://@allianzSND/integration-calendar-customer/lib/calendar/components/calendar-detail/calendar-detail.component.ts","ng://@allianzSND/integration-calendar-customer/lib/calendar/components/calendar-filter/calendar-filter.component.ts","ng://@allianzSND/integration-calendar-customer/lib/calendar/service/model/CalendarEventColor.ts","ng://@allianzSND/integration-calendar-customer/lib/calendar/service/model/CalendarEventDetail.ts","ng://@allianzSND/integration-calendar-customer/lib/calendar/service/calendar-service.service.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/components/bean/customer-filter-preset.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/components/bean/customer-filter-criteria.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/service/model/CustomerItem.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/service/model/CustomerAlertItem.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/service/model/CustomerTel.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/service/model/CustomerBirthday.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/components/customer-filter/DefaultCustomerCriteriaSearch.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/service/customer-service.service.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/utils/customer-utils.ts","ng://@allianzSND/integration-calendar-customer/lib/calendar/components/calendar/calendar.component.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/components/customer-contact-list/customer-contact-list.component.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/components/customer-detail/customer-detail.component.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/service/customerStore/customerStore-service.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/components/customer-edit/DefaultCustomerEditMetaController.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/components/customer-edit/customer-edit.component.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/components/customer-filter/customer-filter.component.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/components/customer-import/customer-import.component.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/components/customer-list/customer-list.component.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/components/bean/customer-import-group.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/components/customers/DefaultCustomerImportDisplay.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/components/customers/customers.component.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/components/customer-contact-detail/customer-contact-detail.component.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/components/customer-contact-edit/customer-contact-edit.component.ts","ng://@allianzSND/integration-calendar-customer/lib/integration-calendar-customer.module.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/components/bean/customer-confirm-action.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/service/model/CustomerAddress.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/service/model/CustomerContactNote.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/service/model/CustomerEmail.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/service/model/CustomerList.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/service/model/MobileCustomerItem.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/service/model/MobileCustomerList.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/api/CustomerAddContactNote.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/api/CustomerAutoDeleteAPI.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/api/CustomerContactNoteAPI.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/api/CustomerDeleteAPI.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/api/CustomerDeleteContactNote.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/api/CustomerDetailAPI.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/api/CustomerEditContactNote.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/api/CustomerEditOvertimeAPI.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/api/CustomerGetePresetAPI.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/api/CustomerListAPI.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/api/CustomerSaveDetailAPI.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/api/CustomerSavePresetAPI.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/api/CustomerTelAPI.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/api/CustomerUpdateFollowAPI.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/api/ImportContactAPI.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/api/CustomerBirthdayListAPI.ts","ng://@allianzSND/integration-calendar-customer/lib/customer/api/DashboardUpdateToReadAPI.ts","ng://@allianzSND/integration-calendar-customer/lib/calendar/api/CalendarEventAddAPI.ts","ng://@allianzSND/integration-calendar-customer/lib/calendar/api/CalendarEventDeleteAPI.ts","ng://@allianzSND/integration-calendar-customer/lib/calendar/api/CalendarEventDetailAPI.ts","ng://@allianzSND/integration-calendar-customer/lib/calendar/api/CalendarEventListAPI.ts","ng://@allianzSND/integration-calendar-customer/lib/calendar/api/CalendarEventUpdateAPI.ts","ng://@allianzSND/integration-calendar-customer/lib/calendar/api/CalendarEventSaveAPI.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","__values","o","m","i","__read","r","ar","error","__spread","arguments","concat","calendarEditMetaControllerToken","InjectionToken","calendarDetailMetaControllerToken","DefaultCalendarEditMetaController","profileCodeService","alertOpt","getCodeArray","onDataUpdated","data","IsAllDay","getAlertOption","startOfDay","Date","addHours","toFiveUnit","combineDateTime","console","log","onValueChange","column","groupId","index","validationResult","checkEndBeforeStartError","deleteError","setErrorMap","getToDate","onValidateAll","uuid","isTrue","btnClick","type","id","date","now","minutes","getMinutes","toAdd","addMinutes","fromDate","fromTime","getMonth","from","getYear","getDate","getHours","isSameDay","isAfter","EndDate","EndTime","end","isBefore","time","_this","filter","x","JSON","parse","getArguments","isAllDay","map","SelectOption","getCode","convertCode2Text","getTypeId","Injectable","args","providedIn","ProfileCodeService","customerEditMetaControllerToken","customerDetailMetaControllerToken","customerContactEditMetaControllerToken","customerContactDetailMetaControllerToken","customerFilterMetaControllerToken","customerCriteriaSearchToken","customerImportDisplayToken","addProgressPointToken","customerShowRuleToken","CalendarEditComponent","elementRef","metaService","metaParser","metaExecutor","defaultMetaController","customMetaController","addProgressPoint","showRule","_super","isMetaDataDone","EventEmitter","isSaveClickChange","editType","saveEvent","_viewDate","_isSaveClick","language","Language","_translateMap","Map","calendarEventList","activityOptionList","customerClientOptionList","alertOptionList","eventListBGColor","_customerClientID","_metaController","tslib_1.__extends","defineProperty","isSaveClick","onBtnClick","setTimeout","emit","_clientID","isMetaLoaded","loadData","getMetaParams","customerItemList","_data","fillDefaultVal","translateMap","viewDate","warn","ngOnInit","windowWidth","window","innerWidth","editEvent","addCalendarPoint","isError","alert","getErrorMsg","scrollToError","getMetaID","shouldHidden","indexOf","metaConfig","Rows","onResize","event","target","showDate","_convertDate","metaLoaded","errorBlock","nativeElement","querySelector","scrollContent","document","move","offsetTop","scrollTo","top","behavior","convertDate","format","Component","selector","template","ElementRef","MetaService","DefaultMetaParser","APIExecutor","Optional","Inject","showRuleToken","Output","Input","HostListener","FormMetaComponent","DefaultCalendarDetailMetaController","vaildResult","CalendarDetailComponent","DatePipe","defaulterMetaController","_customerClientName","_calendarEventDetail","calendarEventDetail","StringUtils","isNotEmpty","start","allDay","clientID","val","waitUntilMetaLoaded","getDisplayDateHTML","transform","DisplayMetaComponent","CalendarFilterComponent","_optionMap","activityTypeList","currentFilterOptionList","activityTypeListChange","optionMap","get","forEach","codeItem","isCheck","onActivityFilter","toActivityColor","item","color","CalendarEventColor","primary","secondary","_primary","_secondary","setCalendarEventColor","CalendarEventDetail","calendarID","customerClientID","title","location","calendarType","isAlert","alert1","alert2","alert3","remark","_calendarID","_title","_location","_activity","_isAllDay","_start","_end","_isAlert","_alert1","_alert2","_alert3","_remark","isEmpty","eventColor","_color","backgroundColor","_displayActivity","displayActivity","_displayAlert1","displayAlert1","_displayAlert2","displayAlert2","CalendarService","dispatch","APIFactory","getCalendarEventList","key","debug","calendarEventListAPI","getAPI","startTime","endTime","Observable","observer","subscribe","returnList","json","event_1","ClientID","CalendarID","CustomerClientID","Title","Location","CalendarType","StartTime","Remark","IsAlert","Alert1","Alert2","Alert3","getArgumentsByCode","sortCalendarEventList","complete","getCalendarEventDetail","calendarEventDetailAPI","detail","eventDetail","deleteCalendarEvent","calendarEventDeleteAPI","addCalendarEvent","adjustAlert","calendarEventAddAPI","setCalendarEvent","updateCalendarEvent","calendarEventUpdateAPI","day","temp","min","activity","calendarValidation","ValidationResult","differenceInMinutes","j","APIDispatch","CustomerFilterPreset","addValues","values","CustomerFilterCriteria","keyword","filterMap","extension","_keyword","addCriteria","filterCol","undefined","includes","set","addCriteriaCols","hasCriteria","size","getFilterMap","getOptionMap","setOption","name","getOption","has","toPresetJSON","preset","toMetaJSON","clone","cloneCriteria","assign","CustomerItem","firstName","lastName","possibility","complementPercent","isFollow","isOtherSource","isOverTimeAlert","_firstName","_lastName","_tag","_complementPercent","_isFollow","_isOtherSource","_isHighlight","tag","isHighLight","_showName","showName","CustomerAlertItem","_name","CustomerTel","telType","tel","dataSource","CustomerBirthday","birthdayMonth","birthdayDate","DefaultCustomerCriteriaSearch","getRestriction","criteria","conditions","compoundRestriction","ORCompoundRestriction","LikeRestriction","array","birthdayRestriction","monthArray","array_1","tslib_1.__values","array_1_1","birthday","today","startNum","endNum","String","AndCompoundRestriction","EqualRestriction","InRestriction","NotEqualRestriction","completenessOption","completenessRestriction_1","profileCode","code","obj","GreaterOrEqualRestriction","LessOrEqualRestriction","CustomerService","dispatcher","defaultCriteriaSearch","customCriteriaSearch","_isFirstTime","isFirstTime","updateMessageToRead","messageType","messageDataCategory","dashboardUpdateToReadAPI","setMessageType","setMessageDataCategory","getOverTimeCustomerList","customerOverTimeAPI","setClientID","messages","message","customerList","getAutoDeleteCustomerList","customerDeleteAPI","event_2","updateCustomerFollowStatus","setClient","setIsFollow","getFilterCriteriaPreset","getFilterCriteria","settingArray","SettingVal","saveFilterCriteria","filterCriteria","setFilterCriteria","checkInFilterCriteria","customerListAPI","restrictions","getCustomerList","_pageInfo","pageInfo","isOtherSystem","DataSource","IsFollow","completeness","Completeness","IsOverTimeAlert","event_3","FirstName","LastName","Possibility","getCustomerBirthdayList","targetDate","subN","addN","customerBirthdayListAPI","birthdayList","event_4","getCustomerDetail","of","customerDetailAPI","toPromise","resp","Header","status","Body","importContact","items","importContactAPI","setItems","validProfile","customerDetail","emails","i_1","email","isEmailFormat","toString","RegExp","test","deleteCustomerProfile","deleteAPI","getCustomerContactNote","customerContactNoteAPI","setPageInfo","customerContactNoteList","deleteCustomerContact","contactClientID","deleteCustomerContactAPI","setContactClientID","getCustomerContactTel","customerTelAPI","returnCustomerTel","TelType","Tel","element","CustomerUtils","customerShowRule","setCode2Option","codeArray","options","codeArray_1","codeArray_1_1","displayText","countCompleteness","customerObj","calculateCompleteness","setCustomerDefaultValue","dataObject","getValue","Number","age","countAge","setValue","ageRange","countAgeRange","rangeResult","dates","calCEIntervalDays","Math","floor","calRocIntervalDays","sDate","eDate","leftPad","begDateStr","substring","endDateStr","begDate","interval","getTime","msecPerHour","differenceInCalendarDays","padLen","padVal","convertNameToShow","convertName","CalendarComponent","changeDetector","settingService","translateService","calendarService","customerService","customerUtils","modalManager","dataSyncService","_parentHeight","parentHeightChange","YEAR","MONTH","WEEK","DAY","viewTypeIndex","viewType","weekStartsOn","calendarHeight","storeStartDate","storeEndDate","calendarEventListAfterFilter","viewDateCalendarEventList","calendarEventEdit","customerClientMap","alertTypeList","isExpandFilter","isExpandDetail","isExpandEdit","isDelete","isSave","isCalendarDelete","isLoading","isCalendarEditMetaDataDone","isCalendarDetailMetaDataDone","dayTypesList","weekdaysList","monthsList","noSchedule","outsideSpace","left","paddindData","right","bottom","innerHeight","titleBtnsBlock_ele","titleBtnsBlock","titleBtnsBlock_size","getBoundingClientRect","height","parseInt","getComputedStyle","marginBottom","markForCheck","calcuContentHeight","scrollToCurrentTime","_this_1","dayType","translate","weekday","month","defaultSettingVal","getSetting","calendarSetting_1","keys","setCurrentFilterOption","typeChange","loadCalendarData","createCustomerList","ngAfterViewInit","switchPadViewMode","activeTabIndex","detectChanges","startOfMonth","endOfMonth","startOfWeek","endOfWeek","endOfDay","mobileBackViewType","clickToday","loadViewDateCalendarEventList","onViewDateChange","viewDateChange","action","isSameMonth","isPad","ChangeAction","CLICK","refreshCalendarEventList","loadCalendarEventDetail","customerClientName","onToggleDetailModal","queryDate","subMinutes","addDays","onClickDetail","eventItem","onClickDeleteCancel","onClickDeleteConfirm","toggleLoading","syncFunc","_a","onClickAppointmentSave","onSaveCalendarEvent","clientID_1","onToggleAppointmentModal","addEvent","currentTime","onActivityTypeListChange","settingVal","filterOptionChange","settingValueChange","settingValue","settingObj","Setting","SettingID","SettingName","stringify","updateSetting","currentFilterOption","timeEventAll_ele","querySelectorAll","timeEventAll_ele_1","timeEventAll_ele_1_1","timeEvent_ele","mobileDayHeader_ele","allDayEvent_ele","allDayEvent_h","style","maxHeight","currentHour","scrollTop","year_ele","yearTag_ele","minHeight","marginTop","month_ele","renderWeek","onCloseInfo","onToggleFilterModal","onInfoTabClick","dom","nowShowBtn","messageContent","closeInfo","resetInfoPos","filterInfo","countPos","PageInfo","pageSize","temp_array","data_1","data_1_1","custItem","mobileFilterClick","onMetaDataDone","funcName","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","SettingService","TranslateService","ModalManager","DataSyncService","ViewChild","UiInformationBtnComponent","UiInformationContentComponent","CustomerContactListComponent","dateUtils","onAddNote","onDisplayNote","onEditNote","onDeleteNote","contactListRefresh","_contactList","contactList","NoteTimeDisplay","toNoteTime","NoteTime","closeSlidingItems","close","closeOpened","refreshContactNote","addNote","displayNote","note","editNote","deleteNote","trackByClientID","defaultStr","toDateString","slice","DateUtils","decorators","CustomerDetailComponent","changeDetctor","inputExecutor","onEditDetail","onCallPhone","onDeleteDetail","onAddAppointment","followChange","DisplayData","dash","isEmptyAppointment","isEmptyEdit","isEmptyDel","isEmptyDetailInfo","isEmptyGroupDetailInfo","isEmptyContactNote","isCollapseBtnShow","isCardExtendTemplateNull","isCollapseOpen","reduce","acc","cur","Columns","convertEmptyValToDisplayText","checkInfoIsEmpty","changeCollateButton","grid","pc","AgeRange","ContactFrequancy","address","addr","toFullAddress","col","BirthdayDisplay","Birthday","toBirthdayStr","addressObj","convertAddress","Country","City","Area","Zipcode","Address","join","edit","delete","callPhone","addAppointment","trackByFn","isFollowChange","InputExecutor","ViewChildren","CustomerStoreService","_customerState","CUSTOMER_STATE","DISPLAY","_customerDetail","_customerList","_customerCriteria","_stateBehaviorSubject","BehaviorSubject","_detailBehaviorSubject","_listBehaviorSubject","_criteriaBehaviorSubject","_detailIDSubject","setState","state","getState","setCurrentCustomerDetail","getCurrentCustomerDetail","setCustomerList","list","setCriteria","getCriteria","getCustomerDetailID","IMPORT","EDIT","ADD_SAVED","EDIT_SAVED","FIRST","DefaultCustomerEditMetaController","ele","Email","CustomerEditComponent","router","customerStoreService","sendContentHeight","customerDetailSubscribe","pageTitle","disableAge","isDisplaySavePopup","isShow","edit_type","customerID","Footer","ngOnDestroy","unsubscribe","addCustomerPoint","navigate","addProfile","round","contentHeight","content","offsetHeight","AppRouter","CustomerFilterComponent","_criteria","doneCriteria","unsubscribe$","Subject","convertCriteriaToObject","clear","pipe","takeUntil","clearCriteria","save","saveCriteria","isArray","getCheckboxValue","getDefaultData","defaultObj","footerObj","convertToCriteria","colID","CustomerImportComponent","importContractMap","importCustomer","doImport","importItems","group","groupName","getItems","toDisplayName","firstname","lastname","CustomerListComponent","loadingFinish","refreshFinish","customerClick","customerLoad","customerRefresh","_filterType","filterType","_onClickCustomerID","onClickCustomerID","onClickCustomer","loadCustomer","refreshCustomer","customerItem","CustomerImportGroup","_isShow","_items","_groupName","addItem","DefaultCustomerImportDisplay","customImportDisplay","convert","customer","CustomersComponent","deviceService","customerImportDisplay","notificationMgr","APP_CONFIG","isShowDetailScroll","showCustomerList","isRefreshDetail","isOpen","classSearch","isDisplayImportSavePopup","isDisplayDelCustomerPopup","isDisplayConfirmAlertPopup","isDisplayInfoAlertPopup","isDisplayUpdateRemind","isDisplayDeleteRemind","isPopupImport","isPopupFilter","isPopupCallPhone","isPopupNoteDetail","isPopupEditNote","isPopupDeleteNote","isPopupConfirmDisable","isDisplayDeletePopup","alertOverTimeList","alertAutoDeleteCustomer","isLoadingFinishContent","isRefreshFinishContent","isLazyLoading","customerContactDetail","customerContactList","contactListPageInfo","customerListPageInfo","_filterCriteria","mobileResultSize","importData","importContactList","importSearchKeyword","isLoadCriteria","isClearCriteria","_onImportResult","currentEditNote","isRefreshContactList","loadContactList","classBarMove","emptyCustomer","currentCustomer","confirmAction","customerState","pre_criteria","clearSubject","saveFilterSubject","contactSaveSubject","env","pre_customerList","hasCriteria_1","inCriteria_1","sortCustomerList","onGetCustomerDetailByID","refreshCustomerList","loadPresetCriteria","importPopup","showCategoryMessage","isAppend","resetPage","take","clickItemFilter","targetClientID","sort","n1","n2","n1_name","n2_name","localeCompare","onGetCustomerContactListByID","toggleSearch","searchCustomerName","onChangeCustomer","clickItem","onCustomerLoad","nextPage","onCustomerRefresh","deleteCustomer","doDeleteCustomer","addCustomer","editCustomer","classList","remove","DisplayDate","Name","doDeleteContact","onSaveNote","onSaveNoteFinish","doAction","needConfirmPopup","import","confirmPopup","detectScroll","isBtm","searchContactsByName","importList","trim","firstWord","toLowerCase","error_1","pushNotification","NotificationType","ContactPermissionError","getDevicePlatform","grantContactPermission","displayImportPopup","refreshImport","lowerCaseKeyword","onCloseImportPopup","onImportCustomer","callCustomer","callPhoneTelArray","cancelCallPhone","telNumber","open","fun","clearFilter","doFilter","count","cancelDelete","refreshContent","loadContent","isShowChange","convertDateAndTime","onCalendarEditMetaDataDone","filterCriteriaPopupChange","animations","trigger","width","opacity","transition","animate","DeviceService","NotificationMgr","ConfigToken","CustomerContactDetailComponent","CustomerContactEditComponent","current","saveSubject","IntegrationCalendarCustomerModule","NgModule","declarations","imports","NxIconModule","NxButtonModule","NxFormfieldModule","NxDatefieldModule","NxNativeDateModule","UIModule","CoreModule","CommonModule","FormsModule","NxDropdownModule","NxRadioModule","NxInputModule","NxMessageModule","NxProgressbarModule","NxModalModule","NxAccordionModule","NxGridModule","ReactiveFormsModule","providers","exports","CustomerConfirmAction","_action","_optionObj","option","CustomerAddress","addressType","country","city","area","zipcode","dataSorce","CustomerContactNote","noteMessage","getClientID","CustomerEmail","_emailType","_email","_dataSource","emailType","CustomerList","addCustomerItem","customerEvent","MobileCustomerItem","phoneNumber","MobileCustomerList","mobileCustomerList","CustomerAddContactNoteAPI","daoFactory","getAPIName","getMockPath","executeSQL","Data","Note","contactObj","getDefaultTable","contactExtObj","dao","getDefaultDao","ClientCustomDao","TableUtils","fillTableColumn","addRestriction","transactionUpdate","transactionInsert","runTransaction","SQLiteResponse","CustomerAutoDeleteAPI","messageObj","queryByTable","CustomerContactNoteAPI","OrderByRestriction","order","LimitRestriction","OffsetRestriction","page","CustomerDeleteAPI","deleteByTable","CustomerDeleteContactNoteAPI","CustomerDetailAPI","_id","defaultDao","dao_1","customerTelObj","telList","customerEmailObj","customerAddrObj","isSuccess","Occupation","Company","BirthdayYear","BirthdayMonth","BirthdayDate","Gender","Income","Source","Marriage","Children","Familiarity","RecentStatus","MANPA","CustomerEditContactNoteAPI","setNote","setNoteTime","noteTime","updateByTable","CustomerEditOvertimeAPI","CustomerGetPresetAPI","setting","CustomerListAPI","_queryClientID","_restrictions","condition","CustomerSaveDetailAPI","setDetail","base_dao","customerExtObj","getFullYear","_deletedClientID","phoneInsertObj","phoneInsertExtObj","emailInsertObj","emailInsertExtObj","addressInsertObj","addressInsertExtObj","transactionDelete","_d","_e","phone","_f","_g","EmailType","_h","_j","_judgeIsAddressEmpty","AddressType","total","each","CustomerSavePresetAPI","CustomerTelAPI","telObj","CustomerUpdateFollowAPI","ImportContactAPI","customerExt","phoneInsertObj_Ext","number","importEmailCount","emailInsertObj_Ext","addressInsertObj_Ext","CustomerBirthdayListAPI","DaoFactory","_DaoFactory","_targetDate","setYear","_subNDayTimeStamp","subDays","_subN","_addNDayTimeStamp","_addN","isRangeCrossYear","_judgeCustomrtIsInRange","birthDayTimeStamp","DashboardUpdateToReadAPI","_messageType","dataCategory","_messageDataCategory","CalendarEventAddAPI","_calendarEvent","calendarObj","insertByTable","CalendarEventDeleteAPI","calendarExtObj","CalendarEventDetailAPI","CalendarEventListAPI","_startTime","_endTime","CalendarEventUpdateAPI","CalendarEventSaveAPI","Alerts","a","StartDateTime","EndDateTime"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { InjectionToken } from \"@angular/core\";\nimport { MetaController } from \"@allianzSND/core\";\n\nexport const calendarEditMetaControllerToken = new InjectionToken<MetaController>(\"calendarEditMetaController\");\nexport const calendarDetailMetaControllerToken = new InjectionToken<MetaController>(\"calendarDetailMetaController\");","import { MetaController, ValidationResult, ProfileCodeService, ProfileCode } from \"@allianzSND/core\";\nimport { Injectable } from \"@angular/core\";\nimport { v4 as uuid } from 'uuid';\nimport {\n    addDays,\n    addHours,\n    addMinutes,\n    differenceInCalendarDays,\n    differenceInMinutes,\n    getDate,\n    getHours,\n    getMinutes,\n    isSameDay,\n    isAfter,\n    getMonth,\n    getYear, setDate, setHours, setMinutes, setYear, setMonth, getSeconds, setSeconds, isEqual, startOfDay, isBefore\n} from 'date-fns';\nimport { SelectOption } from \"@allianzSND/ui\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DefaultCalendarEditMetaController implements MetaController {\n\n    constructor(\n        private profileCodeService: ProfileCodeService\n    ) {\n        this.alertOpt = this.profileCodeService.getCodeArray(\"Calendar_RemindTime\");\n    }\n\n    private alertOpt: Array<ProfileCode> = [];\n\n    onDataUpdated(data: any) {\n\n        let IsAllDay = data['IsAllDay'] === 'Y';\n\n        data[\"Alert1Option\"] = this.getAlertOption(IsAllDay);\n        data[\"Alert2Option\"] = this.getAlertOption(IsAllDay);\n        data[\"Alert3Option\"] = this.getAlertOption(IsAllDay);\n\n\n        if (data['StartTime']) {\n            data['StartDate'] = startOfDay(new Date(data['StartTime']));\n            data['StartTime'] = new Date(data['StartTime']);\n        } else {\n            data['StartDate'] = data[\"ViewDate\"];\n            data['StartTime'] = addHours(this.toFiveUnit(this.combineDateTime(data[\"ViewDate\"], new Date())), 1);\n            if (!IsAllDay)\n                data['StartDate'] = data['StartTime'];\n        }\n\n        if (data['EndTime']) {\n            data['EndDate'] = startOfDay(new Date(data['EndTime']));\n            data['EndTime'] = new Date(data['EndTime']);\n        }\n        else {\n            data['EndDate'] = startOfDay(data['StartDate']);\n            data['EndTime'] = addHours(data['StartTime'], 1);\n            if (!IsAllDay)\n                data['EndDate'] = data['EndTime'];\n\n        }\n\n        if (!data['IsAllDay']) {\n            data['IsAllDay'] = 'N';\n        }\n\n        if (!data['IsAlert']) {\n            data['IsAlert'] = 'Y';\n        }\n        if (!data['Alert1']) {\n            data['Alert1'] = IsAllDay ? \"2\" : \"8\";\n        }\n        if (!data['Alert2']) {\n            data['Alert2'] = '';\n        }\n        console.log(\"Default controller onDataUpdated:\", data);\n    }\n\n    onValueChange(column: string, value: any, groupId: string, index: number, data: any, validationResult: ValidationResult) {\n        let IsAllDay = data['IsAllDay'] === 'Y';\n\n        if (column === 'IsAllDay') {\n            data[column] = value ? 'Y' : 'N';\n            this.checkEndBeforeStartError(data, validationResult);\n\n            data[\"Alert1Option\"] = this.getAlertOption(value);\n            data[\"Alert2Option\"] = this.getAlertOption(value);\n            data[\"Alert3Option\"] = this.getAlertOption(value);\n\n            data[\"Alert1\"] = value ? \"2\" : \"8\";\n            data[\"Alert2\"] = \"\";\n            validationResult.deleteError(\"Alert1\");\n            validationResult.deleteError(\"Alert2\");\n\n        }\n        else if (column === 'IsAlert') {\n            data[column] = value ? 'Y' : 'N';\n            if (value) {\n                if (data['Alert1'] === data['Alert2'] && data['Alert1'])\n                    validationResult.setErrorMap('Alert2', 'Wrong_Alert');\n                else if (!data['Alert1'] && !data['Alert2'])\n                    validationResult.setErrorMap('Alert1', 'Wrong_Alert_Require');\n            }\n            else {\n                validationResult.deleteError(\"Alert1\");\n                validationResult.deleteError(\"Alert1\");\n            }\n        }\n        else if (column === 'StartDate') {\n            if (!value)\n                data[\"StartDate\"] = startOfDay(new Date());\n            else\n                data[\"StartDate\"] = value;\n            if (IsAllDay) {\n                data['EndDate'] = data[\"StartDate\"];\n            }\n            else {\n                data['EndDate'] = this.getToDate(data[\"StartDate\"], data[\"StartTime\"]);\n                data['EndTime'] = this.getToDate(data[\"StartDate\"], data[\"StartTime\"]);\n            }\n            this.checkEndBeforeStartError(data, validationResult);\n        }\n        else if (column === 'StartTime') {\n            if (!value)\n                data[\"StartTime\"] = this.toFiveUnit(new Date());\n            else\n                data[\"StartTime\"] = this.toFiveUnit(value);\n            data['EndDate'] = this.getToDate(data[\"StartDate\"], data[\"StartTime\"]);\n            data['EndTime'] = this.getToDate(data[\"StartDate\"], data[\"StartTime\"]);\n            this.checkEndBeforeStartError(data, validationResult);\n        }\n        else if (column === 'EndDate') {\n            //CHECK if to > from+15\n            if (!value)\n                data[\"EndDate\"] = startOfDay(new Date());\n            else\n                data[\"EndDate\"] = value;\n            this.checkEndBeforeStartError(data, validationResult);\n        }\n        else if (column === 'EndTime') {\n            if (!value)\n                data[\"EndTime\"] = this.toFiveUnit(new Date());\n            else\n                data[\"EndTime\"] = this.toFiveUnit(value);\n            this.checkEndBeforeStartError(data, validationResult);\n        }\n        else if (column === 'Alert1' || column === 'Alert2') {\n            if (data['Alert1'] === data['Alert2'] && data['Alert1'])\n                validationResult.setErrorMap('Alert2', 'Wrong_Alert');\n            else if (data['IsAlert'] === 'Y' && !data['Alert1'] && !data['Alert2'])\n                validationResult.setErrorMap(\"Alert1\", \"Wrong_Alert_Require\");\n            else {\n                validationResult.deleteError('Alert1');\n                validationResult.deleteError('Alert2');\n            }\n        }\n\n    }\n\n    onValidateAll(data: any, validationResult: ValidationResult) {\n        if (data[\"IsAllDay\"] === 'Y') {\n            data[\"StartDateTime\"] = startOfDay(data[\"StartDate\"]);\n            data[\"EndDateTime\"] = startOfDay(data[\"EndDate\"]);\n        }\n        else {\n            data[\"StartDateTime\"] = this.combineDateTime(data[\"StartDate\"], data[\"StartTime\"]);\n            data[\"EndDateTime\"] = this.combineDateTime(data[\"EndDate\"], data[\"EndTime\"]);\n\n        }\n        if (!data[\"ClientID\"])\n            data[\"ClientID\"] = uuid();\n        if (data[\"IsAlert\"] === 'Y' && !data[\"Alert1\"] && !data[\"Alert2\"]) {\n            validationResult.setErrorMap(\"Alert1\", \"Wrong_Alert_Require\");\n        }\n        return validationResult.isTrue();\n    }\n\n    btnClick(type: string, id: string, data: any) { }\n\n    private toFiveUnit(date: Date): Date {\n        let now = date;\n        let minutes = getMinutes(now);\n        let toAdd = minutes % 5 === 0 ? 0 : 5 - (minutes % 5);\n        return addMinutes(now, toAdd);\n    }\n\n\n    private getToDate(fromDate: Date, fromTime: Date): Date {\n        console.log(\"GetToDate:\", fromDate, fromTime);\n        console.log(\"GetMonth:\", getMonth(fromDate));\n        let from = new Date(getYear(fromDate), getMonth(fromDate), getDate(fromDate), getHours(fromTime), getMinutes(fromTime));\n        from = this.toFiveUnit(from);\n        return addHours(from, 1);\n    }\n\n    private checkEndBeforeStartError(data, validationResult: ValidationResult) {\n        validationResult.deleteError(\"StartDate\");\n        validationResult.deleteError(\"EndDate\");\n        validationResult.deleteError(\"StartTime\");\n        validationResult.deleteError(\"EndTime\");\n\n        let IsAllDay = data['IsAllDay'] === 'Y';\n        if (!(isSameDay(data[\"StartDate\"], data[\"EndDate\"]) || isAfter(data[\"EndDate\"], data[\"StartDate\"]))) {\n            validationResult.setErrorMap('StartDate', \"Wrong_Start_Time\");\n            return;\n        }\n        if (!IsAllDay) {\n\n            let fromDate = data[\"StartDate\"];\n            let fromTime = data[\"StartTime\"];\n            let EndDate = data[\"EndDate\"];\n            let EndTime = data[\"EndTime\"];\n            let from = this.combineDateTime(fromDate, fromTime);\n            let end = this.combineDateTime(EndDate, EndTime);\n            if (isBefore(end, addMinutes(from, 15))) {\n                validationResult.setErrorMap('EndDate', \"\");\n                validationResult.setErrorMap('EndTime', \"Wrong_End_Time\");\n            }\n        }\n    }\n\n    private combineDateTime(date, time): Date {\n        return new Date(getYear(date), getMonth(date), getDate(date), getHours(time), getMinutes(time));\n    }\n\n    private getAlertOption(IsAllDay: boolean): Array<SelectOption> {\n        return this.alertOpt.filter(x => JSON.parse(x.getArguments()).isAllDay === IsAllDay)\n            .map(x => new SelectOption(x.getCode(), this.profileCodeService.convertCode2Text(x.getTypeId(), x.getCode())))\n    }\n\n\n}","import { InjectionToken } from \"@angular/core\";\nimport { MetaController } from \"@allianzSND/core\";\nimport { CriteriaSearch } from \"../interface/CriteriaSearch\";\nimport { CustomerImportDisplay} from \"../interface/CustomerImportDisplay\";\nimport { AddProgressPoint } from \"../interface/AddProgressPoint\";\nimport { CustomerShowRule } from \"../interface/CustomerShowRule\";\n\nexport const customerEditMetaControllerToken = new InjectionToken<MetaController>(\"customerEditMetaController\");\nexport const customerDetailMetaControllerToken = new InjectionToken<MetaController>(\"customerDetailMetaController\");\nexport const customerContactEditMetaControllerToken = new InjectionToken<MetaController>(\"customerContactEditMetaController\");\nexport const customerContactDetailMetaControllerToken = new InjectionToken<MetaController>(\"customerContactDetailMetaController\");\nexport const customerFilterMetaControllerToken = new InjectionToken<MetaController>(\"customerFilterMetaController\");\nexport const customerCriteriaSearchToken = new InjectionToken<CriteriaSearch>(\"customerCriteriaSearch\");\nexport const customerImportDisplayToken = new InjectionToken<CustomerImportDisplay>(\"customerImportDisplay\");\nexport const addProgressPointToken = new InjectionToken<AddProgressPoint>(\"addProgressPoint\");\nexport const customerShowRuleToken  = new InjectionToken<CustomerShowRule>(\"customerShowRule\");","import { Component, Input, OnInit, HostListener, Output, EventEmitter, ElementRef, Inject, Optional } from '@angular/core';\nimport { SelectOption, MetaService, MetaController, FormMetaComponent, ProfileCodeService, DefaultMetaParser, APIExecutor, MetaColumn, showRuleToken, showRule } from '@allianzSND/core';\nimport { CalendarEventDetail } from '../../service/model/CalendarEventDetail';\nimport {\n  getDate,\n  getMonth,\n  getYear,\n  format\n} from 'date-fns';\nimport { Language } from '@allianzSND/core';\nimport { calendarEditMetaControllerToken } from '../../injection-token';\nimport { DefaultCalendarEditMetaController } from './DefaultCalendarEditMetaController';\nimport { addProgressPointToken } from '../../../customer/injectionToken/injection-token';\nimport { AddProgressPoint } from '../../../customer/interface/AddProgressPoint';\n\n\n@Component({\n  selector: 'snd-calendar-edit',\n  templateUrl: './calendar-edit.component.html',\n  styleUrls: ['./calendar-edit.component.scss']\n})\nexport class CalendarEditComponent extends FormMetaComponent implements OnInit {\n\n\n  @Output() isMetaDataDone: EventEmitter<boolean> = new EventEmitter();\n\n  @Input()\n  get isSaveClick() { return this._isSaveClick; }\n  set isSaveClick(isSaveClick: boolean) {\n    console.log(\"CalendarEdit set isSaveClick:\", isSaveClick);\n    this._isSaveClick = isSaveClick;\n    if (this._isSaveClick == true) {\n      console.log(\"Click Calendar edit save\")\n      this.onBtnClick('submit', 'save');\n      setTimeout(() => {\n        this.isSaveClickChange.emit(false);\n      }, 500);\n    }\n  }\n\n  @Output() isSaveClickChange: EventEmitter<boolean> = new EventEmitter();\n\n  private _clientID;\n  private editType = 'add';\n\n  @Input()\n  public get clientID() {\n    return this._clientID;\n  }\n  public set clientID(value) {\n    this._clientID = value;\n    if (value.length == 0) {\n      this.editType = 'add';\n    }\n    else\n      this.editType = 'edit';\n    if (this.isMetaLoaded())\n      this.loadData();\n  }\n\n  public getMetaParams() {\n    return {\n      \"_clientID\": this._clientID\n    };\n  }\n\n\n  // Forå®¢æ¶Selectç¨çé¸é \n  @Input()\n  get customerItemList() { return this.customerClientOptionList }\n  set customerItemList(customerItemList: Array<SelectOption>) {\n    console.log(\"calendar-edit set customerItemList:\", customerItemList);\n    this.customerClientOptionList = customerItemList;\n    if (this._data)\n      this.fillDefaultVal();\n  }\n\n  // For EventListç¨ç\n  @Input()\n  get translateMap() { return this._translateMap }\n  set translateMap(translateMap: Map<string, string>) {\n    this._translateMap = translateMap;\n  }\n\n\n  @Input()\n  get viewDate() { return this._viewDate }\n  set viewDate(viewDate: Date) {\n    console.warn('viewDateChange');\n    this._viewDate = viewDate;\n  }\n\n\n  // For EventListç¨ç\n  @Input()\n  get todayCalendarEvent() { return this.calendarEventList }\n  set todayCalendarEvent(calendarEventList: Array<CalendarEventDetail>) {\n    this.calendarEventList = calendarEventList;\n  }\n\n  @Output() saveEvent = new EventEmitter();\n\n  private _viewDate: Date = new Date();\n  private _isSaveClick: boolean = false;\n  public showDate: string;\n  public language: Language = new Language();\n  public _translateMap: Map<string, string> = new Map<string, string>();\n\n\n  public _calendarEventDetail: CalendarEventDetail; //Detail\n  public windowWidth: number;\n  public calendarEventList: Array<CalendarEventDetail> = [];\n  public activityOptionList: Array<SelectOption> = [];\n  public customerClientOptionList: Array<SelectOption> = [];\n  public alertOptionList: Array<SelectOption> = [];\n  public startDate: Date;\n  public endDate: Date;\n  public eventListBGColor = 'transparent';\n  private _metaController: MetaController;\n\n  constructor(\n    private elementRef: ElementRef,\n    protected metaService: MetaService,\n    profileCodeService: ProfileCodeService,\n    metaParser: DefaultMetaParser,\n    metaExecutor: APIExecutor,\n    defaultMetaController: DefaultCalendarEditMetaController,\n    @Optional() @Inject(calendarEditMetaControllerToken) customMetaController: MetaController,\n    @Optional() @Inject(addProgressPointToken) private addProgressPoint: AddProgressPoint,\n    @Optional() @Inject(showRuleToken) private showRule: showRule,\n  ) {\n    super(metaService, profileCodeService, metaParser, metaExecutor);\n    console.log(\"calendar-edit construct:\", defaultMetaController, customMetaController);\n    if (customMetaController)\n      this._metaController = customMetaController;\n    else\n      this._metaController = defaultMetaController;\n  }\n\n  ngOnInit() {\n    this.windowWidth = window.innerWidth;\n    this.editEvent();\n    super.ngOnInit();\n  }\n\n  btnClick(type: string, id: string) {\n    if (type === 'submit') {\n      //offline add progress point\n      console.log(\"calendar addProgressPoint\", this.addProgressPoint);\n      if (this.addProgressPoint && this.editType == \"add\") {\n        this.addProgressPoint.addCalendarPoint(this._data, 1);\n      }\n      this.saveEvent.emit({ data: this._data, type: this.editType });\n    }\n    this._metaController.btnClick(type, id, this._data);\n  }\n  onValidateAll() {\n    let result = true;\n    if (!this.validationResult.isTrue()) {\n      //If basic validation has error.\n      result = false;\n      if (this.validationResult.isError('Note'))\n        alert(\"Note \" + this.validationResult.getErrorMsg(\"Note\"));\n    }\n    else {\n      result = this._metaController.onValidateAll(this._data, this.validationResult);\n      console.log(\"onValidate:\", result);\n    }\n\n\n    if (!result) {\n      this.saveEvent.emit({ data: null, type: 'fail' });\n      this.scrollToError();\n    }\n    return result;\n\n  }\n  getMetaID() {\n    return 'calendarEdit';\n  }\n  onValueChange(column: string, value: any, groupId: string = null, index: number = -1) {\n    this._data[column] = value;\n    this._metaController.onValueChange(column, value, groupId, index, this._data, this.validationResult);\n  }\n\n  onDataUpdated() {\n    super.onDataUpdated();\n    console.log(\"Calendar Edit DataUpdated:\", this._data);\n    this._data[\"ViewDate\"] = this._viewDate;\n    this._data[\"EditType\"] = this.editType;\n    this._data[\"CustomerClientID\"] = this._customerClientID ? this._customerClientID : this._data[\"CustomerClientID\"];;\n    this.fillDefaultVal();\n    if (this._metaController) {\n      this._metaController.onDataUpdated(this._data);\n    }\n    \n    this.isMetaDataDone.emit(true);\n\n  }\n\n  shouldHidden(id: string): boolean {\n    let alertId = ['Alert1', 'Alert2'];\n    let timePickerId = ['StartTime', 'EndTime'];\n    if (alertId.indexOf(id) > -1)\n      return this._data[\"IsAlert\"] === 'N';\n    else if (timePickerId.indexOf(id) > -1)\n      return this._data[\"IsAllDay\"] === 'Y';\n    else if (id === 'CustomerClientID')\n      return this._customerClientID.length > 0;\n  }\n\n  private _customerClientID = '';\n\n  @Input()\n  get customerClientID() {\n    return this._customerClientID;\n  }\n\n  set customerClientID(id: string) {\n    this._customerClientID = id;\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  get rowConfig(): Array<Array<MetaColumn>> {\n    return this.metaConfig.Rows;\n  }\n\n\n\n  @HostListener('window:resize', ['$event'])\n  onResize(event) {\n    this.windowWidth = event.target.innerWidth;\n    // wle.warn('Width: ', this.windowWidth);\n  }\n\n  private fillDefaultVal() {\n    this._data[\"CustomerClientIDOption\"] = this.customerClientOptionList;\n  }\n\n  editEvent() {\n    this.showDate = this._convertDate(this._viewDate);\n    console.log(\"EditEvent showDate:\", this.showDate);\n  }\n\n  isMetaLoaded() {\n    return this.metaLoaded;\n  }\n\n  scrollToError() {\n    console.log('in scrollToError');\n    setTimeout(() => {\n      let errorBlock = this.elementRef.nativeElement.querySelector('.error-msg');\n      let scrollContent = document.querySelector('.calendar-edit-content').querySelector('.form-scroll-content');\n      if (errorBlock && scrollContent) {\n        let move = errorBlock.offsetTop - 50;\n        scrollContent.scrollTo({ top: move, behavior: \"smooth\" });\n        console.log('scrollToError', move);\n      }\n      console.log('scrollToError', scrollContent,errorBlock);\n      \n    }, 200)\n  }\n\n  private _convertDate(date: Date) {\n    if (this.showRule) {\n      return this.showRule.convertDate(date);\n    }\n    else {\n      return format(date, 'MM/dd/yyyy');\n    }\n  }\n\n}\n","import { MetaController, ValidationResult } from \"@allianzSND/core\";\nimport { Injectable } from \"@angular/core\";\n\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DefaultCalendarDetailMetaController implements MetaController {\n\n    onDataUpdated(data: any) { }\n\n    onValidateAll(data: any) {\n        return true;\n    }\n    onValueChange(column: string, value: any, groupId: string, index: number, data: any, vaildResult: ValidationResult) {\n\n    }\n\n    btnClick(type: string, id: string, data: any) { }\n}","import { Component, Input, OnInit, Optional, Inject, Output, EventEmitter } from '@angular/core';\nimport { CalendarEventDetail } from '../../service/model/CalendarEventDetail';\nimport { isSameDay } from 'date-fns';\nimport { Language, MetaService, MetaController, DisplayMetaComponent, ProfileCodeService, DefaultMetaParser, APIExecutor, MetaColumn } from '@allianzSND/core';\nimport { StringUtils } from '@allianzSND/core';\nimport { calendarDetailMetaControllerToken } from '../../injection-token';\nimport { DefaultCalendarDetailMetaController } from './DefaultCalendarDetailMetaController';\nimport { DatePipe } from '@angular/common';\n\n@Component({\n  selector: 'snd-calendar-detail',\n  templateUrl: './calendar-detail.component.html',\n  styleUrls: ['./calendar-detail.component.scss']\n})\nexport class CalendarDetailComponent extends DisplayMetaComponent implements OnInit {\n\n  @Output() isMetaDataDone: EventEmitter<boolean> = new EventEmitter();\n  \n  @Input()\n  get calendarEventDetail() { return this._calendarEventDetail }\n  set calendarEventDetail(calendarEventDetail) {\n    if (StringUtils.isNotEmpty(calendarEventDetail)) {\n      this._calendarEventDetail = calendarEventDetail;\n      this.isSameDay = isSameDay(this._calendarEventDetail.end, this._calendarEventDetail.start);\n      this.isAllDay = calendarEventDetail.allDay;\n      this._clientID = calendarEventDetail.clientID;\n      if (this.isMetaLoaded())\n        this.loadData();\n    }\n  }\n\n  private _customerClientName = '';\n\n  @Input()\n  get customerClientName() {\n    return this._customerClientName;\n  }\n\n  set customerClientName(val) {\n    this._customerClientName = val;\n    this.waitUntilMetaLoaded().then(() => {\n      this.onDataUpdated();\n    })\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  get rowConfig(): Array<Array<MetaColumn>> {\n    return this.metaConfig.Rows;\n  }\n\n\n  public language: Language = new Language();\n  public _calendarEventDetail: CalendarEventDetail; //Detail\n  public isSameDay: boolean = true;\n  public isAllDay: boolean = false;\n\n  private _metaController = null;\n  private _clientID: string = '';\n\n\n  constructor(\n    private DatePipe: DatePipe,\n    metaService: MetaService,\n    profileCodeService: ProfileCodeService,\n    metaParser: DefaultMetaParser,\n    metaExecutor: APIExecutor,\n    defaulterMetaController: DefaultCalendarDetailMetaController,\n    @Optional() @Inject(calendarDetailMetaControllerToken) customMetaController: MetaController\n  ) {\n    super(metaService, profileCodeService, metaParser, metaExecutor);\n    if (customMetaController) {\n      this._metaController = customMetaController;\n    }\n    else\n      this._metaController = defaulterMetaController;\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n\n  getMetaID() {\n    return 'calendarDetail';\n  }\n\n  getMetaParams() {\n    return {\n      _clientID: this._clientID\n    };\n  }\n\n  onDataUpdated() {\n    super.onDataUpdated();\n    console.log(\"calendar-detail onDataUpdated:\", this._data);\n    this._data[\"CustomerClientName\"] = this._customerClientName;\n    this._data[\"DisplayDate\"] = this.getDisplayDateHTML();\n    this.isMetaDataDone.emit(true);\n  }\n\n  private getDisplayDateHTML(): string {\n    let _HTML = '';\n    let start = new Date(this._data[\"StartTime\"]);\n    let end = new Date(this._data[\"EndTime\"]);\n    if (this.isAllDay) {\n      _HTML = `${this.DatePipe.transform(start, 'MM/dd/y')}-${this.DatePipe.transform(end, 'MM/dd/y')}`;\n    }\n    else {\n      if (this.isSameDay)\n        _HTML = `${this.DatePipe.transform(start, 'MM/dd/y HH:mm')}-${this.DatePipe.transform(end, 'HH:mm')}`;\n      else\n        _HTML = `${this.DatePipe.transform(start, 'MM/dd/y HH:mm')}-<br />${this.DatePipe.transform(end, 'MM/dd/y HH:mm')}`;\n    }\n    return _HTML;\n  }\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {ProfileCode} from '@allianzSND/core';\n\n@Component({\n  selector: 'snd-calendar-filter',\n  templateUrl: './calendar-filter.component.html',\n  styleUrls: ['./calendar-filter.component.scss']\n})\nexport class CalendarFilterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  private _optionMap : Map<string, Array<ProfileCode>> = new Map<string, Array<ProfileCode>>();\n  public activityTypeList: Array<ProfileCode> = []; // DBä¸­ææactivityType\n  public currentFilterOptionList: Array<string> = [];\n\n  @Input()\n  get optionMap() {return this._optionMap}\n  set optionMap(optionMap : Map<string, Array<ProfileCode>>) {\n    this._optionMap = optionMap;\n    this.activityTypeList = this._optionMap.get('Calendar_Type');\n    this.activityTypeList.forEach((codeItem) => {\n      if (codeItem.isCheck) {\n        this.currentFilterOptionList.push(codeItem.getCode());\n      }\n    });\n  }\n\n  @Output() activityTypeListChange = new EventEmitter();\n\n  onActivityFilter() {\n    this.activityTypeListChange.emit(this.activityTypeList);\n  } // filter event\n\n  toActivityColor(item: ProfileCode) {\n    return JSON.parse(item.getArguments()).color;\n  }\n}\n","export class CalendarEventColor {\n  private _primary: string;\n  private _secondary: string;\n\n  constructor(primary: string, secondary: string) {\n    this._primary = primary;\n    this._secondary = secondary;\n  }\n\n  setCalendarEventColor(primary: string, secondary: string) {\n    this._primary = primary;\n    this._secondary = secondary;\n  }\n\n  set primary(primary) {\n    this._primary = primary;\n  }\n\n  set secondary(secondary) {\n    this._secondary = secondary;\n  }\n\n  get primary() {\n    return this._primary;\n  }\n\n  get secondary() {\n    return this._secondary;\n  }\n}\n","import {CalendarEventColor} from './CalendarEventColor';\nimport { StringUtils } from '@allianzSND/core';\n\nexport class CalendarEventDetail {\n  private _clientID: string;\n  private _calendarID: string;\n  private _customerClientID: string;\n  private _title: string;\n  private _location: string;\n  private _activity :string;\n  private _isAllDay: boolean;\n  private _start: Date;\n  private _end: Date;\n  private _isAlert: boolean;\n  private _alert1: string;\n  private _alert2: string;\n  private _alert3: string;\n  private _remark: string;\n  private _color;\n  private _displayActivity: string;\n  private _displayAlert1: string;\n  private _displayAlert2: string;\n\n  constructor(clientID: string,calendarID: string, customerClientID: string, title: string, location: string, calendarType: string,isAllDay: string, start: Date, end: Date, isAlert: string, alert1: string, alert2: string, alert3: string, remark: string, color: string) {\n    this._clientID = clientID;\n    this._calendarID = calendarID;\n    this._customerClientID = customerClientID;\n    this._title = title;\n    this._location = location;\n    this._activity = calendarType;\n    this._isAllDay = (isAllDay == 'Y');\n    this._start = new Date(start);\n    this._end = new Date(end);\n    this._isAlert = (isAlert == 'Y');\n    this._alert1 = alert1;\n    this._alert2 = alert2;\n    this._alert3 = alert3;\n    this._remark = remark;\n\n\n    if(StringUtils.isEmpty(this._customerClientID)) this._customerClientID = null;\n    if(StringUtils.isEmpty(this._activity)) this._activity = null;\n    if(StringUtils.isEmpty(this._title)) this._title = '';\n    if(StringUtils.isEmpty(this._location)) this._location = '';\n    if(StringUtils.isEmpty(this._alert1)) this._alert1 = '';\n    if(StringUtils.isEmpty(this._alert2)) this._alert2 = null;\n    if(StringUtils.isEmpty(this._alert3)) this._alert3 = '';\n    if(StringUtils.isEmpty(this._remark)) this._remark = '';\n\n    let eventColor = JSON.parse(color);\n    if(eventColor != null)\n      this._color = new CalendarEventColor(eventColor.color, eventColor.backgroundColor);\n  }\n\n  set clientID(clientID: string) {\n    this._clientID = clientID;\n  }\n\n  set calendarID(calendarID: string) {\n    this._calendarID = calendarID\n  }\n\n  set customerClientID(customerClientID: string) {\n    this._customerClientID = customerClientID;\n  }\n  \n  set title(title: string) {\n    this._title = title;\n  }\n\n  set location(location: string) {\n    this._location = location;\n  }\n\n  set activity(calendarType: string) {\n    this._activity = calendarType;\n  }\n\n  set allDay(isAllDay : boolean) {\n    this._isAllDay = isAllDay;\n  }\n\n  set start(date: Date) {\n    this._start = date;\n  }\n\n  set end(date: Date) {\n    this._end = date;\n  }\n\n  set isAlert(isAlert: boolean) {\n    this._isAlert = isAlert;\n  }\n\n  set alert1(alert1: string) {\n    this._alert1 = alert1;\n  }\n\n  set alert2(alert2: string) {\n    this._alert2 = alert2;\n  }\n\n  set alert3(alert3: string) {\n    this._alert3 = alert3;\n  }\n\n  set remark(remark: string) {\n    this._remark =  remark;\n  }\n\n  set color(color: string) {\n    let eventColor = JSON.parse(color);\n    if(eventColor != null)\n      this._color = new CalendarEventColor(eventColor.color, eventColor.backgroundColor);\n  }\n\n  set displayActivity(displayActivity : string) {\n    this._displayActivity = displayActivity;\n  }\n\n  set displayAlert1(displayAlert1 : string) {\n    this._displayAlert1 = displayAlert1;\n  }\n\n  set displayAlert2(displayAlert2 : string) {\n    this._displayAlert2 = displayAlert2;\n  }\n\n  get clientID() {\n    return this._clientID;\n  }\n\n  get calendarID() {\n    return this._calendarID;\n  }\n\n  get customerClientID() {\n    return this._customerClientID;\n  }\n  \n  get title() {\n    return this._title;\n  }\n\n  get location() {\n    return this._location;\n  }\n\n  get activity() {\n    return this._activity;\n  }\n\n  get allDay() {\n    return this._isAllDay;\n  }\n\n  get start() {\n    return this._start;\n  }\n\n  get end() {\n    return this._end;\n  }\n\n  get isAlert() {\n    return this._isAlert;\n  }\n\n  get alert1() {\n    return this._alert1;\n  }\n\n  get alert2() {\n    return this._alert2;\n  }\n\n  get alert3() {\n    return this._alert3;\n  }\n\n  get remark() {\n    return this._remark;\n  }\n\n  get color() {\n    return this._color;\n  }\n\n  get displayActivity() {\n    return this._displayActivity;\n  }\n\n  get displayAlert1() {\n    return this._displayAlert1;\n  }\n\n  get displayAlert2() {\n    return this._displayAlert2;\n  }\n}\n","import { Injectable, inject, Inject } from '@angular/core';\nimport { APIDispatch } from '@allianzSND/core';\nimport { APIFactory } from '@allianzSND/core';\nimport { CalendarEventListAPI } from '../api/CalendarEventListAPI';\nimport { Observable } from 'rxjs';\nimport {CalendarEventDetail} from './model/CalendarEventDetail';\nimport {CalendarEventDetailAPI} from '../api/CalendarEventDetailAPI';\nimport {CalendarEventDeleteAPI} from '../api/CalendarEventDeleteAPI';\nimport {CalendarEventAddAPI} from '../api/CalendarEventAddAPI';\nimport {CalendarEventUpdateAPI} from '../api/CalendarEventUpdateAPI';\nimport {ProfileCodeService} from '@allianzSND/core';\nimport {ValidationResult} from '@allianzSND/core';\nimport {differenceInMinutes, isSameDay} from 'date-fns';\nimport { StringUtils } from '@allianzSND/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CalendarService {\n  constructor(private dispatch: APIDispatch,\n              private profileCodeService: ProfileCodeService,\n              private APIFactory: APIFactory,\n) {\n    //register api\n  }\n\n  getCalendarEventList(start: Date, end: Date, key:string): Observable<Array<CalendarEventDetail>> {\n\n    console.debug('calendar-service-getCalendarEventList',start,end,key);\n\n    let calendarEventListAPI: CalendarEventListAPI = <CalendarEventListAPI>this.APIFactory.getAPI('getCalendarEventList');\n    calendarEventListAPI.startTime = start;\n    calendarEventListAPI.endTime = end;\n\n    return Observable.create((observer) => {\n      this.dispatch.dispatch(calendarEventListAPI).subscribe((data) => {\n        console.debug('calendar-service-getCAlendarEventList response',data);\n\n        let returnList: Array<CalendarEventDetail> = [];\n        let calendarEventList = data['Body'];\n        if(calendarEventList) {\n          for (let i = 0; i < calendarEventList.length; i++) {\n            let json = calendarEventList[i];\n            let event = new CalendarEventDetail(json.ClientID,\n              json.CalendarID,\n              json.CustomerClientID,\n              json.Title,\n              json.Location,\n              json.CalendarType,\n              json.IsAllDay,\n              new Date(json.StartTime),\n              new Date(json.EndTime),\n              json.Remark,\n              json.IsAlert,\n              json.Alert1,\n              json.Alert2,\n              json.Alert3,\n              this.profileCodeService.getArgumentsByCode('Calendar_Type',json.CalendarType));\n            returnList.push(event);\n          }\n          returnList = this.sortCalendarEventList(returnList);\n          observer.next(returnList);\n          observer.complete();\n        } else {\n          observer.next([]);\n          observer.complete();\n        }\n      });\n    });\n  }\n\n  getCalendarEventDetail(clientID: string): Observable<CalendarEventDetail> {\n    let calendarEventDetailAPI: CalendarEventDetailAPI = <CalendarEventDetailAPI>this.APIFactory.getAPI('getCalendarEventDetail');\n    calendarEventDetailAPI.ClientID = clientID;\n    return Observable.create((observer)=>{\n      this.dispatch.dispatch(calendarEventDetailAPI).subscribe((data) => {\n        let detail;\n        let eventDetail  = data['Body'];\n        eventDetail = eventDetail[0];\n        detail = new CalendarEventDetail(eventDetail.ClientID,eventDetail.CalendarID,eventDetail.CustomerClientID,eventDetail.Title,eventDetail.Location,eventDetail.CalendarType,eventDetail.IsAllDay,new Date(eventDetail.StartTime),new Date(eventDetail.EndTime),eventDetail.IsAlert,eventDetail.Alert1, eventDetail.Alert2, eventDetail.Alert3,eventDetail.Remark,this.profileCodeService.getArgumentsByCode('Calendar_Type',eventDetail.CalendarType));\n        observer.next(detail);\n        observer.complete();\n      });\n    });\n  }\n\n  deleteCalendarEvent(clientID: string): Observable<any>  {\n    let calendarEventDeleteAPI:  CalendarEventDeleteAPI = <CalendarEventDeleteAPI>this.APIFactory.getAPI('deleteCalendarEvent');\n    calendarEventDeleteAPI.clientID = clientID;\n    return Observable.create((observer) => {\n      this.dispatch.dispatch(calendarEventDeleteAPI).subscribe((data) => {\n        observer.next(data['Header']);\n        observer.complete();\n      });\n    });\n  }\n\n  addCalendarEvent(event: CalendarEventDetail): Observable<any>  {\n    event = this.adjustAlert(event);\n    let calendarEventAddAPI:  CalendarEventAddAPI = <CalendarEventAddAPI>this.APIFactory.getAPI('addCalendarEvent');\n    calendarEventAddAPI.setCalendarEvent(event);\n    return Observable.create((observer) => {\n      this.dispatch.dispatch(calendarEventAddAPI).subscribe((data) => {\n        observer.next(data['Header']);\n        observer.complete();\n      });\n    });\n  }\n\n  updateCalendarEvent(clientID: string,event: CalendarEventDetail): Observable<any>  {\n    event = this.adjustAlert(event);\n    let calendarEventUpdateAPI:  CalendarEventUpdateAPI = <CalendarEventUpdateAPI>this.APIFactory.getAPI('updateCalendarEvent');\n    calendarEventUpdateAPI.ClientID = clientID;\n    calendarEventUpdateAPI.setCalendarEvent(event);\n    return Observable.create((observer) => {\n      this.dispatch.dispatch(calendarEventUpdateAPI).subscribe((data) => {\n        observer.next(data['Header']);\n        observer.complete();\n      })\n    })\n  }\n\n  adjustAlert(event: CalendarEventDetail): CalendarEventDetail {\n\n    if(event.alert1 == 'Default') event.alert1 = '';\n    if(event.alert2 == 'Default') event.alert2 = '';\n\n    //when alert1 & alert2 have data and not empty\n    if(event.isAlert && StringUtils.isNotEmpty(event.alert1) && StringUtils.isNotEmpty(event.alert2)) {\n      if(event.allDay) { // sort alert if allDay\n        if(JSON.parse(this.profileCodeService.getArgumentsByCode('Calendar_RemindTime',event.alert1)).day > JSON.parse(this.profileCodeService.getArgumentsByCode('Calendar_RemindTime',event.alert2)).day) {\n          let temp = event.alert1 ;\n          event.alert1 = event.alert2;\n          event.alert2 = temp;\n        }\n      } else { // sort if not allDay\n        if(JSON.parse(this.profileCodeService.getArgumentsByCode('Calendar_RemindTime',event.alert1)).min > JSON.parse(this.profileCodeService.getArgumentsByCode('Calendar_RemindTime',event.alert2)).min) {\n          let temp = event.alert1 ;\n          event.alert1 = event.alert2;\n          event.alert2 = temp;\n        }\n      }\n    }\n    else if(!event.isAlert) {\n      event.alert1 = '';\n      event.alert2 = '';\n      event.alert3 = '';\n    }\n    event.color = this.profileCodeService.getArgumentsByCode('Calendar_Type',event.activity); // get activity color\n    return event;\n  }\n\n  calendarValidation(data): ValidationResult {\n    let validationResult = new ValidationResult();\n    if (data.title == '')\n      validationResult.setErrorMap('title', 'required');\n    if (data.title.length > 60) //title length\n      validationResult.setErrorMap('title', 'maxLength');\n    if (data.location == '')\n      validationResult.setErrorMap('location', 'required');\n    if (data.location.length > 100) //title length\n      validationResult.setErrorMap('location', 'maxLength');\n    if (data.activity == 'Default' || data.activity == '') // activity validate\n      validationResult.setErrorMap('activity', 'required');\n    if (data.isAlert == true && (data.alert1 == 'Default') && (data.alert2 == 'Default'))\n      validationResult.setErrorMap('alert1', 'required');\n    if (data.isAlert == true && (data.alert1 == data.alert2) && data.alert1 != 'Default')\n      validationResult.setErrorMap('alert2', 'sameAlert');\n    if (differenceInMinutes(data.end,data.start) < 15 && differenceInMinutes(data.end,data.start) >= 0 && data.allDay != true) {\n      validationResult.setErrorMap('time', 'minTime');\n    } else if(differenceInMinutes(data.end,data.start) < 0) {\n      validationResult.setErrorMap('time', 'errorTime');\n    }\n    if (data.remark.length > 500)\n      validationResult.setErrorMap('remark', 'maxLength');\n    return validationResult;\n  }\n\n  sortCalendarEventList(calendarEventList: Array<CalendarEventDetail>): Array<CalendarEventDetail> {\n    for (let i = 0; i < calendarEventList.length - 1; i++) {\n      for (let j = i + 1; j < calendarEventList.length; j++) {\n        if(calendarEventList[j].allDay && !calendarEventList[i].allDay) {\n          let temp = calendarEventList[i];\n          calendarEventList[i] = calendarEventList[j];\n          calendarEventList[j] = temp;\n        }\n      }\n    }\n    for (let i = 0; i < calendarEventList.length - 1; i++) {\n      for (let j = i + 1; j < calendarEventList.length; j++) {\n        if(calendarEventList[j].allDay == calendarEventList[i].allDay) {\n          if(calendarEventList[i].allDay) {\n            if(calendarEventList[j].start < calendarEventList[i].start) {\n              let temp = calendarEventList[i];\n              calendarEventList[i] = calendarEventList[j];\n              calendarEventList[j] = temp;\n            } else if(isSameDay(calendarEventList[j].start, calendarEventList[i].start)) {\n              if (calendarEventList[j].end > calendarEventList[i].end){\n                let temp = calendarEventList[i];\n                calendarEventList[i] = calendarEventList[j];\n                calendarEventList[j] = temp;\n              }\n            }\n          } else {\n            if(calendarEventList[j].start < calendarEventList[i].start) {\n              let temp = calendarEventList[i];\n              calendarEventList[i] = calendarEventList[j];\n              calendarEventList[j] = temp;\n            }\n          }\n        }\n      }\n    }\n    return calendarEventList\n  }\n}\n","export class CustomerFilterPreset{\n    \n    public addValues(column : string,values : Array<string>) {\n        this[column] = values;        \n        \n    }\n\n}","import { CustomerFilterPreset } from \"./customer-filter-preset\";\nimport { StringUtils } from \"@allianzSND/core\";\n\nexport class CustomerFilterCriteria {\n    private _keyword: string;\n    private filterMap: Map<string, Array<string>> = new Map<string, Array<string>>();\n    private optionMap: Map<string, any> = new Map<string, any>();\n    public extension = {};\n\n    constructor(keyword = '', filterMap = new Map<string, Array<string>>()) {\n        this._keyword = keyword;\n        this.filterMap = filterMap;\n    }\n\n    addCriteria(filterCol: string, value: string) {\n        let values: Array<string> = this.filterMap.get(filterCol);\n        if (values == undefined) values = new Array<string>();\n\n        if (!values.includes(value)) {\n            values.push(value);\n\n            this.filterMap.set(filterCol, values);\n        }\n    }\n\n    addCriteriaCols(filterCol: string, values: string[]) {\n        this.filterMap.set(filterCol, values);\n    }\n\n    hasCriteria() {\n        return this.filterMap.size != 0 || StringUtils.isNotEmpty(this._keyword);\n    }\n\n    set keyword(keyword: string) { this._keyword = keyword }\n    get keyword() { return this._keyword }\n\n    getFilterMap() {\n        return this.filterMap;\n    }\n\n    getOptionMap() {\n        return this.optionMap;\n    }\n\n    setOption(name: string, value: any) {\n        this.optionMap.set(name, value);\n    }\n\n    getOption(name: string) {\n        if (this.optionMap.has(name))\n            return this.optionMap.get(name);\n        else\n            return null;\n    }\n\n\n\n    toPresetJSON(): CustomerFilterPreset {\n        let preset = new CustomerFilterPreset();\n\n        this.filterMap.forEach((value: Array<string>, column: string) => {\n            preset.addValues(column, value);\n        });\n        console.debug('toPresetJSON', preset);\n\n        return preset;\n    }\n\n    toMetaJSON(): CustomerFilterPreset {\n        let preset = this.toPresetJSON();\n        this.optionMap.forEach((value: any, column: string) => {\n            preset.addValues(column, value);\n        })\n        return preset;\n\n    }\n\n\n    public clone(): CustomerFilterCriteria {\n        let cloneCriteria: CustomerFilterCriteria = new CustomerFilterCriteria();\n        cloneCriteria._keyword = this._keyword;\n        cloneCriteria.filterMap = new Map(this.filterMap);\n        cloneCriteria.optionMap = new Map(this.optionMap);\n        cloneCriteria.extension = Object.assign({}, this.extension);\n\n        return cloneCriteria;\n    }\n}","import { StringUtils } from \"@allianzSND/core\";\n\nexport class CustomerItem{\n    \n    private _clientID : string;\n    private _firstName : string;\n    private _lastName : string;\n    private _showName: string;\n    private _tag : string;\n    private _complementPercent : number;\n    private _isFollow : boolean;\n    private _isOtherSource : boolean;\n    private _isHighlight : boolean;\n\n    constructor(clientID : string,firstName : string ,lastName : string, possibility : string ,\n         complementPercent : number,isFollow : boolean , isOtherSource : boolean , isOverTimeAlert : string) {\n\n        this._clientID = clientID;\n        this._firstName = firstName;\n        this._lastName = lastName;\n        this._tag = possibility;\n        this._complementPercent = complementPercent;\n        this._isFollow = isFollow;\n        this._isOtherSource = isOtherSource;\n        \n        if(isOverTimeAlert == 'Y') {\n            this._isHighlight = true;\n        }\n\n        if(StringUtils.isEmpty(this._firstName)) this._firstName = '';\n    }\n\n\n    get isOtherSource() {\n        return this._isOtherSource;\n    }\n\n    get isFollow() {\n        return this._isFollow;\n    }\n\n    get clientID(){\n        return this._clientID;\n    }\n\n    get firstName(){\n        return this._firstName;\n    }\n\n    get lastName(){\n        return this._lastName;\n    }\n\n    get tag(){\n        return this._tag;\n    }\n\n    get complementPercent(){\n        return this._complementPercent;\n    }\n\n    set clientID(clientID : string){\n        this._clientID = clientID;\n    }    \n\n    set firstName(name : string){\n        this._firstName = name;\n    }\n\n    set lastName(name : string){\n        this._lastName = name;\n    }\n\n    set tag(tag : string){\n        this._tag = tag;\n    }\n\n    set complementPercent(complementPercent : number){\n        this._complementPercent = complementPercent;\n    }\n\n    set isFollow(isFollow : boolean) {\n        this._isFollow = isFollow;\n    }\n\n    set isOtherSource(isOtherSource : boolean) {\n        this._isOtherSource = isOtherSource;\n    }\n\n    get isHighlight() {\n        return this._isHighlight;\n    }\n\n    set isHighLight(isHighLight : boolean) {\n        this._isHighlight = isHighLight;\n    }\n\n    get showName() {\n        return this._showName;\n    }\n    \n    set showName(showName: string) {\n        this._showName = showName;\n    }\n\n\n    clone():CustomerItem {\n        return new CustomerItem(this._clientID, this._firstName, this._lastName, this._tag, this._complementPercent, this._isFollow, this._isOtherSource, (this._isHighlight ? 'Y' : 'N'));\n    }\n}","export class CustomerAlertItem {\n    private _clientID : string;\n    private _name : string;\n\n    constructor(clientID : string, name : string) {\n       this._clientID = clientID;\n       this._name = name;  \n    }\n\n   get clientID() {\n       return this._clientID;\n   }\n\n   get name(){\n    return this._name;\n    }\n\n}","import { StringUtils } from \"@allianzSND/core\";\n\nexport class CustomerTel {\n\n    public clientID: string;\n    public telType: string;\n    public tel: string;\n    public dataSource: string;\n\n    constructor(clientID: string, telType: string, tel: string, dataSource: string) {\n        this.clientID = clientID;\n        this.telType = telType;\n        this.tel = tel;\n        this.dataSource = dataSource;\n    }\n\n    public isEmpty() {\n        return StringUtils.isEmpty(this.tel);\n    }\n\n}","import { StringUtils } from \"@allianzSND/core\";\nimport { getMonth, getDate } from 'date-fns';\n\nexport class CustomerBirthday{\n    \n    private _clientID : string;\n    public lastName : string;\n    public firstName : string;\n    public birthdayMonth : string;\n    public birthdayDate : string;\n\n    constructor(clientID : string,firstName : string ,lastName : string, birthdayMonth: string , birthdayDate : string) {\n\n        this._clientID = clientID;\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.birthdayMonth = birthdayMonth;\n        this.birthdayDate =  birthdayDate;\n       \n\n         if(StringUtils.isEmpty(this.firstName)) this.firstName = '';\n\n    }\n\n    clone(): CustomerBirthday{\n        return new CustomerBirthday(this._clientID, this.firstName, this.lastName, this.birthdayMonth, this.birthdayDate);\n    }\n\n\n   \n\n   \n}","import { CriteriaSearch } from \"../../interface/CriteriaSearch\";\nimport { Injectable } from \"@angular/core\";\nimport { CustomerFilterCriteria } from \"../bean/customer-filter-criteria\";\nimport { IRestriction, StringUtils, ORCompoundRestriction, LikeRestriction, InRestriction, EqualRestriction, AndCompoundRestriction, NotEqualRestriction, ProfileCodeService, GreaterOrEqualRestriction, LessOrEqualRestriction } from \"@allianzSND/core\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DefaultCustomerCriteriaSearch implements CriteriaSearch {\n\n    constructor(\n        private profileCodeService: ProfileCodeService\n    ) { }\n\n    getRestriction(criteria: CustomerFilterCriteria): Array<IRestriction> {\n\n        console.debug('DefaultCustomerCriteriaSearch criteria:', criteria);\n\n        let keyword = criteria.keyword;\n\n        let conditions = [];\n\n        console.debug('customerListAPI keyword', keyword);\n        if (StringUtils.isNotEmpty(keyword)) {\n            let compoundRestriction = new ORCompoundRestriction([new LikeRestriction('FirstName', [keyword]), new LikeRestriction('LastName', [keyword])]);\n            conditions.push(compoundRestriction);\n        }\n\n        let filterMap: Map<string, Array<string>> = criteria.getFilterMap();\n\n        filterMap.forEach((array: Array<string>, key: string) => {\n            console.log(key, array);\n\n            if (key == 'Birthday') {\n                let birthdayRestriction = new Array<IRestriction>();\n                let monthArray = new Array<string>();\n                for (let birthday of array) {\n                    if (birthday == 'Today') {\n                        let today = new Date();\n                        let startNum = today.getMonth() + 1;\n                        let endNum = today.getDate();\n                        let start = String(startNum);\n                        let end = String(endNum);\n                        if (start.length == 1) start = '0' + start;\n                        if (end.length == 1) end = '0' + end;\n\n                        birthdayRestriction.push(new AndCompoundRestriction([new EqualRestriction('BirthdayMonth', [start]),\n                        new EqualRestriction('BirthdayDate', [end])]));\n                    }\n                    else {\n                        if (birthday.length == 1) birthday = '0' + birthday;\n                        monthArray.push(birthday);\n                    }\n                }\n\n                if (monthArray.length != 0) {\n                    birthdayRestriction.push(new InRestriction('BirthdayMonth', monthArray));\n                }\n\n                conditions.push(new ORCompoundRestriction(birthdayRestriction));\n            }\n            else if (key == 'CustomerSource') {\n                if (array.length != 2) {\n                    let datasource = array[0];\n                    if (datasource == 'E') {\n                        conditions.push(new EqualRestriction('DataSource', ['OPUS']));\n                    }\n                    else {\n                        conditions.push(new NotEqualRestriction('DataSource', ['OPUS']));\n                    }\n\n                }\n            }\n            else if (key == 'Completeness') {\n                let completenessOption = this.profileCodeService.getCodeArray('Customer_Completeness');\n                let completenessRestriction = new Array<IRestriction>();\n                completenessOption.forEach(profileCode => {\n                    let code = profileCode.getCode();\n                    if (array.includes(code)) {\n                        let obj = JSON.parse(profileCode.getArguments());\n                        let start = obj.start;\n                        let end = obj.end;\n                        start = start / 100;\n                        end = end / 100;\n\n                        completenessRestriction.push(new AndCompoundRestriction([new GreaterOrEqualRestriction('Completeness', [start]), new LessOrEqualRestriction('Completeness', [end])]));\n                    }\n                })\n\n                console.debug('completenessRestriction length', completenessRestriction.length);\n                console.log('completenessRestriction:', completenessRestriction);\n                if (completenessRestriction.length != 0) {\n                    conditions.push(new ORCompoundRestriction(completenessRestriction));\n                }\n\n            }\n            else {\n                conditions.push(new InRestriction(key, array));\n            }\n\n        });\n        return conditions;\n    }\n}","import { APIFactory, APIDispatch, ProfileCodeService, ContactItem, PageInfo, ValidationResult, StringUtils, ExtDataProcess } from '@allianzSND/core';\nimport { Injectable, Optional, Inject } from '@angular/core';\nimport { Observable, of, from } from 'rxjs';\nimport { CustomerListAPI } from '../api/CustomerListAPI';\nimport { CustomerBirthdayListAPI } from '../api/CustomerBirthdayListAPI';\nimport { CustomerDetailAPI } from '../api/CustomerDetailAPI';\nimport { CustomerContactNoteAPI } from '../api/CustomerContactNoteAPI';\nimport { CustomerItem } from './model/CustomerItem';\nimport { CustomerAlertItem } from './model/CustomerAlertItem';\nimport { CustomerTel } from './model/CustomerTel';\nimport { CustomerTelAPI } from '../api/CustomerTelAPI';\nimport { ImportContactAPI } from '../api/ImportContactAPI';\nimport { CustomerDeleteContactNoteAPI } from '../api/CustomerDeleteContactNote';\nimport { CustomerFilterCriteria } from '../components/bean/customer-filter-criteria';\nimport { CustomerDeleteAPI } from '../api/CustomerDeleteAPI';\nimport { CustomerEditOvertimeAPI } from '../api/CustomerEditOvertimeAPI';\nimport { CustomerAutoDeleteAPI } from '../api/CustomerAutoDeleteAPI';\nimport { CustomerSavePresetAPI } from '../api/CustomerSavePresetAPI';\nimport { CustomerGetPresetAPI } from '../api/CustomerGetePresetAPI';\nimport { CustomerUpdateFollowAPI } from '../api/CustomerUpdateFollowAPI';\nimport { CustomerFilterPreset } from '../components/bean/customer-filter-preset';\nimport { CustomerBirthday } from './model/CustomerBirthday';\nimport { DashboardUpdateToReadAPI } from '../api/DashboardUpdateToReadAPI';\nimport { customerCriteriaSearchToken } from '../injectionToken/injection-token';\nimport { CriteriaSearch } from '../interface/CriteriaSearch';\nimport { DefaultCustomerCriteriaSearch } from '../components/customer-filter/DefaultCustomerCriteriaSearch';\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomerService {\n\n  //is first time use customer function\n  private _isFirstTime = true;\n\n\n  constructor(\n    private dispatcher: APIDispatch,\n    private APIFactory: APIFactory,\n    private profileCodeService: ProfileCodeService,\n    private defaultCriteriaSearch: DefaultCustomerCriteriaSearch,\n    @Optional() @Inject(customerCriteriaSearchToken) private customCriteriaSearch: CriteriaSearch\n  ) {\n    //register api\n  }\n\n  isFirstTime(): boolean {\n    if (this._isFirstTime) {\n      this._isFirstTime = false;\n      return true;\n    }\n    else {\n      return this._isFirstTime;\n    }\n\n  }\n\n\n\n  updateMessageToRead(messageType: string, messageDataCategory: string): Observable<any> {\n    let dashboardUpdateToReadAPI: DashboardUpdateToReadAPI = <DashboardUpdateToReadAPI>this.APIFactory.getAPI('updateDashboardToRead');\n    dashboardUpdateToReadAPI.setMessageType(messageType);\n    dashboardUpdateToReadAPI.setMessageDataCategory(messageDataCategory);\n\n    return Observable.create((observer) => {\n      this.dispatcher.dispatch(dashboardUpdateToReadAPI).subscribe((data) => {\n\n        console.debug('dashboard-service-updateMessageToRead', data);\n\n        observer.next(data['Header']);\n        observer.complete();\n      })\n    })\n  }\n\n  getOverTimeCustomerList(clientID): Observable<Array<CustomerAlertItem>> {\n    let customerOverTimeAPI: CustomerEditOvertimeAPI = <CustomerEditOvertimeAPI>this.APIFactory.getAPI('getCustomerOverTime');\n\n    customerOverTimeAPI.setClientID(clientID);\n\n    return Observable.create((observer) => {\n      this.dispatcher.dispatch(customerOverTimeAPI).subscribe((data) => {\n\n        console.debug('customer-service-getOverTimeList', data);\n\n        let returnList = new Array<CustomerAlertItem>();\n\n        let messages = data['Body'];\n        //set body data\n        for (let i = 0; i < messages.length; i++) {\n          let message = messages[i];\n\n          let args = JSON.parse(message['Arguments']);\n          let customerList = args['customers'];\n\n          for (let j = 0; j < customerList.length; j++) {\n            let event = new CustomerAlertItem(customerList[j].id, customerList[j].name);\n            returnList.push(event);\n          }\n\n        }\n\n        observer.next(returnList);\n        observer.complete();\n      })\n    })\n  }\n\n  getAutoDeleteCustomerList(clientID): Observable<Array<CustomerAlertItem>> {\n    let customerDeleteAPI: CustomerAutoDeleteAPI = <CustomerAutoDeleteAPI>this.APIFactory.getAPI('getCustomerAutoDelete');\n\n    customerDeleteAPI.setClientID(clientID);\n\n    return Observable.create((observer) => {\n      this.dispatcher.dispatch(customerDeleteAPI).subscribe((data) => {\n        console.log('customer-service-getAutoDeleteCustomerList', data);\n\n        let returnList = new Array<CustomerAlertItem>();\n\n        let messages = data['Body'];\n        //set body data\n        for (let i = 0; i < messages.length; i++) {\n          let message = messages[i];\n\n          let args = JSON.parse(message['Arguments']);\n          let customerList = args['customers'];\n\n          for (let j = 0; j < customerList.length; j++) {\n            let event = new CustomerAlertItem(customerList[j].id, customerList[j].name);\n            returnList.push(event);\n          }\n\n        }\n\n        observer.next(returnList);\n        observer.complete();\n      })\n    })\n  }\n\n  updateCustomerFollowStatus(clientID, isFollow): Observable<any> {\n    let updateCustomerFollowStatus: CustomerUpdateFollowAPI = <CustomerUpdateFollowAPI>this.APIFactory.getAPI('updateCustomerFollowStatus');\n    updateCustomerFollowStatus.setClient(clientID);\n    updateCustomerFollowStatus.setIsFollow(isFollow);\n\n    return Observable.create((observer) => {\n      this.dispatcher.dispatch(updateCustomerFollowStatus).subscribe((data) => {\n\n        console.debug('customer-service-updateCustomerFollowStatus', data);\n\n        observer.next(data['Header']);\n        observer.complete();\n      })\n    })\n  }\n\n  getFilterCriteriaPreset(): Observable<CustomerFilterPreset> {\n    let getFilterCriteria: CustomerGetPresetAPI = <CustomerGetPresetAPI>this.APIFactory.getAPI('getCustomerFilterPreset');\n\n    return Observable.create((observer) => {\n      this.dispatcher.dispatch(getFilterCriteria).subscribe((data) => {\n\n        console.debug('customer-service-getFilterCriteria', data);\n\n        let settingArray = data['Body'];\n\n        let preset: CustomerFilterPreset;\n        if (settingArray.length = !0) {\n          preset = JSON.parse(settingArray[0].SettingVal);\n        }\n\n        console.debug('customer-service-getFilterCriteriaPreset', preset);\n\n        observer.next(preset);\n        observer.complete();\n      })\n    })\n  }\n\n  saveFilterCriteria(filterCriteria: CustomerFilterCriteria): Observable<any> {\n    let saveFilterCriteria: CustomerSavePresetAPI = <CustomerSavePresetAPI>this.APIFactory.getAPI('saveCustomerFilterPreset');\n\n    saveFilterCriteria.setFilterCriteria(filterCriteria);\n\n\n    return Observable.create((observer) => {\n      this.dispatcher.dispatch(saveFilterCriteria).subscribe((data) => {\n\n        console.debug('customer-service-saveFilterCriteria', data);\n        observer.next(data);\n        observer.complete();\n\n      })\n    })\n  }\n\n  checkInFilterCriteria(clientID: string, filterCriteria: CustomerFilterCriteria): Observable<boolean> {\n\n    let customerListAPI: CustomerListAPI = <CustomerListAPI>this.APIFactory.getAPI('getCustomerList');\n    let restrictions = [];\n    if (this.customCriteriaSearch)\n      restrictions = this.customCriteriaSearch.getRestriction(filterCriteria);\n    else\n      restrictions = this.defaultCriteriaSearch.getRestriction(filterCriteria);\n\n\n    customerListAPI.restrictions = restrictions;\n    customerListAPI.clientID = clientID;\n\n    return Observable.create((observer) => {\n      this.dispatcher.dispatch(customerListAPI).subscribe((data) => {\n\n        console.debug('customer-service-checkInFilterCriteria', data);\n\n        observer.next(data['Body'].length != 0);\n        observer.complete();\n      })\n    })\n\n  }\n\n  //get customer datas\n  getCustomerList(filterCriteria: CustomerFilterCriteria, _pageInfo: PageInfo): Observable<Array<CustomerItem>> {\n\n    let restrictions = [];\n    if (this.customCriteriaSearch)\n      restrictions = this.customCriteriaSearch.getRestriction(filterCriteria);\n    else\n      restrictions = this.defaultCriteriaSearch.getRestriction(filterCriteria);\n\n    let customerListAPI: CustomerListAPI = <CustomerListAPI>this.APIFactory.getAPI('getCustomerList');\n\n    console.debug('customer-service-getCustomerList', filterCriteria, restrictions, _pageInfo);\n\n    customerListAPI.restrictions = restrictions;\n    customerListAPI.pageInfo = _pageInfo;\n\n    return Observable.create((observer) => {\n      this.dispatcher.dispatch(customerListAPI).subscribe((data) => {\n\n        console.debug('customer-service-getCustomerList', data);\n\n        let returnList = new Array<CustomerItem>();\n        let header = data['Header'];\n        let customerList = data['Body'];\n\n        //set header pageInfo\n        // _pageInfo.totalPage = header.PageInfo.totalPage;\n        // _pageInfo.totalRec = header.PageInfo.totalRec;\n\n        //set body data\n        for (let i = 0; i < customerList.length; i++) {\n          let json = customerList[i];\n          let isOtherSystem = json.DataSource != 'APP';\n          let isFollow = json.IsFollow == 'Y';\n          let completeness = json.Completeness;\n          let isOverTimeAlert = json.IsOverTimeAlert;\n\n\n          let event = new CustomerItem(json.ClientID, json.FirstName, json.LastName, json.Possibility, completeness, isFollow, isOtherSystem, isOverTimeAlert);\n          returnList.push(event);\n        }\n        observer.next(returnList);\n        observer.complete();\n      })\n    })\n\n  }\n\n  getCustomerBirthdayList(targetDate, subN, addN): Observable<Array<CustomerBirthday>> {\n    let customerBirthdayListAPI: CustomerBirthdayListAPI = <CustomerBirthdayListAPI>this.APIFactory.getAPI('getCustomerBirthdayList');\n    customerBirthdayListAPI.subN = subN;\n    customerBirthdayListAPI.addN = addN;\n    customerBirthdayListAPI.targetDate = targetDate;\n\n\n    return Observable.create((observer) => {\n      this.dispatcher.dispatch(customerBirthdayListAPI).subscribe((data) => {\n\n        console.debug('customer-service-getCustomerBirthdayList', data);\n\n        let returnList: Array<CustomerBirthday> = [];\n        // let header = data['Header'];\n        let birthdayList = data['Body'];\n\n\n        console.log(\"cusSer: \", birthdayList);\n\n        // //set body data\n        for (let i = 0; i < birthdayList.length; i++) {\n          let event = new CustomerBirthday(birthdayList[i]['ClientID'], birthdayList[i]['FirstName'], birthdayList[i]['LastName'], birthdayList[i]['BirthdayMonth'], birthdayList[i]['BirthdayDate']);\n          returnList.push(event);\n        }\n        observer.next(returnList);\n        observer.complete();\n      });\n\n\n\n\n    });\n  }\n\n  getCustomerDetail(clientID: string): Observable<any> {\n    if (StringUtils.isEmpty(clientID)) {\n      return of(undefined);\n    }\n    else {\n      let customerDetailAPI: CustomerDetailAPI = <CustomerDetailAPI>this.APIFactory.getAPI('getCustomerDetail');\n      customerDetailAPI.id = clientID;\n\n      return from(this.dispatcher.dispatch(customerDetailAPI).toPromise().then(resp => {\n        if (resp.Header.status && resp.Body.length > 0)\n          return resp[\"Body\"][0];\n        else\n          return null;\n      }));\n    }\n  }\n\n  importContact(items: Array<ContactItem>): Observable<string> {\n    let importContactAPI: ImportContactAPI = <ImportContactAPI>this.APIFactory.getAPI('importContact');\n\n    console.debug('customer-service-importContact', items);\n    importContactAPI.setItems(items);\n\n    return Observable.create((observer) => {\n      this.dispatcher.dispatch(importContactAPI).subscribe((data) => {\n        console.debug('customer-service-importContact', data);\n        observer.next(data['Header']);\n        observer.complete();\n\n      });\n    });\n  }\n\n\n\n  validProfile(customerDetail: any): ValidationResult {\n    let validationResult = new ValidationResult();\n\n    //valid required\n    if (StringUtils.isEmpty(customerDetail.lastName))\n      validationResult.setErrorMap('lastName', 'required');\n    // if (customerProfile.firstName == '')\n    //   validationResult.setErrorMap('firstName', 'required');\n\n    //valid format      \n\n    //valid email\n    if (customerDetail.emails.length != 0) {\n      let i = 0;\n      customerDetail.emails.forEach((email) => {\n        if (!email.isEmpty()) {\n          if (!this.isEmailFormat(email.email)) {\n            validationResult.setErrorMap(('email' + i).toString(), 'format');\n          }\n        }\n        i++;\n      });\n\n    }\n\n    //valid date\n    // if(customerProfile.birthday == null) {\n    //   validationResult.setErrorMap('birthday', 'date');\n    // }\n\n    return validationResult;\n  }\n\n  private isEmailFormat(email) {\n    let regexp = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n\n    return regexp.test(email);\n  }\n\n\n\n  deleteCustomerProfile(clientID: string): Observable<any> {\n    console.log(\"deleteCustomerProfile\", clientID);\n    let deleteAPI: CustomerDeleteAPI = <CustomerDeleteAPI>this.APIFactory.getAPI('deleteCustomer');\n    deleteAPI.clientID = clientID;\n\n    return Observable.create((observer) => {\n      this.dispatcher.dispatch(deleteAPI).subscribe((data) => {\n\n        console.debug('customer-service-deleteCustomerProfile', data);\n\n        observer.next(data['Header']);\n        observer.complete();\n\n      })\n    })\n  }\n\n  getCustomerContactNote(clientID: string, pageInfo: PageInfo): Observable<Array<any>> {\n    let customerContactNoteAPI: CustomerContactNoteAPI = <CustomerContactNoteAPI>this.APIFactory.getAPI('getCustomerContactNote');\n\n    customerContactNoteAPI.setClientID(clientID);\n    customerContactNoteAPI.setPageInfo(pageInfo);\n\n    console.debug('customer-service-getCustomerContactNote', customerContactNoteAPI);\n    return Observable.create((observer) => {\n      this.dispatcher.dispatch(customerContactNoteAPI).subscribe((data) => {\n        console.debug('customer-service-getCustomerContactNote', data);\n        let customerContactNoteList = data['Body'];\n        observer.next(customerContactNoteList);\n        observer.complete();\n      })\n    })\n  }\n\n\n  deleteCustomerContact(contactClientID: string): Observable<any> {\n    console.log(\"deleteCustomerContact\");\n    let deleteCustomerContactAPI: CustomerDeleteContactNoteAPI = <CustomerDeleteContactNoteAPI>this.APIFactory.getAPI('deleteCustomerContactNote');\n    deleteCustomerContactAPI.setContactClientID(contactClientID);\n\n    return Observable.create((observer) => {\n      this.dispatcher.dispatch(deleteCustomerContactAPI).subscribe((data) => {\n\n        console.debug('customer-service-editCustomerContact', data);\n\n        observer.next(data['Header']);\n        observer.complete();\n      })\n    })\n  }\n\n  getCustomerContactTel(clientID: string): Observable<Array<CustomerTel>> {\n    let customerTelAPI: CustomerTelAPI = <CustomerTelAPI>this.APIFactory.getAPI('getCustomerTel');\n\n    customerTelAPI.setClientID(clientID);\n\n    console.debug('customer-service-getCustomerContactTel', customerTelAPI);\n    return Observable.create((observer) => {\n      this.dispatcher.dispatch(customerTelAPI).subscribe((data) => {\n        console.debug('customer-service-getCustomerContactTel response', data);\n        let returnCustomerTel: Array<CustomerTel> = new Array<CustomerTel>();\n        let customerTelList = data['Body'];\n\n        customerTelList.map(tel => new CustomerTel(tel.ClientID, this.profileCodeService.convertCode2Text('Customer_TelType', tel.TelType), tel.Tel, tel.DataSource)).forEach(element => {\n          returnCustomerTel.push(element);\n        });\n\n        observer.next(returnCustomerTel);\n        observer.complete();\n      })\n    })\n  }\n\n}\n","import { ProfileCode, ProfileCodeService, SQLiteTable, StringUtils, showRuleToken } from \"@allianzSND/core\";\nimport { SelectOption, showRule} from \"@allianzSND/core\";\nimport { differenceInCalendarDays } from 'date-fns';\nimport { Injectable, Optional, Inject } from \"@angular/core\";\nimport { customerShowRuleToken } from \"../injectionToken/injection-token\";\nimport { CustomerShowRule } from \"../interface/CustomerShowRule\";\n\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerUtils {\n\n    constructor(\n        private profileCodeService: ProfileCodeService,\n        @Optional() @Inject(showRuleToken) private showRule: showRule,\n        @Optional() @Inject(customerShowRuleToken) private customerShowRule: CustomerShowRule,\n\n    ) { }\n\n    setCode2Option(codeArray: Array<ProfileCode>) {\n        let options: Array<SelectOption> = new Array();\n        if (codeArray != undefined) {\n            for (let code of codeArray) {\n                options.push(new SelectOption(code.getCode(), code.displayText));\n            }\n        }\n\n\n        return options;\n    }\n\n\n    countCompleteness(customerObj: any): number {\n        console.log(\"this.customerShowRule: \",this.customerShowRule);\n        if(this.customerShowRule) {\n            return this.customerShowRule.calculateCompleteness(customerObj);\n        }\n        else {\n\n            return 0;\n        }\n    }\n\n    setCustomerDefaultValue(dataObject: SQLiteTable) {\n\n        //count age\n        if (StringUtils.isNotEmpty(dataObject.getValue('BirthdayYear')) &&\n            StringUtils.isNotEmpty(dataObject.getValue('BirthdayMonth')) &&\n            StringUtils.isNotEmpty(dataObject.getValue('BirthdayDate'))) {\n            let birthday = new Date(Number(dataObject.getValue('BirthdayYear')),\n                Number(dataObject.getValue('BirthdayMonth') - 1),\n                Number(dataObject.getValue('BirthdayDate')));\n\n            let age = this.countAge(birthday);\n            dataObject.setValue('age', age);\n\n            //check age range\n            if (StringUtils.isEmpty(dataObject.getValue('AgeRange'))) {\n                let ageRange = this.countAgeRange(age);\n                if (ageRange != undefined) {\n                    dataObject.setValue('AgeRange', ageRange);\n                }\n            }\n\n        }\n\n    }\n\n    countAgeRange(age: number) {\n        console.debug('countAgeRange', age);\n        let rangeResult;\n        let ageRange: Array<ProfileCode> = this.profileCodeService.getCodeArray('Customer_Age');\n        console.log(\"ageRange:\", ageRange);\n        ageRange.forEach(profileCode => {\n            let args = profileCode.getArguments();\n            console.debug('customer-utils countAgeRange args', args);\n\n            let obj = JSON.parse(args);\n            console.debug('customer-utils countAgeRange obj', obj);\n            if (age >= obj.start && age <= obj.end) {\n                console.debug('match age range', profileCode.getCode());\n                rangeResult = profileCode.getCode();\n            }\n        });\n\n        console.debug('rangeResult', rangeResult);\n\n        return rangeResult;\n    }\n\n    countAge(birthday: Date): number {\n        let dates = this.calCEIntervalDays(birthday, new Date());\n        console.debug('dates', dates);\n        let age = Math.floor(dates / 365);\n        console.debug('age', age);\n\n        return age;\n    }\n\n    /**\n     * javascriptå³å¥èµ·å§æ¥èçµæ\n     * æ¥ææ ¼å¼çºæ°åå¹´ææ¥(EX.1060802)\n     * å³å¥ 1060702,1060802 æåå³31å¤©\n     * å³å¥ 1060901,1061001 æåå³30å¤©\n     * @param  sDate \n     * @param  eDate \n     * @return å¤©æ¸\n     */\n    calRocIntervalDays(sDate, eDate) {\n        var msecPerMinute = 1000 * 60;\n        var msecPerHour = msecPerMinute * 60;\n        var msecPerDay = msecPerHour * 24;\n        sDate = this.leftPad(sDate, 7, '0');\n        eDate = this.leftPad(eDate, 7, '0');\n        var begDateStr = \"\" + sDate.substring(3, 5) + \"/\" + sDate.substring(5) + \"/\" + (Number(sDate.substring(0, 3)) + Number(1911));\n        var endDateStr = \"\" + eDate.substring(3, 5) + \"/\" + eDate.substring(5) + \"/\" + (Number(eDate.substring(0, 3)) + Number(1911));\n        var begDate = new Date(begDateStr);\n        var endDate = new Date(endDateStr);\n        var interval = endDate.getTime() - begDate.getTime();\n        var days = Math.floor(interval / msecPerDay);\n        return days;\n    }\n    /**\n     * javascriptå³å¥èµ·å§æ¥èçµæ\n     * æ¥ææ ¼å¼çºè¥¿åå¹´ææ¥(EX.20170801)\n     * å³å¥ 20170702,20170802 æåå³31å¤©\n     * å³å¥ 20170901,20171001 æåå³30å¤©\n     * @param  sDate \n     * @param  eDate \n     * @return å¤©æ¸\n     */\n    calCEIntervalDays(sDate, eDate) {\n        // var msecPerMinute = 1000 * 60;\n        // var msecPerHour = msecPerMinute * 60;\n        // var msecPerDay = msecPerHour * 24;\n        // var begDateStr = \"\" + sDate.substring(4, 6) + \"/\" + sDate.substring(6) + \"/\" + sDate.substring(0, 4);\n        // var endDateStr = \"\" + eDate.substring(4, 6) + \"/\" + eDate.substring(6) + \"/\" + eDate.substring(0, 4);\n        // var begDate = new Date(begDateStr);\n        // var endDate = new Date(endDateStr);\n        // var interval = endDate.getTime() - begDate.getTime();\n        // var days = Math.floor(interval / msecPerDay);\n\n        // return days;\n        return differenceInCalendarDays(eDate, sDate);\n\n    }\n    /**\n     * åå·¦è£é¶\n     * Ex:leftPad(3,3,'0')->003\n     * @param  val    [åå¼]\n     * @param  padLen [è£è¶³é·åº¦]\n     * @param  padVal [è£è¶³å¼]\n     * @return        [description]\n     */\n    leftPad(val, padLen, padVal) {\n        if (val.toString().length < padLen) {\n            for (var i = 1; i < padLen; i++) {\n                val = padVal + val;\n                if (val.toString().length >= padLen) {\n                    break;\n                }\n            }\n        }\n        return val;\n    }\n\n    convertNameToShow(firstName: string, lastName: string): string {\n        if (this.showRule) {\n          return this.showRule.convertName(firstName, lastName);\n        }\n        else {\n          let firstNameStr: string = StringUtils.isNotEmpty(firstName) ? firstName : '';\n          let lastNameStr: string = StringUtils.isNotEmpty(lastName) ? (' ' + lastName) : '';\n          return firstNameStr + lastNameStr;\n        }\n      }\n\n}","import { Component, OnInit, HostListener, ElementRef, ChangeDetectorRef, EventEmitter, Output, Input, ViewChild, AfterViewInit, ChangeDetectionStrategy, Optional, Inject } from '@angular/core';\nimport { CalendarService } from '../../service/calendar-service.service';\nimport { CalendarEventDetail } from '../../service/model/CalendarEventDetail';\nimport {\n  addDays,\n  addHours,\n  addMinutes,\n  addMonths,\n  getDate,\n  getDay,\n  getHours,\n  getMinutes,\n  getMonth,\n  getYear,\n  isSameMonth,\n  subMinutes,\n  startOfMonth,\n  endOfMonth,\n  startOfWeek,\n  endOfWeek,\n  startOfDay,\n  endOfDay\n} from 'date-fns';\nimport { ProfileCodeService, PageInfo, showRuleToken, showRule, DataSyncService } from '@allianzSND/core';\nimport { ProfileCode } from '@allianzSND/core';\nimport { SettingService } from '@allianzSND/core';\nimport { Setting } from '@allianzSND/core';\nimport { UiInformationBtnComponent, ModalManager } from '@allianzSND/ui';\nimport { StringUtils, SelectOption } from '@allianzSND/core';\nimport { ViewDateChange } from '@allianzSND/core';\nimport { ChangeAction } from '@allianzSND/core';\nimport { UiInformationContentComponent } from '@allianzSND/ui';\nimport { Language } from '@allianzSND/core';\nimport { TranslateService } from '@allianzSND/core';\nimport { CustomerItem } from '../../../customer/service/model/CustomerItem';\nimport { CustomerFilterCriteria } from '../../../customer/components/bean/customer-filter-criteria';\nimport { CustomerService } from '../../../customer/service/customer-service.service';\nimport { CustomerUtils } from '../../../customer/utils/customer-utils';\n\n\n\n@Component({\n  selector: 'snd-calendar',\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.scss']\n  , changeDetection: ChangeDetectionStrategy.OnPush\n\n})\nexport class CalendarComponent implements OnInit, AfterViewInit {\n\n  //two-way binding\n  private _parentHeight: number = 0;\n  @Input()\n  get parentHeight() {\n    return this._parentHeight;\n  }\n  set parentHeight(val) {\n    this._parentHeight = val;\n\n    if (this._parentHeight == 0) {\n      this._parentHeight = window.innerHeight;\n    }\n\n    this.parentHeightChange.emit(this._parentHeight);\n\n    var _this = this;\n    let titleBtnsBlock_ele = _this.titleBtnsBlock.nativeElement;\n    let titleBtnsBlock_size = titleBtnsBlock_ele.getBoundingClientRect();\n    _this.calendarHeight = _this._parentHeight\n      - titleBtnsBlock_size.height\n      - parseInt(window.getComputedStyle(titleBtnsBlock_ele).marginBottom);\n    this.changeDetector.markForCheck();\n\n    // console.warn('parentHeight', this._parentHeight);\n    // console.warn('titleBtnsBlock_ele', titleBtnsBlock_size.height, parseInt(window.getComputedStyle(titleBtnsBlock_ele).marginBottom));\n    // console.warn('calendarHeight', _this.calendarHeight);\n  } // end set parentHeight\n  @Output() parentHeightChange = new EventEmitter();\n\n  @ViewChild('titleBtnsBlock') titleBtnsBlock: ElementRef;\n\n  private YEAR: string = 'year';\n  private MONTH: string = 'month';\n  private WEEK: string = 'week';\n  private DAY: string = 'day';\n\n  //calendar-ui config setting\n  public viewTypeIndex: number = 2; // 'month'\n  public viewType: string = this.MONTH; //\n  public viewDate = new Date(); //current date\n  public weekStartsOn: number = 1; // Monday\n\n  //count content height\n  private calendarHeight: number = 0;\n\n  //click calendar id\n  public clientID: string = '';\n\n  public translateMap: Map<string, string> = new Map<string, string>();\n  public optionMap: Map<string, Array<ProfileCode>> = new Map<string, Array<ProfileCode>>();\n  public customerItemList: Array<SelectOption> = [];\n  private storeStartDate: Date = new Date();\n  private storeEndDate: Date = new Date();\n\n  public calendarEventList: Array<CalendarEventDetail> = []; // eventList\n  public calendarEventListAfterFilter: Array<CalendarEventDetail> = []; // filterå¾ event\n  public viewDateCalendarEventList: Array<CalendarEventDetail> = [];\n  public calendarEventDetail: CalendarEventDetail;\n  public calendarEventEdit: CalendarEventDetail = null;\n  public customerClientName: string;\n  private customerClientMap: Map<string, string> = new Map<string, string>();\n  // private calendarEventMap = new CalendarEventMap();\n\n  public activityTypeList: Array<ProfileCode> = []; // DBä¸­ææactivityType\n  public alertTypeList: Array<ProfileCode> = [];\n  public language: Language = new Language();\n  private currentFilterOptionList: Array<string> = [];\n\n  // popup\n  public isExpandFilter: boolean = false;\n  public isExpandDetail: boolean = false;\n  public isExpandEdit: boolean = false;\n  public isDelete: boolean = false;\n  public isSave: boolean = false;\n  public isSaveClick: boolean = false;\n  public isCalendarDelete: boolean = false;\n  public isLoading: boolean = false;\n  public isCalendarEditMetaDataDone: boolean = false;\n  public isCalendarDetailMetaDataDone: boolean = false;\n\n  // translate\n  private dayTypesList: Array<string> = ['Cross_Day', 'All_Day'];\n  private weekdaysList: Array<string> = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  private monthsList: Array<string> = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  private noSchedule: string = 'No_Schedule';\n\n\n  // info config\n  //é¿åç¶å±¤å¶ä» position relative å¼é¿ info\n  public outsideSpace = {\n    top: 0,\n    left: 0\n  };\n  //info content å·¦å³æå°padding\n  public paddindData = {\n    top: 10,\n    right: 10,\n    bottom: 10,\n    left: window.innerWidth > 1023 ? 170 : 10\n  };\n\n\n  //check is pad or mobile\n  public windowWidth: number;\n  @HostListener('window:resize', ['$event'])\n  onResize(event) {\n    this.windowWidth = event.target.innerWidth;\n    this.calcuContentHeight();  // resize for android bottom show or hide \n    this.scrollToCurrentTime(); // resize for android bottom show or hide .. caculate day week height\n    console.log('calendar inside cacualte height');\n\n    this.changeDetector.markForCheck();\n  }\n\n\n  constructor(private changeDetector: ChangeDetectorRef,\n    private elementRef: ElementRef,\n    private settingService: SettingService,\n    private translateService: TranslateService,\n    private calendarService: CalendarService,\n    private profileCodeService: ProfileCodeService,\n    private customerService: CustomerService,\n    private customerUtils: CustomerUtils,\n    private modalManager: ModalManager,\n    private dataSyncService: DataSyncService\n  ) { }\n\n  ngOnInit() {\n    //init calendar type\n    this.activityTypeList = this.profileCodeService.getCodeArray('Calendar_Type');\n    this.alertTypeList = this.profileCodeService.getCodeArray('Calendar_RemindTime');\n    this.optionMap.set('Calendar_Type', this.activityTypeList);\n    this.optionMap.set('Calendar_RemindTime', this.alertTypeList);\n    this.dayTypesList.forEach((dayType) => {\n      this.translateMap.set(dayType, this.translateService.translate(dayType))\n    });\n    this.weekdaysList.forEach((weekday) => {\n      this.translateMap.set(weekday, this.translateService.translate(weekday))\n    });\n    this.monthsList.forEach((month) => {\n      this.translateMap.set(month, this.translateService.translate(month))\n    });\n    this.translateMap.set(this.noSchedule, this.translateService.translate(this.noSchedule));\n\n    this.windowWidth = window.innerWidth;\n\n    //set component is detach\n    // this.changeDetector.detach();\n\n    //phone default view is day view\n    if (this.windowWidth < 1024) {\n      this.viewTypeIndex = 0;\n      this.changeDetector.markForCheck();\n    }\n\n    //load default filter setting\n    let defaultSettingVal = this.settingService.getSetting('CalendarFilterSetting').SettingVal;\n    if (StringUtils.isNotEmpty(defaultSettingVal)) {\n      let calendarSetting = JSON.parse(defaultSettingVal);\n\n      //default all checked\n      if (Object.keys(calendarSetting).length == 0) {\n        this.activityTypeList.forEach((codeItem) => {\n          codeItem.isCheck = true;\n        });\n      }\n      else {\n        this.activityTypeList.forEach((codeItem) => {\n          let code = codeItem.getCode();\n          let isCheck = calendarSetting[code] == undefined ? false : calendarSetting[code];\n          codeItem.isCheck = isCheck;\n        });\n      }\n\n    }\n\n    this.setCurrentFilterOption(undefined);\n\n\n    this.typeChange(this.viewTypeIndex);\n    this.loadCalendarData();\n    this.createCustomerList();\n\n  } // end ngOnInit\n\n  ngAfterViewInit() {\n    this.typeChange(this.viewTypeIndex);\n  }\n\n  switchPadViewMode(activeTabIndex) {\n    console.debug('switchPadViewMode:', this.viewDate);\n\n    if (activeTabIndex != this.viewTypeIndex) {\n      //count start & end\n      this.typeChange(activeTabIndex);\n\n      this.changeDetector.detectChanges();\n\n      //load data & refresh\n      this.loadCalendarData();\n    }\n\n  }\n\n  typeChange(activeTabIndex) {\n    console.debug('calendar-component-typeChange', activeTabIndex, this.viewType, this.viewDate);\n\n    let start, end;\n    this.viewTypeIndex = activeTabIndex;\n\n    switch (activeTabIndex) {\n      // YEAR\n      case 3:\n        this.viewType = this.YEAR;\n        this.calcuContentHeight();\n        break;\n      // MONTH\n      case 2:\n        this.viewType = this.MONTH;\n        this.calcuContentHeight();\n        start = startOfMonth(this.viewDate);\n        end = endOfMonth(this.viewDate);\n        //count current time is have data\n        break;\n      // WEEK\n      case 1:\n        this.viewType = this.WEEK;\n        start = startOfWeek(this.viewDate, { weekStartsOn: 1 });\n        end = endOfWeek(this.viewDate, { weekStartsOn: 1 });\n        //count current time is have data\n        this.scrollToCurrentTime();\n\n        break;\n      // DAY\n      case 0:\n        this.viewType = this.DAY;\n        start = startOfDay(this.viewDate);\n        end = endOfDay(this.viewDate);\n        //count current time is have data\n        this.scrollToCurrentTime();\n        // console.warn('view type change: day');\n        break;\n    } // end switch\n\n    if (this.viewType != this.YEAR) {\n\n      if (StringUtils.isNotEmpty(start) && StringUtils.isNotEmpty(end)) {\n        this.storeStartDate = start;\n        this.storeEndDate = end;\n      }\n    }\n\n    console.debug('calendar-component-typeChange done');\n\n\n\n  } // end typeChange\n\n  //phone header change mode\n  mobileBackViewType() {\n    console.debug('mobileBackViewType', this.viewType);\n    switch (this.viewType) {\n      case this.MONTH:\n        this.typeChange(3); // back to year\n        break;\n      case this.WEEK:\n        this.typeChange(2); // back to month\n        break;\n      case this.DAY:\n        this.typeChange(2); // back to month\n        break;\n    } // end switch\n\n\n    //because change view type , so date range is change\n    this.loadCalendarData();\n\n  } // end mobileChangeViewType\n\n  clickToday() {\n    this.viewDate = new Date();\n    console.warn('clickToday', this.viewDate);\n\n    this.changeDetector.detectChanges();\n\n\n    //calculate new start and end\n    this.typeChange(this.viewTypeIndex);\n\n    //load data & refresh\n    this.loadCalendarData();\n    this.loadViewDateCalendarEventList();\n  }\n\n  //when calendar component any click change viewDate , will check pad/phone current viewType to change mode\n  onViewDateChange(viewDateChange: ViewDateChange) {\n    let val = new Date(viewDateChange.viewDate);\n    let action = viewDateChange.action;\n\n    console.debug('calendar-component update viewDate:', val);\n\n    console.debug('calendar-component update viewDate:', val, this.viewType);\n    console.debug('this.viewDate:', this.viewDate, isSameMonth(this.viewDate, val));\n\n\n    if (this.isPad() && (isSameMonth(this.viewDate, val) && this.viewType === this.MONTH)) {\n      this.viewDate = val;\n      return;\n    }\n    else {\n      this.viewDate = val;\n      //if year change date , alwasy switch month\n      if (this.viewType == this.YEAR && action == ChangeAction.CLICK) {\n        this.typeChange(2);\n      }\n      else if (this.viewType == this.MONTH && !this.isPad() && action == ChangeAction.CLICK) {\n        //if device is phone , click day switch to week when view type is month\n        this.typeChange(0);\n      }\n      else {\n        //else calculate new start & end\n        this.typeChange(this.viewTypeIndex);\n      }\n\n      //load data & refresh\n      this.loadViewDateCalendarEventList();\n      this.loadCalendarData();\n    }\n  }\n\n  //fetch calendar between start & end range\n  loadCalendarData() {\n    console.debug('loadCalendar data');\n    if (this.viewType !== this.YEAR) { // year no need query data , only view\n\n      //If old data is larger than 20, clear first to make view change faster\n      if (this.calendarEventListAfterFilter.length > 20)\n        this.calendarEventListAfterFilter = [];\n\n      if (StringUtils.isNotEmpty(this.storeStartDate) && StringUtils.isNotEmpty(this.storeEndDate)) {\n\n        this.calendarService.getCalendarEventList(this.storeStartDate, this.storeEndDate, '').subscribe(data => {\n          this.calendarEventList = data;\n          this.refreshCalendarEventList();\n        });\n      }\n    }\n    console.debug('loadCalendar data done');\n  }\n\n  loadCalendarEventDetail(clientID: string) {\n    console.log(\"loadCalendarEventDetail:\", clientID);\n    this.calendarService.getCalendarEventDetail(clientID).subscribe(data => {\n      console.warn('getCalendarEventDetail', data);\n      this.isLoading = false;\n      this.calendarEventDetail = data;\n      this.customerClientName = this.customerClientMap.get(this.calendarEventDetail.customerClientID);\n      console.log(\"customerClientMap:\", this.customerClientMap);\n      this.calendarEventDetail.displayActivity = this.profileCodeService.convertCode2Text('Calendar_Type', this.calendarEventDetail.activity);\n      this.calendarEventDetail.displayAlert1 = this.profileCodeService.convertCode2Text('Calendar_RemindTime', this.calendarEventDetail.alert1);\n      this.calendarEventDetail.displayAlert2 = this.profileCodeService.convertCode2Text('Calendar_RemindTime', this.calendarEventDetail.alert2);\n      this.onToggleDetailModal(true);\n    });\n  }\n\n  private loadViewDateCalendarEventList() {\n    let queryDate = new Date(getYear(this.viewDate), getMonth(this.viewDate), getDate(this.viewDate), 0, 0, 0);\n    this.calendarService.getCalendarEventList(queryDate, subMinutes(addDays(this.viewDate, 1), 1), '').subscribe(data => {\n      console.warn('loadViewDateCalendarEventList', data);\n      this.viewDateCalendarEventList = data;\n    });\n  }\n\n  onClickDetail(eventItem) {\n    this.clientID = eventItem.clientID;\n    this.loadCalendarEventDetail(this.clientID);\n    this.loadViewDateCalendarEventList();\n\n    console.warn('clickDetail', this.clientID);\n  } // end clickDetail\n\n  onClickDeleteCancel() {\n  } // end clickDeleteCancel\n\n  onClickDeleteConfirm() {\n    this.modalManager.toggleLoading(true);\n\n    this.calendarService.deleteCalendarEvent(this.clientID).subscribe(async data => {\n      console.warn(\"this.calendarService.deleteCalendarEvent data: \", data);\n      await this.dataSyncService.syncFunc(['CALENDAR']);\n      if (data.status) {\n        this.isDelete = data.status;\n      }\n      this.loadCalendarData();\n      if (this.isExpandDetail) { // close pop up\n        this.onToggleDetailModal(false);\n      }\n      this.modalManager.toggleLoading(false);\n    });\n  } // end clickDeleteConfirm\n\n  onClickAppointmentSave() {\n    this.isSaveClick = true;\n  }\n\n  async onSaveCalendarEvent(resp) {\n    let type = resp.type;\n    console.log(\"onSaveCalendarEvent:\", resp);\n    if (type !== 'fail') {\n      let data = resp.data;\n      let clientID = data.ClientID;\n      console.warn('saveCalendarEvent');\n\n      console.warn('updateCalendarEvent', clientID);\n      this.modalManager.toggleLoading(true);\n      await this.dataSyncService.syncFunc(['CALENDAR']);\n      this.modalManager.toggleLoading(false);\n      this.calendarService.getCalendarEventDetail(clientID).subscribe((data) => {\n        this.calendarEventDetail = data;\n        this.onToggleAppointmentModal(false);\n        this.loadCalendarData();\n\n        if (type === 'edit') {\n          this.loadCalendarEventDetail(clientID);\n          this.isSave = true;\n          this.loadViewDateCalendarEventList();\n        }\n        else if (type === 'add') {\n          this.isSave = true;\n          console.warn('addCalendarEvent');\n        }\n      })\n    }\n    this.isSaveClick = false;\n    return;\n  }\n\n  private isPad() {\n    return this.windowWidth >= 1024;\n  }\n\n  editEvent() {\n    console.log(\"calendar EditEvent:\", this.calendarEventDetail);\n    this.calendarEventEdit = new CalendarEventDetail(this.calendarEventDetail.clientID,\n      this.calendarEventDetail.calendarID,\n      this.calendarEventDetail.customerClientID,\n      this.calendarEventDetail.title,\n      this.calendarEventDetail.location,\n      this.calendarEventDetail.activity,\n      '',\n      this.calendarEventDetail.start,\n      this.calendarEventDetail.end,\n      '',\n      this.calendarEventDetail.alert1,\n      this.calendarEventDetail.alert2,\n      this.calendarEventDetail.alert3,\n      this.calendarEventDetail.remark,\n      null);\n    this.calendarEventEdit.allDay = this.calendarEventDetail.allDay;\n    this.calendarEventEdit.isAlert = this.calendarEventDetail.isAlert;\n    this.onToggleAppointmentModal(true);\n  }\n\n  addEvent() {\n    this.clientID = '';\n    let currentTime; // adjust time to next interval\n    currentTime = new Date(getYear(this.viewDate), getMonth(this.viewDate), getDate(this.viewDate), getHours(new Date()), getMinutes(new Date()));\n    currentTime = addMinutes(currentTime, (5 - getMinutes(currentTime) % 5));  // adjust minutes to next 5 minutes\n    currentTime = addHours(currentTime, 1);\n    this.calendarEventEdit = new CalendarEventDetail('', '', null, '', '', null, 'N', currentTime, addMinutes(currentTime, 15), 'Y', '8', '', '', '', null);\n    this.loadViewDateCalendarEventList();\n    this.onToggleAppointmentModal(true);\n  }\n\n  // block which control filter\n\n  onActivityTypeListChange(alertTypeList: Array<ProfileCode>) {\n    this.alertTypeList = alertTypeList;\n    this.currentFilterOptionList = [];\n    let settingVal = {};\n    this.activityTypeList.forEach((codeItem) => {\n      console.debug('activityType codeItem', codeItem);\n      if (settingVal != undefined) settingVal[codeItem.getCode()] = codeItem.isCheck;\n\n      if (codeItem.isCheck) {\n        this.currentFilterOptionList.push(codeItem.getCode());\n      }\n    });\n\n    this.filterOptionChange(this.currentFilterOptionList);\n    this.settingValueChange(settingVal);\n  }\n\n  settingValueChange(settingValue) {\n    //update filter setting\n    let settingObj = new Setting(this.settingService.getSetting('CalendarFilterSetting').SettingID, this.settingService.getSetting('CalendarFilterSetting').SettingName, JSON.stringify(settingValue));\n    this.settingService.updateSetting(settingObj).subscribe(data => {\n      console.debug('calendar.component-update setting', data);\n    });\n  }\n\n  filterOptionChange(currentFilterOption: Array<string>) {\n    console.warn('currentFilterOption', currentFilterOption);\n    this.currentFilterOptionList = currentFilterOption;\n    this.refreshCalendarEventList();\n  }\n\n  private setCurrentFilterOption(settingVal) {\n    this.currentFilterOptionList = [];\n\n    //find checked filter\n    this.activityTypeList.forEach((codeItem) => {\n      console.debug('activityType codeItem', codeItem);\n      if (settingVal != undefined) settingVal[codeItem.getCode()] = codeItem.isCheck;\n\n      if (codeItem.isCheck) {\n        this.currentFilterOptionList.push(codeItem.getCode());\n      }\n    });\n  }\n\n  private refreshCalendarEventList() {\n\n    this.calendarEventListAfterFilter = [];\n\n    //filter event calendar type\n    console.debug('start refreshCalendarEventList', this.calendarEventList.length);\n    this.calendarEventListAfterFilter = this.calendarEventList.filter(x => this.currentFilterOptionList.indexOf(x.activity) > -1);\n    console.debug('start refreshCalendarEventList done', this.calendarEventListAfterFilter);\n    console.debug('start refreshCalendarEventList done', this.calendarEventListAfterFilter.length);\n    // this.changeDetector.detectChanges();\n\n    //count height\n    if (this.viewType == this.DAY || this.viewType == this.WEEK) {\n      this.scrollToCurrentTime();\n    }\n  }\n\n  // end block\n\n\n\n  scrollToCurrentTime() {\n    let _this = this;\n    setTimeout(() => {\n      let timeEventAll_ele = _this.elementRef.nativeElement.querySelectorAll('div.cal-time-events');\n      // console.warn('_this.timeEventAll_ele', timeEventAll_ele.length, timeEventAll_ele);\n\n      // if(timeEventAll_ele !=null){\n      for (let timeEvent_ele of timeEventAll_ele) {\n        let mobileDayHeader_ele = _this.elementRef.nativeElement.querySelector('div.cal-day-headers');\n        let allDayEvent_ele = _this.elementRef.nativeElement.querySelector('div.cal-all-day-events');\n        let allDayEvent_h = (allDayEvent_ele != null\n          ? allDayEvent_ele.getBoundingClientRect().height\n          : 0);\n\n        // console.warn('mobileDayHeader_ele', mobileDayHeader_ele);\n        if (mobileDayHeader_ele != null) {\n\n          // console.warn('if _this.calendarHeight', timeEvent_ele, _this.calendarHeight);\n          // console.warn('if mobileDayHeader_ele', mobileDayHeader_ele);\n\n          timeEvent_ele.style.maxHeight = (_this.calendarHeight\n            - mobileDayHeader_ele.getBoundingClientRect().height\n            - allDayEvent_h\n            - parseInt(window.getComputedStyle(mobileDayHeader_ele).marginBottom)) + 'px';\n\n          // scroll to time\n          let currentHour = getHours(new Date());\n          console.log('current Hour:', getHours(new Date()));\n          if (currentHour > 3)\n            timeEvent_ele.scrollTop = Math.floor((currentHour - 3) / 2) * 80\n              + (Math.floor((currentHour - 3) / 2)\n                + (currentHour - 3) % 2) * 82;\n        }\n      } // end for: timeEventAll_ele\n      this.changeDetector.markForCheck();\n\n      // }\n\n    }, 100); // ææExpressionChangedAfterItHasBeenCheckedError å setTimeOut è§£\n  } // end scrollToCurrentTime\n\n  calcuContentHeight() {\n\n    console.debug('calcuContentHeight');\n\n    let _this = this;\n    setTimeout(() => {\n      console.warn('calcuContentHeight', this.calendarHeight);\n      // calculate year view height\n      let year_ele = _this.elementRef.nativeElement.querySelector('.ui-calendar-year');\n      let yearTag_ele = _this.elementRef.nativeElement.querySelector('app-ui-calendar-year');\n\n      if (year_ele != null && yearTag_ele != null) {\n\n        if (_this.windowWidth > 1023) {\n          yearTag_ele.style.minHeight = (_this.calendarHeight\n            - parseInt(window.getComputedStyle(year_ele).marginTop)) + 'px';\n          yearTag_ele.style.height = (_this.calendarHeight\n            - parseInt(window.getComputedStyle(year_ele).marginTop)) + 'px';\n        } else {\n\n          year_ele.style.height = (_this.calendarHeight\n            - parseInt(window.getComputedStyle(year_ele).marginTop)) + 'px';\n          console.log('mobile year view: _this.calendarHeight:', _this.calendarHeight, 'window.getComputedStyle(year_ele).marginTop', window.getComputedStyle(year_ele).marginTop);\n\n        }\n      }\n\n      // calculate month view height\n      let month_ele = _this.elementRef.nativeElement.querySelector('.cal-month-view');\n\n      if (month_ele !== null && month_ele !== undefined && _this.windowWidth > 1023) {\n\n        month_ele.style.maxHeight = _this.calendarHeight + 'px';\n        month_ele.style.minHeight = _this.calendarHeight + 'px';\n      }\n      if (month_ele.style.maxHeight == '0px') {\n        console.warn('Here');\n        month_ele.style.maxHeight = 100 - 3 + 'vh';\n        month_ele.style.minHeight = 100 - 3 + 'vh';\n      }\n      this.changeDetector.markForCheck();\n\n    }, 300); // ææExpressionChangedAfterItHasBeenCheckedError å setTimeOut è§£\n  } // end calcuContentHeight\n\n  renderWeek() {\n    console.log('in integration renderWeek');\n    let mobileDayHeader_ele = this.elementRef.nativeElement.querySelector('div.cal-day-headers');\n    let allDayEvent_ele = this.elementRef.nativeElement.querySelector('div.cal-all-day-events');\n    console.log('in integration renderWeek', mobileDayHeader_ele, allDayEvent_ele);\n    this.scrollToCurrentTime();\n  }\n\n\n  // function which control popup\n\n  onToggleAppointmentModal(val) {\n    setTimeout(() => {\n      this.isExpandEdit = val;\n      if (!this.isExpandEdit) {\n        this.isCalendarEditMetaDataDone = false;\n      }\n      if (this.isExpandFilter) { this.onCloseInfo(); }\n      this.changeDetector.markForCheck();\n    }, 0); // ææExpressionChangedAfterItHasBeenCheckedError å setTimeOut è§£\n\n\n  } // end toggleAppointmentModal\n\n  onToggleDetailModal(val) {\n    this.isExpandDetail = val;\n    if (!this.isExpandDetail) {\n      this.isCalendarDetailMetaDataDone = false;\n    }\n    if (this.isExpandFilter) { this.onCloseInfo(); }\n  }\n  onToggleFilterModal(val) {\n    if (!this.isExpandFilter) {\n      this.onCloseInfo();\n    }\n  }\n\n  // end block\n\n  // è¨­ info position\n  @ViewChild(UiInformationBtnComponent) nowShowBtn: UiInformationBtnComponent;\n  @ViewChild(UiInformationContentComponent) infoContent: UiInformationContentComponent;\n  @ViewChild('filterInfo') filterInfo: UiInformationContentComponent;\n  onInfoTabClick(dom) {\n    console.warn('infoTabClick');\n    console.warn('nowShowBtn', this.nowShowBtn);\n\n    if (this.nowShowBtn !== undefined) {\n      // console.log('nowShowBtn click', this.nowShowBtn.btnContent.nativeElement);\n\n      if (dom !== undefined) {\n        console.warn('messageContent', dom.messageContent, this.nowShowBtn.messageContent);\n        if (dom.messageContent !== this.nowShowBtn.messageContent) {\n          // this.closeInfo();\n          this.nowShowBtn.closeInfo();\n          this.nowShowBtn = dom;\n        }\n        else {\n          this.resetInfoPos();\n        }\n      } // end if: dom !== undefined\n    } else {\n      this.nowShowBtn = dom;\n    }\n\n    // console.warn('messageContent filter', this.nowShowBtn.messageContent === this.filterInfo, this.filterInfo);\n    if (this.nowShowBtn.messageContent === this.filterInfo) {\n      this.isExpandFilter = true;\n    }\n  } // end infoTabClick\n  resetInfoPos() {\n    // this.isExpandFilter = true;\n    if (this.nowShowBtn !== undefined) {\n      this.nowShowBtn.countPos();\n    }\n  } // end resetInfoPos\n  onCloseInfo() {\n    this.isExpandFilter = false;\n    if (this.nowShowBtn !== undefined) {\n      this.nowShowBtn.closeInfo();\n      // this.nowShowBtn = undefined;\n\n      // console.warn('closeInfo', this.nowShowBtn, this.nowShowBtn.btnContent.nativeElement);\n    }\n  } // end closeInfo\n\n  createCustomerList() {\n    let pageInfo = new PageInfo();\n    pageInfo.pageSize = -1;\n    let filterCriteria = new CustomerFilterCriteria();\n    this.customerService.getCustomerList(filterCriteria, pageInfo).subscribe((data) => {\n      console.log('data', data);\n      let temp_array = [];\n      for (let custItem of data) {\n        this.customerClientMap.set(custItem.clientID, this.customerUtils.convertNameToShow(custItem.firstName, custItem.lastName));\n        temp_array.push(new SelectOption(custItem.clientID, this.customerUtils.convertNameToShow(custItem.firstName, custItem.lastName)));\n      }\n      this.customerItemList = temp_array;\n    });\n  }\n\n  mobileFilterClick() {\n    this.isExpandFilter = true;\n  }\n\n\n  onMetaDataDone(funcName: string) {\n    if (funcName === 'CalendarEdit') {\n      this.isCalendarEditMetaDataDone = true;\n    }\n    else if (funcName === 'CalendarDetail') {\n      this.isCalendarDetailMetaDataDone = true;\n    }\n\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, ElementRef, Inject, Optional } from '@angular/core';\nimport { DateUtils, Language, showRuleToken, showRule } from '@allianzSND/core';\n\n@Component({\n  selector: 'app-customer-contact-list',\n  templateUrl: './customer-contact-list.component.html',\n  styleUrls: ['./customer-contact-list.component.scss']\n})\nexport class CustomerContactListComponent implements OnInit {\n\n\n  public language: Language = new Language();\n\n  @Output()\n  private onAddNote: EventEmitter<any> = new EventEmitter();\n\n  @Output()\n  private onDisplayNote: EventEmitter<any> = new EventEmitter();\n\n  @Output()\n  private onEditNote: EventEmitter<any> = new EventEmitter();\n\n  @Output()\n  private onDeleteNote: EventEmitter<any> = new EventEmitter();\n\n  @Output()\n  private contactListRefresh: EventEmitter<any> = new EventEmitter();\n\n\n\n\n  @Input()\n  get contactList() { return this._contactList; }\n  set contactList(contactList) {\n    console.log(\"customer-contact-list set contactList:\", contactList);\n\n    this._contactList = contactList.map(x => Object.assign({}, x, { NoteTimeDisplay: this.toNoteTime(new Date(x.NoteTime)) }));\n\n    setTimeout(() => {\n      this.closeSlidingItems();\n    }, 200)\n  }\n  private _contactList: Array<any>;\n\n  elementRef: ElementRef;\n  constructor(private dateUtils: DateUtils,\n    @Inject(ElementRef) elementRef: ElementRef,\n    @Optional() @Inject(showRuleToken) private showRule:showRule\n    ) {\n    this.elementRef = elementRef;\n  }\n\n\n  ngOnInit() {\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.closeSlidingItems();\n    }, 200)\n\n  }\n\n  // ionic sliding need to call close event when every refresh\n  async closeSlidingItems() {\n    console.debug('closeSlidingItems');\n\n\n    const item = this.elementRef.nativeElement.querySelector('ion-item-sliding');\n    if (item != null) {\n      /// console.debug('item size',item.length);\n      console.debug('item', item);\n      await item.close();\n      await item.closeOpened();\n    }\n\n  }\n\n  refreshContactNote() {\n    this.contactListRefresh.emit()\n\n\n    // need to wait ion-item-sliding create at first from no data (when skelton interface)\n    setTimeout(() => {\n      this.closeSlidingItems();\n    }, 200)\n\n  }\n\n  addNote() {\n    this.onAddNote.emit();\n  }\n\n  displayNote(note: any) {\n    this.onDisplayNote.emit(Object.assign({\n      Date: this.toNoteTime(new Date(note.NoteTime))\n    }, note));\n  }\n\n  editNote(note: any) {\n    this.onEditNote.emit(note);\n  }\n\n  deleteNote(note: any) {\n    this.onDeleteNote.emit(note);\n  }\n\n\n  trackByClientID(index, item) {\n    return item.ClientID;\n  }\n\n  public toNoteTime(time: Date) {\n    console.log(\"toNoteTime:\", time);\n    let defaultStr = this.dateUtils.toDateString(time, 'yyyy-MM-dd HH:mm');\n    if (this.showRule)\n      return this.showRule.convertDate(time) + defaultStr.slice(10);\n    else\n      return defaultStr;\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef, Optional, Inject, ViewChildren, QueryList } from '@angular/core';\nimport { DateUtils, StringUtils, Language, MetaService, ProfileCodeService, InputExecutor, DefaultMetaParser, MetaColumn, MetaController } from '@allianzSND/core';\nimport { showRuleToken, DisplayMetaComponent } from '@allianzSND/core';\nimport { showRule } from '@allianzSND/core';\nimport { CustomerUtils } from '../../utils/customer-utils';\nimport { customerDetailMetaControllerToken } from '../../injectionToken/injection-token';\n\n@Component({\n  selector: 'app-customer-detail',\n  templateUrl: './customer-detail.component.html',\n  styleUrls: ['./customer-detail.component.scss']\n})\nexport class CustomerDetailComponent extends DisplayMetaComponent implements OnInit {\n\n  @Output()\n  private onEditDetail: EventEmitter<string> = new EventEmitter();\n  @Output()\n  private onCallPhone: EventEmitter<string> = new EventEmitter();\n  @Output()\n  private onDeleteDetail: EventEmitter<string> = new EventEmitter();\n  @Output()\n  private onAddAppointment: EventEmitter<string> = new EventEmitter();\n  @Output()\n  private followChange: EventEmitter<{ 'isFollow': boolean, 'clientID': string }> = new EventEmitter();\n\n\n\n\n  public DisplayData = null;\n  public readonly dash: string = '- -';\n\n  @Input()\n  get data() {\n    return this._data;\n  }\n  set data(value) {\n    this._data = value;\n    console.log(\"detail Set Data:\", value);\n    if (value && value.ClientID) {\n      this.waitUntilMetaLoaded().then(() => {\n        this.onDataUpdated();\n      })\n    }\n    else {\n      this._data = null;\n    }\n  }\n\n  protected getMetaID() {\n    return 'customerDetail';\n  }\n\n  protected getMetaParams() {\n    return null;\n  }\n\n  get rowMetaWithoutGroup(): Array<Array<MetaColumn>> {\n    return this.metaConfig.Rows.filter(x => x.map(y => y.type !== 'Group').reduce((acc, cur) => acc && cur, true));\n  };\n\n  get rowMetaGroup(): Array<MetaColumn> {\n    return this.metaConfig.Columns.filter(x => x.type === 'Group');\n  }\n\n  get followStatus() {\n    return this._data[\"IsFollow\"] === 'Y'\n  }\n\n\n  public language: Language = new Language();\n\n  // empty status\n  public isEmptyAppointment: boolean = false;\n  public isEmptyEdit: boolean = false;\n  public isEmptyDel: boolean = false;\n  public isEmptyDetailInfo: boolean = false;\n  public isEmptyGroupDetailInfo: boolean = false;\n  public isEmptyContactNote: boolean = false;\n  public isCollapseBtnShow: boolean = true;\n\n  // card2 extend template is null or not\n  public isCardExtendTemplateNull = true;\n  @ViewChildren('detailPostTemp') detailPostTemp: QueryList<any>;\n  //card2 collapse isOpen or not\n  public isCollapseOpen = false;\n\n  public get isHasAgeRange() {\n    return this._data && !!this._data[\"AgeRange\"];\n  }\n\n  public get isHasContactFrequancy() {\n    return this._data && !!this._data[\"ContactFrequancy\"];\n  }\n\n\n\n\n\n  constructor(\n    private dateUtils: DateUtils,\n    protected profileCodeService: ProfileCodeService,\n    private changeDetctor: ChangeDetectorRef,\n    protected metaService: MetaService,\n    private customerUtils: CustomerUtils,\n    inputExecutor: InputExecutor,\n    metaParser: DefaultMetaParser,\n    @Optional() @Inject(showRuleToken) private showRule: showRule,\n    @Optional() @Inject(customerDetailMetaControllerToken) private customMetaController: MetaController\n  ) {\n    super(metaService, profileCodeService, metaParser, inputExecutor);\n  }\n  ngOnInit() {\n    console.log(\"customerDetail ngOninit!\");\n    super.ngOnInit();\n  }\n\n\n  onDataUpdated() {\n    console.log(\"customerDetail onDataUpdated!\", this._data);\n    super.onDataUpdated();\n\n    //check datasource is from OPUS\n    this.isEmptyDel = this._data.DataSource == 'OPUS';\n\n    this.convertEmptyValToDisplayText(this._data);\n    this.checkInfoIsEmpty();\n    this.changeCollateButton();\n\n    this.DisplayData = Object.assign({}, this._data);\n    if (this.customMetaController)\n      this.customMetaController.onDataUpdated(this._data);\n    this.changeDetctor.detectChanges();\n    console.log(\"after customerDetail onDataUpdated!\", this.DisplayData);\n  }\n\n\n\n\n  private changeCollateButton() {\n    console.log(\"changeCollateButton Meta:\", this.metaConfig);\n    this.isCollapseBtnShow = this.metaConfig.Columns.filter(x => x.type === \"Group\")\n      .map(x => this._data[x.id].length > (12 / x.grid.pc))\n      .reduce((acc, cur) => acc || cur, false);\n\n    console.debug('isCollapseBtnShow', this.isCollapseBtnShow);\n  }\n\n\n\n  private checkInfoIsEmpty() {\n    //if detail info is empty , display no data status    \n    this.isEmptyDetailInfo =\n      this.metaConfig.Columns.filter(x => x.type !== \"Group\")\n        .map(x => this._data[x.id] === null || this._data[x.id] === undefined || StringUtils.isEmpty(this._data[x.id]) || this._data[x.id] === this.dash)\n        .reduce((acc, cur) => acc && cur, true);\n\n    this.isEmptyGroupDetailInfo = this.metaConfig.Columns.filter(x => x.type === \"Group\")\n      .map(x => this._data[x.id].length === 0)\n      .reduce((acc, cur) => acc && cur, true);\n\n    console.log(\"isEmptyDetailInfo:\", this.isEmptyDetailInfo);\n    console.log(\"isEmptyGroupDetailInfo:\", this.isEmptyGroupDetailInfo);\n  }\n\n  private convertEmptyValToDisplayText(customerDetail: any) {\n    //if not data set default value(?? or -- --)\n    console.log(\"convertEmptyValToDisplayText: \", customerDetail);\n    customerDetail.AgeRange = this.profileCodeService.convertCode2Text(\"Customer_Age\", customerDetail.AgeRange);\n    customerDetail.ContactFrequancy = this.profileCodeService.convertCode2Text(\"Customer_ContactFrequancy\", customerDetail.ContactFrequancy);\n    customerDetail.showName = this.convertNameToShow(customerDetail.FirstName, customerDetail.LastName);\n    customerDetail.address.forEach(addr => {\n      addr[\"AddressDisplay\"] = this.toFullAddress(Object.assign({}, addr));\n    });\n    this.metaConfig.Columns.filter(x => x.type !== \"Group\").forEach(col => {\n      if (col.id === 'BirthdayDisplay')\n        customerDetail.BirthdayDisplay = StringUtils.isNotEmpty(customerDetail.Birthday) ? this.toBirthdayStr() : this.dash;\n      else\n        customerDetail[col.id] = StringUtils.isEmpty(customerDetail[col.id]) ? this.dash : customerDetail[col.id];\n    });\n  }\n\n  private toBirthdayStr() {\n\n    if (this._data.Birthday !== undefined) {\n      if (this.showRule) {\n        return this.showRule.convertDate(new Date(this._data.Birthday));\n      }\n      else {\n        return this.dateUtils.toDateString(new Date(this._data.Birthday), 'yyyy-MM-dd');\n      }\n    }\n  }\n\n  private toFullAddress(addressObj: any): string {\n    if (this.showRule)\n      return this.showRule.convertAddress(addressObj);\n    else {\n      let array = [];\n      if (StringUtils.isNotEmpty(addressObj.Country)) array.push(addressObj.Country);\n      if (StringUtils.isNotEmpty(addressObj.City)) array.push(addressObj.City);\n      if (StringUtils.isNotEmpty(addressObj.Area)) array.push(addressObj.Area);\n      if (StringUtils.isNotEmpty(addressObj.Zipcode)) array.push(addressObj.Zipcode);\n      if (StringUtils.isNotEmpty(addressObj.Address)) array.push(addressObj.Address);\n      return array.join(', ');\n    }\n  }\n\n  edit() {\n    this.onEditDetail.emit(this._data.ClientID);\n  }\n\n  delete() {\n    this.onDeleteDetail.emit(this._data.ClientID);\n  }\n\n  callPhone() {\n    this.onCallPhone.emit(this._data.ClientID);\n  }\n\n  addAppointment() {\n    this.onAddAppointment.emit(this._data.ClientID);\n  }\n\n  trackByFn(index, item) {\n    return item.name;\n  }\n\n\n  isFollowChange(isFollow: boolean) {\n    console.debug('isFollowChange', isFollow);\n    // display new follow state first\n    this._data[\"IsFollow\"] = isFollow ? \"Y\" : \"N\";\n    this.changeDetctor.detectChanges();\n\n    //ouput follow detail change status\n    this.followChange.emit({ 'isFollow': isFollow, \"clientID\": this._data.ClientID });\n\n\n  }\n\n  private convertNameToShow(firstName: string, lastName: string): string {\n    return this.customerUtils.convertNameToShow(firstName, lastName);\n  }\n\n}\n","import { Observable, BehaviorSubject, Subject } from \"rxjs\";\nimport { Injectable } from \"@angular/core\";\nimport { CustomerItem } from \"../model/CustomerItem\";\nimport { CustomerFilterCriteria } from \"../../components/bean/customer-filter-criteria\";\n\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CustomerStoreService {\n\n    private _stateBehaviorSubject: Subject<any>;\n    private _detailBehaviorSubject: Subject<any>;\n    private _listBehaviorSubject: Subject<any>;\n    private _criteriaBehaviorSubject: Subject<any>;\n    private _detailIDSubject: Subject<any>;\n\n    private _customerState: CUSTOMER_STATE;\n    private _customerDetail: any;\n    private _customerList: Array<CustomerItem>;\n    private _customerCriteria: CustomerFilterCriteria\n\n    constructor(\n    ) {\n        this._customerState = CUSTOMER_STATE.DISPLAY;\n        this._customerDetail = {\n            ClientID: \"\"\n        };\n        this._customerList = [];\n        this._customerCriteria = new CustomerFilterCriteria();\n        this._stateBehaviorSubject = new BehaviorSubject(this._customerState);\n        this._detailBehaviorSubject = new BehaviorSubject(this._customerDetail);\n        this._listBehaviorSubject = new BehaviorSubject(this._customerList);\n        this._criteriaBehaviorSubject = new BehaviorSubject(this._customerCriteria);\n        this._detailIDSubject = new BehaviorSubject(this._customerDetail.ClientID);\n\n    }\n\n    setState(state: CUSTOMER_STATE): void {\n        this._customerState = state;\n        this._stateBehaviorSubject.next(this._customerState);\n\n    };\n\n    getState(): Observable<CUSTOMER_STATE> {\n        return this._stateBehaviorSubject;\n    };\n\n    setCurrentCustomerDetail(detail: any): void {\n        this._customerDetail = detail;\n        this._detailBehaviorSubject.next(this._customerDetail);\n        this._detailIDSubject.next(this._customerDetail.ClientID);\n    };\n\n    getCurrentCustomerDetail(): Observable<any> {\n        return this._detailBehaviorSubject;\n    };\n\n    setCustomerList(list: Array<CustomerItem>): void {\n        this._customerList = list;\n        this._listBehaviorSubject.next(this._customerList);\n    };\n\n    getCustomerList(): Observable<Array<CustomerItem>> {\n        return this._listBehaviorSubject;\n    };\n\n    setCriteria(criteria: CustomerFilterCriteria): void {\n        this._customerCriteria = criteria;\n        this._criteriaBehaviorSubject.next(this._customerCriteria);\n    };\n\n    getCriteria(): Observable<CustomerFilterCriteria> {\n        return this._criteriaBehaviorSubject;\n    };\n\n    getCustomerDetailID(): Observable<string> {\n        return this._detailIDSubject;\n    }\n}\n\nexport enum CUSTOMER_STATE {\n    IMPORT = 'import',\n    DISPLAY = 'display',\n    EDIT = 'edit',\n    ADD_SAVED = 'add saved',\n    EDIT_SAVED = 'edit saved',\n    FIRST = 'first'\n}","import { MetaController, ValidationResult } from \"@allianzSND/core\";\nimport { Injectable } from \"@angular/core\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DefaultCustomerEditMetaController implements MetaController {\n\n    onDataUpdated(data: any) {\n        if (data['tel']) {\n            data['notOPUSTel'] = data['tel'].filter(x => x.DataSource && x.DataSource !== 'OPUS');\n        }\n        console.log(\"Default controller onDataUpdated:\", data);\n    }\n\n    onValueChange(column: string, value: any, groupId: string, index: number, data: any, validationResult: ValidationResult) {\n        // if (column === 'Email') {\n        //     let isEmail = this.isEmailFormat(value);\n        //     if (!isEmail)\n        //         validationResult.setErrorMap(column + index.toString(), 'Wrong_Email');\n        //     else\n        //         validationResult.deleteError(column + index.toString());\n        // }\n    }\n\n    onValidateAll(data: any, validationResult: ValidationResult) {\n        data['tel'] = data['tel'].filter(x => x.dataSource && x.dataSource === 'OPUS').concat(data['notOPUSTel']);\n        if (data['email'] && data['email'].length > 0) {\n            data['email'].forEach((ele, index) => {\n                let isEmail = this.isEmailFormat(ele.Email);\n                if (!isEmail)\n                    validationResult.setErrorMap('Email' + index.toString(), 'Wrong_Email');\n                else\n                    validationResult.deleteError('Email' + index.toString());\n            });\n        }\n        return validationResult.isTrue();\n    }\n\n    btnClick(type: string, id: string, data: any) { }\n\n\n    private isEmailFormat(email) {\n        let regexp = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n\n        return regexp.test(email);\n    }\n\n\n}","import { Component, OnInit, ElementRef, Output, AfterViewInit, ViewChild, EventEmitter, Optional, Inject, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { MetaService, showRuleToken, showRule, MetaController, AppRouter, FormMetaComponent, ProfileCodeService, DefaultMetaParser, APIExecutor, MetaColumn, TranslateService } from '@allianzSND/core';\nimport { Language, StringUtils } from '@allianzSND/core';\nimport { CustomerUtils } from '../../utils/customer-utils';\nimport { CUSTOMER_STATE, CustomerStoreService } from '../../service/customerStore/customerStore-service';\nimport { customerEditMetaControllerToken, addProgressPointToken } from '../../injectionToken/injection-token';\nimport { DefaultCustomerEditMetaController } from './DefaultCustomerEditMetaController';\nimport { AddProgressPoint } from '../../interface/AddProgressPoint';\n\n@Component({\n  selector: 'app-customer-edit',\n  templateUrl: './customer-edit.component.html',\n  styleUrls: ['./customer-edit.component.scss']\n})\nexport class CustomerEditComponent extends FormMetaComponent implements OnInit, AfterViewInit, OnDestroy {\n\n  @Output() sendContentHeight = new EventEmitter();\n  public contentHeight;\n\n  @ViewChild('inpageMain') content: ElementRef;\n\n\n  private customerDetailSubscribe = null;\n  public customerDetail;\n  public pageTitle = 'Add_Profile';\n  public today = new Date();\n\n  public language: Language = new Language();\n\n  public disableAge: boolean = false;\n  public isDisplaySavePopup: boolean = false;\n  public isShow: boolean = false;\n\n  get data() {\n    return this._data;\n  }\n\n  get rowConfig(): Array<Array<MetaColumn>> {\n    return this.metaConfig.Rows;\n  }\n  get columnConfig(): Array<MetaColumn> {\n    return this.metaConfig.Columns;\n  }\n\n  get footerConfig(): Array<MetaColumn> {\n    return this.metaConfig.Footer;\n  }\n\n\n  private edit_type = \"add\";\n  private customerID = '';\n  private _metaController: MetaController;\n\n\n\n  constructor(\n    private customerUtils: CustomerUtils,\n    private changeDetector: ChangeDetectorRef,\n    private elementRef: ElementRef,\n    private router: AppRouter,\n    private translateService: TranslateService,\n    defaultMetaController: DefaultCustomerEditMetaController,\n    profileCodeService: ProfileCodeService,\n    metaParser: DefaultMetaParser,\n    metaExecutor: APIExecutor,\n    @Optional() @Inject(customerEditMetaControllerToken) customMetaController: MetaController,\n    private customerStoreService: CustomerStoreService,\n    protected metaService: MetaService,\n    @Optional() @Inject(addProgressPointToken) private addProgressPoint: AddProgressPoint\n  ) {\n    super(metaService, profileCodeService, metaParser, metaExecutor);\n    this._metaController = customMetaController ? customMetaController : defaultMetaController;\n  }\n\n  ngOnInit() {\n    this.customerDetailSubscribe = this.customerStoreService.getCustomerDetailID().subscribe((customerID: string) => {\n      console.log(\"customerID:\", customerID);\n      this.customerID = customerID;\n      super.ngOnInit();\n      if (StringUtils.isEmpty(customerID)) {\n        //ADD\n        this.edit_type = \"add\";\n      }\n      else {\n        //Edit\n        this.edit_type = \"edit\";\n      }\n    })\n\n  }\n\n  ngOnDestroy() {\n    if (this.customerDetailSubscribe)\n      this.customerDetailSubscribe.unsubscribe();\n  }\n\n  public btnClick(type: string, id: string) {\n    console.log(\"BTN CLICK!\", type, id);\n    if (type === 'submit') {\n      if (this.validationResult.isTrue()) {\n        this.customerStoreService.setCurrentCustomerDetail(this._data);\n        let state = this.edit_type == \"add\" ? CUSTOMER_STATE.ADD_SAVED : CUSTOMER_STATE.EDIT_SAVED;\n        this.customerStoreService.setState(state);\n        //offline add progress point\n        console.log(\"customer addProgressPoint\", this.addProgressPoint);\n        if (this.addProgressPoint && this.edit_type == \"add\") {\n          this.addProgressPoint.addCustomerPoint(1);\n        }\n        this.router.navigate(\"Customers\");\n      }\n    }\n    this._metaController.btnClick(type, id, this._data);\n  }\n\n  public getMetaID() {\n    return 'customerEdit';\n  }\n\n  public getMetaParams() {\n    return {\n      id: this.customerID\n    }\n  }\n\n  public onValueChange(column: string, value: any, groupId: string, index: number) {\n    //Trigger other column values\n    if (column === 'Birthday') {\n      this.countAgeRange(value);\n    }\n    this._metaController.onValueChange(column, value, groupId, index, this._data, this.validationResult);\n  }\n\n  public onDataUpdated() {\n    super.onDataUpdated();\n    console.log(\"onDataUpdated!\");\n    console.log(\"data:\", this._data);\n    console.log(\"stringify:\", JSON.stringify(this._data));\n    if (this.edit_type === 'add') {\n      this.pageTitle = this.translateService.translate(this.language.addProfile);\n      this.disableAge = false;\n    }\n    else if (this.edit_type === 'edit') {\n      this.pageTitle = this.convertNameToShow(this._data.FirstName, this._data.LastName);\n      this.disableAge = StringUtils.isNotEmpty(this._data.Birthday);\n      // this.Data.AgeRange = this.disableAge ? this.Data.AgeRange : undefined;\n    }\n    this.isShow = true;\n    this._metaController.onDataUpdated(this._data);\n  }\n\n  public onValidateAll(): boolean {\n    let completeness = this.customerUtils.countCompleteness(this._data);\n    this._data.Completeness = Math.round(completeness * 100) / 100;\n    console.log(\"Calculate Completeness:\", this._data.Completeness);\n    // if (!this.validationResult.isTrue()) {\n    //   //If basic validation has error.\n    //   setTimeout(() => {\n    //     this.scrollToError();\n    //   }, 200);\n    //   return false;\n    // }\n    // else {\n    //   //Do custom validation.\n    //   let result = true;\n    //   result = result && this._metaController.onValidateAll(this._data, this.validationResult);\n    //   return result;\n    // }\n\n    let result = this._metaController.onValidateAll(this._data, this.validationResult) && this.validationResult.isTrue();\n    if (!result) {\n      setTimeout(() => {\n        this.scrollToError();\n      }, 200);\n    }\n\n    return result;\n  }\n\n  ngAfterViewInit() {\n    //ç²å¾å§å®¹é«\n    setTimeout(() => {\n      this.contentHeight = this.content.nativeElement.offsetHeight;\n      console.log('ele Height:', this.contentHeight)\n    }, 600);\n\n    this.sendContentHeight.emit(this.contentHeight);\n\n  }\n\n  private countAgeRange(birthday) {\n\n    if (StringUtils.isEmpty(birthday)) {\n      this._data.AgeRange = undefined;\n      this.disableAge = false;\n    }\n    else {\n      let age = this.customerUtils.countAge(birthday);\n      let ageRange = this.customerUtils.countAgeRange(age);\n      console.debug('ageRange', ageRange);\n\n      if (ageRange != undefined) {\n        this._data.AgeRange = ageRange;\n        this.disableAge = true;\n      }\n    }\n    console.log(\"this.data in countAgeRange:\", this._data);\n    this.changeDetector.detectChanges();\n  }\n\n  private scrollToError() {\n    console.log('scrollToError');\n    let errorBlock = this.elementRef.nativeElement.querySelector('.error-msg');\n    let scrollContent = this.elementRef.nativeElement.querySelector('.form-scroll-content');\n    console.log('scroll error:', scrollContent, 'errorBlock', errorBlock);\n    if (errorBlock && scrollContent) {\n\n      let move = errorBlock.offsetTop;\n      // let move = 50;\n      console.log('scrollToError errorBlock.offsetTop', errorBlock.offsetTop, 'move', move)\n      scrollContent.scrollTo({ top: move, behavior: \"smooth\" });\n    }\n  }\n\n  private convertNameToShow(firstName: string, lastName: string): string {\n    return this.customerUtils.convertNameToShow(firstName, lastName);\n  }\n\n}\n","import { Component, OnInit, Output, Input, EventEmitter, Optional, Inject, OnDestroy } from '@angular/core';\nimport { MetaService, Language, MetaController, FormMetaComponent, ProfileCodeService, DefaultMetaParser, InputExecutor, MetaColumn } from '@allianzSND/core';\nimport { CustomerFilterCriteria } from '../bean/customer-filter-criteria';\nimport { Subject } from 'rxjs';\nimport { customerFilterMetaControllerToken } from '../../injectionToken/injection-token';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-customer-filter',\n  templateUrl: './customer-filter.component.html',\n  styleUrls: ['./customer-filter.component.scss']\n})\nexport class CustomerFilterComponent extends FormMetaComponent implements OnInit, OnDestroy {\n\n\n\n\n  //subject to subscribe for open & save & clear\n  @Input()\n  public clear: Subject<any>;\n\n  @Input()\n  public save: Subject<any>;\n\n  @Input()\n  public open: Subject<any>;\n\n\n\n  //Input criteria\n  private _criteria = new CustomerFilterCriteria();\n  @Input()\n  get criteria() {\n    return this._criteria;\n  }\n\n  set criteria(criteria: CustomerFilterCriteria) {\n    console.log(\"set criteria:\", criteria);\n    console.log(\"PresetJson:\", criteria.toMetaJSON());\n    this._data = this.convertCriteriaToObject(criteria);\n    this.waitUntilMetaLoaded().then(() => {\n      console.log(\"this.metaConfig:\", this.metaConfig);\n      this.onDataUpdated();\n    })\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  get columnConfig(): Array<MetaColumn> {\n    return this.metaConfig.Columns;\n  }\n\n  get footerConfig(): Array<MetaColumn> {\n    return this.metaConfig.Footer;\n  }\n\n\n  @Output()\n  private doneCriteria: EventEmitter<CustomerFilterCriteria> = new EventEmitter();\n\n\n\n\n  constructor(\n    protected metaService: MetaService,\n    profileCodeService: ProfileCodeService,\n    metaParser: DefaultMetaParser,\n    metaExecutor: InputExecutor,\n    @Optional() @Inject(customerFilterMetaControllerToken) private customMetaController: MetaController\n  ) {\n    super(metaService, profileCodeService, metaParser, metaExecutor);\n  }\n\n  public language: Language = new Language();\n  private unsubscribe$: Subject<void> = new Subject();\n\n  getMetaParams() {\n    return null;\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.clear) {\n      this.clear\n        .pipe(takeUntil(this.unsubscribe$))\n        .subscribe(() => {\n          this.clearCriteria();\n        })\n    }\n\n    if (this.save) {\n      this.save\n        .pipe(takeUntil(this.unsubscribe$))\n        .subscribe(() => {\n          this.saveCriteria();\n        })\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n\n  btnClick(type: string, id: string) {\n    if (this.customMetaController) {\n      this.customMetaController.btnClick(type, id, this._data);\n    }\n  }\n\n\n  onValidateAll() {\n    if (this.customMetaController)\n      return this.customMetaController.onValidateAll(this._data, this.validationResult);\n    else\n      return true;\n  }\n\n  onValueChange(column: string, value: any, groupId = null, index = -1) {\n    if (this.customMetaController) {\n      this.customMetaController.onValueChange(column, value, groupId, index, this._data, this.validationResult);\n    }\n    else {\n      if (Array.isArray(this._data[column])) {\n        if (this._data[column].indexOf(value) > -1) {\n          this._data[column] = this._data[column].filter(x => x !== value);\n        }\n        else {\n          this._data[column] = [...this._data[column], value];\n        }\n\n        this._data[\"AsPreset\"] = false;\n      }\n      else {\n        this._data[column] = value;\n      }\n    }\n    console.log(\"this.Data:\", this._data);\n  }\n\n  getMetaID() {\n    return 'customerFilter'\n  }\n\n  onDataUpdated() {\n    super.onDataUpdated();\n    this.fillDefaultVal();\n    console.log(\"Filter Data Updated:\", this._data);\n    if (this.customMetaController) {\n      this.customMetaController.onDataUpdated(this._data);\n    }\n  }\n\n  getCheckboxValue(column: string, value: string): boolean {\n    return this._data[column] && this._data[column].indexOf(value) > -1;\n  }\n\n\n  private fillDefaultVal() {\n    this._data = Object.assign(this.getDefaultData(), this._data);\n  }\n\n  private getDefaultData() {\n    let defaultObj = this.metaConfig.Columns.map(x => x.id).reduce((acc, cur) => {\n      acc[cur] = [];\n      return acc;\n    }, {});\n    let footerObj = this.metaConfig.Footer.filter(x => x.type === 'Checkbox').map(x => x.id).reduce((acc, cur) => {\n      acc[cur] = false;\n      return acc;\n    }, {});\n    return Object.assign(defaultObj, footerObj);\n  }\n\n  private clearCriteria() {\n    this._data = Object.assign(this._data, this.getDefaultData());\n  }\n\n\n  private saveCriteria() {\n    this.doneCriteria.emit(this.convertToCriteria());\n  }\n\n\n  private convertCriteriaToObject(criteria: CustomerFilterCriteria): any {\n    return Object.assign({}, criteria.toMetaJSON());\n  }\n\n  private convertToCriteria() {\n    let criteria = new CustomerFilterCriteria();\n    this.metaConfig.Columns.map(x => x.id).forEach(colID => {\n      if (this._data[colID].length > 0)\n        criteria.addCriteriaCols(colID, this._data[colID]);\n    });\n    this.metaConfig.Footer.map(x => x.id).forEach(colID => {\n      criteria.setOption(colID, this._data[colID]);\n    });\n\n    return criteria;\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, Optional, Inject } from '@angular/core';\nimport { ContactItem, Language, showRuleToken, showRule } from '@allianzSND/core';\nimport { CustomerImportGroup } from '../bean/customer-import-group';\n\n@Component({\n  selector: 'app-customer-import',\n  templateUrl: './customer-import.component.html',\n  styleUrls: ['./customer-import.component.scss']\n})\nexport class CustomerImportComponent implements OnInit {\n\n  @Input()\n  public importContractMap = new Map<string, CustomerImportGroup>();\n\n  @Output()\n  private importCustomer: EventEmitter<Array<ContactItem>> = new EventEmitter();\n\n\n  public language: Language = new Language();\n\n  constructor(\n    @Optional() @Inject(showRuleToken) private showRule: showRule\n  ) { }\n\n  ngOnInit() {\n\n  }\n\n\n  doImport() {\n\n    let importItems: Array<ContactItem> = new Array<ContactItem>();\n\n    this.importContractMap.forEach((group: CustomerImportGroup, groupName: string) => {\n      group.getItems.forEach((item: ContactItem) => {\n        console.debug(item);\n        if (item.isCheck) {\n          importItems.push(item);\n        }\n      })\n    });\n\n    this.importCustomer.emit(importItems);\n  }\n\n  toDisplayName(firstname: string, lastname: string) {\n    if (this.showRule)\n      return this.showRule.convertName(firstname, lastname);\n    else\n      return `${lastname} ${firstname}`;\n  }\n\n}\n","import { Component, OnInit, Output, EventEmitter, Input, ChangeDetectorRef, ElementRef, Inject, Optional, Injectable, ViewChild, AfterViewInit } from '@angular/core';\nimport { StringUtils, Language } from '@allianzSND/core';\nimport { CustomerItem } from '../../service/model/CustomerItem';\nimport { CustomerUtils } from '../../utils/customer-utils';\n@Component({\n  selector: 'app-customer-list',\n  templateUrl: './customer-list.component.html',\n  styleUrls: ['./customer-list.component.scss']\n})\nexport class CustomerListComponent implements OnInit, AfterViewInit {\n\n\n  public loadingFinish: boolean = true;\n  public refreshFinish: boolean = true;\n\n\n  constructor(\n    private elementRef: ElementRef,\n    private customerUtils: CustomerUtils\n  ) { }\n\n  @Output()\n  public customerClick: EventEmitter<CustomerItem> = new EventEmitter();\n\n  @Output()\n  public customerLoad: EventEmitter<any> = new EventEmitter();\n\n  @Output()\n  public customerRefresh: EventEmitter<any> = new EventEmitter();\n\n  @Input()\n  get customerList() { return this._customerList; }\n  set customerList(customerList: Array<CustomerItem>) {\n\n    this._customerList = customerList;\n    this.loadingFinish = true;\n    this.refreshFinish = true;\n  }\n  private _customerList: Array<CustomerItem> = [];\n\n  @Input()\n  get filterType() { return this._filterType; }\n  set filterType(filterType) {\n    this._filterType = filterType;\n  }\n  private _filterType;\n\n  public language: Language = new Language();\n\n  private _onClickCustomerID;\n  @Input()\n  get onClickCustomerID() {\n    return this._onClickCustomerID;\n  }\n  set onClickCustomerID(onClickCustomerID) {\n    this._onClickCustomerID = onClickCustomerID;\n  }\n\n  //Is Default Data(No Search Status)\n  public get isDefaultData() {\n    return this.customerList.length == 0 && StringUtils.isNotEmpty(this.filterType) && this.filterType == 'NONE';\n  }\n\n  public get showSearchNoData() {\n    return this.customerList.length == 0 && StringUtils.isNotEmpty(this.filterType) && this.filterType == 'SEARCH';\n  }\n\n\n  ngOnInit() {\n  }\n\n  ngAfterViewInit() {\n  }\n\n\n  trackByClientID(index, item) {\n    return item.clientID;\n  }\n\n\n\n  async closeSlidingItems() {\n    console.debug('list closeSlidingItems');\n\n    const item = this.elementRef.nativeElement.querySelector('ion-item-sliding');\n    if (item != null) {\n      /// console.debug('item size',item.length);\n      console.debug('item', item);\n      await item.close();\n      await item.closeOpened();\n    }\n\n  }\n\n  onClickCustomer(clientID: string) {\n\n    this._onClickCustomerID = clientID;\n\n    setTimeout(() => {\n      this.closeSlidingItems();\n    }, 300);\n\n    let item = this.customerList.filter(item => item.clientID == clientID);\n\n    this.customerClick.emit(item[0]);\n  }\n\n\n  loadCustomer(e) {\n    console.log('lazy load customer:', e);\n    //Settimeout to animate loader\n    setTimeout(() => {\n      this.customerLoad.emit();\n    }, 800);\n\n  }\n\n  refreshCustomer() {\n    //set timeout for refresh animation\n    setTimeout(() => {\n      this.customerRefresh.emit();\n    }, 800);\n  }\n\n  convertNameToShow(customerItem: CustomerItem): string {\n    return this.customerUtils.convertNameToShow(customerItem.firstName, customerItem.lastName);\n  }\n}\n","import { ContactItem } from \"@allianzSND/core\";\n\nexport class CustomerImportGroup {\n    private _groupName : string;\n    private _isShow : boolean = true;\n    private _items : Array<ContactItem> = new Array<ContactItem>();\n\n    constructor(groupName : string) {\n        this._groupName = groupName;\n    }\n\n    public addItem(item : ContactItem) {\n        this._items.push(item);\n    }\n\n    public get getItems() {\n        return this._items;\n    }\n\n    public get groupName() {\n        return this._groupName;\n    }\n\n    public set groupName(groupName : string) {\n        this._groupName = groupName;\n    }\n\n    public get isShow() {\n        return this._isShow;\n    }\n\n    public set isShow(isShow : boolean) {\n        this._isShow = isShow;\n    }\n\n}","import { Injectable, Optional, Inject } from '@angular/core';\nimport { CustomerImportDisplay } from '../../interface/CustomerImportDisplay';\nimport { customerImportDisplayToken } from '../../injectionToken/injection-token';\nimport { StringUtils } from '@allianzSND/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DefaultCustomerImportDisplay implements CustomerImportDisplay {\n\n    constructor(\n        @Optional() @Inject(customerImportDisplayToken) private customImportDisplay: CustomerImportDisplay\n    ) { }\n\n    convert(customer: any) {\n        if (this.customImportDisplay)\n            return this.customImportDisplay.convert(customer);\n        else {\n            if (StringUtils.isEmpty(customer.LastName)) {\n                customer.LastName = customer.FirstName;\n                customer.FirstName = '';\n            }\n            return customer;\n        }\n    }\n}","import { Component, OnInit, ViewChild, Optional, Inject, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { trigger, state, style, animate, transition, } from '@angular/animations';\nimport { Language, StringUtils, DateUtils, PageInfo, DeviceService, ProfileCode, ProfileCodeService, TranslateService, ContactItem, ExtDataProcess, DataSyncService, showRuleToken, showRule, NotificationMgr, NotificationObject, ConfigToken, AppRouter, NotificationType } from '@allianzSND/core';\nimport { CalendarService } from '../../../calendar/service/calendar-service.service';\nimport { CalendarEventDetail } from '../../../calendar/service/model/CalendarEventDetail';\nimport { CalendarEditComponent } from '../../../calendar/components/calendar-edit/calendar-edit.component';\nimport { CustomerService } from '../../service/customer-service.service';\nimport { CustomerTel } from '../../service/model/CustomerTel';\nimport { CustomerFilterCriteria } from '../bean/customer-filter-criteria';\nimport { CustomerAlertItem } from '../../service/model/CustomerAlertItem';\nimport { CustomerItem } from '../../service/model/CustomerItem';\nimport { CustomerImportGroup } from '../bean/customer-import-group';\nimport { addDays, addHours, addMinutes, getDate, getHours, getMinutes, getMonth, getYear, subMinutes } from 'date-fns';\nimport { CUSTOMER_STATE } from '../../service/customerStore/customerStore-service';\nimport { CustomerUtils } from '../../utils/customer-utils';\nimport { Subject, Observable } from 'rxjs';\nimport { CustomerStoreService } from '../../service/customerStore/customerStore-service';\nimport { DefaultCustomerImportDisplay } from './DefaultCustomerImportDisplay';\nimport { addProgressPointToken, customerShowRuleToken } from '../../injectionToken/injection-token';\nimport { AddProgressPoint } from '../../interface/AddProgressPoint';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { CustomerShowRule } from '../../interface/CustomerShowRule';\n\n@Component({\n  selector: 'app-customers',\n  templateUrl: './customers.component.html',\n  styleUrls: ['./customers.component.scss'],\n  animations: [\n    trigger('searchBlockAni', [\n      state('*', style({\n        width: '0',\n        opacity: 0\n      })),\n      state('open', style({\n        width: '100%',\n        opacity: 1\n      })),\n      state('closed', style({\n        width: '0',\n        opacity: 0\n      })),\n      transition('open => closed', animate('300ms ease-in')),\n      transition('closed => open', animate('300ms ease-in'))\n    ]),\n  ]\n})\nexport class CustomersComponent implements OnInit, OnDestroy {\n\n  //intergration Calendar Module\n  @ViewChild(CalendarEditComponent) calendarEditComponent;\n  public viewTypeIndex = 2; // 'month'\n  public viewType: string;\n  public viewDate = new Date();\n  public weekStartsOn = 1; // Monday \n  public isShowDetailScroll: boolean = true;\n\n\n\n  // control mobile show\n  public isShow = false;\n\n  //use to force refresh customerList\n  public showCustomerList = true;\n\n  // popup\n  public isExpandDetail = false;\n  public isRefreshDetail = false;\n  public isSaveClick = false;\n\n  public language: Language = new Language();\n\n  //å®¢æ¶æ¸å®çsearch block animate\n  public isOpen: boolean = false;\n  public classSearch: string = '';\n\n  //popup control\n  public isDisplayImportSavePopup = false; //import popup\n  public isDisplaySavePopup = false; //save popup\n  public isDisplayDelCustomerPopup = false; //delete customer popup\n  public isDisplayConfirmAlertPopup = false; //confirm alert popup\n  public isDisplayInfoAlertPopup = false; //info alert popup\n  public isDisplayUpdateRemind = false; //alert customer over 6 month popup\n  public isDisplayDeleteRemind = false; //alert customer over 6 month & 7day popup\n  public isPopupImport = false; //import popup\n  public isPopupFilter = false; //filter popup\n  public isExpandEdit = false; // appointment popup\n  public isPopupCallPhone = false; //call customer phone popup\n  public isPopupNoteDetail = false; //contact detail popup\n  public isPopupEditNote = false; //add/edit contact note popup\n  public isPopupDeleteNote = false; //delete contact note popup\n  public isPopupConfirmDisable = true; // confirmPopup btn is disable default\n  public isDisplayDeletePopup = false; //delete success popup\n  public isCalendarEditMetaDataDone: boolean = false;\n\n  //control overtime customer list\n  public alertOverTimeList = new Array<CustomerAlertItem>();\n\n  //control auto delete customer list\n  public alertAutoDeleteCustomer = new Array<CustomerAlertItem>();\n\n  //control refresh  content\n  public isLoadingFinishContent: boolean = false;\n  public isRefreshFinishContent: boolean = true;\n\n  //control\n  public isLazyLoading: boolean = true;\n\n  //intergration customer-detail used\n  //call phone obj\n  public callPhoneTelArray: Array<CustomerTel>;\n\n  //intergration customer-contact-list used\n  //customer contact detail obj\n  public customerContactDetail: any = null;\n  public customerContactList: Array<any> = [];\n  public contactListPageInfo = new PageInfo();\n\n  public calendarEventDetail: CalendarEventDetail;\n  public viewDateCalendarEventList: Array<CalendarEventDetail> = [];\n\n  get customerClientID() {\n    if (this.customerDetail && this.customerDetail.ClientID)\n      return this.customerDetail.ClientID;\n    else\n      return '';\n  }\n\n  //intergration customer-list\n  public customerList = new Array<CustomerItem>();\n  public clickItem: CustomerItem;\n  public customerListPageInfo = new PageInfo();\n  private _filterCriteria = new CustomerFilterCriteria();\n\n  public get filterCriteria() {\n    return this._filterCriteria;\n  }\n  public set filterCriteria(value) {\n    this._filterCriteria = value;\n  }\n  public filterType = 'NONE';\n\n  public optionMap: Map<string, Array<ProfileCode>> = new Map<string, Array<ProfileCode>>();\n  public translateMap: Map<string, string> = new Map<string, string>();\n\n  private dayTypesList: Array<string> = ['Cross_Day', 'All_Day'];\n  private noSchedule: string = 'No_Schedule';\n\n  public activityTypeList: Array<ProfileCode> = []; // DBä¸­ææactivityType\n  public alertTypeList: Array<ProfileCode> = [];\n\n\n  //intergration customer-import\n  public importContractMap = new Map<string, CustomerImportGroup>();\n  public mobileResultSize: number = 0;\n  public importData: boolean = false;\n  public importContactList: Array<ContactItem> = [];\n  public importSearchKeyword: string = '';\n\n  //filter customer attribute\n  public isLoadCriteria: boolean = false;\n  public isClearCriteria: boolean = false;\n\n  //import result(success | fail);\n  public _onImportResult: boolean = false;\n\n\n  //intergration customer-edit used\n  //add/edit contact note attribute\n  public currentEditNote: any = null;\n  public isRefreshContactList: boolean = false;\n  public loadContactList: boolean = false;\n\n\n\n  // search animate in filter\n  public classBarMove: string = '';\n\n  //intergration customer-detail used\n  public customerDetail: any = null;\n\n  private emptyCustomer: any = {\n    ClientID: ''\n  };\n\n  //current edit customer Id\n  public currentCustomer: any = this.emptyCustomer;\n\n\n\n  public get needConfirmPopup() {\n    let env = this.APP_CONFIG[\"ENV\"];\n    return this.APP_CONFIG && !!this.APP_CONFIG[env][\"CUSTOMER_ADD_ANNOUNCE\"];\n  }\n\n  private confirmAction = null;\n\n\n  // current customer state\n  private customerState: CUSTOMER_STATE = CUSTOMER_STATE.FIRST;\n\n  //pre saved criteria\n  private pre_criteria: CustomerFilterCriteria = new CustomerFilterCriteria();\n\n  //pre saved customerlist\n  private pre_customerList: Array<CustomerItem>;\n\n  //subscribe of store\n  private unsubscribe$: Subject<void> = new Subject();\n\n  //subject of clear & save filter\n  public clearSubject = new Subject();\n  public saveFilterSubject = new Subject();\n  public contactSaveSubject = new Subject();\n\n\n  //for extension used\n\n  constructor(private customerService: CustomerService,\n    private calendarService: CalendarService,\n    private translateService: TranslateService,\n    private deviceService: DeviceService,\n    private dateUtils: DateUtils,\n    private profileCodeService: ProfileCodeService,\n    private customerUtils: CustomerUtils,\n    private router: AppRouter,\n    private customerStoreService: CustomerStoreService,\n    private customerImportDisplay: DefaultCustomerImportDisplay,\n    private notificationMgr: NotificationMgr,\n    private changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(ConfigToken) private APP_CONFIG: any,\n    @Optional() @Inject(showRuleToken) private showRule: showRule,\n    @Optional() @Inject(customerShowRuleToken) private customerShowRule: CustomerShowRule,\n    @Optional() @Inject(addProgressPointToken) private addProgressPoint: AddProgressPoint\n\n  ) {\n\n  }\n\n  ngOnDestroy() {\n    console.log(\"customer ngOnDestroy!\");\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n\n\n  ngOnInit() {\n    console.log(\"customer ngOninit!\");\n    this.contactListPageInfo.pageSize = 5;\n    this.activityTypeList = this.profileCodeService.getCodeArray('Calendar_Type');\n    this.alertTypeList = this.profileCodeService.getCodeArray('Calendar_RemindTime');\n    this.optionMap.set('Calendar_Type', this.activityTypeList);\n    this.optionMap.set('Calendar_RemindTime', this.alertTypeList);\n\n    this.dayTypesList.forEach((dayType) => {\n      this.translateMap.set(dayType, this.translateService.translate(dayType))\n    });\n    this.translateMap.set(this.noSchedule, this.translateService.translate(this.noSchedule));\n\n\n    this.customerStoreService.getCriteria()\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe((criteria) => {\n        this.pre_criteria = criteria;\n      })\n\n    this.customerStoreService.getCurrentCustomerDetail()\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(detail => {\n        console.log(\"customer onsubscribe currentCustomerDetail:\", detail);\n        this.currentCustomer = detail;\n      });\n\n    this.customerStoreService.getCustomerList()\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(list => {\n        this.pre_customerList = list;\n      })\n\n    this.customerStoreService.getState()\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(async (state) => {\n\n        console.log(\"main state: \", state);\n        if (state == CUSTOMER_STATE.EDIT_SAVED && this.customerState != CUSTOMER_STATE.EDIT_SAVED) {\n\n          //after saved, check if current ID in criteria\n          console.log(\"state == CUSTOMER_STATE.EDIT_SAVED\");\n          console.log(\"currentCustomer: \", this.currentCustomer);\n          this.isDisplaySavePopup = true;\n          this.customerList = this.pre_customerList;\n          this.filterCriteria = this.pre_criteria;\n          let hasCriteria = this.pre_criteria.hasCriteria();\n          let inCriteria = false;\n          if (hasCriteria)\n            inCriteria = await this.customerService.checkInFilterCriteria(this.currentCustomer.ClientID, this.pre_criteria).toPromise();\n\n          this.customerList.forEach(item => {\n            if (item.clientID == this.currentCustomer.ClientID) {\n              item.firstName = this.currentCustomer.FirstName;\n              item.lastName = this.currentCustomer.LastName;\n              item.tag = this.currentCustomer.Possibility;\n              item.complementPercent = this.currentCustomer.Completeness;\n              if (hasCriteria)\n                item.isHighLight = !inCriteria;\n            }\n          });\n          this.customerList = [...this.sortCustomerList(this.customerList)];\n          if (hasCriteria)\n            this.customerStoreService.setCustomerList(this.customerList);\n\n\n          await this.onGetCustomerDetailByID(this.currentCustomer.ClientID);\n          this.refreshContactNote(false);\n        }\n        else if (state == CUSTOMER_STATE.EDIT && this.customerState != CUSTOMER_STATE.EDIT && this.customerState == CUSTOMER_STATE.FIRST) {\n          // edit/click page click last page\n\n          this.customerList = this.pre_customerList;\n          this.filterCriteria = this.pre_criteria;\n          if (!StringUtils.isEmpty(this.currentCustomer.ClientID)) {\n            await this.onGetCustomerDetailByID(this.currentCustomer.ClientID);\n          }\n          this.refreshCustomerList(false);\n        }\n        else if (this.customerState == CUSTOMER_STATE.FIRST && state == CUSTOMER_STATE.DISPLAY) {\n          //firt in, fetch preset filter\n          console.log(\"this.customerState == CUSTOMER_STATE.FIRST && state == CUSTOMER_STATE.DISPLAY\");\n          await this.loadPresetCriteria();\n          this.refreshCustomerList(false);\n        }\n        else if (state == CUSTOMER_STATE.ADD_SAVED) {\n\n          //after add , get pre_criteria && refresh customerlist\n          console.log(\"state == CUSTOMER_STATE.ADD_SAVED\", this.currentCustomer);\n          this.isDisplaySavePopup = true;\n          this.filterCriteria = this.pre_criteria;\n          this.refreshCustomerList(false, this.currentCustomer.ClientID);\n        }\n        else if (state == CUSTOMER_STATE.IMPORT) {\n          this.importPopup();\n        }\n\n        if (this.customerState != state) {\n          this.customerState = state;\n          this.customerStoreService.setState(CUSTOMER_STATE.DISPLAY);\n        }\n      })\n    this.customerStoreService.setState(CUSTOMER_STATE.DISPLAY);\n\n    this.refreshContactNote(false);\n\n\n    this.notificationMgr.showCategoryMessage(\"Customer\");\n  }\n\n\n  async refreshCustomerList(isAppend: boolean, clientID = '') {\n    console.debug('refreshCustomerList append', isAppend, clientID);\n    console.debug(this.filterCriteria);\n    console.debug(this.customerListPageInfo);\n\n    //fetch customer-list data\n    if (!isAppend) this.customerListPageInfo.resetPage();\n\n    let data = await this.customerService.getCustomerList(this.filterCriteria, this.customerListPageInfo).pipe(take(1)).toPromise();\n    console.log(\"data in criteria: \", data);\n    if (!isAppend) this.customerList = [...data];\n    else this.customerList = [...this.customerList, ...data];\n\n    if ((!this.filterCriteria.hasCriteria())) {\n      this.filterType = 'NONE';\n    }\n    else {\n      this.filterType = StringUtils.isNotEmpty(this.filterCriteria.keyword) ? 'SEARCH' : 'FILTER';\n    }\n    console.log(\"refreshCustomerList filterType:\", this.filterType);\n\n    this.customerList = [...this.sortCustomerList(this.customerList)];\n    this.customerStoreService.setCustomerList(this.customerList);\n\n\n\n    if (this.customerList.length > 0) {\n      let clickItemFilter = this.customerList.filter(x => x.clientID === clientID);\n      let targetClientID = clickItemFilter.length > 0 ? clientID : this.customerList[0].clientID;\n      await this.onGetCustomerDetailByID(targetClientID);\n      this.refreshContactNote(false);\n    }\n    else {\n      this.customerDetail = this.emptyCustomer;\n      this.customerStoreService.setCurrentCustomerDetail(this.customerDetail);\n    }\n\n\n  }\n\n  /* integration contact-list */\n  private async refreshContactNote(isAppend: boolean) {\n\n    if (this.customerClientID) {\n      //if append data will next page\n      if (!isAppend) this.contactListPageInfo.resetPage();\n\n      let data = await this.customerService.getCustomerContactNote(this.customerDetail.ClientID, this.contactListPageInfo).toPromise();\n      if (isAppend)\n        this.customerContactList = this.customerContactList.concat(data);\n      else\n        this.customerContactList = data;\n\n      console.debug('refreshContactNote success isRefreshContactList status');\n    }\n\n  }\n\n  private sortCustomerList(list: Array<CustomerItem>): Array<CustomerItem> {\n\n    if (this.customerShowRule) {\n      return this.customerShowRule.sortCustomerList(list);\n    }\n\n    else {\n      return list.map(x => x.clone()).sort((n1, n2) => {\n        let n1_name = StringUtils.isEmpty(n1.lastName) ? '' : n1.lastName;\n        let n2_name = StringUtils.isEmpty(n2.lastName) ? '' : n2.lastName;\n        return n1_name.localeCompare(n2_name);\n      });\n    }\n  }\n\n\n\n  onGetCustomerContactListByID(clientID) {\n    this.customerService.getCustomerContactNote(clientID, this.contactListPageInfo)\n      .subscribe(data => {\n        this.customerContactList = data;\n      });\n  }\n\n  async onGetCustomerDetailByID(clientID) {\n    console.log(\"onGetCustomerDetailByID clientID:\", clientID);\n    let data = await this.customerService.getCustomerDetail(clientID).toPromise();\n    console.log(\"onGetCustomerDetailByID data:\", data);\n    this.customerDetail = data;\n    this.customerStoreService.setCurrentCustomerDetail(data);\n  }\n\n  toggleSearch() {\n    this.isOpen = !this.isOpen;\n    this.classSearch = this.isOpen ? ' active' : ''\n    if (!this.isOpen) {\n      // this.filterCriteria = new CustomerFilterCriteria();\n      this.filterCriteria.keyword = '';\n      this.customerStoreService.setCriteria(this.filterCriteria);\n\n      this.refreshCustomerList(false);\n    }\n\n  }\n\n  // search keypress\n  searchCustomerName(name) {\n    console.debug('searchCustomerName', name);\n\n    this.filterCriteria.keyword = name;\n    this.customerStoreService.setCriteria(this.filterCriteria);\n    this.refreshCustomerList(false);\n\n  }\n\n  trackByFn(index, item) {\n    return item.name;\n  }\n\n\n  //when customer-list click get click Item\n  async onChangeCustomer(customerItem: CustomerItem) {\n\n    this.clickItem = customerItem;\n\n\n\n    //get CustomerDetail\n    await this.onGetCustomerDetailByID(customerItem.clientID);\n    this.refreshContactNote(false);\n    this.isShow = true;\n\n  }\n\n  //when customer-list fetch next record\n  onCustomerLoad() {\n    this.customerListPageInfo.nextPage();\n\n    this.refreshCustomerList(true);\n  }\n\n  //when customer-list sync data to backend\n  onCustomerRefresh() {\n    this.refreshCustomerList(false, this.customerClientID);\n  }\n\n  deleteCustomer(customerClientID: string) {\n    this.isDisplayDelCustomerPopup = true;\n  }\n\n  async doDeleteCustomer() {\n    let _clientID = this.customerDetail.ClientID;\n    this.customerList = this.customerList.filter(x => x.clientID != this.customerDetail.ClientID);\n    if (this.customerList.length === 0) {\n      this.customerDetail = this.emptyCustomer;\n      this.customerStoreService.setCurrentCustomerDetail(this.customerDetail);\n    }\n    else {\n      await this.onGetCustomerDetailByID(this.customerList[0].clientID)\n      this.refreshContactNote(false);\n    }\n\n    let data = await this.customerService.deleteCustomerProfile(_clientID).toPromise();\n    console.log(\"customerService.doDeleteCustomer()\", data);\n\n    if (data.status) {\n\n      this.customerStoreService.setCustomerList(this.customerList);\n\n      this.isShow = false;\n      this.isDisplayDeletePopup = true;\n    }\n  }\n\n  addAppointment(customerClientID: string) {\n    let currentTime; // adjust time to next interval\n    currentTime = new Date(getYear(this.viewDate), getMonth(this.viewDate), getDate(this.viewDate), getHours(new Date()), getMinutes(new Date()));\n    currentTime = addMinutes(currentTime, (5 - getMinutes(currentTime) % 5));  // adjust minutes to next 5 minutes\n    currentTime = addHours(currentTime, 1);\n    this.calendarEventDetail = new CalendarEventDetail('', '', customerClientID, '', '', null, 'N', currentTime, addMinutes(currentTime, 15), 'Y', '8', null, '', '', null);\n    let queryDate = new Date(getYear(this.viewDate), getMonth(this.viewDate), getDate(this.viewDate), 0, 0, 0);\n    this.calendarService.getCalendarEventList(queryDate, subMinutes(addDays(this.viewDate, 1), 1), '')\n      .subscribe(data => {\n        this.viewDateCalendarEventList = data;\n        this.onToggleAppointmentModal(true);\n      });\n  }\n\n  onClickAppointmentSave() {\n    this.isSaveClick = true;\n  }\n\n  onToggleAppointmentModal(val) {\n    if (!val) {\n      this.isCalendarEditMetaDataDone = false;\n    }\n    this.isExpandEdit = val;\n  }\n\n  onSaveCalendarEvent(resp) {\n    let type = resp.type;\n    let data = resp.data;\n    console.log(\"calendarEventDetail: \", data);\n    if (type !== 'fail') {\n      this.isDisplaySavePopup = true;\n      this.onToggleAppointmentModal(false);\n      this.calendarService.getCalendarEventDetail(data.ClientID).subscribe(data => {\n        this.calendarEventDetail = data;\n      })\n    }\n    this.isSaveClick = false;\n  }\n\n  addCustomer() {\n\n    let detail = {};\n    this.customerStoreService.setCurrentCustomerDetail(detail);\n    this.customerStoreService.setState(CUSTOMER_STATE.EDIT);\n\n    this.router.navigate(\"CustomerEdit\");\n  }\n\n  editCustomer(customerClientID: string) {\n    this.customerStoreService.setState(CUSTOMER_STATE.EDIT);\n    this.customerService.getCustomerDetail(customerClientID).subscribe((detail: any) => {\n      console.log(\"editCustomer:\", detail);\n      console.log(\"Stringify:\", JSON.stringify(detail));\n      this.customerStoreService.setCurrentCustomerDetail(detail);\n\n      //romove body fixed\n      setTimeout(() => {\n        document.body.classList.remove(\"fixed-body-full-page\");\n      }, 200);\n      this.router.navigate(\"CustomerEdit\")\n    })\n\n  }\n\n\n  followChange(detail) {\n    this.customerService.updateCustomerFollowStatus(detail.clientID, detail.isFollow).subscribe((data) => {\n      if (this.filterCriteria) {\n        this.customerService.checkInFilterCriteria(detail.clientID, this.filterCriteria).subscribe(result => {\n\n          this.customerList.forEach(item => {\n            if (item.clientID == detail.clientID) {\n              //console.debug('change isHighLight status in follow');\n              if (result) {\n                item.isHighLight = false;\n              }\n              else {\n                item.isHighLight = true;\n              }\n            }\n          });\n        })\n      }\n\n      this.customerList.filter(x => x.clientID == detail.clientID).forEach((value) => {\n        value.isFollow = detail.isFollow;\n      });\n    });\n\n  }\n\n  addNote() {\n    console.debug('addNote');\n    this.currentEditNote = {\n      ClientID: '',\n      CustomerClientID: this.customerDetail.ClientID,\n      NoteTime: Date.now(),\n      DisplayDate: this.toNoteTime(new Date())\n    };\n    this.isPopupEditNote = true;\n  }\n\n  editNote(note: any) {\n    console.debug('editNote', note);\n\n    this.currentEditNote = Object.assign({}, note, {\n      CustomerClientID: this.customerDetail.ClientID,\n      NoteTime: Date.now(),\n      DisplayDate: this.toNoteTime(new Date())\n    })\n    console.log(\"this.currentEditNote:\", this.currentEditNote)\n    this.isPopupEditNote = true;\n\n  }\n\n  displayNote(note: any) {\n    console.debug('displayNote', note);\n    this.customerContactDetail = note;\n\n    // add click customer name\n    this.customerContactDetail.Name = this.convertNameToShow(this.customerDetail.FirstName, this.customerDetail.LastName);\n\n    this.isPopupNoteDetail = true;\n  }\n\n\n  deleteNote(note: any) {\n    console.debug('deleteNote', note);\n    this.currentEditNote = note;\n\n    this.isPopupDeleteNote = true;\n  }\n\n  doDeleteContact() {\n    this.customerService.deleteCustomerContact(this.currentEditNote.ClientID).subscribe(data => {\n\n      console.log(\"customerService.deleteNote()\", data);\n\n      if (data.status) {\n        this.customerContactList = this.customerContactList.filter(x => x.ClientID != this.currentEditNote.ClientID);\n        this.currentEditNote = null;\n        this.isDisplayDeletePopup = true;\n      }\n    });\n  }\n\n  onSaveNote(event) {\n    this.contactSaveSubject.next();\n  }\n\n  onSaveNoteFinish(note) {\n    this.isPopupEditNote = false;\n    this.isDisplaySavePopup = true;\n\n    this.isShowDetailScroll = false;\n    setTimeout(() => {\n      this.isShowDetailScroll = true;\n      this.refreshContactNote(false);\n    }, 200);\n  }\n\n  doAction(action) {\n\n    console.log(\"doaction: \", action);\n    if (this.needConfirmPopup) {\n      this.isDisplayConfirmAlertPopup = true;\n      this.isPopupConfirmDisable = true;\n      this.confirmAction = action;\n    }\n    else {\n      if (action == 'add') {\n        this.addCustomer();\n      }\n\n      else if (action == 'import') {\n        this.import();\n      }\n    }\n  }\n\n  confirmPopup() {\n    this.isPopupConfirmDisable = true;\n    this.isDisplayConfirmAlertPopup = false;\n    this.changeDetector.detectChanges();\n    if (this.confirmAction === 'add')\n      this.addCustomer();\n    else if (this.confirmAction == 'import') {\n      this.import();\n    }\n    this.confirmAction = null;\n  }\n\n\n  // detect confirm popup to content bottm and the btn can click\n  detectScroll(isBtm) {\n    console.log('in detect scroll===', isBtm);\n    if (isBtm) {\n      this.isPopupConfirmDisable = false\n    }\n  }\n\n\n\n  private async importPopup() {\n    let importList;\n    try {\n      importList = await this.deviceService.searchContactsByName(\"\");\n      console.debug('import result ', importList);\n      this.importContractMap.clear();\n      //regroup\n      importList.forEach(element => {\n        console.debug(element.LastName);\n        element = this.customerImportDisplay.convert(element);\n        let name = this.convertNameToShow(element.FirstName, element.LastName).trim();\n        if (name != null && name.length > 0) {\n          let firstWord = name.substring(0, 1);\n          firstWord = firstWord.toLowerCase();\n          console.debug('firstWord =' + firstWord);\n          let group: CustomerImportGroup = this.importContractMap.get(firstWord);\n          if (group == undefined) group = new CustomerImportGroup(firstWord);\n          group.addItem(element);\n          this.importContractMap.set(firstWord, group);\n        }\n      });\n      console.debug('importContractMap', this.importContractMap);\n      this.isPopupImport = true;\n    } catch (error) {\n      console.warn('catch error', error);\n      this.notificationMgr.pushNotification(NotificationType.ContactPermissionError, null);\n      if (this.deviceService.getDevicePlatform() == 'iOS') {\n        this.deviceService.grantContactPermission();\n      }\n    }\n\n  }\n\n  import() {\n    this.customerStoreService.setState(CUSTOMER_STATE.IMPORT);\n  }\n\n  //control import popup is display\n  displayImportPopup(isShow: boolean) {\n    this.isPopupImport = isShow;\n  }\n\n  //when keypress keyword refresh contract list\n  refreshImport(keyword: string) {\n    this.importSearchKeyword = keyword;\n    let lowerCaseKeyword = this.importSearchKeyword.toLowerCase();\n    this.importContractMap.forEach((group: CustomerImportGroup, groupName: string) => {\n      // console.log(groupName, group);\n\n      group.isShow = false;\n      group.getItems.forEach((item: ContactItem) => {\n        // console.debug('item',item);\n        let name: string = item.LastName + item.FirstName;\n        name = name.toLowerCase();\n        // console.debug(name);\n        if (name.indexOf(lowerCaseKeyword) === -1) {\n          item.isShow = false;\n        }\n        else {\n          item.isShow = true;\n          group.isShow = true;\n        }\n      })\n    });\n  }\n\n  onCloseImportPopup() {\n    this.customerStoreService.setState(CUSTOMER_STATE.DISPLAY);\n    this.importSearchKeyword = '';\n  }\n\n  doImport() {\n    this.showCustomerList = false;\n    this.customerService.importContact(this.importContactList).subscribe(data => {\n      //alert(\"1\"+JSON.parse(JSON.stringify(data)).status);\n      //å é»æ¸\n      if (this.addProgressPoint && this.importContactList.length > 0) {\n        this.addProgressPoint.addCustomerPoint(this.importContactList.length);\n      }\n      this.customerStoreService.setState(CUSTOMER_STATE.DISPLAY);\n      let status = (JSON.parse(JSON.stringify(data))).status;\n\n      if (status) {\n        //clear list first, prevent lazyloading cache\n        this.customerList = [];\n        this.showCustomerList = true;\n        this.isPopupImport = false;\n        this.isDisplayImportSavePopup = true;\n        this.mobileResultSize = 0;\n        this.importSearchKeyword = '';\n\n        //refresh customer list\n        this.refreshCustomerList(false);\n      }\n    });\n  }\n\n\n\n\n  /* customer-import*/\n  onImportCustomer(importItems) {\n    console.debug('importItems', importItems);\n\n    this.importContactList = importItems;\n    this.mobileResultSize = importItems.length;\n  }\n\n  //call customer function\n  callCustomer(customerClientID: string) {\n    console.debug('callCustomer = ' + customerClientID);\n    this.customerService.getCustomerContactTel(customerClientID).subscribe(data => {\n      this.callPhoneTelArray = data;\n\n      //check number array is single\n      if (this.callPhoneTelArray.length != 0) {\n\n        //only one number just to call out\n        if (this.callPhoneTelArray.length == 1) {\n          this.callPhone(this.callPhoneTelArray[0].tel);\n        }\n        else {\n          this.isPopupCallPhone = true;\n        }\n      }\n\n    });\n\n  }\n\n  //cancel callphone popup\n  cancelCallPhone() {\n    this.isPopupCallPhone = !this.isPopupCallPhone;\n  }\n\n  //call number from phone\n  callPhone(telNumber: string) {\n    console.debug('callPhone', telNumber);\n\n\n    //call phone close popup\n    if (this.isPopupCallPhone) this.isPopupCallPhone = !this.isPopupCallPhone;\n\n\n    window.open('tel:' + telNumber, '_system');\n\n    //popup contact note\n    setTimeout((fun) => {\n      this.addNote();\n    }, 1000);\n  }\n\n\n  //open filter popup\n  filter() {\n    this.isPopupFilter = true;\n  }\n\n  //clear filter item\n  clearFilter() {\n    this.clearSubject.next();\n  }\n\n\n  //filter customer list and close popup\n  doFilter() {\n    this.saveFilterSubject.next();\n  }\n\n  doneCriteria(criteria: CustomerFilterCriteria) {\n    console.debug('doneCriteria', criteria);\n    this.filterCriteria = criteria;\n    this.isPopupFilter = false;\n    this.customerStoreService.setCriteria(criteria);\n    if (criteria.getOption(\"AsPreset\")) {\n      this.customerService.saveFilterCriteria(criteria).subscribe(data => {\n        console.debug('doneCriteria saveFilterCriteria', data);\n      });\n    }\n    this.refreshCustomerList(false);\n  }\n\n  loadPresetCriteria() {\n    //check has preset\n    let criteria = new CustomerFilterCriteria();\n\n    return this.customerService.getFilterCriteriaPreset().toPromise().then(data => {\n      console.debug('getfilterCriteriaPreset', data);\n\n      if (data != undefined) {\n\n        let count = 0;\n        for (let column in data) {\n          let values = data[column];\n          console.debug('column', column, 'arrays', values);\n          criteria.addCriteriaCols(column, values);\n          count++;\n        }\n\n        if (count != 0) {\n          criteria.setOption(\"AsPreset\", true);\n        }\n        else {\n          criteria.setOption(\"AsPreset\", false);\n        }\n        this.filterCriteria = criteria;\n\n      }\n    });\n\n\n  }\n\n\n  cancelDelete() {\n    console.log('cancelDelete');\n  }\n\n  // refreash content\n  refreshContent() {\n    //set timeout for refresh animation\n    setTimeout(() => {\n      this.isRefreshFinishContent = true;\n    }, 800);\n\n  }\n\n\n  // loading contact note \n  async loadContent(event) {\n    console.log('content loading this.customerList.length: ', this.customerList.length);\n    if (this.customerList.length > 0) {\n      this.contactListPageInfo.nextPage();\n      await this.refreshContactNote(true);\n      this.isLoadingFinishContent = true;\n    }\n    else {\n      setTimeout(() => {\n        this.isLoadingFinishContent = true;\n      }, 0);\n    }\n\n  }\n\n\n\n  //isShowChange\n  isShowChange(val) {\n    if (this.isShow !== val) {\n      this.isShow = val;\n      // this.changeDetector.detectChanges();\n    }\n  }\n\n  convertNameToShow(firstName: string, lastName: string): string {\n    return this.customerUtils.convertNameToShow(firstName, lastName);\n  }\n\n  public toNoteTime(time: Date) {\n    if (this.showRule) {\n      return this.showRule.convertDateAndTime(time);\n    }\n    else {\n      return this.dateUtils.toDateString(time, 'MM/dd/yyyy HH:mm');\n    }\n  }\n\n  onCalendarEditMetaDataDone() {\n    this.isCalendarEditMetaDataDone = true;\n  }\n\n\n  filterCriteriaPopupChange(event) {\n    console.warn('filterCriteriaPopupChange event: ', event);\n    this.isPopupFilter = event;\n    if (this.isPopupFilter) {\n      this.filterCriteria = this.filterCriteria.clone();\n    }\n  }\n\n\n}\n","import { Component, OnInit, Input, Optional, Inject } from '@angular/core';\nimport { MetaService, DisplayMetaComponent, ProfileCodeService, DefaultMetaParser, InputExecutor, MetaColumn, MetaController } from '@allianzSND/core';\nimport { customerContactDetailMetaControllerToken } from '../../injectionToken/injection-token';\n\n@Component({\n  selector: 'app-customer-contact-detail',\n  templateUrl: './customer-contact-detail.component.html',\n  styleUrls: ['./customer-contact-detail.component.scss']\n})\nexport class CustomerContactDetailComponent extends DisplayMetaComponent implements OnInit {\n  @Input()\n  public set data(value) {\n    this._data = value;\n    console.log(\"set contact detail data:\", value);\n  }\n\n  public get data() {\n    return this._data;\n  }\n\n  get columnConfig(): Array<MetaColumn> {\n    return this.metaConfig.Columns;\n  }\n\n  constructor(\n    metaService: MetaService,\n    profileCodeService: ProfileCodeService,\n    metaParser: DefaultMetaParser,\n    metaExecutor: InputExecutor,\n    @Optional() @Inject(customerContactDetailMetaControllerToken) private customMetaController: MetaController\n  ) {\n    super(metaService, profileCodeService, metaParser, metaExecutor);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  getMetaID() {\n    return 'customerContactDetail';\n  }\n\n  getMetaParams() {\n    return null;\n  }\n  onDataUpdated() {\n    super.onDataUpdated();\n    if (this.customMetaController)\n      this.customMetaController.onDataUpdated(this._data);\n  }\n}\n","import { Component, OnInit, Input, Inject, Optional, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { MetaService, MetaController, FormMetaComponent, ProfileCodeService, DefaultMetaParser, InputExecutor, MetaColumn } from '@allianzSND/core';\nimport { customerContactEditMetaControllerToken } from '../../injectionToken/injection-token';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-customer-contact-edit',\n  templateUrl: './customer-contact-edit.component.html',\n  styleUrls: ['./customer-contact-edit.component.scss']\n})\nexport class CustomerContactEditComponent extends FormMetaComponent implements OnInit, OnDestroy {\n\n\n  @Input()\n  public set data(value) {\n    let defaultObj = {};\n    if (this.metaConfig)\n      defaultObj = this.metaConfig.Columns.map(x => x.id).reduce((acc, current) => {\n        acc[current] = '';\n        return acc;\n      }, {});\n    if (value != null)\n      this._data = Object.assign(defaultObj, value);\n    else\n      this._data = defaultObj;\n    console.log(\"set contact edit data:\", this._data);\n    if (this.customMetaController)\n      this.customMetaController.onDataUpdated(this._data);\n    this.customerClientID = this._data.CustomerClientID;\n  }\n\n  public get data() {\n    return this._data;\n  }\n\n  get columnConfig(): Array<MetaColumn> {\n    return this.metaConfig.Columns;\n  }\n\n  private customerClientID = '';\n  private unsubscribe$: Subject<void> = new Subject<void>();\n\n  @Input() saveSubject: Subject<any>;\n  @Output() save: EventEmitter<any> = new EventEmitter();\n\n  constructor(\n    metaService: MetaService,\n    profileCodeService: ProfileCodeService,\n    metaParser: DefaultMetaParser,\n    metaExecutor: InputExecutor,\n    @Optional() @Inject(customerContactEditMetaControllerToken) private customMetaController: MetaController\n  ) {\n    super(metaService, profileCodeService, metaParser, metaExecutor);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.saveSubject) {\n      this.saveSubject\n        .pipe(takeUntil(this.unsubscribe$))\n        .subscribe(() => {\n          this.onBtnClick('submit', 'save');\n        })\n    }\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n\n  getMetaParams() {\n    return {\n      CustomerClientID: this.customerClientID\n    }\n  }\n\n  btnClick(type: string, id: string) {\n    if (type === 'submit') {\n      this.save.emit(this._data);\n    }\n    if (this.customMetaController)\n      this.customMetaController.btnClick(type, id, this._data);\n\n  }\n  getMetaID() {\n    return 'customerContactEdit';\n  }\n  onValidateAll() {\n    if (!this.validationResult.isTrue()) {\n      //If basic validation has error.\n      if (this.validationResult.isError('Note'))\n        alert(\"Note \" + this.validationResult.getErrorMsg(\"Note\"));\n      return false;\n    }\n    else {\n      //Do custom validation.\n      let result = true;\n      if (this.customMetaController)\n        result = result && this.customMetaController.onValidateAll(this._data, this.validationResult);\n      return result;\n    }\n  }\n  onValueChange(column: string, value: any, groupId: string, index: number) {\n    //Trigger other column values\n    if (this.customMetaController)\n      this.customMetaController.onValueChange(column, value, groupId, index, this._data, this.validationResult);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { UIModule } from '@allianzSND/ui';\nimport {CommonModule, DatePipe} from '@angular/common';\nimport { CoreModule } from '@allianzSND/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {NxAccordionModule, NxButtonModule, NxDropdownModule, NxMessageModule, NxModalModule, NxRadioModule} from '@allianz/ngx-ndbx';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { CalendarEditComponent } from './calendar/components/calendar-edit/calendar-edit.component';\nimport {CalendarDetailComponent} from './calendar/components/calendar-detail/calendar-detail.component';\nimport {CalendarFilterComponent} from  './calendar/components/calendar-filter/calendar-filter.component';\nimport {CalendarComponent} from './calendar/components/calendar/calendar.component';\nimport { NxFormfieldModule } from '@allianz/ngx-ndbx/formfield';\nimport { NxDatefieldModule, NxNativeDateModule } from '@allianz/ngx-ndbx/datefield';\nimport { CustomerContactListComponent } from './customer/components/customer-contact-list/customer-contact-list.component';\nimport { CustomerDetailComponent } from './customer/components/customer-detail/customer-detail.component';\nimport { CustomerEditComponent } from './customer/components/customer-edit/customer-edit.component';\nimport { CustomerFilterComponent } from './customer/components/customer-filter/customer-filter.component';\nimport { CustomerImportComponent } from './customer/components/customer-import/customer-import.component';\nimport { CustomerListComponent } from './customer/components/customer-list/customer-list.component';\nimport { CustomersComponent } from './customer/components/customers/customers.component'\nimport {NxInputModule} from '@allianz/ngx-ndbx/input';\nimport {NxProgressbarModule} from '@allianz/ngx-ndbx/progressbar';\nimport {NxGridModule} from '@allianz/ngx-ndbx/grid';\nimport { CustomerContactDetailComponent } from './customer/components/customer-contact-detail/customer-contact-detail.component';\nimport { CustomerContactEditComponent } from './customer/components/customer-contact-edit/customer-contact-edit.component';\n\n@NgModule({\n  declarations: [CalendarComponent, CalendarEditComponent, CalendarDetailComponent, CalendarFilterComponent,\n    CustomersComponent, CustomerEditComponent, CustomerListComponent ,\n    CustomerDetailComponent, CustomerContactListComponent , CustomerFilterComponent, CustomerImportComponent, CustomerContactDetailComponent, CustomerContactEditComponent],\n  imports: [\n    NxIconModule,\n    NxButtonModule,\n    NxFormfieldModule,\n    NxDatefieldModule,\n    NxNativeDateModule,\n    UIModule,\n    CoreModule,\n    CommonModule,\n    FormsModule,\n    NxDropdownModule,\n    NxRadioModule,\n    NxInputModule,\n    NxMessageModule,\n    NxProgressbarModule,\n    NxModalModule,\n    NxAccordionModule,\n    NxGridModule,\n    ReactiveFormsModule,\n  ],\n  providers:[DatePipe],\n  exports: [\n    CalendarEditComponent,CalendarComponent, CalendarDetailComponent,\n    CustomersComponent,CustomerEditComponent\n  ]\n})\nexport class IntegrationCalendarCustomerModule { }\n","export class CustomerConfirmAction {\n    private _action : string;\n    private _optionObj : Array<string>;\n\n    constructor() {\n        \n    }\n\n    set action(action) {this._action = action}\n    set option(option) {this._optionObj = option}\n\n    get action() {return this._action}\n    get option() {return this._optionObj}\n}","import { StringUtils } from \"@allianzSND/core\";\n\nexport class CustomerAddress {\n\n    public clientID: string;\n    public addressType: string;\n    public country: string;\n    public city: string;\n    public area: string;\n    public zipcode: string;\n    public address: string;\n    public dataSource: string;\n\n    constructor(clientID: string, addressType: string, country: string, city: string, area: string, zipcode: string, address: string, dataSorce: string) {\n        this.clientID = clientID;\n        this.addressType = addressType;\n        this.country = country;\n        this.city = city;\n        this.area = area;\n        this.zipcode = zipcode;\n        this.address = address;\n        this.dataSource = dataSorce;\n\n    }\n\n    toFullAddress() {\n\n        let array = [];\n        if (StringUtils.isNotEmpty(this.country)) array.push(this.country);\n        if (StringUtils.isNotEmpty(this.city)) array.push(this.city);\n        if (StringUtils.isNotEmpty(this.area)) array.push(this.area);\n        if (StringUtils.isNotEmpty(this.zipcode)) array.push(this.zipcode);\n        if (StringUtils.isNotEmpty(this.address)) array.push(this.address);\n\n        return array.join(', ');\n    }\n\n    public isEmpty() {\n        return StringUtils.isEmpty(this.country)\n            && StringUtils.isEmpty(this.city) && StringUtils.isEmpty(this.area)\n            && StringUtils.isEmpty(this.zipcode) && StringUtils.isEmpty(this.address);\n    }\n}\n","export class CustomerContactNote{\n\n    private clientID : string;\n    public name : string;\n    public date : Date;\n    public noteMessage : string;\n\n    constructor(clientID:string,date : Date , noteMessage : string) {\n        this.clientID = clientID;\n        this.date = date;\n        this.noteMessage = noteMessage;\n    }\n\n    public getClientID() : string {\n        return this.clientID;\n    }\n\n}","import { StringUtils } from \"@allianzSND/core\";\n\nexport class CustomerEmail {\n\n    public clientID: string;\n    public emailType: string;\n    public email: string;\n    public dataSource: string;\n\n    constructor(_clientID: string, _emailType: string, _email: string, _dataSource: string) {\n        this.clientID = _clientID;\n        this.emailType = _emailType;\n        this.email = _email;\n        this.dataSource = _dataSource;\n    }\n\n    public isEmpty() {\n        return StringUtils.isEmpty(this.email);\n    }\n\n}","import { CustomerItem } from './CustomerItem';\nexport class CustomerList {\n\n    private _customerList : Array<CustomerItem> = [];\n    \n    get length(){\n        return this._customerList.length;\n    }\n\n    constructor() {\n    }\n\n    get customerList(){\n        return this._customerList;\n    }\n\n    set customerList(customerList : Array<CustomerItem>){\n        this._customerList = customerList;\n    }\n    \n    addCustomerItem(customerEvent: CustomerItem) {\n        this._customerList.push(customerEvent);\n    }\n    \n    \n}","export class MobileCustomerItem{\n\n    private lastName : string;\n    private firstName : string;\n    private phoneNumber : Array<{id:number,text:string}>;\n    private email : Array<string>;\n    private address : Array<{id:number,city:string,area:string,code:number,address:string}>;\n    private birthday : string;\n\n    constructor(lastName : string,firstName : string,phoneNumber : Array<{id:number,text:string}>,email : Array<string>,address : Array<{id:number,city:string,area:string,code:number,address:string}>,birthday : string){\n        \n        this.lastName = lastName;\n        this.firstName = firstName;\n        this.phoneNumber = phoneNumber;\n        this.email = email;\n        this.address = address;\n        this.birthday = birthday;\n    }\n\n}","import { MobileCustomerItem } from \"./MobileCustomerItem\";\nexport class MobileCustomerList{\n\n    private mobileCustomerList : Array<MobileCustomerItem>;\n\n    constructor(mobileCustomerList : Array<MobileCustomerItem>){\n        this.mobileCustomerList = mobileCustomerList;\n    }\n\n}","import { IAPI, IMockAPI, DaoFactory, ClientCustomDao, ISQLiteAPI, EqualRestriction, TableUtils, SQLiteResponse } from \"@allianzSND/core\";\nimport { Observable, of } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\n\nexport class CustomerAddContactNoteAPI implements IAPI, IMockAPI, ISQLiteAPI {\n  public Data: any;\n\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n\n\n  getAPIName(): string {\n    return 'addCustomerContactNote';\n  }\n\n  getMockPath(): string {\n    return './assets/mock/saveSuccess.json';\n  }\n\n  executeSQL(): Observable<any> {\n    console.debug(\"addCustomerContactNote API Data:\", this.Data);\n    // If empty, don't save \n    if (!this.Data.Note) {\n      return of(new SQLiteResponse({\n        status: true\n      }, []));\n    }\n    else {\n      return Observable.create((observer) => {\n        let contactObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Contact\");\n        let contactExtObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Contact_Extension\");\n        let dao = this.daoFactory.getDefaultDao();\n        if (contactObj != undefined && dao != undefined) {\n\n          dao = new ClientCustomDao(dao);\n\n          contactObj.setValue('CustomerClientID', this.Data.CustomerClientID);\n          contactObj.setValue('Note', this.Data.Note);\n          contactObj.setValue('NoteTime', this.Data.NoteTime);\n\n          contactExtObj = TableUtils.fillTableColumn(contactExtObj, this.Data);\n          contactExtObj.setValue('CustomerClientID', this.Data.CustomerClientID);\n\n          if (this.Data.ClientID != undefined && this.Data.ClientID != '') {\n            contactObj.addRestriction(new EqualRestriction('ClientID', [this.Data.ClientID]));\n            contactExtObj.addRestriction(new EqualRestriction('ClientID', [this.Data.ClientID]));\n\n            dao.transactionUpdate(contactObj);\n            dao.transactionUpdate(contactExtObj);\n          }\n          else {\n            let clientID = uuid();\n            contactObj.setValue('ClientID', clientID);\n            contactExtObj.setValue('ClientID', clientID);\n\n            dao.transactionInsert(contactObj);\n            dao.transactionInsert(contactExtObj);\n          }\n\n          dao.runTransaction().subscribe(resp => {\n            observer.next(resp);\n            observer.complete();\n          })\n\n\n        } else {\n          observer.next(false);\n          observer.complete();\n        }\n      });\n    }\n  }\n}\n","import { IAPI, IMockAPI, DaoFactory, ClientCustomDao, ISQLiteAPI, EqualRestriction, SQLiteTable, SQLCommand, InRestriction, StringUtils } from \"@allianzSND/core\";\nimport { Observable, from, of } from 'rxjs';\n\nexport class CustomerAutoDeleteAPI implements IAPI , IMockAPI, ISQLiteAPI {\n    \n  private _clientID: string;\n  private _status: string;\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n\n  \n  setClientID(id) {\n    this._clientID = id;\n  }\n\n  getAPIName() : string {\n      return 'getCustomerAutoDelete';\n  }\n\n  getMockPath() : string {\n      return './assets/mock/getCustomerAutoDelete.json';\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let messageObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Message\");\n      let dao = this.daoFactory.getDefaultDao();\n      if (messageObj != undefined && dao != undefined) {\n          \n          dao = new ClientCustomDao(dao);\n          \n          if(StringUtils.isNotEmpty(this._clientID)) {\n            messageObj.addRestriction(new EqualRestriction(\"ClientID\", [this._clientID]));\n          }\n          else {\n            messageObj.addRestriction(new EqualRestriction(\"Status\", ['UnRead']));\n          }\n\n          messageObj.addRestriction(new EqualRestriction(\"MessageCategory\", ['Customer']));\n          messageObj.addRestriction(new EqualRestriction(\"MessageType\",['AutoDelete']));\n\n          dao.queryByTable(messageObj).subscribe((resp) => {\n            observer.next(resp);\n            observer.complete();\n          });\n\n      }\n\n      else {\n        observer.next(false);\n        observer.complete();\n      }\n\n    });\n      //   return from(dao.queryByTable(messageObj).toPromise().then( resp => {\n\n\n      //     let messageArgument = JSON.parse(resp['Body'][0]['customers']);\n      //     let customerIDList = messageArgument['ids'];\n\n      //     let customerObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer\");\n      //     console.log(\"customerIDListInAPI: \", customerIDList);\n      //     customerObj.addRestriction(new InRestriction(\"ClientID\", customerIDList));\n      //     return dao.queryByTable(customerObj).toPromise().then(resp => {\n          \n      //       return resp;\n      //     })\n        \n      \n          \n      // }));\n      \n  } \n\n    \n  \n    \n}\n","import { PageInfo, IAPI, IMockAPI, DaoFactory, ClientCustomDao, ISQLiteAPI, EqualRestriction, OrderByRestriction, LimitRestriction, OffsetRestriction } from \"@allianzSND/core\";\nimport { Observable } from \"rxjs\";\n\nexport class CustomerContactNoteAPI implements IAPI , IMockAPI , ISQLiteAPI {\n\n  private customerClientID:  string;\n  private pageInfo : PageInfo;\n\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n\n  setClientID(id : string) {\n      this.customerClientID = id;\n  }\n\n  setPageInfo(pageInfo : PageInfo) {\n    this.pageInfo = pageInfo;\n  }\n\n  getAPIName() : string {\n      return 'getCustomerContactNote';\n  }\n\n  getMockPath() : string {\n      return './assets/mock/getCustomerContactNote.json';\n  }\n  \n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let contactObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Contact\");\n      let dao = this.daoFactory.getDefaultDao();\n      if (contactObj != undefined && dao != undefined) {\n        \n        dao = new ClientCustomDao(dao);\n\n        contactObj.addRestriction(new EqualRestriction('CustomerClientID',[this.customerClientID]));\n        contactObj.addRestriction(new OrderByRestriction([{ column: 'NoteTime', order: 'DESC' }]))\n\n        //add page limit\n        contactObj.addRestriction(new LimitRestriction([this.pageInfo.pageSize]));\n        contactObj.addRestriction(new OffsetRestriction([(this.pageInfo.page - 1) * 5]));\n\n        console.debug(contactObj);\n        dao.queryByTable(contactObj).subscribe((resp) => {\n          console.debug(\"getCustomerContactNote:\",resp);\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n}","import { IAPI, IMockAPI, DaoFactory, ClientCustomDao, ISQLiteAPI, EqualRestriction } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\n\nexport class CustomerDeleteAPI implements IAPI , IMockAPI, ISQLiteAPI {\n  private _clientID: string;\n\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n  \n  set clientID(clientID: string) {\n    this._clientID = clientID;\n  }\n\n  getAPIName() : string {\n    return 'deleteCustomer';\n  }\n\n  getMockPath() : string {\n    return './assets/mock/saveSuccess.json';\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let customerObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer\");\n      let dao = this.daoFactory.getDefaultDao();\n      if (customerObj != undefined) {\n        \n        dao = new ClientCustomDao(dao);\n        customerObj.addRestriction(new EqualRestriction('ClientID',[this._clientID]));\n        dao.deleteByTable(customerObj).subscribe((resp) => {    \n          observer.next(resp);\n          observer.complete();\n        });\n\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n}\n","import { IAPI, IMockAPI, DaoFactory, ClientCustomDao, ISQLiteAPI, EqualRestriction } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\n\nexport class CustomerDeleteContactNoteAPI implements IAPI , IMockAPI, ISQLiteAPI {\n  private contactClientID:  string;\n\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n\n  setContactClientID(contactClientID : string) {\n    this.contactClientID = contactClientID;\n  }\n\n  getAPIName() : string {\n    return 'deleteCustomerContactNote';\n  }\n\n  getMockPath() : string {\n    return './assets/mock/saveSuccess.json';\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let contactObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Contact\");\n      let dao = this.daoFactory.getDefaultDao();\n      if (contactObj != undefined && dao != undefined) {\n        \n        dao = new ClientCustomDao(dao);\n\n        contactObj.addRestriction(new EqualRestriction('ClientID',[this.contactClientID]));\n      \n        dao.deleteByTable(contactObj).subscribe((resp) => {\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n}\n","import { IAPI, IMockAPI, DaoFactory, ClientCustomDao, SQLiteTable, EqualRestriction, SQLiteResponse } from \"@allianzSND/core\";\nimport { ISQLiteAPI } from '@allianzSND/core';\nimport { Observable, of, from } from \"rxjs\";\n\nexport class CustomerDetailAPI implements IAPI, IMockAPI, ISQLiteAPI {\n    private _id = '';\n\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n    public get id() {\n        return this._id;\n    }\n    public set id(value) {\n        this._id = value;\n    }\n    getAPIName(): string {\n        return 'getCustomerDetail';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/getCustomerDetail.json';\n    }\n\n    executeSQL(): Observable<any> {\n        console.log('customer Detail:execute SQL');\n        let defaultObj = {\n            \"ClientID\": \"\",\n            \"LastName\": \"\",\n            \"FirstName\": \"\",\n            \"Occupation\": \"\",\n            \"Company\": \"\",\n            \"BirthdayYear\": \"\",\n            \"BirthdayMonth\": \"\",\n            \"BirthdayDate\": \"\",\n            \"Birthday\": null,\n            \"AgeRange\": null,\n            \"Gender\": null,\n            \"Income\": null,\n            \"Source\": null,\n            \"Marriage\": null,\n            \"Children\": null,\n            \"Familiarity\": null,\n            \"RecentStatus\": null,\n            \"MANPA\": null,\n            \"ContactFrequancy\": null,\n            \"Possibility\": null,\n            \"IsFollow\": \"N\",\n            \"DataSource\": \"APP\",\n            \"tel\": [],\n            \"email\": [],\n            \"address\": []\n        }\n        if (!this._id || (this._id.length == 0)) {\n            //Add\n            let resp = new SQLiteResponse({\n                \"isSuccess\": true\n            }, [defaultObj]);\n            return of(resp);\n        }\n        else {\n            let customerObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_VW_Customer\");\n            let defaultDao = this.daoFactory.getDefaultDao();\n            if (customerObj != undefined && defaultDao != undefined) {\n                let dao = new ClientCustomDao(defaultDao);\n                customerObj.addRestriction(new EqualRestriction(\"ClientID\", [this._id]));\n                return from(dao.queryByTable(customerObj).toPromise().then(resp => {\n                    let customer = resp;\n                    let clientID = customer['Body'][0].ClientID;\n                    let customerTelObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Tel\");\n                    if (customerTelObj) {\n                        customerTelObj = (<SQLiteTable>customerTelObj);\n                        customerTelObj.addRestriction(new EqualRestriction('CustomerClientID', [clientID]));\n                        return dao.queryByTable(customerTelObj).toPromise().then((resp) => {\n                            let telList = resp['Body'];\n                            customer['Body'][0]['tel'] = telList;\n                            return { customer, clientID };\n                        });\n                    }\n                    else\n                        return { customer, clientID };\n                }).then(({ customer, clientID }) => {\n                    let customerEmailObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Email\");\n                    if (customerEmailObj) {\n                        customerEmailObj = (<SQLiteTable>customerEmailObj);\n                        customerEmailObj.addRestriction(new EqualRestriction('CustomerClientID', [clientID]));\n\n                        return dao.queryByTable(customerEmailObj).toPromise().then((resp) => {\n                            let telList = resp['Body'];\n                            customer['Body'][0]['email'] = telList;\n                            return { customer, clientID };\n                        });\n                    }\n                    else\n                        return { customer, clientID };\n\n                }).then(({ customer, clientID }) => {\n                    let customerAddrObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Address\");\n                    if (customerAddrObj) {\n                        customerAddrObj = (<SQLiteTable>customerAddrObj);\n                        customerAddrObj.addRestriction(new EqualRestriction('CustomerClientID', [clientID]));\n\n                        return dao.queryByTable(customerAddrObj).toPromise().then((resp) => {\n                            let telList = resp['Body'];\n                            customer['Body'][0]['address'] = telList;\n                            return customer;\n                        });\n                    }\n                    else\n                        return customer;\n                }).then(customer => {\n                    //change birthDay to Date Object\n                    if (!!customer['Body'][0]['BirthdayYear'] && !!customer['Body'][0]['BirthdayMonth'] && customer['Body'][0]['BirthdayDate'])\n                        customer['Body'][0]['Birthday'] = new Date(parseInt(customer['Body'][0]['BirthdayYear']), parseInt(customer['Body'][0]['BirthdayMonth']) - 1, customer['Body'][0]['BirthdayDate']);\n                    else\n                        customer['Body'][0]['Birthday'] = null;\n                    console.log(\"CustomerDetailAPI convert BirthDay: \", customer['Body'][0]['Birthday']);\n                    return customer;\n                }))\n            }\n            else {\n                return of(false);\n            }\n        }\n    }\n\n\n}\n","import { IAPI, IMockAPI, DaoFactory, ClientCustomDao, ISQLiteAPI, EqualRestriction } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\n\nexport class CustomerEditContactNoteAPI implements IAPI , IMockAPI, ISQLiteAPI {\n  private contactClientID:  string;\n  private note : string;\n  private noteTime : Date;\n\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n\n  setContactClientID(contactClientID : string) {\n    this.contactClientID = contactClientID;\n  }\n\n  setNote(note : string) {\n    this.note = note;\n  }\n\n  setNoteTime(noteTime : Date) {\n    this.noteTime = noteTime;\n  }\n\n  getAPIName() : string {\n    return 'editCustomerContactNote';\n  }\n\n  getMockPath() : string {\n    return './assets/mock/saveSuccess.json';\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let contactObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Contact\");\n      let dao = this.daoFactory.getDefaultDao();\n      if (contactObj != undefined && dao != undefined) {\n        \n        dao = new ClientCustomDao(dao);\n\n        contactObj.addRestriction(new EqualRestriction('ClientID',[this.contactClientID]));\n        contactObj.setValue('Note', this.note);\n        contactObj.setValue('NoteTime', this.noteTime.getTime());\n      \n        dao.updateByTable(contactObj).subscribe((resp) => {\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n}\n","import { IAPI, IMockAPI, DaoFactory, ClientCustomDao, ISQLiteAPI, EqualRestriction, InRestriction, StringUtils } from \"@allianzSND/core\";\nimport { Observable, of, from } from 'rxjs';\n\nexport class CustomerEditOvertimeAPI implements IAPI , IMockAPI, ISQLiteAPI {\n    \n  private _clientID: string;\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n\n  setClientID(id) {\n    this._clientID = id;\n  }\n\n  getAPIName() : string {\n      return 'getCustomerOverTime';\n  }\n\n  getMockPath() : string {\n      return './assets/mock/getCustomerOverTime.json';\n  }\n\n  executeSQL(): Observable<any> {\n    \n    return Observable.create((observer) => {\n      let messageObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Message\");\n      let dao = this.daoFactory.getDefaultDao();\n      if (messageObj != undefined && dao != undefined) {\n          \n          dao = new ClientCustomDao(dao);\n          \n          if(StringUtils.isNotEmpty(this._clientID)) {\n            messageObj.addRestriction(new EqualRestriction(\"ClientID\", [this._clientID]));\n          }\n          else {\n            messageObj.addRestriction(new EqualRestriction(\"Status\", ['UnRead']));\n          }\n\n          messageObj.addRestriction(new EqualRestriction(\"MessageCategory\", ['Customer']));\n          messageObj.addRestriction(new EqualRestriction(\"MessageType\",['Overtime']));\n\n          \n          dao.queryByTable(messageObj).subscribe((resp) => {\n            observer.next(resp);\n            observer.complete();\n          });\n\n      }\n\n      else {\n        observer.next(false);\n        observer.complete();\n      }\n\n    });\n    \n  }\n    \n}\n","import { IAPI, IMockAPI, DaoFactory, SQLiteTable, ClientCustomDao, ISQLiteAPI, EqualRestriction } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\nexport class CustomerGetPresetAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n\n    getAPIName(): string {\n        return 'getCustomerFilterPreset';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/getCustomerFilterPreset.json';\n    }\n\n    executeSQL(): Observable<any> {\n        \n        return Observable.create((observer) => {\n            let dao = this.daoFactory.getDefaultDao();\n            if (dao != undefined) {\n\n                //save customer data\n                let setting = this.daoFactory.getDefaultTable(\"TW_LH_SD_Personal_Setting\");\n                if (setting) {\n                    dao = new ClientCustomDao(dao);\n\n                    setting = (<SQLiteTable>setting);\n\n                    setting.addRestriction(new EqualRestriction('SettingID',['CustomerFilterSetting']));\n\n                    dao.queryByTable(setting).subscribe((resp) => {\n                        console.debug(resp);\n                        observer.next(resp);\n                        observer.complete();\n                    });\n                }\n                else {\n                    observer.next(false);\n                    observer.complete();\n                }\n\n            }\n            else {\n                observer.next(false);\n                observer.complete();\n            }\n        });\n    }\n}\n","import { IAPI, IMockAPI, ISQLiteAPI, DaoFactory, ClientCustomDao, InRestriction, LikeRestriction, ORCompoundRestriction, EqualRestriction, IRestriction, LimitRestriction, OffsetRestriction, AndCompoundRestriction, PageInfo, OrderByRestriction, ProfileCodeService, LessOrEqualRestriction, GreaterOrEqualRestriction, NotEqualRestriction, StringUtils } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\nimport { CustomerFilterCriteria } from \"../components/bean/customer-filter-criteria\";\n\nexport class CustomerListAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n  private _restrictions: Array<IRestriction>;\n  private _pageInfo: PageInfo = new PageInfo();\n\n  private _queryClientID: string;\n\n  constructor(private daoFactory: DaoFactory, private profileCodeService: ProfileCodeService) {\n\n  }\n  set clientID(clientID: string) {\n    this._queryClientID = clientID;\n  }\n\n  set restrictions(restrictions: Array<IRestriction>) {\n    this._restrictions = restrictions;\n  }\n\n  set pageInfo(pageInfo: PageInfo) {\n    this._pageInfo = pageInfo;\n  }\n\n  getAPIName(): string {\n    return 'getCustomerList';\n  }\n\n  getMockPath(): string {\n    return './assets/mock/getCustomerList.json';\n  }\n\n  executeSQL(): Observable<any> {\n\n    return Observable.create((observer) => {\n      let customerObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_VW_Customer\");\n      let dao = this.daoFactory.getDefaultDao();\n      if (customerObj != undefined && dao != undefined) {\n\n        dao = new ClientCustomDao(dao);\n\n        if (this._restrictions.length > 0) {\n          this._restrictions.forEach((condition: IRestriction) => {\n            customerObj.addRestriction(condition);\n          })\n        }\n\n\n        //add order by\n        customerObj.addRestriction(new OrderByRestriction([{ column: 'LastName', order: 'ASC' }]))\n\n        //add page limit\n        if (this._pageInfo.pageSize > 0) {\n          customerObj.addRestriction(new LimitRestriction([this._pageInfo.pageSize]));\n          customerObj.addRestriction(new OffsetRestriction([(this._pageInfo.page - 1) * 10]));\n        }\n\n        //if has edit profile will has clientID\n        if (StringUtils.isNotEmpty(this._queryClientID)) {\n          customerObj.addRestriction(new EqualRestriction('ClientID', [this._queryClientID]));\n        }\n\n        dao.queryByTable(customerObj).subscribe((resp) => {\n\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n\n}\n","import { IAPI, IMockAPI, DaoFactory, SQLiteTable, ClientCustomDao, ISQLiteAPI, EqualRestriction, SQLCommand, TableUtils } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\nimport { CustomerUtils } from \"../utils/customer-utils\";\nimport { v4 as uuid } from 'uuid';\n\n\nexport class CustomerSaveDetailAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n\n    private Data = null;\n\n    constructor(private daoFactory: DaoFactory, private customerUtils: CustomerUtils) {\n\n    }\n\n    setDetail(detail: any) {\n        this.Data = detail;\n    }\n\n    get customerDetail() {\n        return this.Data;\n    }\n\n    getAPIName(): string {\n        return 'saveCustomerDetail';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/saveSuccess.json';\n    }\n\n    executeSQL(): Observable<any> {\n        // let returnObj = {\n        //     \"status\": true,\n        //     \"msg\": ''\n        // };\n        return Observable.create((observer) => {\n            let dao;\n            let base_dao = this.daoFactory.getDefaultDao();\n            if (base_dao != undefined) {\n                dao = new ClientCustomDao(base_dao);\n                console.log(\"base_dao:\", base_dao);\n                console.log(\"dao:\", dao);\n                //save customer data\n                let customerObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer\");\n                let customerExtObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Extension\");\n                if (customerObj && customerExtObj) {\n\n                    let birthday = this.customerDetail.Birthday;\n                    if (birthday != null && birthday != undefined) {\n                        customerObj.setValue(\"BirthdayYear\", birthday.getFullYear().toString());\n                        let month = (birthday.getMonth() + 1).toString();\n                        if (month.length < 2) {\n                            month = '0' + month.toString();\n                        }\n                        customerObj.setValue(\"BirthdayMonth\", month);\n\n                        let date = (birthday.getDate()).toString();\n                        if (date.length < 2) {\n                            date = '0' + date.toString();\n                        }\n                        customerObj.setValue(\"BirthdayDate\", date);\n                    }\n                    else {\n                        customerObj.setValue(\"BirthdayYear\", null);\n                        customerObj.setValue(\"BirthdayMonth\", null);\n                        customerObj.setValue(\"BirthdayDate\", null);\n                    }\n                    customerObj.setValue(\"AgeRange\", this.customerDetail.AgeRange);\n                    customerObj.setValue('ClientID', this.customerDetail.ClientID);\n                    customerObj.setValue(\"LastName\", this.customerDetail.LastName);\n                    customerObj.setValue(\"FirstName\", this.customerDetail.FirstName);\n                    customerObj.setValue(\"Occupation\", this.customerDetail.Occupation);\n                    customerObj.setValue(\"Company\", this.customerDetail.Company);\n                    customerObj.setValue(\"Gender\", this.customerDetail.Gender);\n                    customerObj.setValue(\"Income\", this.customerDetail.Income);\n                    customerObj.setValue(\"Source\", this.customerDetail.Source);\n                    customerObj.setValue(\"Marriage\", this.customerDetail.Marriage);\n                    customerObj.setValue(\"Children\", this.customerDetail.Children);\n                    customerObj.setValue(\"Familiarity\", this.customerDetail.Familiarity);\n                    customerObj.setValue(\"ContactFrequancy\", this.customerDetail.ContactFrequancy);\n                    customerObj.setValue(\"Possibility\", this.customerDetail.Possibility);\n                    customerObj.setValue(\"IsFollow\", this.customerDetail.IsFollow);\n\n                    customerExtObj.setValue('ClientID', this.customerDetail.ClientID);\n                    // customerExtObj.setValue(\"RecentStatus\", this.customerDetail.RecentStatus);\n                    // customerExtObj.setValue(\"MANPA\", this.customerDetail.MANPA);\n                    console.log(\"save cusomer stringify:\", JSON.stringify(this.customerDetail));\n                    customerExtObj = TableUtils.fillTableColumn(customerExtObj, this.customerDetail);\n                    console.log(\"save cusomer extObj:\", JSON.stringify(customerExtObj));\n\n                    //set customer default column & value\n                    this.customerUtils.setCustomerDefaultValue(customerObj);\n                    this.customerDetail.AgeRange = customerObj.getValue(\"AgeRange\");\n\n                    customerObj.setValue('Completeness', this.customerDetail.Completeness);\n\n                    console.debug('insertCustomer', customerObj);\n                    // console.log('clientID:', customerObj.getValue('ClientID'));\n                    if (customerObj.getValue('ClientID') == '') {\n                        let _clientID = uuid();\n                        customerObj.setValue('ClientID', _clientID);\n                        customerExtObj.setValue('ClientID', _clientID);\n                        dao.transactionInsert(customerObj);\n                        dao.transactionInsert(customerExtObj);\n                    }\n                    else {\n                        let _deletedClientID = customerObj.getValue('ClientID');\n                        let phoneInsertObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Tel\");\n                        let phoneInsertExtObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Tel_Extension\");\n                        let emailInsertObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Email\");\n                        let emailInsertExtObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Email_Extension\");\n                        let addressInsertObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Address\");\n                        let addressInsertExtObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Address_Extension\");\n                        customerObj.addRestriction(new EqualRestriction('ClientID', [_deletedClientID]));\n                        customerExtObj.addRestriction(new EqualRestriction('ClientID', [_deletedClientID]));\n                        phoneInsertObj.addRestriction(new EqualRestriction('CustomerClientID', [_deletedClientID]));\n                        phoneInsertExtObj.addRestriction(new EqualRestriction('CustomerClientID', [_deletedClientID]));\n                        emailInsertObj.addRestriction(new EqualRestriction('CustomerClientID', [_deletedClientID]));\n                        emailInsertExtObj.addRestriction(new EqualRestriction('CustomerClientID', [_deletedClientID]));\n                        addressInsertObj.addRestriction(new EqualRestriction('CustomerClientID', [_deletedClientID]));\n                        addressInsertExtObj.addRestriction(new EqualRestriction('CustomerClientID', [_deletedClientID]));\n\n                        dao.transactionUpdate(customerObj);\n                        dao.transactionUpdate(customerExtObj);\n                        base_dao.transactionDelete(phoneInsertObj);\n                        base_dao.transactionDelete(phoneInsertExtObj);\n                        base_dao.transactionDelete(emailInsertObj);\n                        base_dao.transactionDelete(emailInsertExtObj);\n                        base_dao.transactionDelete(addressInsertObj);\n                        base_dao.transactionDelete(addressInsertExtObj);\n                    }\n\n                    //save phone data              \n                    for (let phone of this.customerDetail.tel) {\n                        let phoneInsertObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Tel\");\n                        let phoneInsertExtObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Tel_Extension\");\n                        if (phoneInsertObj && phone.Tel) {\n\n                            if (phone.TelType == '') phone.TelType = 'TelHome';\n                            let clientID = uuid();\n                            phoneInsertObj = (<SQLiteTable>phoneInsertObj);\n                            phoneInsertObj.setValue(\"ClientID\", clientID);\n                            phoneInsertObj.setValue('CustomerClientID', customerObj.getValue('ClientID'));\n                            phoneInsertObj.setValue('TelType', phone.TelType);\n                            phoneInsertObj.setValue('Tel', phone.Tel);\n\n                            phoneInsertExtObj.setValue(\"ClientID\", clientID);\n                            phoneInsertExtObj.setValue('CustomerClientID', customerObj.getValue('ClientID'));\n                            phoneInsertExtObj = TableUtils.fillTableColumn(phoneInsertExtObj, phone);\n\n                            //insert\n                            dao.transactionInsert(phoneInsertObj);\n                            dao.transactionInsert(phoneInsertExtObj);\n                        }\n                    }\n\n                    //save email data\n                    for (let email of this.customerDetail.email) {\n                        let emailInsertObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Email\");\n                        let emailInsertExtObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Email_Extension\");\n                        if (emailInsertObj && email.Email) {\n                            if (email.EmailType == '') email.EmailType = 'MailHome';\n                            let clientID = uuid();\n                            emailInsertObj = (<SQLiteTable>emailInsertObj);\n                            emailInsertObj.setValue(\"ClientID\", clientID);\n                            emailInsertObj.setValue('CustomerClientID', customerObj.getValue('ClientID'));\n                            emailInsertObj.setValue('EmailType', email.EmailType);\n                            emailInsertObj.setValue('Email', email.Email);\n\n\n                            emailInsertExtObj.setValue(\"ClientID\", clientID);\n                            emailInsertExtObj.setValue('CustomerClientID', customerObj.getValue('ClientID'));\n                            emailInsertExtObj = TableUtils.fillTableColumn(emailInsertExtObj, email);\n                            //insert\n                            dao.transactionInsert(emailInsertObj);\n                            dao.transactionInsert(emailInsertExtObj);\n                        }\n                    }\n\n                    //save address data\n                    for (let address of this.customerDetail.address) {\n                        let addressInsertObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Address\");\n                        let addressInsertExtObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Address_Extension\");\n                        if (addressInsertObj) {\n\n                            if (!this._judgeIsAddressEmpty(address)) {\n                                // if (address.AddressType == '') address.AddressType = 'AddressTypeHome';\n\n                                let clientID = uuid();\n                                addressInsertObj.setValue(\"ClientID\", clientID);\n                                addressInsertObj = (<SQLiteTable>addressInsertObj);\n                                addressInsertObj.setValue('CustomerClientID', customerObj.getValue('ClientID'));\n                                addressInsertObj.setValue('AddressType', address.AddressType);\n                                addressInsertObj.setValue('Country', address.Country);\n                                addressInsertObj.setValue('City', address.City);\n                                addressInsertObj.setValue('Area', address.Area);\n                                addressInsertObj.setValue('Zipcode', address.Zipcode);\n                                addressInsertObj.setValue('Address', address.Address);\n\n                                addressInsertExtObj.setValue(\"ClientID\", clientID);\n                                addressInsertExtObj.setValue('CustomerClientID', customerObj.getValue('ClientID'));\n                                addressInsertExtObj = TableUtils.fillTableColumn(addressInsertExtObj, address);\n\n                                //insert\n                                dao.transactionInsert(addressInsertObj);\n                                dao.transactionInsert(addressInsertExtObj);\n                            }\n                        }\n                    }\n                    dao.runTransaction().subscribe((resp) => {\n                        // let header = resp['Header'];\n                        // if (!header.status) {\n                        //     returnObj['status'] = false;\n                        //     returnObj['msg'] = header.msg;\n                        // }\n                        observer.next(resp);\n                        observer.complete();\n                    });\n                }\n                else {\n                    observer.next(false);\n                    observer.complete();\n                }\n\n            }\n            else {\n                observer.next(false);\n                observer.complete();\n            }\n        });\n    }\n\n\n    private _judgeIsAddressEmpty(customerObj: any): boolean {\n        let requiredCol: Array<string> = ['Country', 'City', 'Area', 'Zipcode', 'Address'];\n        return requiredCol.reduce((total, each) => total && customerObj[each] == '', true);\n    }\n}\n","import { IAPI, IMockAPI, DaoFactory, SQLiteTable, ClientCustomDao, ISQLiteAPI, EqualRestriction } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\nimport { CustomerFilterCriteria } from \"../components/bean/customer-filter-criteria\";\n\nexport class CustomerSavePresetAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    private _criteria: CustomerFilterCriteria;\n\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n\n    setFilterCriteria(criteria: CustomerFilterCriteria) {\n        this._criteria = criteria;\n    }\n\n    getAPIName(): string {\n        return 'saveCustomerFilterPreset';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/saveSuccess.json';\n    }\n\n    executeSQL(): Observable<any> {\n        \n        return Observable.create((observer) => {\n            let dao = this.daoFactory.getDefaultDao();\n            if (dao != undefined) {\n\n                //save customer data\n                let setting = this.daoFactory.getDefaultTable(\"TW_LH_SD_Personal_Setting\");\n                if (setting) {\n                    dao = new ClientCustomDao(dao);\n\n                    setting = (<SQLiteTable>setting);\n\n                    setting.addRestriction(new EqualRestriction('SettingID',['CustomerFilterSetting']));\n                    setting.setValue(\"SettingVal\",JSON.stringify(this._criteria.toPresetJSON()));\n\n                    dao.updateByTable(setting).subscribe((resp) => {\n                        observer.next(resp);\n                        observer.complete();\n                    });\n                }\n                else {\n                    observer.next(false);\n                    observer.complete();\n                }\n\n            }\n            else {\n                observer.next(false);\n                observer.complete();\n            }\n        });\n    }\n}\n","import { IAPI, IMockAPI, DaoFactory, ClientCustomDao, ISQLiteAPI, EqualRestriction } from \"@allianzSND/core\";\nimport { Observable } from \"rxjs\";\n\nexport class CustomerTelAPI implements IAPI , IMockAPI , ISQLiteAPI {\n\n  private clientID : string;\n\n  constructor(private daoFactory: DaoFactory) {\n\n  }\n\n  setClientID(id : string) {\n      this.clientID = id;\n  }\n\n  getAPIName() : string {\n      return 'getCustomerTel';\n  }\n\n  getMockPath() : string {\n      return './assets/mock/getCustomerTel.json';\n  }\n  \n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let telObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Tel\");\n      let dao = this.daoFactory.getDefaultDao();\n      if (telObj != undefined && dao != undefined) {\n        \n        dao = new ClientCustomDao(dao);\n\n        telObj.addRestriction(new EqualRestriction('CustomerClientID',[this.clientID]));\n      \n        dao.queryByTable(telObj).subscribe((resp) => {\n          console.debug(resp);\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n}","import { IAPI, IMockAPI, DaoFactory, SQLiteTable, ClientCustomDao, ISQLiteAPI, EqualRestriction } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\n\nexport class CustomerUpdateFollowAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    private _clientID : string;\n    private _isFollow : boolean;\n\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n\n    setClient(clientID : string) {\n        this._clientID = clientID;\n    }\n\n    setIsFollow(isFollow : boolean) {\n        this._isFollow = isFollow;\n    }\n\n    getAPIName(): string {\n        return 'updateCustomerFollowStatus';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/saveSuccess.json';\n    }\n\n    executeSQL(): Observable<any> {\n        \n        return Observable.create((observer) => {\n            let dao = this.daoFactory.getDefaultDao();\n            if (dao != undefined) {\n\n                //save customer data\n                let customer = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer\");\n                if (customer) {\n                    dao = new ClientCustomDao(dao);\n\n                    customer = (<SQLiteTable>customer);\n\n                    customer.addRestriction(new EqualRestriction('ClientID',[this._clientID]));\n                    customer.setValue(\"IsFollow\",this._isFollow ? 'Y' : 'N');\n\n                    dao.updateByTable(customer).subscribe((resp) => {\n                        \n                        observer.next(resp);\n                        observer.complete();\n                    });\n                }\n                else {\n                    observer.next(false);\n                    observer.complete();\n                }\n\n            }\n            else {\n                observer.next(false);\n                observer.complete();\n            }\n        });\n    }\n}\n","import { ContactItem, IAPI, IMockAPI, DaoFactory, SQLiteTable, ClientCustomDao, ISQLiteAPI } from \"@allianzSND/core\";\nimport { Observable } from \"rxjs\";\nimport { CustomerUtils } from \"../utils/customer-utils\";\nimport { v4 as uuid } from 'uuid';\n\n\nexport class ImportContactAPI implements IAPI, IMockAPI, ISQLiteAPI {\n    private items: Array<ContactItem>;\n\n    public setItems(items: Array<ContactItem>) {\n        this.items = items;\n    }\n\n    constructor(private daoFactory: DaoFactory, private customerUtils: CustomerUtils) {\n\n    }\n\n    getAPIName(): string {\n        return 'importContact';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/saveSuccess.json';\n    }\n\n    executeSQL(): Observable<any> {\n\n\n        return Observable.create((observer) => {\n            let dao = this.daoFactory.getDefaultDao();\n            if (dao != undefined) {\n\n                dao = new ClientCustomDao(dao);\n\n                for (let item of this.items) {\n\n                    let customerObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer\");\n                    let customerExt = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Extension\");\n\n                    let ClientID = uuid();\n                    customerObj.setValue(\"ClientID\", ClientID);\n                    customerObj.setValue(\"LastName\", item.LastName);\n                    customerObj.setValue(\"FirstName\", item.FirstName);\n                    customerObj.setValue(\"IsFollow\", \"N\");\n\n                    customerExt.setValue(\"ClientID\", ClientID);\n\n                    let birthday = item.Birthday;\n                    if (birthday != null) {\n                        customerObj.setValue(\"BirthdayYear\", birthday.getFullYear);\n                        customerObj.setValue(\"BirthdayMonth\", birthday.getMonth);\n                        customerObj.setValue(\"BirthdayDate\", birthday.getDate);\n                    }\n\n                    //set customer default column & value\n                    this.customerUtils.setCustomerDefaultValue(customerObj);\n\n                    //count Completeness\n                    let completeness = this.customerUtils.countCompleteness(item);\n                    customerObj.setValue('Completeness', completeness);\n\n                    //insert customer data\n                    dao.transactionInsert(customerObj);\n                    dao.transactionInsert(customerExt);\n                    //save phone data\n                    for (let phone of item.tel) {\n                        let telType = 'TelHome';\n                        if (phone.type == 'work') {\n                            telType = 'TelWork';\n                        }\n                        else if (phone.type == 'mobile') {\n                            telType = 'TelMobile';\n                        }\n\n                        let phoneInsertObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Tel\");\n                        let phoneInsertObj_Ext = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Tel_Extension\");\n                        if (phoneInsertObj) {\n                            let clientID = uuid();\n\n                            phoneInsertObj = (<SQLiteTable>phoneInsertObj);\n                            phoneInsertObj.setValue('ClientID', clientID);\n                            phoneInsertObj.setValue('CustomerClientID', customerObj.getValue('ClientID'));\n\n                            phoneInsertObj.setValue('TelType', telType);\n                            phoneInsertObj.setValue('Tel', phone.number);\n                            phoneInsertObj.setValue('DataSource', 'APP');\n\n                            phoneInsertObj_Ext.setValue('ClientID', clientID);\n                            phoneInsertObj_Ext.setValue('CustomerClientID', customerObj.getValue('ClientID'));\n\n                            //insert\n                            dao.transactionInsert(phoneInsertObj);\n                            dao.transactionInsert(phoneInsertObj_Ext);\n                        }\n                    }\n\n                    //save email data\n                    let maxEmailCount = 3;\n                    let importEmailCount = maxEmailCount;\n                    if (item.email.length < 3) importEmailCount = item.email.length;\n                    for (let i = 0; i < importEmailCount; i++) {\n                        let email = item.email[i];\n\n                        let emailInsertObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Email\");\n                        let emailInsertObj_Ext = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Email_Extension\");\n                        if (emailInsertObj) {\n                            let clientID = uuid();\n\n                            emailInsertObj = (<SQLiteTable>emailInsertObj);\n                            emailInsertObj.setValue('CustomerClientID', customerObj.getValue('ClientID'));\n                            emailInsertObj.setValue('EmailType', 'MailHome');\n                            emailInsertObj.setValue('Email', email);\n                            emailInsertObj.setValue('ClientID', clientID);\n                            emailInsertObj.setValue('DataSource', 'APP');\n\n                            emailInsertObj_Ext.setValue('ClientID', clientID);\n                            emailInsertObj_Ext.setValue('CustomerClientID', customerObj.getValue('ClientID'));\n\n                            //insert\n                            dao.transactionInsert(emailInsertObj);\n                            dao.transactionInsert(emailInsertObj_Ext);\n                        }\n                    }\n\n                    //save address data\n                    for (let address of item.address) {\n\n                        let addressType = 'AddressTypeHome';\n                        if (address.type == 'work') {\n                            addressType = 'AddressTypeWork';\n                        }\n\n                        let addressInsertObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Address\");\n                        let addressInsertObj_Ext = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Address_Extension\");\n                        if (addressInsertObj) {\n\n                            let clientID = uuid();\n\n                            addressInsertObj = (<SQLiteTable>addressInsertObj);\n                            addressInsertObj.setValue('CustomerClientID', customerObj.getValue('ClientID'));\n                            addressInsertObj.setValue('ClientID', clientID);\n\n                            addressInsertObj.setValue('AddressType', addressType);\n                            addressInsertObj.setValue('Zipcode', address.code);\n                            addressInsertObj.setValue('Address', address.address);\n                            addressInsertObj.setValue('DataSource', 'APP');\n\n\n                            addressInsertObj_Ext.setValue('CustomerClientID', customerObj.getValue('ClientID'));\n                            addressInsertObj_Ext.setValue('ClientID', clientID);\n                            //insert\n                            dao.transactionInsert(addressInsertObj);\n                            dao.transactionInsert(addressInsertObj_Ext);\n                        }\n                    }\n\n\n                }\n\n                dao.runTransaction().subscribe((resp) => {\n\n                    observer.next(resp);\n                    observer.complete();\n                });\n\n            }\n            else {\n                observer.next(false);\n                observer.complete();\n            }\n        });\n\n    }\n\n}","import { IAPI } from \"@allianzSND/core\";\nimport { IMockAPI } from \"@allianzSND/core\";\nimport { ISQLiteAPI } from '@allianzSND/core';\nimport { Observable } from 'rxjs';\nimport { DaoFactory } from '@allianzSND/core';\nimport { ClientCustomDao } from '@allianzSND/core';\nimport { GreaterOrEqualRestriction, LessOrEqualRestriction,  OrderByRestriction, EqualRestriction, ORCompoundRestriction } from '@allianzSND/core';\nimport { getYear, getMonth, getDate, subDays, addDays, setYear } from 'date-fns';\n\nexport class CustomerBirthdayListAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n  private _targetDate: Date;\n\n  public isRangeCrossYear: boolean;\n  private _subN : number;\n  private _subNDayTimeStamp: number;\n\n  private _addN : number;\n  private _addNDayTimeStamp: number;\n\n  private _DaoFactory: DaoFactory;\n  constructor(DaoFactory) {\n    this._DaoFactory = DaoFactory;\n  }\n\n  set targetDate(targetDate: Date) {\n    this._targetDate = setYear(targetDate, 2000);\n    this._subNDayTimeStamp = subDays(this._targetDate, this._subN).getTime();\n    this._addNDayTimeStamp = addDays(this._targetDate, this._addN).getTime();\n\n\n    if((getYear(this._targetDate) == getYear(this._subNDayTimeStamp)) && (getYear(this._targetDate) == getYear(this._addNDayTimeStamp))) {\n      this.isRangeCrossYear = false;\n    }\n\n    else {\n      this._subNDayTimeStamp = (setYear(this._subNDayTimeStamp, 2000)).getTime();\n      this._addNDayTimeStamp = (setYear(this._addNDayTimeStamp, 2000)).getTime();\n      this.isRangeCrossYear = true;\n    }\n\n    console.warn(this._subN, \"  subDate:  \", this._subNDayTimeStamp);\n    console.warn(this._addN, \"  addDate:  \", this._addNDayTimeStamp);\n  }\n\n  set subN(subN: number) {\n    this._subN = subN;\n  }\n\n  set addN(addN: number) {\n    this._addN = addN;\n  }\n\n\n\n  getAPIName(): string {\n    return 'getCustomerBirthdayList';\n  }\n\n  getMockPath(): string {\n    return './assets/mock/getCustomerBirthday.json';\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let customerObj = this._DaoFactory.getDefaultTable(\"TW_LH_SD_VW_Customer\");\n      let dao = this._DaoFactory.getDefaultDao();\n      if (customerObj != undefined && dao != undefined) {\n\n        dao = new ClientCustomDao(dao);\n\n        // if(this.isRangeCrossYear) {\n        //   customerObj.addRestriction(new ORCompoundRestriction([new GreaterOrEqualRestriction('BirthDayTimeStamp', [this._subNDayTimeStamp]), new LessOrEqualRestriction('BirthDayTimeStamp', [this._addNDayTimeStamp])]));\n        // }\n\n        // else {\n        //   customerObj.addRestriction(new GreaterOrEqualRestriction('BirthDayTimeStamp', [this._subNDayTimeStamp]));\n        //   customerObj.addRestriction(new LessOrEqualRestriction('BirthDayTimeStamp', [this._addNDayTimeStamp]));\n        // }\n\n        customerObj.addRestriction(new OrderByRestriction([{ column: 'LastName', order: 'ASC' }]))\n\n        //customerObj.addRestriction(new OrderByRestriction([{ column: 'StartTime', order: 'ASC' }]));\n        // calendarObj.addRestriction(new OrderByRestriction([{ column: 'StartTime', order: 'ASC' },{ column: 'EndTime', order: 'DESC' }]));\n        dao.queryByTable(customerObj).subscribe((resp) => {\n          console.warn(\"resp.Body in CustomerBirthdayListAPI: \",resp);\n          resp.Body = resp.Body.filter(birthday => this._judgeCustomrtIsInRange(birthday));\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n\n  private _judgeCustomrtIsInRange(item): boolean {\n    let birthDayTimeStamp = new Date('2000/' + item.BirthdayMonth + '/' + item.BirthdayDate).getTime();\n    if(this.isRangeCrossYear) {\n      return birthDayTimeStamp >= this._subNDayTimeStamp || birthDayTimeStamp <= this._addNDayTimeStamp ;\n    }\n\n    else {\n      return birthDayTimeStamp >= this._subNDayTimeStamp && birthDayTimeStamp <= this._addNDayTimeStamp ;\n    }\n  }\n}\n","import { IAPI, IMockAPI, DaoFactory, SQLiteTable, ClientCustomDao, ISQLiteAPI, EqualRestriction } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\n\nexport class DashboardUpdateToReadAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    private _messageType : string;\n    private _messageDataCategory : string;\n\n    constructor(private daoFactory: DaoFactory) {\n\n    }\n\n    public setMessageType(type) {\n        this._messageType = type;\n    }\n\n    public setMessageDataCategory(dataCategory) {\n        this._messageDataCategory = dataCategory;\n    }\n\n\n\n    getAPIName(): string {\n        return 'updateDashboardToRead';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/saveSuccess.json';\n    }\n\n    executeSQL(): Observable<any> {\n        \n        return Observable.create((observer) => {\n            let dao = this.daoFactory.getDefaultDao();\n            if (dao != undefined) {\n\n                //save customer data\n                let messageObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Message\");\n                if (messageObj) {\n                    dao = new ClientCustomDao(dao);\n\n                    messageObj = (<SQLiteTable>messageObj);\n\n                    messageObj.addRestriction(new EqualRestriction('MessageCategory',[this._messageDataCategory]));\n                    messageObj.addRestriction(new EqualRestriction('MessageType',[this._messageType]));\n                    messageObj.setValue(\"Status\", 'Reading');\n\n                    dao.updateByTable(messageObj).subscribe((resp) => {\n                        \n                        observer.next(resp);\n                        observer.complete();\n                    });\n                }\n                else {\n                    observer.next(false);\n                    observer.complete();\n                }\n\n            }\n            else {\n                observer.next(false);\n                observer.complete();\n            }\n        });\n    }\n}\n","import { IAPI } from \"@allianzSND/core\";\nimport { IMockAPI } from \"@allianzSND/core\";\nimport {Observable} from 'rxjs';\nimport {DaoFactory} from '@allianzSND/core';\nimport {ClientCustomDao} from '@allianzSND/core';\nimport {ISQLiteAPI} from '@allianzSND/core';\nimport {CalendarEventDetail} from '../service/model/CalendarEventDetail';\n\nexport class CalendarEventAddAPI implements IAPI , IMockAPI, ISQLiteAPI {\n  private _calendarEvent:  CalendarEventDetail;\n  private _DaoFactory: DaoFactory;\n  constructor(DaoFactory) {\n    this._DaoFactory = DaoFactory;\n  }\n\n\n  setCalendarEvent(value: CalendarEventDetail) {\n    this._calendarEvent = value;\n  }\n\n  getAPIName() : string {\n    return 'addCalendarEvent';\n  }\n\n  getMockPath() : string {\n    return './assets/mock/addCalendarEvent.json';\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let calendarObj = this._DaoFactory.getDefaultTable(\"TW_LH_SD_Calendar\");\n      let dao = this._DaoFactory.getDefaultDao();\n      if (calendarObj != undefined) {\n\n        dao = new ClientCustomDao(dao);\n        calendarObj.setValue('CustomerClientID', this._calendarEvent.customerClientID);\n        calendarObj.setValue('Title', this._calendarEvent.title);\n        calendarObj.setValue('Location', this._calendarEvent.location);\n        calendarObj.setValue('CalendarType', this._calendarEvent.activity);\n        if(this._calendarEvent.allDay == true) {\n          calendarObj.setValue('IsAllDay', 'Y');\n        } else {\n          calendarObj.setValue('IsAllDay', 'N');\n        }\n        calendarObj.setValue('StartTime', this._calendarEvent.start.getTime());\n        calendarObj.setValue('EndTime', this._calendarEvent.end.getTime());\n        if(this._calendarEvent.isAlert == true) {\n          calendarObj.setValue('IsAlert', 'Y');\n        } else {\n          calendarObj.setValue('IsAlert', 'N');\n        }\n        calendarObj.setValue('Alert1', this._calendarEvent.alert1);\n        calendarObj.setValue('Alert2', this._calendarEvent.alert2);\n        calendarObj.setValue('Alert3', null);\n        calendarObj.setValue('Remark', this._calendarEvent.remark);\n        dao.insertByTable(calendarObj).subscribe((resp) => {\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n}\n","import { IAPI } from \"@allianzSND/core\";\nimport { IMockAPI } from \"@allianzSND/core\";\nimport { ISQLiteAPI } from '@allianzSND/core';\nimport { Observable } from 'rxjs';\nimport { DaoFactory } from '@allianzSND/core';\nimport { ClientCustomDao } from '@allianzSND/core';\nimport { EqualRestriction } from '@allianzSND/core';\n\nexport class CalendarEventDeleteAPI implements IAPI, IMockAPI, ISQLiteAPI {\n  private _clientID: string;\n  private _DaoFactory: DaoFactory;\n  constructor(DaoFactory) {\n    this._DaoFactory = DaoFactory;\n  }\n\n\n  set clientID(clientID: string) {\n    this._clientID = clientID;\n  }\n\n  getAPIName(): string {\n    return 'deleteCalendarEvent';\n  }\n\n  getMockPath(): string {\n    return './assets/mock/deleteCalendarEvent.json';\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let calendarObj = this._DaoFactory.getDefaultTable(\"TW_LH_SD_Calendar\");\n      let calendarExtObj = this._DaoFactory.getDefaultTable(\"TW_LH_SD_Calendar_Extension\");\n\n      let dao = this._DaoFactory.getDefaultDao();\n      if (calendarObj != undefined && dao != undefined) {\n\n        dao = new ClientCustomDao(dao);\n        calendarObj.addRestriction(new EqualRestriction('ClientID', [this._clientID]));\n        calendarExtObj.addRestriction(new EqualRestriction('ClientID', [this._clientID]));\n        dao.deleteByTable(calendarObj).toPromise().then((resp) => {\n            observer.next(resp);\n            observer.complete();    \n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n}\n","import { IAPI, SQLiteResponse } from \"@allianzSND/core\";\nimport { IMockAPI } from \"@allianzSND/core\";\nimport { ISQLiteAPI } from '@allianzSND/core';\nimport { Observable, of } from 'rxjs';\nimport { DaoFactory } from '@allianzSND/core';\nimport { ClientCustomDao } from '@allianzSND/core';\nimport { EqualRestriction } from '@allianzSND/core';\n\nexport class CalendarEventDetailAPI implements IAPI, IMockAPI, ISQLiteAPI {\n  private _clientID: string;\n  private _DaoFactory: DaoFactory;\n  constructor(DaoFactory) {\n    this._DaoFactory = DaoFactory;\n  }\n\n\n  set ClientID(clientID: string) {\n    this._clientID = clientID;\n  }\n\n  getAPIName(): string {\n    return 'getCalendarEventDetail';\n  }\n\n  getMockPath(): string {\n    return './assets/mock/getCalendarEventDetail.json';\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n\n      console.log(\"CalendarEventDetail ClientID:\", this._clientID);\n\n      let defaultObj = {\n        ClientID: null,\n        CalendarID: null,\n        CustomerClientID: null,\n        Title: '',\n        Location: '',\n        CalendarType: null,\n        IsAllDay: 'N',\n        StartTime: null,\n        EndTime: null,\n        IsAlert: 'Y',\n        Alert1: '8',\n        Alert2: '',\n        Alert3: null,\n        Remark: '',\n        DataSource: 'APP'\n      };\n      if (!this._clientID) {\n        //Add\n        let resp = new SQLiteResponse({\n          \"isSuccess\": true\n        }, [defaultObj]);\n        observer.next(resp);\n        observer.complete();\n      }\n      else {\n        let calendarObj = this._DaoFactory.getDefaultTable(\"TW_LH_SD_VW_Calendar\");\n        let dao = this._DaoFactory.getDefaultDao();\n        if (calendarObj != undefined && dao != undefined) {\n\n          dao = new ClientCustomDao(dao);\n          calendarObj.addRestriction(new EqualRestriction('ClientID', [this._clientID]));\n          dao.queryByTable(calendarObj).subscribe((resp) => {\n            observer.next(resp);\n            observer.complete();\n          });\n        } else {\n          observer.next(false);\n          observer.complete();\n        }\n      }\n    });\n  }\n}\n","import { IAPI } from \"@allianzSND/core\";\nimport { IMockAPI } from \"@allianzSND/core\";\nimport { ISQLiteAPI } from '@allianzSND/core';\nimport { Observable } from 'rxjs';\nimport { DaoFactory } from '@allianzSND/core';\nimport { ClientCustomDao } from '@allianzSND/core';\nimport { GreaterOrEqualRestriction } from '@allianzSND/core';\nimport { LessOrEqualRestriction } from '@allianzSND/core';\nimport { OrderByRestriction } from \"@allianzSND/core\";\n\nexport class CalendarEventListAPI implements IAPI, IMockAPI, ISQLiteAPI {\n  private _startTime: Date;\n  private _endTime: Date;\n  private _DaoFactory: DaoFactory;\n  constructor(DaoFactory) {\n    this._DaoFactory = DaoFactory;\n  }\n\n\n  set startTime(startTime: Date) {\n    this._startTime = startTime;\n  }\n\n  set endTime(endTime: Date) {\n    this._endTime = endTime;\n  }\n\n  getAPIName(): string {\n    return 'getCalendarEventList';\n  }\n\n  getMockPath(): string {\n    return './assets/mock/getCalendarEventList.json';\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let calendarObj = this._DaoFactory.getDefaultTable(\"TW_LH_SD_VW_Calendar\");\n      let dao = this._DaoFactory.getDefaultDao();\n      if (calendarObj != undefined && dao != undefined) {\n\n        dao = new ClientCustomDao(dao);\n        calendarObj.addRestriction(new GreaterOrEqualRestriction('EndTime', [this._startTime.getTime()]));\n        calendarObj.addRestriction(new LessOrEqualRestriction('StartTime', [this._endTime.getTime()]));\n        calendarObj.addRestriction(new OrderByRestriction([{ column: 'StartTime', order: 'ASC' }]));\n        // calendarObj.addRestriction(new OrderByRestriction([{ column: 'StartTime', order: 'ASC' },{ column: 'EndTime', order: 'DESC' }]));\n        dao.queryByTable(calendarObj).subscribe((resp) => {\n          console.log(resp);\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n}\n","import { IAPI } from \"@allianzSND/core\";\nimport { IMockAPI } from \"@allianzSND/core\";\nimport {ISQLiteAPI} from '@allianzSND/core';\nimport {Observable} from 'rxjs';\nimport {DaoFactory} from '@allianzSND/core';\nimport {ClientCustomDao} from '@allianzSND/core';\nimport {EqualRestriction} from '@allianzSND/core';\nimport {CalendarEventDetail} from '../service/model/CalendarEventDetail';\n\nexport class CalendarEventUpdateAPI implements IAPI , IMockAPI, ISQLiteAPI {\n  private _clientID: string;\n  private _calendarEvent: CalendarEventDetail;\n  private _DaoFactory: DaoFactory;\n  constructor(DaoFactory) {\n    this._DaoFactory = DaoFactory;\n  }\n\n\n\n  set ClientID(clientID: string) {\n    this._clientID = clientID;\n  }\n\n  setCalendarEvent(value: CalendarEventDetail) {\n    this._calendarEvent = value;\n  }\n\n  getAPIName() : string {\n    return 'updateCalendarEvent';\n  }\n\n  getMockPath() : string {\n    return './assets/mock/updateCalendarEvent.json';\n  }\n\n  executeSQL(): Observable<any> {\n    return Observable.create((observer) => {\n      let calendarObj = this._DaoFactory.getDefaultTable(\"TW_LH_SD_Calendar\");\n      let dao = this._DaoFactory.getDefaultDao();\n      if (calendarObj != undefined && dao != undefined) {\n        \n        dao = new ClientCustomDao(dao);\n        calendarObj.addRestriction(new EqualRestriction('ClientID',[this._clientID]));\n        calendarObj.setValue('CalendarID', this._calendarEvent.calendarID);\n        calendarObj.setValue('Title', this._calendarEvent.title);\n        calendarObj.setValue('Location', this._calendarEvent.location);\n        calendarObj.setValue('CustomerClientID', this._calendarEvent.customerClientID);\n        calendarObj.setValue('CalendarType', this._calendarEvent.activity);\n        if(this._calendarEvent.allDay == true) {\n          calendarObj.setValue('IsAllDay', 'Y');\n        } else {\n          calendarObj.setValue('IsAllDay', 'N');\n        }\n        calendarObj.setValue('StartTime', this._calendarEvent.start.getTime());\n        calendarObj.setValue('EndTime', this._calendarEvent.end.getTime());\n        if(this._calendarEvent.isAlert == true) {\n          calendarObj.setValue('IsAlert', 'Y');\n        } else {\n          calendarObj.setValue('IsAlert', 'N');\n        }\n        calendarObj.setValue('Alert1', this._calendarEvent.alert1);\n        calendarObj.setValue('Alert2', this._calendarEvent.alert2);\n        calendarObj.setValue('Alert3', this._calendarEvent.alert3);\n        calendarObj.setValue('Remark', this._calendarEvent.remark);\n        dao.updateByTable(calendarObj).subscribe((resp) => {\n          observer.next(resp);\n          observer.complete();\n        });\n      } else {\n        observer.next(false);\n        observer.complete();\n      }\n    });\n  }\n}\n","import { IAPI, EqualRestriction, TableUtils } from \"@allianzSND/core\";\nimport { IMockAPI } from \"@allianzSND/core\";\nimport { Observable } from 'rxjs';\nimport { DaoFactory } from '@allianzSND/core';\nimport { ClientCustomDao } from '@allianzSND/core';\nimport { ISQLiteAPI } from '@allianzSND/core';\nimport { CalendarEventDetail } from '../service/model/CalendarEventDetail';\n\nexport class CalendarEventSaveAPI implements IAPI, IMockAPI, ISQLiteAPI {\n    private Data: any;\n    private _DaoFactory: DaoFactory;\n    constructor(DaoFactory) {\n        this._DaoFactory = DaoFactory;\n    }\n\n\n\n\n    getAPIName(): string {\n        return 'saveCalendarEvent';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/addCalendarEvent.json';\n    }\n\n    executeSQL(): Observable<any> {\n        console.log(\"CalendarEventSaveAPI executeSQL:\", this.Data);\n        let Alerts = [this.Data.Alert1, this.Data.Alert2];\n        if (this.Data.IsAlert === 'Y') {\n            Alerts.sort((a, b) => parseInt(a) - parseInt(b))\n            this.Data.Alert1 = Alerts[0];\n            this.Data.Alert2 = Alerts[1];\n        }\n\n        return Observable.create((observer) => {\n            let calendarObj = this._DaoFactory.getDefaultTable(\"TW_LH_SD_Calendar\");\n            let calendarExtObj = this._DaoFactory.getDefaultTable(\"TW_LH_SD_Calendar_Extension\");\n            let dao = this._DaoFactory.getDefaultDao();\n            if (calendarObj != undefined) {\n\n                dao = new ClientCustomDao(dao);\n                if (this.Data.ClientID) {\n                    calendarObj.setValue('ClientID', this.Data.ClientID);\n                    calendarExtObj.setValue('ClientID', this.Data.ClientID);\n                }\n                calendarObj.setValue('CustomerClientID', this.Data.CustomerClientID);\n                calendarObj.setValue('Title', this.Data.Title);\n                calendarObj.setValue('Location', this.Data.Location);\n                calendarObj.setValue('CalendarType', this.Data.CalendarType);\n                calendarObj.setValue('IsAllDay', this.Data.IsAllDay);\n                calendarObj.setValue('StartTime', this.Data.StartDateTime.getTime());\n                calendarObj.setValue('EndTime', this.Data.EndDateTime.getTime());\n                calendarObj.setValue('IsAlert', this.Data.IsAlert);\n                if (this.Data.IsAlert === 'Y') {\n                    calendarObj.setValue('Alert1', this.Data.Alert1);\n                    calendarObj.setValue('Alert2', this.Data.Alert2);\n                }\n                else {\n                    calendarObj.setValue('Alert1', null);\n                    calendarObj.setValue('Alert2', null);\n                }\n                calendarObj.setValue('Alert3', null);\n                calendarObj.setValue('Remark', this.Data.Remark);\n                console.log(\"save calendarObj:\", calendarObj);\n\n\n                // fill extension\n                calendarExtObj = TableUtils.fillTableColumn(calendarExtObj, this.Data);\n                \n                if (this.Data[\"EditType\"] === \"edit\") {\n                    calendarObj.addRestriction(new EqualRestriction(\"ClientID\", [this.Data.ClientID]));\n                    calendarExtObj.addRestriction(new EqualRestriction(\"ClientID\", [this.Data.ClientID]));\n                    dao.transactionUpdate(calendarObj);\n                    dao.transactionUpdate(calendarExtObj);\n                }\n                else {\n                    dao.transactionInsert(calendarObj);\n                    dao.transactionInsert(calendarExtObj);\n                }\n\n                dao.runTransaction().subscribe(resp => {\n                    observer.next(resp);\n                    observer.complete();\n                })\n            } else {\n                observer.next(false);\n                observer.complete();\n            }\n        });\n    }\n}\n"]}