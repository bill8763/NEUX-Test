import { OnInit, EventEmitter, ElementRef } from '@angular/core';
import { SelectOption, MetaService, MetaController, FormMetaComponent, ProfileCodeService, DefaultMetaParser, APIExecutor, MetaColumn, showRule } from '@allianzSND/core';
import { CalendarEventDetail } from '../../service/model/CalendarEventDetail';
import { Language } from '@allianzSND/core';
import { DefaultCalendarEditMetaController } from './DefaultCalendarEditMetaController';
import { AddProgressPoint } from '../../../customer/interface/AddProgressPoint';
export declare class CalendarEditComponent extends FormMetaComponent implements OnInit {
    private elementRef;
    protected metaService: MetaService;
    private addProgressPoint;
    private showRule;
    isMetaDataDone: EventEmitter<boolean>;
    isSaveClick: boolean;
    isSaveClickChange: EventEmitter<boolean>;
    private _clientID;
    private editType;
    clientID: any;
    getMetaParams(): {
        "_clientID": any;
    };
    customerItemList: Array<SelectOption>;
    translateMap: Map<string, string>;
    viewDate: Date;
    todayCalendarEvent: Array<CalendarEventDetail>;
    saveEvent: EventEmitter<{}>;
    private _viewDate;
    private _isSaveClick;
    showDate: string;
    language: Language;
    _translateMap: Map<string, string>;
    _calendarEventDetail: CalendarEventDetail;
    windowWidth: number;
    calendarEventList: Array<CalendarEventDetail>;
    activityOptionList: Array<SelectOption>;
    customerClientOptionList: Array<SelectOption>;
    alertOptionList: Array<SelectOption>;
    startDate: Date;
    endDate: Date;
    eventListBGColor: string;
    private _metaController;
    constructor(elementRef: ElementRef, metaService: MetaService, profileCodeService: ProfileCodeService, metaParser: DefaultMetaParser, metaExecutor: APIExecutor, defaultMetaController: DefaultCalendarEditMetaController, customMetaController: MetaController, addProgressPoint: AddProgressPoint, showRule: showRule);
    ngOnInit(): void;
    btnClick(type: string, id: string): void;
    onValidateAll(): boolean;
    getMetaID(): string;
    onValueChange(column: string, value: any, groupId?: string, index?: number): void;
    onDataUpdated(): void;
    shouldHidden(id: string): boolean;
    private _customerClientID;
    customerClientID: string;
    readonly data: any;
    readonly rowConfig: Array<Array<MetaColumn>>;
    onResize(event: any): void;
    private fillDefaultVal;
    editEvent(): void;
    isMetaLoaded(): boolean;
    scrollToError(): void;
    private _convertDate;
}
