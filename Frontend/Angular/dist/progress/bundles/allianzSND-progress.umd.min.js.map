{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@allianzSND/progress/lib/service/model/ProgressYearConfig.ts","ng://@allianzSND/progress/lib/service/model/ConfigurationObj.ts","ng://@allianzSND/progress/lib/service/model/ProgressObj.ts","ng://@allianzSND/progress/lib/service/model/PersonalObj.ts","ng://@allianzSND/progress/lib/service/model/TeamObj.ts","ng://@allianzSND/progress/lib/service/model/ProgressYearObj.ts","ng://@allianzSND/progress/lib/service/model/Enum/PersonalDataTimeBase.ts","ng://@allianzSND/progress/lib/service/model/Enum/PersonalDataType.ts","ng://@allianzSND/progress/lib/service/model/ProgessPersonalData.ts","ng://@allianzSND/progress/lib/service/model/Enum/ProgressDataTeamValueType.ts","ng://@allianzSND/progress/lib/service/model/ProgressTeamData.ts","ng://@allianzSND/progress/lib/service/model/ProgressDirectIndirectData.ts","ng://@allianzSND/progress/lib/service/model/Enum/DirectUnitType.ts","ng://@allianzSND/progress/lib/service/model/Enum/Tag.ts","ng://@allianzSND/progress/lib/service/progress-service.service.ts","ng://@allianzSND/progress/lib/service/model/ProgressActualValue.ts","ng://@allianzSND/progress/lib/service/model/PersonalData.ts","ng://@allianzSND/progress/lib/service/model/PersonalDataState.ts","ng://@allianzSND/progress/lib/service/model/Enum/ProgressBarControlModeType.ts","ng://@allianzSND/progress/lib/service/model/ProgressBarControlData.ts","ng://@allianzSND/progress/lib/service/model/ProgressDirectData.ts","ng://@allianzSND/progress/lib/service/model/ProgressIndirectData.ts","ng://@allianzSND/progress/lib/service/model/TeamDataState.ts","ng://@allianzSND/progress/lib/service/model/ProgressListContentClass.ts","ng://@allianzSND/progress/lib/service/model/ProgressContentClass.ts","ng://@allianzSND/progress/lib/service/model/ProgressActivityListContentClass.ts","ng://@allianzSND/progress/lib/service/model/ProgressMonthlyContentClass.ts","ng://@allianzSND/progress/lib/service/model/ProgressTeamContentClass.ts","ng://@allianzSND/progress/lib/service/model/ProgressTeamDirectContentClass.ts","ng://@allianzSND/progress/lib/service/model/ProgressTeamIndirectContentClass.ts","ng://@allianzSND/progress/lib/service/model/ProgressTeamMainContentClass.ts","ng://@allianzSND/progress/lib/service/model/ProgressHeadContentClass.ts","ng://@allianzSND/progress/lib/service/model/InfoContentClass.ts","ng://@allianzSND/progress/lib/progress.module.ts","ng://@allianzSND/progress/lib/api/GetPersonalProgressAPI.ts","ng://@allianzSND/progress/lib/api/GetProgressActualValueAPI.ts","ng://@allianzSND/progress/lib/api/GetProgressDataActualValueAPI.ts","ng://@allianzSND/progress/lib/api/GetProgressDataAPI.ts","ng://@allianzSND/progress/lib/api/GetProgressDataGoalSettingPlanAPI.ts","ng://@allianzSND/progress/lib/api/GetProgressGoalPlanAPI.ts","ng://@allianzSND/progress/lib/api/GetTeamProgressDetailAPI.ts","ng://@allianzSND/progress/lib/api/GetTeamProgressMainAPI.ts","ng://@allianzSND/progress/lib/api/PersonalProgressAPI.ts","ng://@allianzSND/progress/lib/api/GetYearConfigurationAPI.ts","ng://@allianzSND/progress/lib/api/AddPointAPI.ts","ng://@allianzSND/progress/lib/service/model/Enum/ActivitiesType.ts","ng://@allianzSND/progress/lib/service/model/Enum/ActualValueDataType.ts","ng://@allianzSND/progress/lib/service/model/Enum/PerformanceType.ts","ng://@allianzSND/progress/lib/service/model/Enum/Quarters.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","__generator","thisArg","body","f","y","t","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","this","n","v","step","op","TypeError","call","done","value","pop","push","e","ProgressYearConfig","DataYear","IsCurrent","WorkingMonth","QuarterStartMonth","QuarterEndMonth","FindConvertPointBase","ScheduleConvertPointBase","MeetConvertPointBase","SubmitConvertPointBase","InforceConvertPointBase","ProgressBarControlMode","ProgressDayPointsLimit","MonthQuantityOfYear","PerformanceSettlementMonth","tslib_1.__decorate","Required","Bean","ConfigurationObj","lastUpdateTime","Configurations","Array","ProgressObj","Progress","PersonalObj","Values","TeamObj","DirectUnit","InDirectUnit","ProgressYearObj","YesterdayPoint","Personal","Team","Day","Week","Month","Quarter","Year","Unknow","Actual","Goal","ProgressPersonalData","DataType","PersonalDataType","TimeBase","PersonalDataTimeBase","Find","Schedule","Meet","Submit","Inforce","FYFC","ANP","Manpower","Recruitment","ProgressTeamData","ProgressDataTeamValueType","Forecast","Shortfall","ProgressDirectIndirectData","AgentID","AgentName","TeamName","JobGrade","Drilldown","AppUseMode","Activities","IndirectUnit","PersonalTag","TeamTag","UnknowTag","ProgressService","dispatch","APIFactory","deviceService","notificationMgr","notficationUtils","errorHandler","_drillDownAgentIdObjList","_drillDowmAgentIdSubject","BehaviorSubject","lastAgentIdObj","_currentTag","Tag","_currentRoleSubject","_currentRole","prototype","AgentIdObjListLength","GetCurrentNavigationTag","SetCurrentNavigationTag","tag","InitDrillDownAgentIdObj","AddDrillDownAgentIdObj","agentIdObj","GetDrillDwonAgentIdObj","asObservable","PopDrillDownAgentIdObj","GetDrillDownAgentIdObjRouterNameObj","maxLength","arr","data1","data2","of","SetCurrentRole","val","GetCurrentRole","GetIsTeam","ROLE","AGENT","AGENTLEADER","ZONEHEAD","CAO","GetIsAgent","GetIsSupervisor","GetIsManaget","GetIsAgentLeader","GetIsShowSwitchTab","GetIsShowTeamTab","GetProgressDataByRestful","agentID","getProgressAPI_1","getAPI","setAgentID","from","toPromise","error","handleError","APPError","message","console","debug","GetProgressDataBySQLite","years","_this","getPersonalProgressAPI","getTeamProgressDetailAPI","getTeamProgressMainAPI","getOtherParameterAPI","Promise","all","map","api","then","_a","_b","__read","o","m","ar","ProgressPersonalRawData","ProgressTeamDetailRawData","ProgressTeamMainRawData","OtherParameterRawData","yesterdayPointsList","progressObjBOSS","progressYearObjList","personalObjList","teamObjList","progressPersonalDataList","progressTeamMainDataList","progressTeamDirectDataList","progressTeamIndirectDataList","_GetYesterdayPoints","_GetProgressPersonalData","obj","_GetProgressTeamMainData","_GetProgressTeamDirectIndirectData","DirectUnitType","otherParameterRawData","ansArr","yesterdayPoint","filter","x","MappingID","SetValue","progressTeamDetailRawData","unitType","bodyData","rawDataByYearArr","yearData","j","tmp","data","progressTeamMainRawData","progressPersonalRawData","GetYearConfigDataBySQLite","getYearConfigurationAPI","resp","dataBady","configObj","dataConfig","JSON","stringify","GetYearConfigDataByRestful","yearConfigAPI","ShowDesh","num","sign","NumberUtils","isNumber","toString","GetPoints","muti","ans","GetTotalPoints","checkData","GetPercentageCircleValue","limit","isWeek","sum","max","toFixed","GetPercentage","numerator","denominator","Math","round","GetPercentageLength","maxBase","Injectable","args","providedIn","APIDispatch","DeviceService","NotificationMgr","NotificationUtils","ErrorHandler","Valid","Observable","ProgressActualValue","id","year","performanceType","dataType","month","_clientID","_dataYear","_performanceType","_dataType","_month","_value","PersonalData","dataYear","timeBase","find","schedule","meet","submit","inforce","_timeBase","_find","_schedule","_meet","_submit","_inforce","time","type","getTotalCount","getTotalPoints","getFindPoints","getSchedulePoints","getMeetPoints","getSubmitPoints","getInforcePoints","getDifferentPercentage","PersonalDataState","TWMode","ProgressBarControlData","_barLengthMaxValue","GetConfigMin","ProgressBarControlModeType","GetConfigMax","ProgressDirectData","ProgressIndirectData","TeamDataState","_teamValueType","ProgressListContentClass","translateService","_translateVariable","WeekText","TodayText","FindNameText","FindContentText","FindUnitText","ScheduleNameText","ScheduleContentText","ScheduleUnitText","MeetNameText","MeetContentText","MeetUnitText","SubmitNameText","SubmitContentText","SubmitUnitText","InforceNameText","InforceContentText","InforceUnitText","AlmostMadeItMsg","CongratulationsMsg","WellDoneMsg","GreatJobMsg","PointsText","_setTranslateVariable","_translateWithVariable","gratsPoints","wellDownPoints","mappingID","translateWithVariable","ProgressContentClass","PersonalText","TeamText","MonthText","QuarterText","YearText","BackToProgressBtnText","ProgressActivityListContentClass","ActivitiesText","AchieveText","FindText","ScheduleText","MeetPresentText","MeetPresentContentText","SubmitText","InforceText","ActualGoalText","ActualPlanText","ProgressMonthlyContentClass","MonthlyPlanFYFCTitleText","PlanText","ActualText","TotalForecastTitle","TotalYTDActualTitle","ProgressTeamContentClass","ManpowerText","RecruitmentText","ProgressTeamDirectContentClass","DirectUnitTitle","GoalText","ForecastText","ShortfallText","ProgressTeamIndirectContentClass","IndirectUnitTitle","ProgressTeamMainContentClass","_language","Language","AgencyTitle","AllZoneTitle","progressManpower","progressRecruitment","progressGoal","progressActual","progressForecast","progressShortfall","ProgressHeadContentClass","InfoContentClass","InformationDescriptionText","InfoTitle","InfoMonthDetailText","InfoQuarterDetailText","InfoYearDetailText","InfoForecastRecruitmentDetailText","InfoAllAmountCountsByMillionText","InfoHowToReadThisTitle","InfoConversionRateText","InfoConversionRateDetailText","InfoActivityLabelText","InfoRedMeanText","InfoGreyMeanText","InfoIfAnActivity1Text","InfoIfAnActivity2Text","InfoToFindText","InfoTryTo1Text","InfoTryTo2Text","InfoTryTo3Text","InfoMoreActive1Text","InfoMoreActive2Text","InfoMoreActive3Text","InfoMoreActive4Text","InfoTryHard1Text","InfoTryHard2Text","InfoTryHard3Text","InfoHighQuality1Text","InfoHighQuality2Text","ProgressModule","NgModule","imports","CoreModule","UIModule","CommonModule","declarations","exports","GetPersonalProgressAPI","daoFactory","_year","_daoFactory","SetYear","getAPIName","getMockPath","executeSQL","defaultDao","getDefaultDao","tableObj","getDefaultTable","undefined","queryByTable","GetProgressActualValueAPI","_personalDataType","_personalDataTimeBase","setDataYear","warn","Error","GetProgressDataActualValueAPI","_searchYear","progressActualObj","filterData","filterData2","progressActualObj1","progressActualObj2","progressActualObjArr","defaultProgressActualObj","GetProgressDataAPI","progressTableObj","progressObj1","progressObj2","progressObjArr","defaultProgressObj","GetProgressDataGoalSettingPlanAPI","progressGoalPlanObj","GetProgressGoalPlanAPI","GetTeamProgressDetailAPI","GetTeamProgressMainAPI","PersonalProgressOldAPI","GetYearConfigurationAPI","AddPointAPI","_addType","_addPointNum","SetAddType","SetPointNum","log","StringUtils","isNotEmpty","dao","_addPoint","addResp","runTransaction","__awaiter","_arguments","P","generator","resolve","reject","fulfilled","rejected","result","apply","currentNum","PersonalPorgress","addRestriction","EqualRestriction","progressObj","getResp","Header","Body","setValue","transactionUpdate","unknow","Q1","Q2","Q3","Q4"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('ProgressYearConfig')\nexport class ProgressYearConfig {\n\n    @Required\n    public DataYear: number = 0;\n\n    @Required\n    public IsCurrent: boolean = true;\n\n    @Required\n    public WorkingMonth: number = 0;\n\n    @Required\n    public QuarterStartMonth: number = 0;\n\n    @Required\n    public QuarterEndMonth: number = 0;\n\n    @Required\n    public FindConvertPointBase: number = 0;\n\n    @Required\n    public ScheduleConvertPointBase: number = 0;\n\n    @Required\n    public MeetConvertPointBase: number = 0;\n\n    @Required\n    public SubmitConvertPointBase: number = 0;\n\n    @Required\n    public InforceConvertPointBase: number = 0;\n\n    @Required\n    public ProgressBarControlMode: string = \"TWMode\";\n\n    @Required\n    public ProgressDayPointsLimit: number = 20;\n\n    @Required\n    public MonthQuantityOfYear: number = 12;\n\n    @Required\n    public PerformanceSettlementMonth: number = 0;\n\n}","import { ProgressYearConfig } from \"./ProgressYearConfig\";\nimport { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('ConfigurationObj')\nexport class ConfigurationObj {\n\n    @Required\n    public lastUpdateTime: string = \"\";\n\n    @Required\n    public Configurations: Array<ProgressYearConfig> = new Array<ProgressYearConfig>();\n}","import { ProgressYearObj } from \"./ProgressYearObj\";\nimport { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('ProgressObj')\nexport class ProgressObj {\n\n    @Required\n    public lastUpdateTime: string = \"\";\n\n    @Required\n    public Progress: Array<ProgressYearObj> = new Array<ProgressYearObj>();\n}\n","import { ProgressPersonalData } from \"./ProgessPersonalData\";\n\nexport class PersonalObj {\n    public Values: Array<ProgressPersonalData> = new Array<ProgressPersonalData>();\n} ","import { ProgressTeamData } from \"./ProgressTeamData\";\nimport { ProgressDirectIndirectData } from \"./ProgressDirectIndirectData\";\nimport { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('TeamObj')\nexport class TeamObj {\n\n    @Required\n    public Values: Array<ProgressTeamData> = new Array<ProgressTeamData>();\n    //public Direct: Array<ProgressDirectData> = new Array<ProgressDirectData>();\n    //public Indirect: Array<ProgressIndirectData> = new Array<ProgressIndirectData>();\n\n    @Required\n    public DirectUnit: Array<ProgressDirectIndirectData> = new Array<ProgressDirectIndirectData>();\n\n    @Required\n    public InDirectUnit: Array<ProgressDirectIndirectData> = new Array<ProgressDirectIndirectData>();\n}","import { PersonalObj } from \"./PersonalObj\";\nimport { TeamObj } from \"./TeamObj\";\nimport { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('ProgressYearObj')\nexport class ProgressYearObj {\n\n    @Required\n    public DataYear: number = 0;\n\n    @Required\n    public YesterdayPoint: number = 0;\n\n    @Required\n    public Personal: PersonalObj = new PersonalObj();\n\n    @Required\n    public Team: TeamObj = new TeamObj();\n}","export enum PersonalDataTimeBase {\n    Day = \"Day\",\n    Week = \"Week\",\n    Month = \"Month\",\n    Quarter = \"Quarter\",\n    Year = \"Year\",\n    Unknow = \"Unknow\"\n}","export enum PersonalDataType {\n    Actual = \"Actual\",\n    Goal = \"Goal\",\n    Unknow = \"Unknow\",\n}","import { PersonalDataTimeBase } from \"./Enum/PersonalDataTimeBase\";\nimport { PersonalDataType } from \"./Enum/PersonalDataType\";\n\nexport class ProgressPersonalData {\n    public DataType: PersonalDataType = PersonalDataType.Unknow;\n    public TimeBase: PersonalDataTimeBase = PersonalDataTimeBase.Unknow;\n    public Find: number = 0;\n    public Schedule: number = 0;\n    public Meet: number = 0;\n    public Submit: number = 0;\n    public Inforce: number = 0;\n    public FYFC: number = 0;\n\n    public FindConvertPointBase: number = 0;\n    public ScheduleConvertPointBase: number = 0;\n    public MeetConvertPointBase: number = 0;\n    public SubmitConvertPointBase: number = 0;\n    public InforceConvertPointBase: number = 0;\n}","export enum ProgressDataTeamValueType {\n    FYFC = \"FYFC\",\n    ANP = \"ANP\",\n    Manpower = \"Manpower\",\n    Recruitment = \"Recruitment\",\n    Unknow = \"unKnow\"\n}","import { ProgressDataTeamValueType } from \"./Enum/ProgressDataTeamValueType\";\nimport { PersonalDataTimeBase } from \"./Enum/PersonalDataTimeBase\";\nimport { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('ProgressTeamData')\nexport class ProgressTeamData {\n\n    @Required\n    public DataType: ProgressDataTeamValueType = ProgressDataTeamValueType.Unknow;\n\n    @Required\n    public TimeBase: PersonalDataTimeBase = PersonalDataTimeBase.Unknow;\n\n    @Required\n    public Goal: number = 0;\n\n    @Required\n    public Forecast: number = 0;\n\n    @Required\n    public Actual: number = 0;\n\n    @Required\n    public Shortfall: number = 0;\n}","import { PersonalDataTimeBase } from \"./Enum/PersonalDataTimeBase\";\nimport { ProgressDataTeamValueType } from \"./Enum/ProgressDataTeamValueType\";\nimport { ActivitiesType } from \"./Enum/ActivitiesType\";\nimport { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('ProgressDirectIndirectData')\nexport class ProgressDirectIndirectData {\n\n    @Required\n    public AgentID: string = \"\";\n\n    @Required\n    public AgentName: string = \"\";\n\n    @Required\n    public TeamName: string = \"\";\n\n    @Required\n    public JobGrade: string = \"\";\n\n    @Required\n    public Drilldown: boolean = false;\n\n    @Required\n    public TimeBase: PersonalDataTimeBase = PersonalDataTimeBase.Unknow;\n\n    @Required\n    public DataType: ProgressDataTeamValueType = ProgressDataTeamValueType.Unknow;\n\n    @Required\n    public AppUseMode: string = \"\";\n    //public Activities: ActivitiesType = ActivitiesType.Unknow;\n\n    @Required\n    public Activities: string = \"\";\n\n    @Required\n    public Goal: number = 0;\n\n    @Required\n    public Forecast: number = 0;\n\n    @Required\n    public Actual: number = 0;\n\n    @Required\n    public Shortfall: number = 0;\n}","export enum DirectUnitType {\n    DirectUnit = \"Direct\",\n    IndirectUnit = \"Indirect\",\n    Unknow = \"Unknow\"\n}","export enum Tag {\n    PersonalTag = 0,\n    TeamTag = 1,\n    UnknowTag = 2,\n}","import { Injectable, ErrorHandler } from '@angular/core';\nimport { APIDispatch, APIFactory, getProgressAPI, APPError, getYearConfigAPI, DeviceService, NotificationObject, NotificationMgr, Valid } from '@allianzSND/core';\nimport { Observable, from, of, Subject, BehaviorSubject } from 'rxjs';\n\nimport { ProgressYearConfig } from './model/ProgressYearConfig';\nimport { GetYearConfigurationAPI, GetTeamProgressDetailAPI, GetPersonalProgressAPI, GetTeamProgressMainAPI } from '../api';\n\nimport { ConfigurationObj } from './model/ConfigurationObj';\nimport { ProgressObj } from './model/ProgressObj';\nimport { ProgressYearObj } from './model/ProgressYearObj';\nimport { PersonalObj } from './model/PersonalObj';\nimport { TeamObj } from './model/TeamObj';\nimport { ProgressPersonalData } from './model/ProgessPersonalData';\nimport { ProgressTeamData } from './model/ProgressTeamData';\nimport { ProgressDirectIndirectData } from './model/ProgressDirectIndirectData';\nimport { DirectUnitType } from './model/Enum/DirectUnitType';\nimport { Tag } from './model/Enum/Tag';\nimport { NotificationUtils } from '@allianzSND/notification';\nimport { NumberUtils, GetOtherParameterAPI } from '@allianzSND/core';\nimport { ROLE } from '@allianzSND/goal';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ProgressService {\n\n  private _drillDownAgentIdObjList: Array<ProgressDirectIndirectData> = new Array<ProgressDirectIndirectData>();\n  private _drillDowmAgentIdSubject: Subject<ProgressDirectIndirectData> = new BehaviorSubject(this.lastAgentIdObj);\n\n\n  get AgentIdObjListLength() {\n    return this._drillDownAgentIdObjList.length;\n  }\n\n  get lastAgentIdObj() {\n    return (this._drillDownAgentIdObjList.length > 0) ? this._drillDownAgentIdObjList[this.AgentIdObjListLength - 1] : null;\n  }\n\n\n  //dashboard to progress page\n  private _currentTag: Tag = Tag.UnknowTag;\n\n  public GetCurrentNavigationTag() {\n    return this._currentTag;\n  }\n\n  public SetCurrentNavigationTag(tag: Tag) {\n    this._currentTag = tag;\n  }\n\n  constructor(\n    private dispatch: APIDispatch,\n    private APIFactory: APIFactory,\n    private deviceService: DeviceService,\n    private notificationMgr: NotificationMgr,\n    private notficationUtils: NotificationUtils,\n    private errorHandler: ErrorHandler) { }\n\n\n  //#region agent function\n\n  public InitDrillDownAgentIdObj() {\n    this._drillDownAgentIdObjList = new Array<ProgressDirectIndirectData>();\n    //this._drillDowmAgentIdSubject = new BehaviorSubject(this.lastAgentIdObj);\n  }\n\n  public AddDrillDownAgentIdObj(agentIdObj: ProgressDirectIndirectData) {\n    this._drillDownAgentIdObjList.push(agentIdObj);\n    this._drillDowmAgentIdSubject.next(this.lastAgentIdObj);\n  }\n\n  @Valid('ProgressDirectIndirectData')\n  public GetDrillDwonAgentIdObj(): Observable<ProgressDirectIndirectData> {\n    return this._drillDowmAgentIdSubject.asObservable();\n  }\n\n  public PopDrillDownAgentIdObj() {\n    this._drillDownAgentIdObjList.pop();\n    this._drillDowmAgentIdSubject.next(this.lastAgentIdObj);\n  }\n\n  @Valid('ProgressDirectIndirectData')\n  public GetDrillDownAgentIdObjRouterNameObj(): Observable<Array<ProgressDirectIndirectData>> {\n    let maxLength = this.AgentIdObjListLength;\n\n    if (maxLength >= 2) {\n      let arr: Array<ProgressDirectIndirectData> = new Array<ProgressDirectIndirectData>();\n      let data1 = this._drillDownAgentIdObjList[maxLength - 2];\n      let data2 = this._drillDownAgentIdObjList[maxLength - 1];\n      arr.push(data1);\n      arr.push(data2);\n      return of(arr);\n    }\n    else {\n      let arr: Array<ProgressDirectIndirectData> = new Array<ProgressDirectIndirectData>();\n      let data1 = this._drillDownAgentIdObjList[maxLength - 1];\n      arr.push(data1);\n      return of(arr);\n    }\n  }\n\n  //#endregion agent function\n\n  //#region Role\n\n  private _currentRole:ROLE;\n  private _currentRoleSubject:Subject<ROLE> = new BehaviorSubject(this._currentRole);\n\n  public SetCurrentRole(val:ROLE) {\n    this._currentRole = val;\n    this._currentRoleSubject.next(this._currentRole);\n  }\n\n  public GetCurrentRole():Observable<ROLE> {\n    return this._currentRoleSubject.asObservable();\n  }\n\n  public GetIsTeam():boolean {\n    let r = this._currentRole;\n    switch(r) {\n      case ROLE.AGENT: \n        return false;\n      case ROLE.AGENTLEADER:\n      case ROLE.ZONEHEAD:\n      case ROLE.CAO:\n        return true;\n    }\n  }\n\n  public GetIsAgent():boolean {\n    return (this._currentRole == ROLE.AGENT) ? true : false;\n  }\n\n  public GetIsSupervisor():boolean {\n    return (this._currentRole == ROLE.CAO) ? true : false;\n  }\n\n  public GetIsManaget():boolean {\n    return (this._currentRole == ROLE.ZONEHEAD) ? true : false;\n  }\n\n  public GetIsAgentLeader():boolean {\n    return (this._currentRole == ROLE.AGENTLEADER) ? true : false;\n  }\n\n  public GetIsShowSwitchTab():boolean {\n    return (this._currentRole == ROLE.AGENTLEADER) ? true : false; \n  }\n\n  public GetIsShowTeamTab(): boolean {\n    return (this._currentRole == ROLE.AGENT) ? false : true;\n  }\n\n  //#endregion\n\n\n  //#region progress main function\n\n  //get progress data by restful return yaml\n  public GetProgressDataByRestful(agentID: string): Observable<any> {\n\n    try {\n      let getProgressAPI: getProgressAPI = <getProgressAPI>this.APIFactory.getAPI(\"getProgress\");\n      getProgressAPI.setAgentID(agentID);\n      return from(this.dispatch.dispatch(getProgressAPI).toPromise());\n    }\n    catch (error) {\n      this.errorHandler.handleError(new APPError('F00209', 'get Progress Data By Restful fail!' + error.message));\n      console.debug(\"getProgressDataByRestful agent id: \", agentID);\n    }\n\n    return of(null);\n  }\n\n  //get progress data by SQLite return yaml\n  @Valid('ProgressObj')\n  public GetProgressDataBySQLite(years: Array<number>): Observable<ProgressObj> {\n\n    try {\n      //put it together to yaml\n      let getPersonalProgressAPI: GetPersonalProgressAPI = <GetPersonalProgressAPI>this.APIFactory.getAPI('getPersonalProgress');\n      let getTeamProgressDetailAPI: GetTeamProgressDetailAPI = <GetTeamProgressDetailAPI>this.APIFactory.getAPI('getTeamProgressDetail');\n      let getTeamProgressMainAPI: GetTeamProgressMainAPI = <GetTeamProgressMainAPI>this.APIFactory.getAPI('getTeamProgressMain');\n      let getOtherParameterAPI: GetOtherParameterAPI = <GetOtherParameterAPI>this.APIFactory.getAPI('getOtherParameter');\n\n      return from(\n        Promise.all(\n          [getPersonalProgressAPI, getTeamProgressDetailAPI, getTeamProgressMainAPI, getOtherParameterAPI]\n            .map(api => this.dispatch.dispatch(api).toPromise())\n        ).then(([ProgressPersonalRawData, ProgressTeamDetailRawData, ProgressTeamMainRawData, OtherParameterRawData]) => {\n          console.debug(\"getProgressDataBySQLite ProgressPersonalRawData: \", ProgressPersonalRawData);//o\n          console.debug(\"getProgressDataBySQLite ProgressTeamDetailRawData: \", ProgressTeamDetailRawData);\n          console.debug(\"getProgressDataBySQLite ProgressTeamMainRawData:\", ProgressTeamMainRawData);\n          console.debug(\"getProgressDataBySQLite OtherParameterRawData:\", OtherParameterRawData);\n\n          //new way\n          let progressObjBOSS: ProgressObj = new ProgressObj();\n          let progressYearObjList: Array<ProgressYearObj> = new Array<ProgressYearObj>();\n          let personalObjList: Array<PersonalObj> = new Array<PersonalObj>();\n          let teamObjList: Array<TeamObj> = new Array<TeamObj>();\n\n          let progressPersonalDataList: Array<Array<ProgressPersonalData>> = new Array<Array<ProgressPersonalData>>();\n          let progressTeamMainDataList: Array<Array<ProgressTeamData>> = new Array<Array<ProgressTeamData>>();\n          let progressTeamDirectDataList: Array<Array<ProgressDirectIndirectData>> = new Array<Array<ProgressDirectIndirectData>>();\n          let progressTeamIndirectDataList: Array<Array<ProgressDirectIndirectData>> = new Array<Array<ProgressDirectIndirectData>>();\n\n          let yesterdayPointsList: Array<number>;\n\n          //get yesterdayPoint     \n          yesterdayPointsList = this._GetYesterdayPoints(years, OtherParameterRawData);\n          console.debug(\"getProgressDataBySQLite yesterdayPointsList: \", yesterdayPointsList);\n\n          // get personal data\n          progressPersonalDataList = this._GetProgressPersonalData(years, ProgressPersonalRawData);\n          console.debug(\"getProgressDataBySQLite progressPersonalDataList: \", progressPersonalDataList);\n\n          for (let i = 0; i < years.length; i++) {\n            let obj: PersonalObj = new PersonalObj();\n            obj.Values = progressPersonalDataList[i];\n            personalObjList.push(obj);\n          }\n\n          //get team main data\n          progressTeamMainDataList = this._GetProgressTeamMainData(years, ProgressTeamMainRawData);\n          console.debug(\"getProgressDataBySQLite progressTeamMainDataList: \", progressTeamMainDataList);\n\n          //direct indirect\n          progressTeamDirectDataList = this._GetProgressTeamDirectIndirectData(years, ProgressTeamDetailRawData, DirectUnitType.DirectUnit);\n          progressTeamIndirectDataList = this._GetProgressTeamDirectIndirectData(years, ProgressTeamDetailRawData, DirectUnitType.IndirectUnit);\n\n          console.debug(\"getProgressDataBySQLite progressTeamDirectDataList: \", progressTeamDirectDataList);\n          console.debug(\"getProgressDataBySQLite progressTeamIndirectDataList: \", progressTeamIndirectDataList);\n\n          //get team data\n          for (let i = 0; i < years.length; i++) {\n            let obj: TeamObj = new TeamObj();\n            obj.Values = (progressTeamMainDataList[i]) ? progressTeamMainDataList[i] : null;\n            obj.DirectUnit = (progressTeamDirectDataList[i]) ? progressTeamDirectDataList[i] : null;\n            obj.InDirectUnit = (progressTeamIndirectDataList[i]) ? progressTeamIndirectDataList[i] : null;\n\n            teamObjList.push(obj);\n          }\n\n\n          //get progress Year data\n          for (let i = 0; i < years.length; i++) {\n            let obj: ProgressYearObj = new ProgressYearObj();\n            obj.DataYear = years[i];\n            obj.YesterdayPoint = yesterdayPointsList[i];\n            obj.Personal = personalObjList[i];\n            obj.Team = teamObjList[i];\n            progressYearObjList.push(obj);\n          }\n\n\n          //get progressBOSS obj      \n          for (let i = 0; i < years.length; i++) {\n            progressObjBOSS.Progress[i] = progressYearObjList[i];\n          };\n\n\n          console.debug(\"getProgressDataBySQLite personalObjList: \", personalObjList);\n          console.debug(\"getProgressDataBySQLite teamObjList: \", teamObjList);\n          console.debug(\"getProgressDataBySQLite progressYearObjList: \", progressYearObjList);\n          console.debug(\"getProgressDataBySQLite progressObjBOSS: \", progressObjBOSS);\n\n          return progressObjBOSS;\n        })\n      );\n    }\n    catch (error) {\n      this.errorHandler.handleError(new APPError('F00210', 'get Progress Data By SQLite fail!' + error.message));\n      console.debug(\"OMG! getProgressDataBySQLite fail: \");\n    }\n\n    return of(null);\n  }\n\n  //#endregion progress main function\n\n  //#region private function\n\n  private _GetYesterdayPoints(years: Array<number>, otherParameterRawData: any): Array<number> {\n    let ansArr: Array<number> = new Array<number>();\n\n    console.debug(\"_GetYesterdayPoints years: \", years);\n    console.debug(\"_GetYesterdayPoints otherParameterRawData: \", otherParameterRawData);\n\n    try {\n      for (let i = 0; i < years.length; i++) {\n        let yesterdayPoint = otherParameterRawData[\"Body\"].filter(x => x.MappingID == \"YesterdayPoint\"\n          && x.DataYear == years[i]);//0\n\n        console.debug(\"_GetYesterdayPoints yesterdayPoint: \", yesterdayPoint);\n        console.debug(\"_GetYesterdayPoints yesterdayPoint[0]: \", yesterdayPoint[0]);\n        console.debug(\"_GetYesterdayPoints yesterdayPoint[0]set: \", yesterdayPoint[0].SetValue);\n        ansArr.push(yesterdayPoint[0].SetValue);\n      }\n      return ansArr;\n    }\n    catch (error) {\n      this.errorHandler.handleError(new APPError('F00211', 'get yesterday points fail!' + error.message));\n    }\n    return null;\n  }\n\n\n  private _GetProgressTeamDirectIndirectData(years: Array<number>, progressTeamDetailRawData: any, unitType: DirectUnitType): Array<Array<ProgressDirectIndirectData>> {\n\n    let ansArr: Array<Array<ProgressDirectIndirectData>> = new Array<Array<ProgressDirectIndirectData>>();\n\n    console.debug(\"_getProgressTeamDirectIndirectData years: \", years);\n    console.debug(\"_getProgressTeamDirectIndirectData progressTeamDetailRawData: \", progressTeamDetailRawData);\n\n    try {\n      if (progressTeamDetailRawData) {\n        let bodyData = progressTeamDetailRawData[\"Body\"];\n\n        let rawDataByYearArr: Array<any> = new Array<any>();\n\n        for (let i = 0; i < years.length; i++) {\n          let yearData = bodyData.filter(x => x.DataYear == years[i] && x.DirectUnitType == unitType);\n          if (yearData)\n            rawDataByYearArr.push(yearData);\n        }\n\n        console.debug(\"_getProgressTeamDirectIndirectData rawDataByYearArr: \", rawDataByYearArr);\n\n        for (let i = 0; i < rawDataByYearArr.length; i++) {\n          let arr: Array<ProgressDirectIndirectData> = new Array<ProgressDirectIndirectData>();\n          for (let j = 0; j < rawDataByYearArr[i].length; j++) {\n\n            let tmp = rawDataByYearArr[i][j];\n\n            let data: ProgressDirectIndirectData = new ProgressDirectIndirectData();\n            data.AgentID = tmp.AgentID;\n            data.AgentName = tmp.AgentName;\n            data.TeamName = tmp.TeamName;\n            data.JobGrade = tmp.JobGrade;\n            data.DataType = tmp.DataType;\n            data.TimeBase = tmp.TimeBase;\n            data.AppUseMode = tmp.AppUseMode;\n            data.Activities = tmp.Activities;\n            data.Drilldown = tmp.Drilldown == \"Y\";//true\n            data.Actual = tmp.Actual;\n            data.Goal = tmp.Goal;\n            data.Forecast = tmp.Forecast;\n            data.Shortfall = tmp.Shortfall;\n            arr.push(data);\n          }\n          ansArr.push(arr);\n        }\n        return ansArr;\n      }\n      else { throw \"data null\"; }\n    }\n    catch (error) {\n      this.errorHandler.handleError(new APPError('F00212', 'get Progress Team Direct Indirect Data fail!' + error.message));\n    }\n    return null;\n  }\n\n  private _GetProgressTeamMainData(years: Array<number>, progressTeamMainRawData: any): Array<Array<ProgressTeamData>> {\n    let ansArr: Array<Array<ProgressTeamData>> = new Array<Array<ProgressTeamData>>();\n\n    console.debug(\"_getProgressTeamMainData years: \", years);\n    console.debug(\"_getProgressTeamMainData progressTeamMainRawData: \", progressTeamMainRawData);\n\n    try {\n      if (progressTeamMainRawData) {\n        let bodyData = progressTeamMainRawData[\"Body\"];\n        let rawDataByYearArr: Array<any> = new Array<any>();\n\n        for (let i = 0; i < years.length; i++) {\n          let yearData = bodyData.filter(x => x.DataYear == years[i]);\n          if (yearData)\n            rawDataByYearArr.push(yearData);\n        }\n\n        console.debug(\"_getProgressTeamMainData rawDataByYearArr: \", rawDataByYearArr);\n\n        for (let i = 0; i < rawDataByYearArr.length; i++) {\n          let arr: Array<ProgressTeamData> = new Array<ProgressTeamData>();\n          for (let j = 0; j < rawDataByYearArr[i].length; j++) {\n\n            let tmp = rawDataByYearArr[i][j];\n\n            let data: ProgressTeamData = new ProgressTeamData();\n            data.DataType = tmp.DataType;\n            data.TimeBase = tmp.TimeBase;\n            data.Goal = tmp.Goal;\n            data.Forecast = tmp.Forecast;\n            data.Actual = tmp.Actual;\n            data.Shortfall = tmp.Shortfall;\n            arr.push(data);\n          }\n          ansArr.push(arr);\n        }\n        return ansArr;\n      }\n      else { throw \"data null\"; }\n    }\n    catch (error) {\n      this.errorHandler.handleError(new APPError('F00213', 'Get Progress Team Main Data fail!' + error.message));\n    }\n\n    return null;\n  }\n\n  private _GetProgressPersonalData(years: Array<number>, progressPersonalRawData: any): Array<Array<ProgressPersonalData>> {\n    let ansArr: Array<Array<ProgressPersonalData>> = new Array<Array<ProgressPersonalData>>();\n\n    console.debug(\"_getProgressPersonalData years: \", years);\n    console.debug(\"_getProgressPersonalData progressPersonalRawData: \", progressPersonalRawData);\n\n    try {\n      if (progressPersonalRawData) {\n\n        let bodyData = progressPersonalRawData[\"Body\"];\n        let rawDataByYearArr: Array<any> = new Array<any>();\n\n        for (let i = 0; i < years.length; i++) {\n          let yearData = bodyData.filter(x => x.DataYear == years[i]);\n          if (yearData)\n            rawDataByYearArr.push(yearData);\n        }\n\n        console.debug(\"_getProgressPersonalData rawDataByYearArr: \", rawDataByYearArr);\n\n        for (let i = 0; i < rawDataByYearArr.length; i++) {\n          let arr: Array<ProgressPersonalData> = new Array<ProgressPersonalData>();\n          for (let j = 0; j < rawDataByYearArr[i].length; j++) {\n\n            let tmp = rawDataByYearArr[i][j];\n            let data: ProgressPersonalData = new ProgressPersonalData();\n            data.DataType = tmp.DataType;\n            data.TimeBase = tmp.TimeBase;\n            data.Find = tmp.Find;\n            data.Schedule = tmp.Schedule;\n            data.Meet = tmp.Meet;\n            data.Submit = tmp.Submit;\n            data.Inforce = tmp.Inforce;\n            data.FYFC = tmp.FYFC;\n            arr.push(data);\n          }\n          ansArr.push(arr);\n        }\n        return ansArr;\n      }\n      else { throw \"data null\"; }\n    }\n    catch (error) {\n      this.errorHandler.handleError(new APPError('F00214', 'Get Progress Personal Data fail!' + error.message));\n    }\n    return null;\n  }\n\n  //#endregion private function\n\n  //#region year config function\n\n  //get year config \n  @Valid('ConfigurationObj')\n  public GetYearConfigDataBySQLite(): Observable<ConfigurationObj> {\n    try {\n      let getYearConfigurationAPI: GetYearConfigurationAPI = <GetYearConfigurationAPI>this.APIFactory.getAPI('getYearConfiguration');\n      return from(this.dispatch.dispatch(getYearConfigurationAPI).toPromise().then(resp => {\n\n        console.debug(\"getYearConfig resp: \", resp);\n\n        // convert to yaml\n        let dataBady = resp[\"Body\"];\n        console.debug(\"getYearConfig dataBady: \", dataBady);\n\n        let configObj: ConfigurationObj = new ConfigurationObj();\n        let arr: Array<ProgressYearConfig> = new Array<ProgressYearConfig>();\n\n        for (let i = 0; i < dataBady.length; i++) {\n          let data: ProgressYearConfig = new ProgressYearConfig();\n          let dataConfig = dataBady[i];\n\n          data.DataYear = dataConfig.DataYear;\n          data.IsCurrent = dataConfig.IsCurrent === \"Y\";\n          data.WorkingMonth = dataConfig.WorkingMonth;\n          data.QuarterStartMonth = dataConfig.QuarterStartMonth;\n          data.QuarterEndMonth = dataConfig.QuarterEndMonth;\n          data.ProgressDayPointsLimit = dataConfig.ProgressDayPointsLimit;\n          data.ProgressBarControlMode = dataConfig.ProgressBarControlMode;\n          data.MonthQuantityOfYear = dataConfig.MonthQuantityOfYear;\n\n          data.FindConvertPointBase = dataConfig.FindConvertPointBase;\n          data.ScheduleConvertPointBase = dataConfig.ScheduleConvertPointBase;\n          data.MeetConvertPointBase = dataConfig.MeetConvertPointBase;\n          data.SubmitConvertPointBase = dataConfig.SubmitConvertPointBase;\n          data.InforceConvertPointBase = dataConfig.InforceConvertPointBase;\n\n          data.PerformanceSettlementMonth = dataConfig.PerformanceSettlementMonth;\n\n          arr.push(data);\n        }\n\n        configObj.Configurations = arr;\n\n\n        console.debug(\"configObj: \", configObj);\n        console.debug(\"configObj: \", JSON.stringify(configObj));\n        console.debug(\"got SQlite year config resp: \", resp);\n        console.debug(\"got SQlite year config resp json: \", JSON.stringify(resp));\n\n        return configObj;\n      }));\n    }\n    catch (error) {\n      this.errorHandler.handleError(new APPError('F00215', 'OMG! get Year Config SQLite fail!' + error.message));\n    }\n\n    return of(null);\n  }\n\n\n  public GetYearConfigDataByRestful(agentID: string): Observable<any> {\n    try {\n      let yearConfigAPI: getYearConfigAPI = <getYearConfigAPI>this.APIFactory.getAPI('getYearConfig');\n      yearConfigAPI.setAgentID(agentID);\n      return from(this.dispatch.dispatch(yearConfigAPI).toPromise());\n    }\n    catch (error) {\n      this.errorHandler.handleError(new APPError('F00209', 'get Progress Data By Restful fail!' + error.message));\n      console.debug(\"getProgressDataByRestful agent id: \", agentID);\n    }\n    return of(null);\n  }\n\n\n  // public GetYearConfigDataByRestful(agentID: string): Observable<any> {\n  //   try {\n  //     let yearConfigAPI: getYearConfigAPI = <getYearConfigAPI>this.APIFactory.getAPI('getYearConfig');\n  //     yearConfigAPI.setAgentID(agentID);\n  //     return from(this.dispatch.dispatch(yearConfigAPI).toPromise());\n  //   }\n  //   catch (error) {\n  //     this.errorHandler.handleError(new APPError('F00209', 'get Progress Data By Restful fail!' + error.message));\n  //     console.debug(\"getProgressDataByRestful agent id: \", agentID);\n  //   }\n  //   return of(null);\n  // }\n\n  //#endregion year config function\n\n  //#region funtion calculate\n\n  public ShowDesh(num: number, sign:string = \"--\"): string {\n    if(!NumberUtils.isNumber(num)) {\n      return sign;\n    }\n    return (num <= -1) ? sign : num.toString();\n  }\n\n  public GetPoints(num: number, muti: number): string {\n    let ans = (num * muti);\n    return (ans <= -1) ? \"--\" : ans.toString();\n  }\n\n\n  //if timebase == day ==> ProgressPersonalData.find one day \n  //if timebase == week ==> ProgressPersonalData.find week(week sum)that meanin if web weeksum have 3 day data\n  public GetTotalPoints(data: ProgressPersonalData): number {\n\n    //check data == -1?\n    let checkData: ProgressPersonalData = new ProgressPersonalData();\n    checkData.Find = (data.Find == -1) ? 0 : data.Find;\n    checkData.Schedule = (data.Schedule == -1) ? 0 : data.Schedule;\n    checkData.Meet = (data.Meet == -1) ? 0 : data.Meet;\n    checkData.Submit = (data.Submit == -1) ? 0 : data.Submit;\n    checkData.Inforce = (data.Inforce == -1) ? 0 : data.Inforce;\n\n    let sum = (checkData.Find * data.FindConvertPointBase) +\n      (checkData.Schedule * data.ScheduleConvertPointBase) +\n      (checkData.Meet * data.MeetConvertPointBase) +\n      (checkData.Submit * data.SubmitConvertPointBase) +\n      (checkData.Inforce * data.InforceConvertPointBase);\n\n    return sum;\n  }\n\n\n  public GetPercentageCircleValue(data: ProgressPersonalData, limit: number, isWeek: boolean): string {\n\n    console.debug(\"_getPercentageCircleValue: \", data);\n\n    //check data == -1?\n    let checkData: ProgressPersonalData = new ProgressPersonalData();\n    checkData.DataType = data.DataType;\n    checkData.TimeBase = data.TimeBase;\n    checkData.Find = (data.Find == -1) ? 0 : data.Find;\n    checkData.Schedule = (data.Schedule == -1) ? 0 : data.Schedule;\n    checkData.Meet = (data.Meet == -1) ? 0 : data.Meet;\n    checkData.Submit = (data.Submit == -1) ? 0 : data.Submit;\n    checkData.Inforce = (data.Inforce == -1) ? 0 : data.Inforce;\n\n    let sum = (checkData.Find * data.FindConvertPointBase) +\n      (checkData.Schedule * data.ScheduleConvertPointBase) +\n      (checkData.Meet * data.MeetConvertPointBase) +\n      (checkData.Submit * data.SubmitConvertPointBase) +\n      (checkData.Inforce * data.InforceConvertPointBase);\n\n    let max = (isWeek == true) ? limit * 7 : limit;\n    let ans = (sum / max);\n\n    console.debug(\"_getPercentageCircleValue ans max sum: \", ans, max, sum);\n\n    if (ans == 0 || !NumberUtils.isNumber(ans)) return \"0\";\n    return (ans >= 1) ? \"1\" : ans.toFixed(2);\n  }\n\n  public GetPercentage(numerator: number, denominator: number): number {\n\n    if(numerator <= 0 || denominator <= 0) return 0;\n\n    let ans = Math.round((numerator / denominator) * 100);\n    return (ans) ? ans : 0;\n  }\n\n  public GetPercentageLength(numerator: number, denominator: number, maxLength: number, maxBase: number): number {\n\n    if(numerator <= 0 || denominator <= 0) return 0;\n\n    let ans = Math.round((numerator / denominator) * 100) / maxBase;\n\n    return (ans >= maxLength) ? maxLength : ans ;\n  }\n\n  //#endregion\n\n}\n","import { PerformanceType } from \"./Enum/PerformanceType\";\nimport { ActualValueDataType } from \"./Enum/ActualValueDataType\";\nimport { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('ProgressActualValue')\nexport class ProgressActualValue {\n\n    @Required\n    private _clientID: string;\n\n    @Required\n    private _dataYear: number;\n\n    @Required\n    private _performanceType: PerformanceType;\n\n    @Required\n    private _dataType: ActualValueDataType;\n\n    @Required\n    private _month: number;\n\n    @Required\n    private _value: number;\n\n    constructor(id:string, year:number, performanceType: PerformanceType, dataType: ActualValueDataType, month: number, value: number) {\n        this._clientID = id;\n        this._dataYear = year;\n        this._performanceType = performanceType;\n        this._dataType = dataType;\n        this._month = month;\n        this._value = value;\n    }\n\n    //client id\n    get ClientID() {\n        return this._clientID;\n    }\n\n    set ClientID(value:string) {\n        this._clientID = value;\n    }\n\n    //data year\n    get DataYear() {\n        return this._dataYear;\n    }\n\n    set DataYear(value:number) {\n        this._dataYear = value;\n    }\n\n    //performance type\n    get PerformanceType() {\n        return this._performanceType;\n    }\n\n    set PerformanceType(value:PerformanceType) {\n        this._performanceType = value;\n    }\n\n    //data type\n    get DataType() {\n        return this._dataType;\n    }\n\n    set DataType(value:ActualValueDataType) {\n        this._dataType = value;\n    }\n\n    //month\n    get Month() {\n        return this._month;\n    }\n\n    set Month(value:number) {\n        this._month = value;\n    }\n\n    //value\n    get Value() {\n        return this._value;\n    }\n\n    set Value(value:number) {\n        this._value = value;\n    }\n\n}\n\n\n","import { PersonalDataTimeBase } from \"./Enum/PersonalDataTimeBase\";\nimport { PersonalDataType } from \"./Enum/PersonalDataType\";\nimport { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('PersonalData')\nexport class PersonalData {\n\n    @Required\n    private _dataYear: number;\n\n    @Required\n    private _timeBase: PersonalDataTimeBase;\n\n    @Required\n    private _dataType: PersonalDataType;\n\n    @Required\n    private _find: number;\n\n    @Required\n    private _schedule: number;\n\n    @Required\n    private _meet: number;\n\n    @Required\n    private _submit: number;\n\n    @Required\n    private _inforce: number;\n\n    constructor(dataYear:number, \n                timeBase:PersonalDataTimeBase, \n                dataType:PersonalDataType, \n                find:number, \n                schedule: number, \n                meet: number, \n                submit: number, \n                inforce: number)\n                {\n                    this._dataYear = dataYear;\n                    this._timeBase = timeBase;\n                    this._dataType = dataType;\n                    this._find = find;\n                    this._schedule = schedule;\n                    this._meet = meet;\n                    this._submit = submit;\n                    this._inforce = inforce;\n                }\n    \n    //#region Getter setter\n    //year\n    get DataYear() {\n        return this._dataYear;\n    }\n\n    set DataTear(year: number) {\n        this._dataYear =  year;\n    }\n\n    // time base\n    get TimeBase() {\n        return this._timeBase;\n    }\n\n    set TimeBase(time: PersonalDataTimeBase) {\n        this._timeBase = time;\n    }\n\n    //type\n    get DataType() {\n        return this._dataType;\n    }\n\n    set DataTypet(type: PersonalDataType) {\n        this._dataType = type;\n    }\n\n    //find\n    get Find() {\n        return this._find;\n    }\n\n    set Find(num: number) {\n        this._find = num;\n    }\n\n    //schedule\n    get Schedule() {\n        return this._schedule;\n    }\n\n    set Schedule(num: number) {\n        this._schedule = num;\n    }\n\n    //meet\n    get Meet() {\n        return this._meet;\n    }\n\n    set Meet(num: number) {\n        this._meet = num;\n    }\n\n    //submit\n    get Submit() {\n        return this._submit;\n    }\n\n    set Submit(num: number) {\n        this._submit = num ;\n    }\n\n    //inforce\n    get Inforce() {\n        return this._inforce;\n    }\n    \n    set Inforce(num: number) {\n        this._inforce = num;\n    }\n\n    //#endregion\n\n\n    getTotalCount() : number {\n       let sum =  this.Find + this.Schedule + this.Meet + this.Submit + this.Inforce;\n       return sum;\n    }\n\n    getTotalPoints() : number {\n        let sum = this.getFindPoints() + this.getSchedulePoints() + this.getMeetPoints() + this.getSubmitPoints() + this.getInforcePoints();\n        return sum;\n    }\n\n    getDifferentPercentage(numerator: number, denominator: number) : number {\n        return Math.round((numerator / denominator) * 100 );\n    }\n\n\n    /*\n    // 1 1 2 10 2   f /s /m /su /i\n    getFindPoints(dot:number) : number {\n        return this.Find * dot ;\n    }\n\n    getSchedulePoints(dot:number) : number {\n        return this.Schedule  * dot;\n    }\n\n    getMeetPoints(dot:number) : number {\n        return this.Meet * dot;\n    }\n\n    getSubmitPoints(dot:number) : number {\n        return this.Submit * dot;\n    }\n\n    getInforcePoints(dot:number) : number {\n        return this.Inforce  * dot;\n    }\n\n    /*\n    getDifferentPercentage(numerator: number, denominator: number, fixedNum: number) : string {\n        return ( ( numerator / denominator ) * 100 ).toFixed(fixedNum);\n    }\n    */\n\n    \n\n    getFindPoints() : number {\n        return this.Find * 1 ;\n    }\n\n    getSchedulePoints() : number {\n        return this.Schedule  * 1;\n    }\n\n    getMeetPoints() : number {\n        return this.Meet * 2;\n    }\n\n    getSubmitPoints() : number {\n        return this.Submit * 10;\n    }\n\n    getInforcePoints() : number {\n        return this.Inforce  * 2;\n    }\n    \n}\n\n\n\n\n","import { PersonalDataType } from \"./Enum/PersonalDataType\";\nimport { PersonalDataTimeBase } from \"./Enum/PersonalDataTimeBase\";\nimport { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('PersonalDataState')\nexport class PersonalDataState {  \n\n    @Required\n    private _dataYear: number;\n\n    @Required\n    private _timeBase: PersonalDataTimeBase;\n\n    @Required\n    private _dataType: PersonalDataType;\n\n    constructor(){\n        this._dataYear = -1;\n        this._timeBase = PersonalDataTimeBase.Unknow;\n        this._dataType = PersonalDataType.Unknow;\n    }\n\n    get DataYear() {\n        return this._dataYear;\n    }\n\n    set DataYear(year: number) {\n        this._dataYear =  year;\n    }\n\n    // time base\n    get TimeBase() {\n        return this._timeBase;\n    }\n\n    set TimeBase(time: PersonalDataTimeBase) {\n        this._timeBase = time;\n    }\n\n    //type\n    get DataType() {\n        return this._dataType;\n    }\n\n    set DataType(type: PersonalDataType) {\n        this._dataType = type;\n    }\n}","export enum ProgressBarControlModeType {\n    TWMode = \"TWMode\",\n    Unknow = \"Unknow\"\n}","import { ProgressBarControlModeType } from \"./Enum/ProgressBarControlModeType\";\nimport { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('ProgressBarControlData')\nexport class ProgressBarControlData {\n\n    @Required\n    private _barLengthMaxValue: number = 1.5;\n\n    public get barLengthMaxValue() {\n        return this._barLengthMaxValue;\n    }\n\n    public set barLengthMaxValue(value: number) {\n        this._barLengthMaxValue = value;\n    }\n\n    public GetConfigMin(type: ProgressBarControlModeType): number {\n        switch (type) {\n            case ProgressBarControlModeType.TWMode:\n                return 70;\n            case ProgressBarControlModeType.Unknow:\n                return 0; \n            default:\n                return 0;\n        }\n    }\n\n    public GetConfigMax(type: ProgressBarControlModeType): number {\n        switch (type) {\n            case ProgressBarControlModeType.TWMode:\n                return 100;\n            case ProgressBarControlModeType.Unknow:\n                return 0;\n            default:\n                return 0;\n        }\n    }\n\n}","import { ProgressDataTeamValueType } from \"./Enum/ProgressDataTeamValueType\";\nimport { ActivitiesType } from \"./Enum/ActivitiesType\";\nimport { PersonalDataTimeBase } from \"./Enum/PersonalDataTimeBase\";\n\nexport class ProgressDirectData {\n    public AgentID: string = \"\";\n    public AgentName: string = \"\";\n    public JobGrade: string = \"\";\n    public Drilldown: boolean = false;\n    public TimeBase: PersonalDataTimeBase = PersonalDataTimeBase.Unknow;\n    public DataType: ProgressDataTeamValueType = ProgressDataTeamValueType.Unknow;\n    //public Activities: ActivitiesType = ActivitiesType.Unknow;\n    public Activities: string = \"\";\n    public Goal: number = 0;\n    public Forecast: number = 0;\n    public Actual: number = 0;\n    public Shortfall: number = 0;\n}\n\n","import { ProgressDataTeamValueType } from \"./Enum/ProgressDataTeamValueType\";\nimport { PersonalDataTimeBase } from \"./Enum/PersonalDataTimeBase\";\nimport { ActivitiesType } from \"./Enum/ActivitiesType\";\nimport { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('ProgressIndirectData')\nexport class ProgressIndirectData {\n\n    @Required\n    public AgentID: string = \"\";\n        \n    @Required\n    public AgentName: string = \"\";\n        \n    @Required\n    public JobGrade: string = \"\";\n        \n    @Required\n    public Drilldown: boolean = false;\n        \n    @Required\n    public TimeBase: PersonalDataTimeBase = PersonalDataTimeBase.Unknow;\n\n    @Required    \n    public DataType: ProgressDataTeamValueType = ProgressDataTeamValueType.Unknow;\n    //public Activities: ActivitiesType = ActivitiesType.Unknow;\n        \n    @Required \n    public Activities: string = \"\";\n        \n    @Required \n    public Goal: number = 0;\n        \n    @Required \n    public Forecast: number = 0;\n        \n    @Required \n    public Actual: number = 0;\n        \n    @Required \n    public Shortfall: number = 0; \n}","import { PersonalDataTimeBase } from \"./Enum/PersonalDataTimeBase\";\nimport { ProgressDataTeamValueType } from \"./Enum/ProgressDataTeamValueType\";\nimport { Bean, Required } from \"@allianzSND/core\";\n\n@Bean('TeamDataState')\nexport class TeamDataState {  \n\n    @Required\n    private _dataYear: number;\n\n    @Required\n    private _timeBase: PersonalDataTimeBase;\n\n    @Required\n    private _teamValueType: ProgressDataTeamValueType;\n\n    constructor() {\n        this._dataYear = -1;\n        this._timeBase = PersonalDataTimeBase.Unknow;\n        this._teamValueType = ProgressDataTeamValueType.FYFC;\n    }\n\n    get DataYear() {\n        return this._dataYear;\n    }\n\n    set DataYear(year: number) {\n        this._dataYear =  year;\n    }\n\n    // time base\n    get TimeBase() {\n        return this._timeBase;\n    }\n\n    set TimeBase(time: PersonalDataTimeBase) {\n        this._timeBase = time;\n    }\n\n    //team value type\n    get TeamValueType() {\n        return this._teamValueType;\n    }\n\n    set TeamValueType(type:ProgressDataTeamValueType) {\n        this._teamValueType = type;\n    }\n\n}","import { TranslateService} from '@allianzSND/core';\n\nexport class ProgressListContentClass {\n\n    //save and set translate variables\n    private _translateVariable = null;\n\n    // week day\n    public WeekText: string = \"\";\n    public TodayText: string = \"\";\n\n    //Find Schedule Meet Submit Inforce\n    public FindNameText: string = \"\";\n    public FindContentText: string = \"\";\n    public FindUnitText: string = \"\";\n\n    public ScheduleNameText: string = \"\";\n    public ScheduleContentText: string = \"\";\n    public ScheduleUnitText: string = \"\";\n\n    public MeetNameText: string = \"\";\n    public MeetContentText: string = \"\";\n    public MeetUnitText: string = \"\";\n\n    public SubmitNameText: string = \"\";\n    public SubmitContentText: string = \"\";\n    public SubmitUnitText: string = \"\";\n\n    public InforceNameText: string = \"\";\n    public InforceContentText: string = \"\";\n    public InforceUnitText: string = \"\";\n\n    public AlmostMadeItMsg: string = \"\";\n    public CongratulationsMsg: string = \"\";\n    public WellDoneMsg: string = \"\";\n    public GreatJobMsg: string = \"\";\n\n    //units\n    public PointsText: string = \"\";\n\n\n    constructor(private translateService: TranslateService) {\n       \n        this._setTranslateVariable();\n        this.WeekText = this._translateWithVariable('Week');\n        this.TodayText = this._translateWithVariable('Today');\n\n        this.FindNameText = this._translateWithVariable('Find');\n        this.FindContentText = this._translateWithVariable('Find_Subtitle');\n        this.FindUnitText = this._translateWithVariable('People');\n        \n        this.ScheduleNameText = this._translateWithVariable('Schedule');\n        this.ScheduleContentText = this._translateWithVariable('Schedule_Subtitle');\n        this.ScheduleUnitText = this._translateWithVariable('Times');\n\n        this.MeetNameText = this._translateWithVariable('Meet');\n        this.MeetContentText = this._translateWithVariable('Meet_Subtitle');\n        this.MeetUnitText = this._translateWithVariable('Times');\n\n        this.SubmitNameText = this._translateWithVariable('Submit');\n        this.SubmitContentText = this._translateWithVariable('Submit_Subtitle');\n        this.SubmitUnitText = this._translateWithVariable('Times');\n\n        this.InforceNameText = this._translateWithVariable('Inforce');\n        this.InforceContentText = this._translateWithVariable('Inforce_Subtitle');\n        this.InforceUnitText = this._translateWithVariable('Times');\n\n        this.PointsText = this._translateWithVariable('Points');\n\n        this.CongratulationsMsg = this._translateWithVariable('Progress_Congratulations_Message');\n        this.AlmostMadeItMsg = this._translateWithVariable('Progress_Almost_Made_It_Message');\n        this.WellDoneMsg = this._translateWithVariable('Progress_Well_Done_Message');\n        this.GreatJobMsg = this._translateWithVariable('Progress_Great_Job_Message');\n    }\n\n\n    //set translate variables\n    private _setTranslateVariable() {\n\n        this._translateVariable = {\n            \"gratsPoints\": 20,\n            \"wellDownPoints\": 10\n\n        }\n    }\n\n\n    private _translateWithVariable(mappingID: string) {\n        return this.translateService.translateWithVariable(mappingID, this._translateVariable);\n    }\n}","import { TranslateService } from '@allianzSND/core';\nexport class ProgressContentClass {\n\n    //save and set translate variables\n    private _translateVariable = null;\n\n    //personal team\n    public PersonalText: string = \"\";\n    public TeamText: string = \"\";\n    public MonthText: string = \"\";\n    public QuarterText: string = \"\";\n    public YearText:string = \"\";\n    \n    public BackToProgressBtnText: string = \"\";\n\n    constructor(private translateService: TranslateService) {\n        this._setTranslateVariable();\n        this.PersonalText = this._translateWithVariable('Personal');\n        this.TeamText = this._translateWithVariable('Team');\n        this.MonthText = this._translateWithVariable('Month');\n        this.QuarterText = this._translateWithVariable('Quarter');\n        this.YearText = this._translateWithVariable('Year');\n\n        this.BackToProgressBtnText = this._translateWithVariable('Back_To_Progress');\n    }\n\n    //set translate variables\n    private _setTranslateVariable() {\n\n        this._translateVariable = {\n            // \"gratsPoints\": 20,\n        }\n    }\n\n    private _translateWithVariable(mappingID: string) {\n        return this.translateService.translateWithVariable(mappingID, this._translateVariable);\n    }\n}","import { TranslateService } from '@allianzSND/core';\n\nexport class ProgressActivityListContentClass {\n\n    //save and set translate variables\n    private _translateVariable = null;\n\n    public ActivitiesText: string = \"\";\n    public AchieveText: string = \"\";\n\n    public FindText: string = \"\";\n    public FindContentText: string = \"\";\n\n    public ScheduleText: string = \"\";\n    public ScheduleContentText: string = \"\";\n\n    public MeetPresentText: string = \"\";\n    public MeetPresentContentText: string = \"\";\n\n    public SubmitText: string = \"\";\n    public SubmitContentText: string = \"\";\n\n    public InforceText: string = \"\";\n    public InforceContentText: string = \"\";\n    \n    public ActualGoalText: string = \"\";\n    public ActualPlanText: string = \"\";\n\n    constructor(private translateService: TranslateService) {\n        this._setTranslateVariable();\n\n        this.ActivitiesText = this._translateWithVariable('Activities');\n        this.AchieveText = this._translateWithVariable('Achieve');\n\n        this.ActualGoalText = this._translateWithVariable('Actual_Goal');\n        this.ActualPlanText = this._translateWithVariable('Actual_Plan');\n\n        this.FindText = this._translateWithVariable('Find');\n        this.FindContentText = this._translateWithVariable('Find_Subtitle');\n        \n        this.ScheduleText = this._translateWithVariable('Schedule');\n        this.ScheduleContentText = this._translateWithVariable('Schedule_Subtitle');\n\n        this.MeetPresentText = this._translateWithVariable('Meet_Present');\n        this.MeetPresentContentText = this._translateWithVariable('Meet_Subtitle');\n\n        this.SubmitText = this._translateWithVariable('Submit');\n        this.SubmitContentText = this._translateWithVariable('Submit_Subtitle');\n\n        this.InforceText = this._translateWithVariable('Inforce');\n        this.InforceContentText = this._translateWithVariable('Inforce_Subtitle');\n\n    }\n\n\n    //set translate variables\n    private _setTranslateVariable() {\n\n        this._translateVariable = {\n            // \"gratsPoints\": 20,\n        }\n    }\n\n    private _translateWithVariable(mappingID: string) {\n        return this.translateService.translateWithVariable(mappingID, this._translateVariable);\n    }\n}","import { TranslateService } from '@allianzSND/core';\n\nexport class ProgressMonthlyContentClass {\n\n    //save and set translate variables\n    private _translateVariable = null;\n\n    public MonthlyPlanFYFCTitleText: string = \"\";\n    public MonthText: string = \"\";\n    public PlanText: string = \"\";\n    public ActualText: string = \"\";\n\n    public TotalForecastTitle: string = \"\";\n    public TotalYTDActualTitle: string = \"\";\n\n    constructor(private translateService: TranslateService) {\n        this._setTranslateVariable();\n\n        this.MonthlyPlanFYFCTitleText = this._translateWithVariable('Monthly_Plan_FYFC_Title');\n        this.MonthText = this._translateWithVariable('Month');\n        this.ActualText = this._translateWithVariable('Actual');\n        this.PlanText = this._translateWithVariable('Plan');\n        this.TotalForecastTitle = this._translateWithVariable('Total_Forecast');\n        this.TotalYTDActualTitle = this._translateWithVariable('Total_YTD_Actual');\n    }\n\n    //set translate variables\n    private _setTranslateVariable() {\n\n        this._translateVariable = {\n            // \"gratsPoints\": 20,\n        }\n    }\n\n    private _translateWithVariable(mappingID: string) {\n        return this.translateService.translateWithVariable(mappingID, this._translateVariable);\n    }\n}","import { TranslateService } from '@allianzSND/core';\n\nexport class ProgressTeamContentClass {\n\n    //save and set translate variables\n    private _translateVariable = null;\n\n    public MonthText: string = \"\";\n    public QuarterText: string = \"\";\n    public YearText: string = \"\";\n    public ManpowerText: string = \"\";\n    public RecruitmentText: string = \"\";\n\n    constructor(private translateService: TranslateService) {\n        this._setTranslateVariable();\n        this.MonthText = this._translateWithVariable('Month');\n        this.QuarterText = this._translateWithVariable('Quarter');\n        this.YearText = this._translateWithVariable('Year');\n        this.ManpowerText = this._translateWithVariable('Manpower');\n        this.RecruitmentText = this._translateWithVariable('Recruitment');\n    }\n\n    //set translate variables\n    private _setTranslateVariable() {\n\n        this._translateVariable = {\n            // \"gratsPoints\": 20,\n        }\n    }\n\n    private _translateWithVariable(mappingID: string) {\n        return this.translateService.translateWithVariable(mappingID, this._translateVariable);\n    }\n}","import { TranslateService } from '@allianzSND/core';\n\nexport class ProgressTeamDirectContentClass {\n\n    //save and set translate variables\n    private _translateVariable = null;\n\n    public DirectUnitTitle: string = \"\";\n    public ActivitiesText: string = \"\";\n    public GoalText: string = \"\";\n    public ForecastText: string = \"\";\n    public ActualText: string = \"\";\n    public ShortfallText: string = \"\";\n\n\n    constructor(private translateService: TranslateService) {\n        this._setTranslateVariable();\n\n        this.DirectUnitTitle = this._translateWithVariable('Direct_Unit_Title');\n        this.ActivitiesText = this._translateWithVariable('Activities');\n        this.ActualText = this._translateWithVariable('Actual');\n        this.ForecastText = this._translateWithVariable('Forecast');\n        this.GoalText = this._translateWithVariable('Goal');\n        this.ShortfallText = this._translateWithVariable('Shortfall');\n    }\n\n    //set translate variables\n    private _setTranslateVariable() {\n\n        this._translateVariable = {\n            // \"gratsPoints\": 20,\n        }\n    }\n\n    private _translateWithVariable(mappingID: string) {\n        return this.translateService.translateWithVariable(mappingID, this._translateVariable);\n    }\n}","import { TranslateService } from '@allianzSND/core';\n\nexport class ProgressTeamIndirectContentClass {\n    \n    //save and set translate variables\n    private _translateVariable = null;\n\n    public IndirectUnitTitle: string = \"\";\n    public GoalText: string = \"\";\n    public ForecastText: string = \"\";\n    public ActualText: string = \"\";\n    public ShortfallText: string = \"\";\n\n\n    constructor(private translateService: TranslateService) {\n        this._setTranslateVariable();\n\n        this.IndirectUnitTitle = this._translateWithVariable('Indirect_Unit_Title');\n        this.GoalText = this._translateWithVariable('Goal');\n        this.ForecastText = this._translateWithVariable('Forecast');\n        this.ActualText = this._translateWithVariable('Actual');\n        this.ShortfallText = this._translateWithVariable('Shortfall');\n    }\n\n    //set translate variables\n    private _setTranslateVariable() {\n\n        this._translateVariable = {\n            // \"gratsPoints\": 20,\n        }\n    }\n\n    private _translateWithVariable(mappingID: string) {\n        return this.translateService.translateWithVariable(mappingID, this._translateVariable);\n    }\n}","import { TranslateService, Language } from '@allianzSND/core';\n\nexport class ProgressTeamMainContentClass {\n\n    //save and set translate variables\n    private _translateVariable = null;\n    private _language: Language = new Language();\n\n    public AgencyTitle:string = \"\";\n    public AllZoneTitle:string = \"\";\n    public GoalText: string = \"\";\n    public ForecastText: string = \"\";\n    public ActualText: string = \"\";\n    public ManpowerText: string = \"\";\n    public ShortfallText: string = \"\";\n    public RecruitmentText: string = \"\";\n\n\n\n    constructor(private translateService: TranslateService) {\n        this._setTranslateVariable();\n\n        this.AgencyTitle = this._translateWithVariable('Agency_Title');\n        this.AllZoneTitle = this._translateWithVariable('All_Zone_Title');\n        this.ManpowerText = this._translateWithVariable(this._language.progressManpower);\n        this.RecruitmentText = this._translateWithVariable(this._language.progressRecruitment);\n\n        this.GoalText = this._translateWithVariable(this._language.progressGoal);\n        this.ActualText = this._translateWithVariable(this._language.progressActual);\n        this.ForecastText = this._translateWithVariable(this._language.progressForecast);\n        this.ShortfallText = this._translateWithVariable(this._language.progressShortfall);\n    }\n\n    //set translate variables\n    private _setTranslateVariable() {\n\n        this._translateVariable = {\n            // \"gratsPoints\": 20,\n        }\n    }\n\n    private _translateWithVariable(mappingID: string) {\n        return this.translateService.translateWithVariable(mappingID, this._translateVariable);\n    }\n}","import { TranslateService } from '@allianzSND/core';\n\nexport class ProgressHeadContentClass {\n    \n    //save and set translate variables\n    private _translateVariable = null;\n\n    //personal team\n    public MonthText: string = \"\";\n    public QuarterText: string = \"\";\n    public YearText:string = \"\";\n    public ManpowerText: string = \"\";\n    public RecruitmentText: string = \"\";\n\n    public GoalText: string = \"\";\n    public ForecastText: string = \"\";\n    public ActualText: string = \"\";\n    public ShortfallText: string = \"\";\n\n    constructor(private translateService: TranslateService) {\n        this._setTranslateVariable();\n        this.MonthText = this._translateWithVariable('Month');\n        this.QuarterText = this._translateWithVariable('Quarter');\n        this.YearText = this._translateWithVariable('Year');\n        this.ManpowerText = this._translateWithVariable('Manpower');\n        this.RecruitmentText = this._translateWithVariable('Recruitment');\n\n        this.GoalText = this._translateWithVariable('Goal');\n        this.ForecastText = this._translateWithVariable('Forecast');\n        this.ActualText = this._translateWithVariable('Actual');\n        this.ShortfallText = this._translateWithVariable('Shortfall');\n    }\n\n    //set translate variables\n    private _setTranslateVariable() {\n\n        this._translateVariable = {\n            // \"gratsPoints\": 20,\n        }\n    }\n\n    private _translateWithVariable(mappingID: string) {\n        return this.translateService.translateWithVariable(mappingID, this._translateVariable);\n    }\n}","import { TranslateService } from '@allianzSND/core';\nexport class InfoContentClass {\n        //save and set translate variables\n        private _translateVariable = null;\n\n        //progress head table info\n        public MonthText: string = \"\";\n        public QuarterText: string = \"\";\n        public YearText:string = \"\";\n        public ForecastText: string = \"\";\n        public RecruitmentText: string = \"\";\n        public InformationDescriptionText: string = \"\";\n\n        public InfoTitle:string = \"\";\n        public InfoMonthDetailText:string = \"\";\n        public InfoQuarterDetailText:string = \"\";\n        public InfoYearDetailText: string = \"\";\n        public InfoForecastRecruitmentDetailText: string = \"\";\n        public InfoAllAmountCountsByMillionText:string = \"\";\n\n        //progress-personal-progressbar-list info\n        public InfoHowToReadThisTitle: string = \"\";\n        public InfoConversionRateText: string = \"\";\n        public InfoConversionRateDetailText: string = \"\";\n\n        //progress-team-direct-unit info\n        public InfoActivityLabelText: string = \"\";\n        public InfoRedMeanText: string = \"\";\n        public InfoGreyMeanText: string = \"\";\n        public InfoIfAnActivity1Text: string = \"\";\n        public InfoIfAnActivity2Text: string = \"\";\n\n        public InfoToFindText: string = \"\";\n        public InfoTryTo1Text: string = \"\";\n        public InfoTryTo2Text: string = \"\";\n        public InfoTryTo3Text: string = \"\";\n\n        public InfoMoreActive1Text: string = \"\";\n        public InfoMoreActive2Text: string = \"\";\n        public InfoMoreActive3Text: string = \"\";\n        public InfoMoreActive4Text: string = \"\";\n\n        public InfoTryHard1Text: string = \"\";\n        public InfoTryHard2Text: string = \"\";\n        public InfoTryHard3Text: string = \"\";\n\n        public InfoHighQuality1Text: string = \"\";\n        public InfoHighQuality2Text: string = \"\";\n\n        \n    \n        constructor(private translateService: TranslateService) {\n            this._setTranslateVariable();\n            \n            //progress head table info\n            this.MonthText = this._translateWithVariable('Month');\n            this.QuarterText = this._translateWithVariable('Quarter');\n            this.YearText = this._translateWithVariable('Year');\n            this.ForecastText = this._translateWithVariable('Forecast');\n            this.RecruitmentText = this._translateWithVariable('Recruitment');\n\n            this.InformationDescriptionText = this._translateWithVariable('Info_Information_Description');\n\n            this.InfoTitle = this._translateWithVariable('Info_Title');\n            this.InfoMonthDetailText = this._translateWithVariable('Info_Month_Detail');\n            this.InfoQuarterDetailText = this._translateWithVariable('Info_Quarter_Detail');\n            this.InfoYearDetailText = this._translateWithVariable('Info_Year_Detail');\n            this.InfoForecastRecruitmentDetailText = this._translateWithVariable('Info_Forecast_Recruitment_Detail');\n\n            //progress-personal-progressbar-list info\n            this.InfoHowToReadThisTitle = this._translateWithVariable('Info_How_To_Read_This');\n            this.InfoConversionRateText = this._translateWithVariable('Info_Conversion_Rate');\n            this.InfoConversionRateDetailText = this._translateWithVariable('Info_Conversion_Rate_Detail');\n\n            //progress-team-direct-unit\n            this.InfoActivityLabelText = this._translateWithVariable('Info_Activity_Label');\n\n            this.InfoRedMeanText = this._translateWithVariable('Info_Red_Mean');\n            this.InfoGreyMeanText = this._translateWithVariable('Info_Grey_Mean');\n            this.InfoIfAnActivity1Text = this._translateWithVariable('Info_If_An_Activity_1');\n            this.InfoIfAnActivity2Text = this._translateWithVariable('Info_If_An_Activity_2');\n    \n            this.InfoToFindText = this._translateWithVariable('Info_To_Find');\n            this.InfoTryTo1Text = this._translateWithVariable('Info_Try_To_1');\n            this.InfoTryTo2Text = this._translateWithVariable('Info_Try_To_2');\n            this.InfoTryTo3Text = this._translateWithVariable('Info_Try_To_3');\n    \n            this.InfoMoreActive1Text = this._translateWithVariable('Info_More_Active_1');\n            this.InfoMoreActive2Text = this._translateWithVariable('Info_More_Active_2');\n            this.InfoMoreActive3Text = this._translateWithVariable('Info_More_Active_3');\n            this.InfoMoreActive4Text = this._translateWithVariable('Info_More_Active_4');\n    \n            this.InfoTryHard1Text = this._translateWithVariable('Info_Try_Hard_1');\n            this.InfoTryHard2Text = this._translateWithVariable('Info_Try_Hard_2');\n            this.InfoTryHard3Text = this._translateWithVariable('Info_Try_Hard_3');\n    \n            this.InfoHighQuality1Text = this._translateWithVariable('Info_High_Quality_1');\n            this.InfoHighQuality2Text = this._translateWithVariable('Info_High_Quality_2');\n\n            this.InfoAllAmountCountsByMillionText = this._translateWithVariable(\"Info_All_Amount_Counts_By_Million\");\n\n        }\n    \n        //set translate variables\n        private _setTranslateVariable() {\n    \n            this._translateVariable = {\n                // \"gratsPoints\": 20,\n            }\n        }\n    \n        private _translateWithVariable(mappingID: string) {\n            return this.translateService.translateWithVariable(mappingID, this._translateVariable);\n        }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n\nimport { CoreModule } from '@allianzSND/core';\nimport { UIModule } from '@allianzSND/ui';\n@NgModule({\n  imports: [\n    CoreModule,\n    UIModule,\n    CommonModule\n  ],\n  declarations: [\n\n   ],\n  exports: [\n  ]\n})\nexport class ProgressModule { }\n","import { IAPI } from \"@allianzSND/core\";\nimport { IMockAPI } from \"@allianzSND/core\";\nimport {ISQLiteAPI} from '@allianzSND/core';\nimport {Observable, from, of} from 'rxjs';\nimport {DaoFactory} from '@allianzSND/core';\nimport {ClientCustomDao} from '@allianzSND/core';\nimport {EqualRestriction} from '@allianzSND/core';\nimport { ISearchTableByField } from \"@allianzSND/core\";\n\nexport class GetPersonalProgressAPI implements IAPI, IMockAPI, ISQLiteAPI, ISearchTableByField {\n\n    private _year: number = -1;\n\n    private _daoFactory: DaoFactory;\n    constructor(daoFactory: DaoFactory) {\n        this._daoFactory = daoFactory;\n    }\n\n    SetYear(value: number): void {\n        this._year = value;\n    }\n\n    getAPIName(): string {\n        return 'getPersonalProgress';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/getPersonalProgressMock.json';\n    }\n\n    executeSQL(): Observable<any> {\n        console.debug(\"SQLite Start \");\n\n        let defaultDao = this._daoFactory.getDefaultDao();\n        console.debug(\"SQLite defaultDao: \", defaultDao);\n\n        let tableObj = this._daoFactory.getDefaultTable(\"TW_LH_SD_VW_Personal_Progress\");\n        console.debug(\"SQLite tableObj: \", tableObj);\n\n        if(defaultDao != undefined && tableObj != undefined) {\n            return from(defaultDao.queryByTable(tableObj).toPromise().then(resp => {\n                console.debug(\"SQLite getPersonalProgress resp: \", resp);\n                console.debug(\"SQLite getPersonalProgress json resp: \", JSON.stringify(resp));\n                \n                return resp;\n            }));\n        }\n        else {\n            of(false);\n            console.debug(\"SQLite failed\");\n        }\n    }\n\n}","import { IAPI } from \"@allianzSND/core\";\nimport { IMockAPI } from \"@allianzSND/core\";\nimport {ISQLiteAPI} from '@allianzSND/core';\nimport {Observable, from} from 'rxjs';\nimport {DaoFactory} from '@allianzSND/core';\nimport {ClientCustomDao} from '@allianzSND/core';\nimport {EqualRestriction} from '@allianzSND/core';\n\nimport { PersonalDataType } from  '../service/model/Enum/PersonalDataType';\nimport { PersonalDataTimeBase } from  '../service/model/Enum/PersonalDataTimeBase';\n\nexport class GetProgressActualValueAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    private _clientID: number;\n    private _daoFactory: DaoFactory;\n    private _personalDataType: PersonalDataType;\n    private _personalDataTimeBase: PersonalDataTimeBase;\n    private _dataYear: number;\n\n    set ClientId(id:number) {\n        this._clientID = id;\n    }\n\n    set DataType(type:PersonalDataType) {\n        this._personalDataType = type;\n    }\n\n    set TimeBase(time:PersonalDataTimeBase) {\n        this._personalDataTimeBase = time;\n    }\n\n    setDataYear(year: number) {\n      this._dataYear = year;\n    } \n    /*\n    constructor(DaoFactory) {\n        this._daoFactory = DaoFactory;\n    }\n    */\n\n    constructor(){};\n\n    getAPIName(): string {\n        return 'getProgressActualValue';\n    }\n\n    getMockPath(): string {\n        //alert(\"personal progress mock data\");\n        if(this._dataYear == 2019) {\n          return './assets/mock/getProgressActualValue_2019.json';\n        }\n        else if(this._dataYear == 2020) {\n          return './assets/mock/getProgressActualValue_2020.json';\n        }\n        else {\n          //todo throw error\n          console.warn('dataYear not match mock path');\n          return '';\n        }\n    }\n\n\n    executeSQL(): Observable<any> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /*\n    executeSQL(): Observable<any> {\n        return Observable.create((observer) => {\n          let calendarObj = this._daoFactory.getDefaultTable(\"TW_LH_SD_Calendar\");\n          let dao = this._daoFactory.getDefaultDao();\n          if (calendarObj != undefined && dao != undefined) {\n            \n            dao = new ClientCustomDao(dao);\n            calendarObj.addRestriction(new EqualRestriction('ClientID',[this._clientID]));\n            dao.queryByTable(calendarObj).subscribe((resp) => {\n              observer.next(resp);\n              observer.complete();\n            });\n          } else {\n            observer.next(false);\n            observer.complete();\n          }\n        });\n      }\n      */\n\n}","import { IAPI } from \"@allianzSND/core\";\nimport { IMockAPI } from \"@allianzSND/core\";\nimport {ISQLiteAPI} from '@allianzSND/core';\nimport {Observable, from} from 'rxjs';\nimport {DaoFactory} from '@allianzSND/core';\nimport {ClientCustomDao} from '@allianzSND/core';\nimport {EqualRestriction} from '@allianzSND/core';\n\nimport { PersonalDataType } from  '../service/model/Enum/PersonalDataType';\nimport { PersonalDataTimeBase } from  '../service/model/Enum/PersonalDataTimeBase';\n\nexport class GetProgressDataActualValueAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    private _clientID: number;\n    private _daoFactory: DaoFactory;\n    private _personalDataType: PersonalDataType;\n    private _personalDataTimeBase: PersonalDataTimeBase;\n    private _searchYear: number;\n\n    public get SearchYear() {\n        return this._searchYear;\n    }\n\n    public set SearchYear(value:number) {\n        this._searchYear = value;\n    }\n\n    set ClientId(id:number) {\n        this._clientID = id;\n    }\n\n    set DataType(type:PersonalDataType) {\n        this._personalDataType = type;\n    }\n\n    set TimeBase(time:PersonalDataTimeBase) {\n        this._personalDataTimeBase = time;\n    }\n\n    \n    constructor(daoFactory:DaoFactory) {\n        this._daoFactory = daoFactory;\n    }\n\n    getAPIName(): string {\n        return 'getProgressDataActualValue';\n    }\n\n    getMockPath(): string {\n        //alert(\"personal progress mock data\");\n        return './assets/mock/getProgressDataActualValueMock.json';\n    }\n\n\n    executeSQL(): Observable<any> {\n\n        console.debug(\"SQLite actual start \");\n        let defaultDao = this._daoFactory.getDefaultDao();\n\n        console.debug(\"SQLite actual defaultDao: \", defaultDao);\n        let progressActualObj = this._daoFactory.getDefaultTable(\"TW_LH_SD_VW_Actual_Value\");\n\n        console.debug(\"SQLite actual progressActualObj: \", progressActualObj);\n        if(defaultDao != undefined && progressActualObj != undefined) {\n            return from(defaultDao.queryByTable(progressActualObj).toPromise().then(resp => {\n                console.debug(\"SQLite actual data api resp: \", resp);\n            }).then(resp => {\n                let data = resp[\"Body\"];\n                let filterData = data.filter(x => x.DataYear == 2019);\n                let filterData2 = data.filter(x => x.DataYear == 2020);\n                console.debug(\"SQLite actual test date body: \", data);\n                console.debug(\"SQLite actual test filterData: \", filterData);\n                console.debug(\"SQLite actual test filterData2: \", filterData2);\n\n                let arr = [];\n                arr.push(filterData);\n                arr.push(filterData2);\n                console.debug(\"SQLite actual test arr: \", arr);\n\n                return arr;\n            }).then(resp => {\n                let data = resp;\n                let progressActualObj1 = \n                {\n                    \"DataYear\": \"2019\",\n                    \"TimeBase\": \"Month\",\n                    \"Values\":[],\n                };\n\n                let progressActualObj2 = \n                {\n                    \"DataYear\": \"2020\",\n                    \"TimeBase\": \"Month\",\n                    \"Values\":[]\n                };\n                \n                progressActualObj1.Values.push(data[0]);\n                progressActualObj2.Values.push(data[1]);\n\n                let progressActualObjArr = [];\n                \n                progressActualObjArr.push(progressActualObj1);\n                progressActualObjArr.push(progressActualObj2);\n\n                console.debug(\"SQLite actual test progressActualObj123: \", progressActualObjArr);\n                return progressActualObjArr;\n            }).then(resp => {\n                let data = resp;\n                console.debug(\"SQLite actual test resp progressActualObj123 : \", resp);\n                console.debug(\"SQLite actual test data progressActualObj123 : \", data);\n                let defaultProgressActualObj = \n                {\n                    \"lastUpdateTime\": \"2019-06-19\",\n                    \"Actual\":[],\n                };\n\n                defaultProgressActualObj.Actual.push(data[0]);\n                defaultProgressActualObj.Actual.push(data[1]);\n\n                console.debug(\"SQLite actual test defaultProgressActualObj : \", defaultProgressActualObj);\n                return defaultProgressActualObj;\n            }));\n        }\n        else {\n            console.debug(\"SQLite actual data fail......\");\n        }\n\n        //throw new Error(\"Method not implemented.\");\n    }\n\n    /*\n    executeSQL(): Observable<any> {\n        console.log('customer Detail:execute SQL');\n        let defaultObj = {\n            \"ClientID\": \"\",\n            \"LastName\": \"\",\n            \"FirstName\": \"\",\n            \"Occupation\": \"\",\n            \"Company\": \"\",\n            \"BirthdayYear\": \"\",\n            \"BirthdayMonth\": \"\",\n            \"BirthdayDate\": \"\",\n            \"Birthday\": null,\n            \"AgeRange\": null,\n            \"Gender\": null,\n            \"Income\": null,\n            \"Source\": null,\n            \"Marriage\": null,\n            \"Children\": null,\n            \"Familiarity\": null,\n            \"RecentStatus\": \"\",\n            \"MANPA\": \"\",\n            \"ContactFrequancy\": \"\",\n            \"Possibility\": \"\",\n            \"IsFollow\": \"N\",\n            \"DataSource\": \"APP\",\n            \"tel\": [],\n            \"email\": [],\n            \"address\": []\n        }\n        if (!this._id || (this._id.length == 0)) {\n            //Add\n            let resp = new SQLiteResponse({\n                \"isSuccess\": true\n            }, [defaultObj]);\n            return of(resp);\n        }\n        else {\n            let customerObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_VW_Customer\");\n            let defaultDao = this.daoFactory.getDefaultDao();\n            if (customerObj != undefined && defaultDao != undefined) {\n                let dao = new ClientCustomDao(defaultDao);\n                customerObj.addRestriction(new EqualRestriction(\"ClientID\", [this._id]));\n                return from(dao.queryByTable(customerObj).toPromise().then(resp => {\n                    let customer = resp;\n                    let clientID = customer['Body'][0].ClientID;\n                    let customerTelObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Tel\");\n                    if (customerTelObj) {\n                        customerTelObj = (<SQLiteTable>customerTelObj);\n                        customerTelObj.addRestriction(new EqualRestriction('CustomerClientID', [clientID]));\n                        return dao.queryByTable(customerTelObj).toPromise().then((resp) => {\n                            let telList = resp['Body'];\n                            customer['Body'][0]['tel'] = telList;\n                            return { customer, clientID };\n                        });\n                    }\n                    else\n                        return { customer, clientID };\n                }).then(({ customer, clientID }) => {\n                    let customerEmailObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Email\");\n                    if (customerEmailObj) {\n                        customerEmailObj = (<SQLiteTable>customerEmailObj);\n                        customerEmailObj.addRestriction(new EqualRestriction('CustomerClientID', [clientID]));\n\n                        return dao.queryByTable(customerEmailObj).toPromise().then((resp) => {\n                            let telList = resp['Body'];\n                            customer['Body'][0]['email'] = telList;\n                            return { customer, clientID };\n                        });\n                    }\n                    else\n                        return { customer, clientID };\n\n                }).then(({ customer, clientID }) => {\n                    let customerAddrObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Address\");\n                    if (customerAddrObj) {\n                        customerAddrObj = (<SQLiteTable>customerAddrObj);\n                        customerAddrObj.addRestriction(new EqualRestriction('CustomerClientID', [clientID]));\n\n                        return dao.queryByTable(customerAddrObj).toPromise().then((resp) => {\n                            let telList = resp['Body'];\n                            customer['Body'][0]['address'] = telList;\n                            return customer;\n                        });\n                    }\n                    else\n                        return customer;\n                }).then(customer => {\n                    //change birthDay to Date Object\n                    customer['Body'][0]['Birthday'] = new Date(customer['Body'][0]['BirthdayYear'], parseInt(customer['Body'][0]['BirthdayMonth']) - 1, customer['Body'][0]['BirthdayDate']);\n                    return customer;\n                }))\n            }\n            else {\n                return of(false);\n            }\n        }\n    }\n    */\n\n    /*\n    executeSQL(): Observable<any> {\n        return Observable.create((observer) => {\n          let calendarObj = this._daoFactory.getDefaultTable(\"TW_LH_SD_Calendar\");\n          let dao = this._daoFactory.getDefaultDao();\n          if (calendarObj != undefined && dao != undefined) {\n            \n            dao = new ClientCustomDao(dao);\n            calendarObj.addRestriction(new EqualRestriction('ClientID',[this._clientID]));\n            dao.queryByTable(calendarObj).subscribe((resp) => {\n              observer.next(resp);\n              observer.complete();\n            });\n          } else {\n            observer.next(false);\n            observer.complete();\n          }\n        });\n      }\n\n\n\n\n\n\n      */\n\n}","import { IAPI } from \"@allianzSND/core\";\nimport { IMockAPI } from \"@allianzSND/core\";\nimport {ISQLiteAPI} from '@allianzSND/core';\nimport {Observable, from} from 'rxjs';\nimport {DaoFactory} from '@allianzSND/core';\nimport {ClientCustomDao} from '@allianzSND/core';\nimport {EqualRestriction} from '@allianzSND/core';\n\nimport { PersonalDataType } from  '../service/model/Enum/PersonalDataType';\nimport { PersonalDataTimeBase } from  '../service/model/Enum/PersonalDataTimeBase';\n\nexport class GetProgressDataAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    private _clientID: number = 0;\n    private _daoFactory: DaoFactory;\n    private _personalDataType: PersonalDataType = PersonalDataType.Actual;\n    private _personalDataTimeBase: PersonalDataTimeBase = PersonalDataTimeBase.Day;\n    private _searchYear: number = 0;\n\n    //condition year\n    public set SearchYear(value:number) {\n        this._searchYear = value;\n    }\n\n    public get SearchYear() {\n        return this._searchYear;\n    }\n\n    //condition client id\n    public set SearchClientId(id:number) {\n        this._clientID = id;\n    }\n\n    public get SearchCLientId() {\n        return this._clientID;\n    }\n\n    //condition data type\n    public set SearchDataType(type:PersonalDataType) {\n        this._personalDataType = type;\n    }\n\n    public get SearchDataType() {\n        return this._personalDataType;\n    }\n\n\n    //condition time base\n    public set SearchTimeBase(time:PersonalDataTimeBase) {\n        this._personalDataTimeBase = time;\n    }\n\n    public get SearchTimeBase() {\n        return this._personalDataTimeBase;\n    }\n\n    \n    constructor(daoFactory:DaoFactory) {\n        this._daoFactory = daoFactory;\n    }\n\n    getAPIName(): string {\n        return 'getProgressData';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/getProgressDataMock.json';\n    }\n\n\n    executeSQL(): Observable<any> {\n\n        console.debug(\"SQLite progress start \");\n\n        /*\n        let defaultProgressObj = \n        {\n            \"lastUpdateTime\": \"\",\n            \"Progress\":[],\n        };\n        */\n\n        /*\n        // Progress [progressObj, progressObj] *2\n        let progressObj:\n        {\n            \"DataYear\": \"\",\n            \"YesterdayPoint\": \"\",\n            \"Values\":[]\n        };\n        */\n\n\n        /*\n        // progressObj.Value[] * n\n        let progresValueObj =\n        {\n            \"DataType\":\"\",\n            \"TimeBase\": \"\",\n            \"FYFC\": 0,\n            \"Find\": 0,\n            \"Schedule\": 0,\n            \"Meet\": 0,\n            \"Submit\": 0,\n            \"Inforce\": 0\n        };\n        */\n\n\n        // test class to obj type\n\n\n        let defaultDao = this._daoFactory.getDefaultDao();\n        console.debug(\"SQLite progress defaultDao: \", defaultDao);\n\n        let progressTableObj = this._daoFactory.getDefaultTable(\"TW_LH_SD_VW_Personal_Progress\"); \n        console.debug(\"SQLite progress progressTableObj: \", progressTableObj);\n\n        if(progressTableObj != undefined && defaultDao != undefined) {\n            return from(defaultDao.queryByTable(progressTableObj).toPromise().then(resp => {\n                console.debug(\"SQLite progress data api resp: \", resp);\n                return resp;\n            }).then(resp => {\n                let data = resp[\"Body\"];\n                let filterData = data.filter(x => x.DataYear == 2019);\n                let filterData2 = data.filter(x => x.DataYear == 2020);\n                console.debug(\"SQLite progress test date body: \", data);\n                console.debug(\"SQLite progress test filterData: \", filterData);\n                console.debug(\"SQLite progress test filterData2: \", filterData2);\n\n                let arr = [];\n                arr.push(filterData);\n                arr.push(filterData2);\n                console.debug(\"SQLite progress test arr: \", arr);\n\n                return arr;\n            }).then(resp => {\n\n                let data = resp;\n\n                let progressObj1 = \n                {\n                    \"DataYear\": \"2019\",\n                    \"YesterdayPoint\": \"20\",\n                    \"Personal\":{Values:[]},\n                };\n\n                let progressObj2 = \n                {\n                    \"DataYear\": \"2020\",\n                    \"YesterdayPoint\": \"20\",\n                    \"Personal\":{Values:[]},\n                };\n                \n                progressObj1.Personal.Values.push(data[0]);\n                progressObj2.Personal.Values.push(data[1]);\n\n                let progressObjArr = [];\n                \n                progressObjArr.push(progressObj1);\n                progressObjArr.push(progressObj2);\n\n                console.debug(\"SQLite progress test progressObj123: \", progressObjArr);\n                return progressObjArr;\n\n            }).then(resp => {\n                let data = resp;\n                console.debug(\"SQLite progress test resp progressObj123 : \", resp);\n                console.debug(\"SQLite progress test data progressObj123 : \", data);\n                let defaultProgressObj = \n                {\n                    \"lastUpdateTime\": \"2019-06-19\",\n                    \"Progress\":[],\n                };\n\n                defaultProgressObj.Progress.push(data[0]);\n                defaultProgressObj.Progress.push(data[1]);\n\n                console.debug(\"SQLite progress test defaultProgressObj123 : \", defaultProgressObj);\n                return defaultProgressObj;\n            }));\n        }\n        else {\n            console.debug(\"SQLite progress fail.....\");\n        }\n    }\n    \n                    /*\n                    let customer = resp;\n                    let clientID = customer['Body'][0].ClientID;\n                    let customerTelObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Tel\");\n                    if (customerTelObj) {\n                        customerTelObj = (<SQLiteTable>customerTelObj);\n                        customerTelObj.addRestriction(new EqualRestriction('CustomerClientID', [clientID]));\n                        return dao.queryByTable(customerTelObj).toPromise().then((resp) => {\n                            let telList = resp['Body'];\n                            customer['Body'][0]['tel'] = telList;\n                            return { customer, clientID };\n                        });\n                    }\n                    else\n                        return { customer, clientID };\n                    */\n\n\n\n\n\n\n\n\n\n    /*\n    executeSQL(): Observable<any> {\n        console.log('customer Detail:execute SQL');\n        let defaultObj = {\n            \"ClientID\": \"\",\n            \"LastName\": \"\",\n            \"FirstName\": \"\",\n            \"Occupation\": \"\",\n            \"Company\": \"\",\n            \"BirthdayYear\": \"\",\n            \"BirthdayMonth\": \"\",\n            \"BirthdayDate\": \"\",\n            \"Birthday\": null,\n            \"AgeRange\": null,\n            \"Gender\": null,\n            \"Income\": null,\n            \"Source\": null,\n            \"Marriage\": null,\n            \"Children\": null,\n            \"Familiarity\": null,\n            \"RecentStatus\": \"\",\n            \"MANPA\": \"\",\n            \"ContactFrequancy\": \"\",\n            \"Possibility\": \"\",\n            \"IsFollow\": \"N\",\n            \"DataSource\": \"APP\",\n            \"tel\": [],\n            \"email\": [],\n            \"address\": []\n        }\n        if (!this._id || (this._id.length == 0)) {\n            //Add\n            let resp = new SQLiteResponse({\n                \"isSuccess\": true\n            }, [defaultObj]);\n            return of(resp);\n        }\n        else {\n            let customerObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_VW_Customer\");\n            let defaultDao = this.daoFactory.getDefaultDao();\n            if (customerObj != undefined && defaultDao != undefined) {\n                let dao = new ClientCustomDao(defaultDao);\n                customerObj.addRestriction(new EqualRestriction(\"ClientID\", [this._id]));\n                return from(dao.queryByTable(customerObj).toPromise().then(resp => {\n                    let customer = resp;\n                    let clientID = customer['Body'][0].ClientID;\n                    let customerTelObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Tel\");\n                    if (customerTelObj) {\n                        customerTelObj = (<SQLiteTable>customerTelObj);\n                        customerTelObj.addRestriction(new EqualRestriction('CustomerClientID', [clientID]));\n                        return dao.queryByTable(customerTelObj).toPromise().then((resp) => {\n                            let telList = resp['Body'];\n                            customer['Body'][0]['tel'] = telList;\n                            return { customer, clientID };\n                        });\n                    }\n                    else\n                        return { customer, clientID };\n                }).then(({ customer, clientID }) => {\n                    let customerEmailObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Email\");\n                    if (customerEmailObj) {\n                        customerEmailObj = (<SQLiteTable>customerEmailObj);\n                        customerEmailObj.addRestriction(new EqualRestriction('CustomerClientID', [clientID]));\n\n                        return dao.queryByTable(customerEmailObj).toPromise().then((resp) => {\n                            let telList = resp['Body'];\n                            customer['Body'][0]['email'] = telList;\n                            return { customer, clientID };\n                        });\n                    }\n                    else\n                        return { customer, clientID };\n\n                }).then(({ customer, clientID }) => {\n                    let customerAddrObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Address\");\n                    if (customerAddrObj) {\n                        customerAddrObj = (<SQLiteTable>customerAddrObj);\n                        customerAddrObj.addRestriction(new EqualRestriction('CustomerClientID', [clientID]));\n\n                        return dao.queryByTable(customerAddrObj).toPromise().then((resp) => {\n                            let telList = resp['Body'];\n                            customer['Body'][0]['address'] = telList;\n                            return customer;\n                        });\n                    }\n                    else\n                        return customer;\n                }).then(customer => {\n                    //change birthDay to Date Object\n                    customer['Body'][0]['Birthday'] = new Date(customer['Body'][0]['BirthdayYear'], parseInt(customer['Body'][0]['BirthdayMonth']) - 1, customer['Body'][0]['BirthdayDate']);\n                    return customer;\n                }))\n            }\n            else {\n                return of(false);\n            }\n        }\n    }\n    */\n}","import { IAPI } from \"@allianzSND/core\";\nimport { IMockAPI } from \"@allianzSND/core\";\nimport {ISQLiteAPI} from '@allianzSND/core';\nimport {Observable, from} from 'rxjs';\nimport {DaoFactory} from '@allianzSND/core';\nimport {ClientCustomDao} from '@allianzSND/core';\nimport {EqualRestriction} from '@allianzSND/core';\n\nimport { PersonalDataType } from  '../service/model/Enum/PersonalDataType';\nimport { PersonalDataTimeBase } from  '../service/model/Enum/PersonalDataTimeBase';\n\nexport class GetProgressDataGoalSettingPlanAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    private _clientID: number;\n    private _daoFactory: DaoFactory;\n    private _personalDataType: PersonalDataType;\n    private _personalDataTimeBase: PersonalDataTimeBase;\n    private _searchYear: number;\n\n    public get SearchYear() {\n        return this._searchYear;\n    }\n\n    public set SearchYear(value:number) {\n        this._searchYear = value;\n    }\n\n    set ClientId(id:number) {\n        this._clientID = id;\n    }\n\n    set DataType(type:PersonalDataType) {\n        this._personalDataType = type;\n    }\n\n    set TimeBase(time:PersonalDataTimeBase) {\n        this._personalDataTimeBase = time;\n    }\n\n    \n    constructor(daoFactory:DaoFactory) {\n        this._daoFactory = daoFactory;\n    }\n\n    getAPIName(): string {\n        return 'getProgressDataGoalSettingPlan';\n    }\n\n    getMockPath(): string {\n        //alert(\"personal progress mock data\");\n        return './assets/mock/getProgressDataGoalSettingPlanMock.json';\n    }\n\n\n    executeSQL(): Observable<any> {\n\n        console.debug(\"SQLite goal plan start \");\n        let defaultDao = this._daoFactory.getDefaultDao();\n        console.debug(\"SQLite goal plan defaultDao: \", defaultDao);\n\n        let progressGoalPlanObj = this._daoFactory.getDefaultTable(\"TW_LH_SD_VW_Goal_Setting_Plan_Value\");\n        console.debug(\"SQLite goal plan progressGoalPlanObj: \", progressGoalPlanObj);\n\n\n        if(defaultDao != undefined && progressGoalPlanObj != undefined) {\n            return from(defaultDao.queryByTable(progressGoalPlanObj).toPromise().then( resp => {\n                console.debug(\"SQLite goal plan data api resp: \", resp);\n            }));\n        }\n        else {\n            console.debug(\"SQLite goal plan fail... \");\n        }\n\n\n        //throw new Error(\"Method not implemented.\");\n    }\n\n    /*\n    executeSQL(): Observable<any> {\n        console.log('customer Detail:execute SQL');\n        let defaultObj = {\n            \"ClientID\": \"\",\n            \"LastName\": \"\",\n            \"FirstName\": \"\",\n            \"Occupation\": \"\",\n            \"Company\": \"\",\n            \"BirthdayYear\": \"\",\n            \"BirthdayMonth\": \"\",\n            \"BirthdayDate\": \"\",\n            \"Birthday\": null,\n            \"AgeRange\": null,\n            \"Gender\": null,\n            \"Income\": null,\n            \"Source\": null,\n            \"Marriage\": null,\n            \"Children\": null,\n            \"Familiarity\": null,\n            \"RecentStatus\": \"\",\n            \"MANPA\": \"\",\n            \"ContactFrequancy\": \"\",\n            \"Possibility\": \"\",\n            \"IsFollow\": \"N\",\n            \"DataSource\": \"APP\",\n            \"tel\": [],\n            \"email\": [],\n            \"address\": []\n        }\n        if (!this._id || (this._id.length == 0)) {\n            //Add\n            let resp = new SQLiteResponse({\n                \"isSuccess\": true\n            }, [defaultObj]);\n            return of(resp);\n        }\n        else {\n            let customerObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_VW_Customer\");\n            let defaultDao = this.daoFactory.getDefaultDao();\n            if (customerObj != undefined && defaultDao != undefined) {\n                let dao = new ClientCustomDao(defaultDao);\n                customerObj.addRestriction(new EqualRestriction(\"ClientID\", [this._id]));\n                return from(dao.queryByTable(customerObj).toPromise().then(resp => {\n                    let customer = resp;\n                    let clientID = customer['Body'][0].ClientID;\n                    let customerTelObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Tel\");\n                    if (customerTelObj) {\n                        customerTelObj = (<SQLiteTable>customerTelObj);\n                        customerTelObj.addRestriction(new EqualRestriction('CustomerClientID', [clientID]));\n                        return dao.queryByTable(customerTelObj).toPromise().then((resp) => {\n                            let telList = resp['Body'];\n                            customer['Body'][0]['tel'] = telList;\n                            return { customer, clientID };\n                        });\n                    }\n                    else\n                        return { customer, clientID };\n                }).then(({ customer, clientID }) => {\n                    let customerEmailObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Email\");\n                    if (customerEmailObj) {\n                        customerEmailObj = (<SQLiteTable>customerEmailObj);\n                        customerEmailObj.addRestriction(new EqualRestriction('CustomerClientID', [clientID]));\n\n                        return dao.queryByTable(customerEmailObj).toPromise().then((resp) => {\n                            let telList = resp['Body'];\n                            customer['Body'][0]['email'] = telList;\n                            return { customer, clientID };\n                        });\n                    }\n                    else\n                        return { customer, clientID };\n\n                }).then(({ customer, clientID }) => {\n                    let customerAddrObj = this.daoFactory.getDefaultTable(\"TW_LH_SD_Customer_Address\");\n                    if (customerAddrObj) {\n                        customerAddrObj = (<SQLiteTable>customerAddrObj);\n                        customerAddrObj.addRestriction(new EqualRestriction('CustomerClientID', [clientID]));\n\n                        return dao.queryByTable(customerAddrObj).toPromise().then((resp) => {\n                            let telList = resp['Body'];\n                            customer['Body'][0]['address'] = telList;\n                            return customer;\n                        });\n                    }\n                    else\n                        return customer;\n                }).then(customer => {\n                    //change birthDay to Date Object\n                    customer['Body'][0]['Birthday'] = new Date(customer['Body'][0]['BirthdayYear'], parseInt(customer['Body'][0]['BirthdayMonth']) - 1, customer['Body'][0]['BirthdayDate']);\n                    return customer;\n                }))\n            }\n            else {\n                return of(false);\n            }\n        }\n    }\n    */\n\n    /*\n    executeSQL(): Observable<any> {\n        return Observable.create((observer) => {\n          let calendarObj = this._daoFactory.getDefaultTable(\"TW_LH_SD_Calendar\");\n          let dao = this._daoFactory.getDefaultDao();\n          if (calendarObj != undefined && dao != undefined) {\n            \n            dao = new ClientCustomDao(dao);\n            calendarObj.addRestriction(new EqualRestriction('ClientID',[this._clientID]));\n            dao.queryByTable(calendarObj).subscribe((resp) => {\n              observer.next(resp);\n              observer.complete();\n            });\n          } else {\n            observer.next(false);\n            observer.complete();\n          }\n        });\n      }\n\n\n\n\n\n\n      */\n\n}","import { IAPI } from \"@allianzSND/core\";\nimport { IMockAPI } from \"@allianzSND/core\";\nimport {ISQLiteAPI} from '@allianzSND/core';\nimport {Observable, from} from 'rxjs';\nimport {DaoFactory} from '@allianzSND/core';\nimport {ClientCustomDao} from '@allianzSND/core';\nimport {EqualRestriction} from '@allianzSND/core';\n\nimport { PersonalDataType } from  '../service/model/Enum/PersonalDataType';\nimport { PersonalDataTimeBase } from  '../service/model/Enum/PersonalDataTimeBase';\n\nexport class GetProgressGoalPlanAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    private _clientID: number;\n    private _daoFactory: DaoFactory;\n    private _personalDataType: PersonalDataType;\n    private _personalDataTimeBase: PersonalDataTimeBase;\n    private _dataYear: number;\n\n    set ClientId(id:number) {\n        this._clientID = id;\n    }\n\n    set DataType(type:PersonalDataType) {\n        this._personalDataType = type;\n    }\n\n    set TimeBase(time:PersonalDataTimeBase) {\n        this._personalDataTimeBase = time;\n    }\n\n    setDataYear(year: number) {\n      this._dataYear = year;\n    }\n\n    /*\n    constructor(DaoFactory) {\n        this._daoFactory = DaoFactory;\n    }\n    */\n\n    constructor(){};\n\n    getAPIName(): string {\n        return 'getProgressGoalPlan';\n    }\n\n    getMockPath(): string {\n        //alert(\"personal progress mock data\");\n        if(this._dataYear == 2019) {\n          return './assets/mock/getProgressGoalPlan_2019.json';\n        }\n        else if(this._dataYear == 2020) {\n          return './assets/mock/getProgressGoalPlan_2020.json';\n        }\n        else {\n          //todo throw error\n          console.warn(\"datYear not match mock path\");\n          return '';\n        }\n    }\n\n\n    executeSQL(): Observable<any> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /*\n    executeSQL(): Observable<any> {\n        return Observable.create((observer) => {\n          let calendarObj = this._daoFactory.getDefaultTable(\"TW_LH_SD_Calendar\");\n          let dao = this._daoFactory.getDefaultDao();\n          if (calendarObj != undefined && dao != undefined) {\n            \n            dao = new ClientCustomDao(dao);\n            calendarObj.addRestriction(new EqualRestriction('ClientID',[this._clientID]));\n            dao.queryByTable(calendarObj).subscribe((resp) => {\n              observer.next(resp);\n              observer.complete();\n            });\n          } else {\n            observer.next(false);\n            observer.complete();\n          }\n        });\n      }\n      */\n\n}","import { IAPI } from \"@allianzSND/core\";\nimport { IMockAPI } from \"@allianzSND/core\";\nimport {ISQLiteAPI} from '@allianzSND/core';\nimport {Observable, from, of} from 'rxjs';\nimport {DaoFactory} from '@allianzSND/core';\nimport { ISearchTableByField } from \"@allianzSND/core\";\n\nexport class GetTeamProgressDetailAPI implements IAPI, IMockAPI, ISQLiteAPI, ISearchTableByField {\n\n    private _year: number = -1;\n\n    private _daoFactory: DaoFactory;\n    constructor(daoFactory: DaoFactory) {\n        this._daoFactory = daoFactory;\n    }\n\n    SetYear(value: number): void {\n        this._year = value;\n    }\n\n    getAPIName(): string {\n        return 'getTeamProgressDetail';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/getTeamProgressDetailMock.json';\n    }\n\n    executeSQL(): Observable<any> {\n        console.debug(\"SQLite Start \");\n\n        let defaultDao = this._daoFactory.getDefaultDao();\n        console.debug(\"SQLite defaultDao: \", defaultDao);\n\n        let tableObj = this._daoFactory.getDefaultTable(\"TW_LH_SD_VW_Team_Progress_Detail\"); \n        console.debug(\"SQLite tableObj: \", tableObj);\n\n        if(defaultDao != undefined && tableObj != undefined) {\n            return from(defaultDao.queryByTable(tableObj).toPromise().then(resp => {\n                console.debug(\"SQLite getTeamProgressDetail resp: \", resp);\n                console.debug(\"SQLite getTeamProgressDetail json resp: \", JSON.stringify(resp));\n                return resp;\n            }));\n        }\n        else {\n            of(false);\n            console.debug(\"SQLite failed\");\n        }\n    }\n\n}","import { IAPI } from \"@allianzSND/core\";\nimport { IMockAPI } from \"@allianzSND/core\";\nimport {ISQLiteAPI} from '@allianzSND/core';\nimport {Observable, from, of} from 'rxjs';\nimport {DaoFactory} from '@allianzSND/core';\nimport {ClientCustomDao} from '@allianzSND/core';\nimport {EqualRestriction} from '@allianzSND/core';\nimport { ISearchTableByField } from \"@allianzSND/core\";\n\nexport class GetTeamProgressMainAPI implements IAPI, IMockAPI, ISQLiteAPI, ISearchTableByField {\n\n    private _year: number = -1;\n\n    private _daoFactory: DaoFactory;\n    constructor(daoFactory: DaoFactory) {\n        this._daoFactory = daoFactory;\n    }\n\n    SetYear(value: number): void {\n        this._year = value;\n    }\n\n    getAPIName(): string {\n        return 'getTeamProgressMain';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/getTeamProgressMainMock.json';\n    }\n\n    executeSQL(): Observable<any> {\n        console.debug(\"SQLite Start \");\n\n        let defaultDao = this._daoFactory.getDefaultDao();\n        console.debug(\"SQLite defaultDao: \", defaultDao);\n\n        let tableObj = this._daoFactory.getDefaultTable(\"TW_LH_SD_VW_Team_Progress_Main\"); \n        console.debug(\"SQLite tableObj: \", tableObj);\n\n        if(defaultDao != undefined && tableObj != undefined) {\n            return from(defaultDao.queryByTable(tableObj).toPromise().then(resp => {\n                console.debug(\"SQLite getTeamProgressMain resp: \", resp);\n                console.debug(\"SQLite getTeamProgressMain json resp: \", JSON.stringify(resp));\n                return resp;\n            }));\n        }\n        else {\n            of(false);\n            console.debug(\"SQLite failed\");\n        }\n    }\n\n\n}","import { IAPI } from \"@allianzSND/core\";\nimport { IMockAPI } from \"@allianzSND/core\";\nimport {ISQLiteAPI} from '@allianzSND/core';\nimport {Observable, from} from 'rxjs';\nimport {DaoFactory} from '@allianzSND/core';\nimport {ClientCustomDao} from '@allianzSND/core';\nimport {EqualRestriction} from '@allianzSND/core';\n\nimport { PersonalDataType } from  '../service/model/Enum/PersonalDataType';\nimport { PersonalDataTimeBase } from  '../service/model/Enum/PersonalDataTimeBase';\n\nexport class PersonalProgressOldAPI implements IAPI, IMockAPI, ISQLiteAPI {\n\n    private _clientID: number;\n    private _daoFactory: DaoFactory;\n    private _personalDataType: PersonalDataType;\n    private _personalDataTimeBase: PersonalDataTimeBase;\n\n    set ClientId(id:number) {\n        this._clientID = id;\n    }\n\n    set DataType(type:PersonalDataType) {\n        this._personalDataType = type;\n    }\n\n    set TimeBase(time:PersonalDataTimeBase) {\n        this._personalDataTimeBase = time;\n    }\n\n    /*\n    constructor(DaoFactory) {\n        this._daoFactory = DaoFactory;\n    }\n    */\n\n    constructor(){};\n\n    getAPIName(): string {\n        return 'getPersonalProgressOld';\n    }\n\n    getMockPath(): string {\n        //alert(\"personal progress mock data\");\n        return './assets/mock/getPersonalProgress.json';\n    }\n\n\n    executeSQL(): Observable<any> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /*\n    executeSQL(): Observable<any> {\n        return Observable.create((observer) => {\n          let calendarObj = this._daoFactory.getDefaultTable(\"TW_LH_SD_Calendar\");\n          let dao = this._daoFactory.getDefaultDao();\n          if (calendarObj != undefined && dao != undefined) {\n            \n            dao = new ClientCustomDao(dao);\n            calendarObj.addRestriction(new EqualRestriction('ClientID',[this._clientID]));\n            dao.queryByTable(calendarObj).subscribe((resp) => {\n              observer.next(resp);\n              observer.complete();\n            });\n          } else {\n            observer.next(false);\n            observer.complete();\n          }\n        });\n      }\n      */\n\n}","import { IAPI } from \"@allianzSND/core\";\nimport { IMockAPI } from \"@allianzSND/core\";\nimport {ISQLiteAPI} from '@allianzSND/core';\nimport {Observable, from, of} from 'rxjs';\nimport {DaoFactory} from '@allianzSND/core';\nimport {ClientCustomDao} from '@allianzSND/core';\nimport {EqualRestriction} from '@allianzSND/core';\nimport { ISearchTableByField } from \"@allianzSND/core\";\n\nexport class GetYearConfigurationAPI implements IAPI, IMockAPI, ISQLiteAPI, ISearchTableByField {\n      \n    private _year: number = -1;\n\n    private _daoFactory: DaoFactory;\n    constructor(daoFactory: DaoFactory) {\n        this._daoFactory = daoFactory;\n    }\n\n    SetYear(value: number): void {\n        this._year = value;\n    }\n       \n    getAPIName(): string {\n        return 'getYearConfiguration';\n    }\n\n    getMockPath(): string {\n        return './assets/mock/getYearConfigurationMock.json';\n    }\n\n    executeSQL(): Observable<any> {\n        console.debug(\"SQLite Start year configuration \");\n\n        let defaultDao = this._daoFactory.getDefaultDao();\n        console.debug(\"SQLite defaultDao: \", defaultDao);\n\n        let tableObj = this._daoFactory.getDefaultTable(\"TW_LH_SD_VW_Year_Config\"); \n        console.debug(\"SQLite tableObj: \", tableObj);\n\n        if(defaultDao != undefined && tableObj != undefined) {\n            return from(defaultDao.queryByTable(tableObj).toPromise().then(resp => {\n                console.debug(\"SQLite getYearConfiguration resp: \", resp);\n                console.debug(\"SQLite getYearConfiguration json resp: \", JSON.stringify(resp));\n                return resp;\n            }));\n        }\n        else {\n            of(false);\n            console.debug(\"SQLite failed\");\n        }\n    }\n\n}","import { IAPI, StringUtils, EqualRestriction } from \"@allianzSND/core\";\nimport { IMockAPI } from \"@allianzSND/core\";\nimport { ISQLiteAPI } from \"@allianzSND/core\";\nimport { Observable, from, of } from \"rxjs\";\nimport { DaoFactory } from \"@allianzSND/core\";\n\nexport class AddPointAPI implements IAPI, IMockAPI, ISQLiteAPI {\n  private _addType: string = \"\";\n  private _year: number = -1;\n  private _addPointNum = 1;\n  private dao;\n\n  private _daoFactory: DaoFactory;\n  constructor(daoFactory: DaoFactory) {\n    this._daoFactory = daoFactory;\n  }\n\n  SetAddType(value: string): void {\n    this._addType = value;\n  }\n  SetYear(val: number): void {\n    this._year = val;\n  }\n  SetPointNum(val:number): void{\n    this._addPointNum = val;\n  }\n  getAPIName(): string {\n    return \"addPoint\";\n  }\n\n  getMockPath(): string {\n    return \"./assets/mock/saveSuccess.json\";\n  }\n\n  executeSQL(): Observable<any> {\n\n    console.log(\"AddPointAPI add \" + this._addType + \" point\");\n    console.log(\"this._addType\", this._addType, \"this._year\", this._year);\n    \n    if (StringUtils.isNotEmpty(this._addType) && this._year != -1) {\n        this.dao = this._daoFactory.getDefaultDao();\n        let TimeBaselist = [\"Day\",\"Week\",\"Month\",\"Quarter\",\"Year\"];\n        return from(Promise.all(TimeBaselist.map(timeBase => this._addPoint(timeBase))).then(()=>{\n          let addResp = this.dao.runTransaction().toPromise();\n          console.log(\"addResp\",addResp);\n          return addResp;\n        }));\n    } else {\n        return of(false);\n    }\n  }\n\n  private async _addPoint(timeBase){\n    console.log(\"into _addPoint()\");\n    console.log(\"timeBase\",timeBase);\n    let currentNum = 0;\n    let PersonalPorgress = this._daoFactory.getDefaultTable(\"TW_LH_SD_Personal_Progress\");\n    console.log(\"SQLite tableObj: \", PersonalPorgress);\n    PersonalPorgress.addRestriction(new EqualRestriction(\"DataYear\", [this._year]));\n    PersonalPorgress.addRestriction(new EqualRestriction(\"TimeBase\", [timeBase]));\n    PersonalPorgress.addRestriction(new EqualRestriction(\"DataType\", [\"Actual\"]));\n    let progressObj = null;\n    let getResp = await this.dao.queryByTable(PersonalPorgress).toPromise();\n    console.log(\"AddPointAPI getResp\", getResp);\n    if (getResp.Header[\"status\"] && getResp.Body.length > 0) {\n      progressObj = getResp.Body[0];\n    if (this._addType == \"customer\") {\n        currentNum = progressObj.Find;\n        PersonalPorgress.setValue(\"Find\", currentNum + this._addPointNum);\n    } else if (this._addType == \"calendar\") {\n        currentNum = progressObj.Schedule;\n        PersonalPorgress.setValue(\"Schedule\", currentNum + this._addPointNum);\n    }\n    console.log(\"AddPointAPI PersonalPorgress\", PersonalPorgress);\n    this.dao.transactionUpdate(PersonalPorgress);\n    }\n  }\n}\n","export enum ActivitiesType {\n    Find = \"F\",\n    Schedule = \"S\",\n    Meet = \"M\",\n    Submit = \"Su\",\n    Inforce = \"I\",\n    Unknow = \"Unknow\"\n}","export enum ActualValueDataType {\n    FYFC = \"FYFC\",\n    ANP = \"ANP\"\n}","export enum PerformanceType {\n    Personal = \"P\",\n    Team = \"T\",\n    unknow = \"U\"\n}","export enum Quarters{  \n    Q1 = \"Q1\",\n    Q2 = \"Q2\",\n    Q3 = \"Q3\",\n    Q4 = \"Q4\",\n    Unknow = \"unknow\"\n}"]}