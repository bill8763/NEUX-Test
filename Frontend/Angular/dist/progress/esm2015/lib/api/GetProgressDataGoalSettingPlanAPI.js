/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { from } from 'rxjs';
export class GetProgressDataGoalSettingPlanAPI {
    /**
     * @return {?}
     */
    get SearchYear() {
        return this._searchYear;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set SearchYear(value) {
        this._searchYear = value;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    set ClientId(id) {
        this._clientID = id;
    }
    /**
     * @param {?} type
     * @return {?}
     */
    set DataType(type) {
        this._personalDataType = type;
    }
    /**
     * @param {?} time
     * @return {?}
     */
    set TimeBase(time) {
        this._personalDataTimeBase = time;
    }
    /**
     * @param {?} daoFactory
     */
    constructor(daoFactory) {
        this._daoFactory = daoFactory;
    }
    /**
     * @return {?}
     */
    getAPIName() {
        return 'getProgressDataGoalSettingPlan';
    }
    /**
     * @return {?}
     */
    getMockPath() {
        //alert("personal progress mock data");
        return './assets/mock/getProgressDataGoalSettingPlanMock.json';
    }
    /**
     * @return {?}
     */
    executeSQL() {
        console.debug("SQLite goal plan start ");
        /** @type {?} */
        let defaultDao = this._daoFactory.getDefaultDao();
        console.debug("SQLite goal plan defaultDao: ", defaultDao);
        /** @type {?} */
        let progressGoalPlanObj = this._daoFactory.getDefaultTable("TW_LH_SD_VW_Goal_Setting_Plan_Value");
        console.debug("SQLite goal plan progressGoalPlanObj: ", progressGoalPlanObj);
        if (defaultDao != undefined && progressGoalPlanObj != undefined) {
            return from(defaultDao.queryByTable(progressGoalPlanObj).toPromise().then((/**
             * @param {?} resp
             * @return {?}
             */
            resp => {
                console.debug("SQLite goal plan data api resp: ", resp);
            })));
        }
        else {
            console.debug("SQLite goal plan fail... ");
        }
        //throw new Error("Method not implemented.");
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    GetProgressDataGoalSettingPlanAPI.prototype._clientID;
    /**
     * @type {?}
     * @private
     */
    GetProgressDataGoalSettingPlanAPI.prototype._daoFactory;
    /**
     * @type {?}
     * @private
     */
    GetProgressDataGoalSettingPlanAPI.prototype._personalDataType;
    /**
     * @type {?}
     * @private
     */
    GetProgressDataGoalSettingPlanAPI.prototype._personalDataTimeBase;
    /**
     * @type {?}
     * @private
     */
    GetProgressDataGoalSettingPlanAPI.prototype._searchYear;
}
//# sourceMappingURL=data:application/json;base64,