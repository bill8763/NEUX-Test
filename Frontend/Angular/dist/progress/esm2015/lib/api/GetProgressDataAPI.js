/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { from } from 'rxjs';
import { PersonalDataType } from '../service/model/Enum/PersonalDataType';
import { PersonalDataTimeBase } from '../service/model/Enum/PersonalDataTimeBase';
export class GetProgressDataAPI {
    /**
     * @param {?} daoFactory
     */
    constructor(daoFactory) {
        this._clientID = 0;
        this._personalDataType = PersonalDataType.Actual;
        this._personalDataTimeBase = PersonalDataTimeBase.Day;
        this._searchYear = 0;
        this._daoFactory = daoFactory;
    }
    //condition year
    /**
     * @param {?} value
     * @return {?}
     */
    set SearchYear(value) {
        this._searchYear = value;
    }
    /**
     * @return {?}
     */
    get SearchYear() {
        return this._searchYear;
    }
    //condition client id
    /**
     * @param {?} id
     * @return {?}
     */
    set SearchClientId(id) {
        this._clientID = id;
    }
    /**
     * @return {?}
     */
    get SearchCLientId() {
        return this._clientID;
    }
    //condition data type
    /**
     * @param {?} type
     * @return {?}
     */
    set SearchDataType(type) {
        this._personalDataType = type;
    }
    /**
     * @return {?}
     */
    get SearchDataType() {
        return this._personalDataType;
    }
    //condition time base
    /**
     * @param {?} time
     * @return {?}
     */
    set SearchTimeBase(time) {
        this._personalDataTimeBase = time;
    }
    /**
     * @return {?}
     */
    get SearchTimeBase() {
        return this._personalDataTimeBase;
    }
    /**
     * @return {?}
     */
    getAPIName() {
        return 'getProgressData';
    }
    /**
     * @return {?}
     */
    getMockPath() {
        return './assets/mock/getProgressDataMock.json';
    }
    /**
     * @return {?}
     */
    executeSQL() {
        console.debug("SQLite progress start ");
        /*
                let defaultProgressObj =
                {
                    "lastUpdateTime": "",
                    "Progress":[],
                };
                */
        /*
                // Progress [progressObj, progressObj] *2
                let progressObj:
                {
                    "DataYear": "",
                    "YesterdayPoint": "",
                    "Values":[]
                };
                */
        /*
                // progressObj.Value[] * n
                let progresValueObj =
                {
                    "DataType":"",
                    "TimeBase": "",
                    "FYFC": 0,
                    "Find": 0,
                    "Schedule": 0,
                    "Meet": 0,
                    "Submit": 0,
                    "Inforce": 0
                };
                */
        // test class to obj type
        /** @type {?} */
        let defaultDao = this._daoFactory.getDefaultDao();
        console.debug("SQLite progress defaultDao: ", defaultDao);
        /** @type {?} */
        let progressTableObj = this._daoFactory.getDefaultTable("TW_LH_SD_VW_Personal_Progress");
        console.debug("SQLite progress progressTableObj: ", progressTableObj);
        if (progressTableObj != undefined && defaultDao != undefined) {
            return from(defaultDao.queryByTable(progressTableObj).toPromise().then((/**
             * @param {?} resp
             * @return {?}
             */
            resp => {
                console.debug("SQLite progress data api resp: ", resp);
                return resp;
            })).then((/**
             * @param {?} resp
             * @return {?}
             */
            resp => {
                /** @type {?} */
                let data = resp["Body"];
                /** @type {?} */
                let filterData = data.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.DataYear == 2019));
                /** @type {?} */
                let filterData2 = data.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.DataYear == 2020));
                console.debug("SQLite progress test date body: ", data);
                console.debug("SQLite progress test filterData: ", filterData);
                console.debug("SQLite progress test filterData2: ", filterData2);
                /** @type {?} */
                let arr = [];
                arr.push(filterData);
                arr.push(filterData2);
                console.debug("SQLite progress test arr: ", arr);
                return arr;
            })).then((/**
             * @param {?} resp
             * @return {?}
             */
            resp => {
                /** @type {?} */
                let data = resp;
                /** @type {?} */
                let progressObj1 = {
                    "DataYear": "2019",
                    "YesterdayPoint": "20",
                    "Personal": { Values: [] },
                };
                /** @type {?} */
                let progressObj2 = {
                    "DataYear": "2020",
                    "YesterdayPoint": "20",
                    "Personal": { Values: [] },
                };
                progressObj1.Personal.Values.push(data[0]);
                progressObj2.Personal.Values.push(data[1]);
                /** @type {?} */
                let progressObjArr = [];
                progressObjArr.push(progressObj1);
                progressObjArr.push(progressObj2);
                console.debug("SQLite progress test progressObj123: ", progressObjArr);
                return progressObjArr;
            })).then((/**
             * @param {?} resp
             * @return {?}
             */
            resp => {
                /** @type {?} */
                let data = resp;
                console.debug("SQLite progress test resp progressObj123 : ", resp);
                console.debug("SQLite progress test data progressObj123 : ", data);
                /** @type {?} */
                let defaultProgressObj = {
                    "lastUpdateTime": "2019-06-19",
                    "Progress": [],
                };
                defaultProgressObj.Progress.push(data[0]);
                defaultProgressObj.Progress.push(data[1]);
                console.debug("SQLite progress test defaultProgressObj123 : ", defaultProgressObj);
                return defaultProgressObj;
            })));
        }
        else {
            console.debug("SQLite progress fail.....");
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    GetProgressDataAPI.prototype._clientID;
    /**
     * @type {?}
     * @private
     */
    GetProgressDataAPI.prototype._daoFactory;
    /**
     * @type {?}
     * @private
     */
    GetProgressDataAPI.prototype._personalDataType;
    /**
     * @type {?}
     * @private
     */
    GetProgressDataAPI.prototype._personalDataTimeBase;
    /**
     * @type {?}
     * @private
     */
    GetProgressDataAPI.prototype._searchYear;
}
//# sourceMappingURL=data:application/json;base64,